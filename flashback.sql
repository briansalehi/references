--
-- PostgreSQL database dump
--

\restrict gc9z6nOnA7yzgavSLSodHkufTmwMVhejcJaNBNLbtyE6hdRcr2L9jzjBTf36v59

-- Dumped from database version 18.0
-- Dumped by pg_dump version 18.0

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET transaction_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: flashback; Type: SCHEMA; Schema: -; Owner: flashback
--

CREATE SCHEMA flashback;


ALTER SCHEMA flashback OWNER TO flashback;

--
-- Name: card_state; Type: TYPE; Schema: flashback; Owner: flashback
--

CREATE TYPE flashback.card_state AS ENUM (
    'draft',
    'completed',
    'review',
    'approved',
    'released',
    'rejected'
);


ALTER TYPE flashback.card_state OWNER TO flashback;

--
-- Name: condition; Type: TYPE; Schema: flashback; Owner: flashback
--

CREATE TYPE flashback.condition AS ENUM (
    'draft',
    'relevant',
    'outdated',
    'canonical',
    'abandoned'
);


ALTER TYPE flashback.condition OWNER TO flashback;

--
-- Name: content_type; Type: TYPE; Schema: flashback; Owner: flashback
--

CREATE TYPE flashback.content_type AS ENUM (
    'text',
    'code'
);


ALTER TYPE flashback.content_type OWNER TO flashback;

--
-- Name: expertise_level; Type: TYPE; Schema: flashback; Owner: flashback
--

CREATE TYPE flashback.expertise_level AS ENUM (
    'surface',
    'depth',
    'origin'
);


ALTER TYPE flashback.expertise_level OWNER TO flashback;

--
-- Name: network_activity; Type: TYPE; Schema: flashback; Owner: flashback
--

CREATE TYPE flashback.network_activity AS ENUM (
    'signup',
    'login',
    'logout',
    'upload',
    'download'
);


ALTER TYPE flashback.network_activity OWNER TO flashback;

--
-- Name: resource_type; Type: TYPE; Schema: flashback; Owner: flashback
--

CREATE TYPE flashback.resource_type AS ENUM (
    'book',
    'website',
    'course',
    'video',
    'channel',
    'mailing list',
    'manual',
    'slides',
    'user'
);


ALTER TYPE flashback.resource_type OWNER TO flashback;

--
-- Name: section_pattern; Type: TYPE; Schema: flashback; Owner: flashback
--

CREATE TYPE flashback.section_pattern AS ENUM (
    'chapter',
    'page',
    'course',
    'video',
    'post'
);


ALTER TYPE flashback.section_pattern OWNER TO flashback;

--
-- Name: user_action; Type: TYPE; Schema: flashback; Owner: flashback
--

CREATE TYPE flashback.user_action AS ENUM (
    'creation',
    'modification',
    'deletion',
    'joining',
    'spliting',
    'reordering',
    'moving'
);


ALTER TYPE flashback.user_action OWNER TO flashback;

--
-- Name: user_progress; Type: TYPE; Schema: flashback; Owner: flashback
--

CREATE TYPE flashback.user_progress AS ENUM (
    'reading',
    'paused',
    'abandoned',
    'annotated',
    'mastered',
    'completed'
);


ALTER TYPE flashback.user_progress OWNER TO flashback;

--
-- Name: user_state; Type: TYPE; Schema: flashback; Owner: flashback
--

CREATE TYPE flashback.user_state AS ENUM (
    'active',
    'inactive',
    'suspended',
    'banned'
);


ALTER TYPE flashback.user_state OWNER TO flashback;

--
-- Name: add_card_to_assessments(integer, flashback.expertise_level, integer, integer); Type: PROCEDURE; Schema: flashback; Owner: flashback
--

CREATE PROCEDURE flashback.add_card_to_assessments(IN subject integer, IN level flashback.expertise_level, IN topic integer, IN card integer)
    LANGUAGE plpgsql
    AS $$
begin
    insert into assessments (subject, level, topic, card)
    values (add_card_to_assessments.subject, add_card_to_assessments.level, add_card_to_assessments.topic, add_card_to_assessments.card);

    update cards set state = 'review'::card_state where cards.id = add_card_to_assessments.card;
end;
$$;


ALTER PROCEDURE flashback.add_card_to_assessments(IN subject integer, IN level flashback.expertise_level, IN topic integer, IN card integer) OWNER TO flashback;

--
-- Name: add_card_to_section(integer, integer, integer); Type: FUNCTION; Schema: flashback; Owner: flashback
--

CREATE FUNCTION flashback.add_card_to_section(resource integer, section integer, card integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
declare top_position integer;
begin
    select coalesce(max(position), 0) + 1 into top_position from sections_cards sc where sc.resource = add_card_to_section.resource and sc.section = add_card_to_section.section;
    insert into sections_cards (resource, section, card, position) values (resource, section, card, top_position);
    update cards set state = 'completed'::card_state where id = card;
    return top_position;
end;
$$;


ALTER FUNCTION flashback.add_card_to_section(resource integer, section integer, card integer) OWNER TO flashback;

--
-- Name: add_card_to_section(integer, integer, integer, integer); Type: PROCEDURE; Schema: flashback; Owner: flashback
--

CREATE PROCEDURE flashback.add_card_to_section(IN resource integer, IN section integer, IN card integer, IN "position" integer)
    LANGUAGE plpgsql
    AS $$
begin
    insert into sections_cards (resource, section, card, position) values (resource, section, card, position);
    update cards set state = 'completed'::card_state where id = card;
end;
$$;


ALTER PROCEDURE flashback.add_card_to_section(IN resource integer, IN section integer, IN card integer, IN "position" integer) OWNER TO flashback;

--
-- Name: add_card_to_topic(integer, flashback.expertise_level, integer, integer); Type: FUNCTION; Schema: flashback; Owner: flashback
--

CREATE FUNCTION flashback.add_card_to_topic(subject integer, level flashback.expertise_level, topic integer, card integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
declare top_position integer;
begin
    select coalesce(max(position), 0) + 1 into top_position
    from topics_cards tc
    where tc.subject = add_card_to_topic.subject and tc.level = add_card_to_topic.level and tc.topic = add_card_to_topic.topic;

    insert into topics_cards (subject, level, topic, card, position)
    values (add_card_to_topic.subject, add_card_to_topic.level, add_card_to_topic.topic, add_card_to_topic.card, top_position);

    update cards set state = 'review'::card_state where cards.id = add_card_to_topic.card;

    return top_position;
end;
$$;


ALTER FUNCTION flashback.add_card_to_topic(subject integer, level flashback.expertise_level, topic integer, card integer) OWNER TO flashback;

--
-- Name: add_card_to_topic(integer, flashback.expertise_level, integer, integer, integer); Type: PROCEDURE; Schema: flashback; Owner: flashback
--

CREATE PROCEDURE flashback.add_card_to_topic(IN subject integer, IN level flashback.expertise_level, IN topic integer, IN card integer, IN "position" integer)
    LANGUAGE plpgsql
    AS $$
begin
    insert into topics_cards (subject, level, topic, card, position)
    values (add_card_to_topic.subject, add_card_to_topic.level, add_card_to_topic.topic, add_card_to_topic.card, add_card_to_topic.position);

    update cards set state = 'review'::card_state where cards.id = add_card_to_topic.card;
end;
$$;


ALTER PROCEDURE flashback.add_card_to_topic(IN subject integer, IN level flashback.expertise_level, IN topic integer, IN card integer, IN "position" integer) OWNER TO flashback;

--
-- Name: add_resource_to_subject(integer, integer); Type: PROCEDURE; Schema: flashback; Owner: flashback
--

CREATE PROCEDURE flashback.add_resource_to_subject(IN resource_id integer, IN subject_id integer)
    LANGUAGE plpgsql
    AS $$ begin insert into shelves (resource, subject) values (resource_id, subject_id); end; $$;


ALTER PROCEDURE flashback.add_resource_to_subject(IN resource_id integer, IN subject_id integer) OWNER TO flashback;

--
-- Name: add_subject_to_roadmap(integer, flashback.expertise_level, integer); Type: FUNCTION; Schema: flashback; Owner: flashback
--

CREATE FUNCTION flashback.add_subject_to_roadmap(subject integer, level flashback.expertise_level, roadmap integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
declare top_position integer;
begin
    select coalesce(max(milestones.position), 0) + 1 into top_position from milestones where milestones.roadmap = add_subject_to_roadmap.roadmap;

    insert into milestones(roadmap, subject, level, position) values (add_subject_to_roadmap.roadmap, add_subject_to_roadmap.subject, add_subject_to_roadmap.level, top_position);

    return top_position;
end;
$$;


ALTER FUNCTION flashback.add_subject_to_roadmap(subject integer, level flashback.expertise_level, roadmap integer) OWNER TO flashback;

--
-- Name: add_subject_to_roadmap(integer, flashback.expertise_level, integer, integer); Type: PROCEDURE; Schema: flashback; Owner: flashback
--

CREATE PROCEDURE flashback.add_subject_to_roadmap(IN subject integer, IN level flashback.expertise_level, IN roadmap integer, IN "position" integer)
    LANGUAGE plpgsql
    AS $$
declare top_position integer;
begin
    select coalesce(max(milestones.position), 0) + 1 into top_position from milestones where milestones.roadmap = add_subject_to_roadmap.roadmap;

    update milestones m set position = m.position + top_position where m.roadmap = add_subject_to_roadmap.roadmap and m.position >= add_subject_to_roadmap.position;

    insert into milestones(roadmap, subject, level, position) values (
        add_subject_to_roadmap.roadmap, add_subject_to_roadmap.subject, add_subject_to_roadmap.level, add_subject_to_roadmap.position
    );

    update milestones m set position = s.altered_position
    from (
        select mm.position, mm.level, row_number() over (order by mm.position) as altered_position from milestones mm where mm.roadmap = add_subject_to_roadmap.roadmap
    ) s
    where m.roadmap = add_subject_to_roadmap.roadmap and m.level = s.level and m.position = s.position;
end;
$$;


ALTER PROCEDURE flashback.add_subject_to_roadmap(IN subject integer, IN level flashback.expertise_level, IN roadmap integer, IN "position" integer) OWNER TO flashback;

--
-- Name: change_block_extension(integer, integer, character varying); Type: PROCEDURE; Schema: flashback; Owner: flashback
--

CREATE PROCEDURE flashback.change_block_extension(IN selected_card integer, IN block integer, IN new_extension character varying)
    LANGUAGE plpgsql
    AS $$
begin
    update blocks set extension = new_extension where card = selected_card and position = block;
end;
$$;


ALTER PROCEDURE flashback.change_block_extension(IN selected_card integer, IN block integer, IN new_extension character varying) OWNER TO flashback;

--
-- Name: change_block_type(integer, integer, flashback.content_type); Type: PROCEDURE; Schema: flashback; Owner: flashback
--

CREATE PROCEDURE flashback.change_block_type(IN selected_card integer, IN block integer, IN new_type flashback.content_type)
    LANGUAGE plpgsql
    AS $$
begin
    update blocks set type = new_type where card = selected_card and position = block;
end;
$$;


ALTER PROCEDURE flashback.change_block_type(IN selected_card integer, IN block integer, IN new_type flashback.content_type) OWNER TO flashback;

--
-- Name: change_users_hash(integer, character varying); Type: PROCEDURE; Schema: flashback; Owner: flashback
--

CREATE PROCEDURE flashback.change_users_hash(IN user_id integer, IN hash character varying)
    LANGUAGE plpgsql
    AS $$ begin update users set hash = change_users_hash.hash where users.id = change_users_hash.user_id; end; $$;


ALTER PROCEDURE flashback.change_users_hash(IN user_id integer, IN hash character varying) OWNER TO flashback;

--
-- Name: create_block(integer, flashback.content_type, character varying, text); Type: FUNCTION; Schema: flashback; Owner: flashback
--

CREATE FUNCTION flashback.create_block(card integer, type flashback.content_type, extension character varying, content text) RETURNS integer
    LANGUAGE plpgsql
    AS $$
declare next_position integer;
begin
    select coalesce(max(position), 0) + 1 into next_position from blocks b where b.card = create_block.card;

    insert into blocks (card, position, content, type, extension) values (card, next_position, content, type, extension);

    return next_position;
end;
$$;


ALTER FUNCTION flashback.create_block(card integer, type flashback.content_type, extension character varying, content text) OWNER TO flashback;

--
-- Name: create_block(integer, flashback.content_type, character varying, text, integer); Type: PROCEDURE; Schema: flashback; Owner: flashback
--

CREATE PROCEDURE flashback.create_block(IN card integer, IN type flashback.content_type, IN extension character varying, IN content text, IN "position" integer)
    LANGUAGE plpgsql
    AS $$
begin
    insert into blocks (card, position, content, type, extension) values (card, position, content, type, extension);
end;
$$;


ALTER PROCEDURE flashback.create_block(IN card integer, IN type flashback.content_type, IN extension character varying, IN content text, IN "position" integer) OWNER TO flashback;

--
-- Name: create_card(text); Type: FUNCTION; Schema: flashback; Owner: flashback
--

CREATE FUNCTION flashback.create_card(heading text) RETURNS integer
    LANGUAGE plpgsql
    AS $$
declare card integer;
begin
    insert into cards (heading) values (heading) returning id into card;
    return card;
end;
$$;


ALTER FUNCTION flashback.create_card(heading text) OWNER TO flashback;

--
-- Name: create_resource(character varying, flashback.resource_type, flashback.section_pattern, character varying, character varying, character varying); Type: FUNCTION; Schema: flashback; Owner: flashback
--

CREATE FUNCTION flashback.create_resource(name character varying, type flashback.resource_type, pattern flashback.section_pattern, author character varying, publisher character varying, link character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $$
declare resource integer;
begin
    insert into resources (name, type, pattern, condition, presenter, provider, link)
    values (name, type, pattern, 'relevant'::condition, nullif(author, ''), nullif(publisher, ''), nullif(link, '')) returning id into resource;

    return resource;
end;
$$;


ALTER FUNCTION flashback.create_resource(name character varying, type flashback.resource_type, pattern flashback.section_pattern, author character varying, publisher character varying, link character varying) OWNER TO flashback;

--
-- Name: create_roadmap(integer, character varying); Type: FUNCTION; Schema: flashback; Owner: flashback
--

CREATE FUNCTION flashback.create_roadmap(user_id integer, name character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $$
declare roadmap integer;
begin
    insert into roadmaps(name) values (name) returning id into roadmap;

    insert into users_roadmaps("user", roadmap) values (user_id, roadmap);
    return roadmap;
end;
$$;


ALTER FUNCTION flashback.create_roadmap(user_id integer, name character varying) OWNER TO flashback;

--
-- Name: create_section(integer, character varying); Type: FUNCTION; Schema: flashback; Owner: flashback
--

CREATE FUNCTION flashback.create_section(resource integer, name character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $$
declare last_position integer;
begin
    if not exists (select 1 from resources where id = create_section.resource) then
        raise notice 'Resource does not exist';
    end if;

    select coalesce(max(position), 0) + 1 into last_position from sections where sections.resource = create_section.resource;

    insert into sections (resource, position, name) values (create_section.resource, last_position, nullif(create_section.name, ''));

    return last_position;
end; $$;


ALTER FUNCTION flashback.create_section(resource integer, name character varying) OWNER TO flashback;

--
-- Name: create_section(integer, character varying, integer); Type: PROCEDURE; Schema: flashback; Owner: flashback
--

CREATE PROCEDURE flashback.create_section(IN resource integer, IN name character varying, IN "position" integer)
    LANGUAGE plpgsql
    AS $$
declare last_position integer;
--declare new_position integer;
--section record;
begin
    if not exists (select 1 from resources where resources.id = create_section.resource) then
        raise notice 'Resource does not exist';
    end if;

    select max(coalesce(position, 0)) into last_position from sections where sections.resource = create_section.resource;

    update sections set position = sections.position + last_position where sections.resource = create_sction.resource and sections.position >= create_section.position;

    --for section in
    --    select s.position from sections s where s.resource = create_section.resource
    --loop
    --    select section.position + last_position into new_position;

    --    update sections set position = new_position where sections.resource = create_sction.resource and sections.position = create_section.position;
    --end loop;


    insert into sections (resource, position, name) values (create_section.resource, create_section.position, nullif(create_section.name, ''));

    --for section_record in
    --    select s.position from sections s where s.resource = create_section.resource
    --loop
    --end loop;

    update sections set position = ss.new_position
    from (
        select row_number() over (order by s.position) as new_position, s.position
        from sections s
        where s.resource = create_section.resource
    ) ss
    where sections.resource = create_section.resource and ss.position = sections.position;
end; $$;


ALTER PROCEDURE flashback.create_section(IN resource integer, IN name character varying, IN "position" integer) OWNER TO flashback;

--
-- Name: create_subject(character varying); Type: FUNCTION; Schema: flashback; Owner: flashback
--

CREATE FUNCTION flashback.create_subject(name character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $$
declare subject integer;
begin
    insert into subjects (name) values (name) returning id into subject;

    return subject;
end;
$$;


ALTER FUNCTION flashback.create_subject(name character varying) OWNER TO flashback;

--
-- Name: create_topic(integer, flashback.expertise_level, character varying); Type: FUNCTION; Schema: flashback; Owner: flashback
--

CREATE FUNCTION flashback.create_topic(subject integer, level flashback.expertise_level, name character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $$
declare top_position integer;
begin
    select coalesce(max(topics."position"), 0) + 1 into top_position
    from topics where topics.subject = create_topic.subject and topics.level = create_topic.level;

    insert into topics(subject, level, position, name)
    values (create_topic.subject, create_topic.level, top_position, create_topic.name);

    return top_position;
end;
$$;


ALTER FUNCTION flashback.create_topic(subject integer, level flashback.expertise_level, name character varying) OWNER TO flashback;

--
-- Name: create_topic(integer, flashback.expertise_level, character varying, integer); Type: PROCEDURE; Schema: flashback; Owner: flashback
--

CREATE PROCEDURE flashback.create_topic(IN subject integer, IN level flashback.expertise_level, IN name character varying, IN "position" integer)
    LANGUAGE plpgsql
    AS $$
declare top_position integer;
begin
    select coalesce(max(topics.position), 0) + 1 into top_position
    from topics where topics.subject = create_topic.subject and topics.level = create_topic.level;

    update topics set position = topics.position + top_position
    where topics.subject = create_topic.subject and topics.level = create_topic.level and topics.position >= create_topic.position;

    insert into topics(subject, level, name, position)
    values (create_topic.subject, create_topic.level, create_topic.name, create_topic.position);

    update topics set position = sub.new_position
    from (
        select row_number() over (order by t.position) as new_position, t.position as old_position, t.subject, t.level
        from topics t where t.subject = create_topic.subject and t.level = create_topic.level
    ) sub
    where sub.subject = topics.subject and sub.level = topics.level and topics.position = sub.old_position;
end;
$$;


ALTER PROCEDURE flashback.create_topic(IN subject integer, IN level flashback.expertise_level, IN name character varying, IN "position" integer) OWNER TO flashback;

--
-- Name: create_user(character varying, character varying); Type: FUNCTION; Schema: flashback; Owner: flashback
--

CREATE FUNCTION flashback.create_user(name character varying, email character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $$
declare user_id integer;
begin
    insert into users (name, email) values(name, email) returning id into user_id;

    return user_id;
end;
$$;


ALTER FUNCTION flashback.create_user(name character varying, email character varying) OWNER TO flashback;

--
-- Name: create_user(character varying, character varying, character varying); Type: FUNCTION; Schema: flashback; Owner: flashback
--

CREATE FUNCTION flashback.create_user(name character varying, email character varying, hash character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $$
declare user_id integer;
begin
    insert into users (name, email, hash) values(name, email, hash) returning id into user_id;

    return user_id;
end;
$$;


ALTER FUNCTION flashback.create_user(name character varying, email character varying, hash character varying) OWNER TO flashback;

--
-- Name: edit_block(integer, integer, text); Type: PROCEDURE; Schema: flashback; Owner: flashback
--

CREATE PROCEDURE flashback.edit_block(IN card integer, IN block integer, IN content text)
    LANGUAGE plpgsql
    AS $$ begin update blocks set content = edit_block.content where blocks.card = edit_block.card and position = block; end; $$;


ALTER PROCEDURE flashback.edit_block(IN card integer, IN block integer, IN content text) OWNER TO flashback;

--
-- Name: edit_card_heading(integer, character varying); Type: PROCEDURE; Schema: flashback; Owner: flashback
--

CREATE PROCEDURE flashback.edit_card_heading(IN card integer, IN new_heading character varying)
    LANGUAGE plpgsql
    AS $$
begin
    update cards set heading = new_heading where id = card;
end;
$$;


ALTER PROCEDURE flashback.edit_card_heading(IN card integer, IN new_heading character varying) OWNER TO flashback;

--
-- Name: edit_resource_name(integer, character varying); Type: PROCEDURE; Schema: flashback; Owner: flashback
--

CREATE PROCEDURE flashback.edit_resource_name(IN resource integer, IN name character varying)
    LANGUAGE plpgsql
    AS $$
begin
    update resources set name = edit_resource_name.name where id = resource;
end;
$$;


ALTER PROCEDURE flashback.edit_resource_name(IN resource integer, IN name character varying) OWNER TO flashback;

--
-- Name: edit_resource_presenter(integer, character varying); Type: PROCEDURE; Schema: flashback; Owner: flashback
--

CREATE PROCEDURE flashback.edit_resource_presenter(IN resource integer, IN author character varying)
    LANGUAGE plpgsql
    AS $$ begin update resources set presenter = author where id = resource; end; $$;


ALTER PROCEDURE flashback.edit_resource_presenter(IN resource integer, IN author character varying) OWNER TO flashback;

--
-- Name: edit_resource_provider(integer, character varying); Type: PROCEDURE; Schema: flashback; Owner: flashback
--

CREATE PROCEDURE flashback.edit_resource_provider(IN resource integer, IN edited_publisher character varying)
    LANGUAGE plpgsql
    AS $$ begin update resources set provider = edited_publisher where id = resource; end; $$;


ALTER PROCEDURE flashback.edit_resource_provider(IN resource integer, IN edited_publisher character varying) OWNER TO flashback;

--
-- Name: edit_resource_type(integer, flashback.resource_type); Type: PROCEDURE; Schema: flashback; Owner: flashback
--

CREATE PROCEDURE flashback.edit_resource_type(IN resource integer, IN type flashback.resource_type)
    LANGUAGE plpgsql
    AS $$
begin
    update resources set type = edit_resource_type.type where id = resource;
end;
$$;


ALTER PROCEDURE flashback.edit_resource_type(IN resource integer, IN type flashback.resource_type) OWNER TO flashback;

--
-- Name: edit_section_pattern(integer, flashback.section_pattern); Type: PROCEDURE; Schema: flashback; Owner: flashback
--

CREATE PROCEDURE flashback.edit_section_pattern(IN resource integer, IN pattern flashback.section_pattern)
    LANGUAGE plpgsql
    AS $$
begin
    update resources set pattern = edit_section_pattern.pattern
    where resources.id = edit_section_pattern.resource;
end;
$$;


ALTER PROCEDURE flashback.edit_section_pattern(IN resource integer, IN pattern flashback.section_pattern) OWNER TO flashback;

--
-- Name: edit_users_name(integer, character varying); Type: PROCEDURE; Schema: flashback; Owner: flashback
--

CREATE PROCEDURE flashback.edit_users_name(IN id integer, IN name character varying)
    LANGUAGE plpgsql
    AS $$ begin update users set name = edit_users_name.name where users.id = edit_users_name.id; end; $$;


ALTER PROCEDURE flashback.edit_users_name(IN id integer, IN name character varying) OWNER TO flashback;

--
-- Name: get_assessment_coverage(integer, integer, flashback.expertise_level); Type: FUNCTION; Schema: flashback; Owner: flashback
--

CREATE FUNCTION flashback.get_assessment_coverage(subject integer, topic integer, level flashback.expertise_level) RETURNS TABLE(card integer, coverage bigint)
    LANGUAGE plpgsql
    AS $$
begin
    return query
    select a.card, count(a.topic)
    from assessments a
    where a.card in (
        select aa.card
        from assessments aa
        where aa.subject = get_assessment_coverage.subject
        and aa.topic = get_assessment_coverage.topic
        and aa.level = get_assessment_coverage.level::expertise_level
    ) group by a.card;
end;
$$;


ALTER FUNCTION flashback.get_assessment_coverage(subject integer, topic integer, level flashback.expertise_level) OWNER TO flashback;

--
-- Name: get_blocks(integer); Type: FUNCTION; Schema: flashback; Owner: flashback
--

CREATE FUNCTION flashback.get_blocks(card integer) RETURNS TABLE("position" integer, type flashback.content_type, extension character varying, content text)
    LANGUAGE plpgsql
    AS $$ begin return query select blocks."position", blocks.type, blocks.extension, blocks.content from blocks where blocks.card = get_blocks.card; end; $$;


ALTER FUNCTION flashback.get_blocks(card integer) OWNER TO flashback;

--
-- Name: get_duplicate_card(integer); Type: FUNCTION; Schema: flashback; Owner: flashback
--

CREATE FUNCTION flashback.get_duplicate_card(card_id integer) RETURNS TABLE(rid integer, sid integer, "position" integer, card integer, resource character varying, section character varying, state flashback.card_state, heading text)
    LANGUAGE plpgsql
    AS $$
declare card_heading text;
begin
    select c.heading into card_heading
    from cards c
    where c.id = card_id;

    return query
    select sc.resource as rid, sc.section as sid, sc.position, sc.card, r.name as resource, se.name as section, c.state, c.heading
    from cards c
    join sections_cards sc on c.id = sc.card
    join sections se on se.resource = sc.resource and se.position = sc.section
    join resources r on r.id = sc.resource
    where c.heading = card_heading and sc.card <> card_id
    order by sc.resource, sc.section, sc.position;
end;
$$;


ALTER FUNCTION flashback.get_duplicate_card(card_id integer) OWNER TO flashback;

--
-- Name: get_lost_cards(); Type: FUNCTION; Schema: flashback; Owner: flashback
--

CREATE FUNCTION flashback.get_lost_cards() RETURNS TABLE(sid integer, level flashback.expertise_level, tid integer, "position" integer, card integer, subject character varying, topic character varying, state flashback.card_state, heading text)
    LANGUAGE plpgsql
    AS $$
begin
    return query
    select tc.subject as sid, tc.level, tc.topic as tid, tc.position, tc.card, s.name as subject, t.name as topic, c.state, c.heading
    from topics_cards tc
    join topics t on t.subject = tc.subject and t.position = tc.topic and t.level = tc.level
    join subjects s on s.id = tc.subject
    join cards c on c.id = tc.card
    where tc.card not in (select sc.card from sections_cards sc)
    order by tc.subject, tc.level, tc.topic, tc.position;
end;
$$;


ALTER FUNCTION flashback.get_lost_cards() OWNER TO flashback;

--
-- Name: get_out_of_shelves(); Type: FUNCTION; Schema: flashback; Owner: flashback
--

CREATE FUNCTION flashback.get_out_of_shelves() RETURNS TABLE(id integer, name character varying)
    LANGUAGE plpgsql
    AS $$ begin return query select resources.id, resources.name from resources where resources.id not in (select resource from shelves); end; $$;


ALTER FUNCTION flashback.get_out_of_shelves() OWNER TO flashback;

--
-- Name: get_practice_topics(integer, integer); Type: FUNCTION; Schema: flashback; Owner: flashback
--

CREATE FUNCTION flashback.get_practice_topics("user" integer, roadmap integer) RETURNS TABLE(milestone integer, level flashback.expertise_level, subject integer, topic integer)
    LANGUAGE plpgsql
    AS $$
begin
    return query
    select m.position as milestone, m.level, m.subject, t.position as topic
    from milestones m
    join topics t on t.subject = m.subject and t.level = m.level
    where m.roadmap = get_practice_topics.roadmap
    and (m.position, m.level, m.subject, t.position) not in (
        select g.milestone, g.level, g.subject, g.topic
        from get_practiced_topics(get_practice_topics."user", get_practice_topics.roadmap) g
    );
end;
$$;


ALTER FUNCTION flashback.get_practice_topics("user" integer, roadmap integer) OWNER TO flashback;

--
-- Name: get_practice_topics(integer, integer, integer); Type: FUNCTION; Schema: flashback; Owner: flashback
--

CREATE FUNCTION flashback.get_practice_topics("user" integer, roadmap integer, selected_subject integer) RETURNS TABLE(milestone integer, level flashback.expertise_level, subject integer, topic integer)
    LANGUAGE plpgsql
    AS $$
begin
    return query
    select m.position as milestone, m.level, m.subject, t.position as topic
    from milestones m
    join topics t on t.subject = m.subject and t.level = m.level
    where m.roadmap = get_practice_topics.roadmap
    and m.subject = selected_subject
    and (m.position, m.level, m.subject, t.position) not in (
        select g.milestone, g.level, g.subject, g.topic
        from get_practiced_topics(get_practice_topics."user", get_practice_topics.roadmap) g
    );
end;
$$;


ALTER FUNCTION flashback.get_practice_topics("user" integer, roadmap integer, selected_subject integer) OWNER TO flashback;

--
-- Name: get_practiced_topics(integer, integer); Type: FUNCTION; Schema: flashback; Owner: flashback
--

CREATE FUNCTION flashback.get_practiced_topics("user" integer, roadmap integer) RETURNS TABLE(milestone integer, level flashback.expertise_level, subject integer, topic integer)
    LANGUAGE plpgsql
    AS $$
begin
    return query
    select m.position as milestone, m.level, tp.subject, tp.topic
    from milestones m
    join topics_progress tp on m.subject = tp.subject and tp.level = m.level
    where tp."user" = get_practiced_topics."user" and m.roadmap = get_practiced_topics.roadmap and tp.time::date = CURRENT_DATE;
end;
$$;


ALTER FUNCTION flashback.get_practiced_topics("user" integer, roadmap integer) OWNER TO flashback;

--
-- Name: get_resources(integer); Type: FUNCTION; Schema: flashback; Owner: flashback
--

CREATE FUNCTION flashback.get_resources("user" integer) RETURNS TABLE(id integer, name character varying, type flashback.resource_type, condition flashback.condition, presenter character varying, provider character varying, last_read timestamp with time zone)
    LANGUAGE plpgsql
    AS $$
begin
    return query
    select resources.id, resources.name, resources.type, resources.condition, resources.presenter, resources.provider, max(sections_progress.time)
    from resources
    join shelves on shelves.resource = resources.id
    left join sections_progress on sections_progress.resource = resources.id and sections_progress."user" = get_resources."user"
    group by resources.id, resources.name, resources.type, resources.condition, resources.presenter, resources.provider;
end;
$$;


ALTER FUNCTION flashback.get_resources("user" integer) OWNER TO flashback;

--
-- Name: get_resources(integer, integer); Type: FUNCTION; Schema: flashback; Owner: flashback
--

CREATE FUNCTION flashback.get_resources("user" integer, subject integer) RETURNS TABLE(id integer, name character varying, type flashback.resource_type, condition flashback.condition, presenter character varying, provider character varying, last_read timestamp with time zone)
    LANGUAGE plpgsql
    AS $$
begin
    return query
    select resources.id, resources.name, resources.type, resources.condition, resources.presenter, resources.provider, max(sections_progress.time)
    from resources
    join shelves on shelves.resource = resources.id and shelves.subject = get_resources.subject
    left join sections_progress on sections_progress.resource = resources.id and sections_progress."user" = get_resources."user"
    group by resources.id, resources.name, resources.type, resources.condition, resources.presenter, resources.provider;
end;
$$;


ALTER FUNCTION flashback.get_resources("user" integer, subject integer) OWNER TO flashback;

--
-- Name: get_roadmaps(integer); Type: FUNCTION; Schema: flashback; Owner: flashback
--

CREATE FUNCTION flashback.get_roadmaps("user" integer) RETURNS TABLE(id integer, name character varying)
    LANGUAGE plpgsql
    AS $$ begin return query select r.id, r.name from roadmaps r join users_roadmaps ur on ur.roadmap = r.id where ur."user" = get_roadmaps.user order by name; end; $$;


ALTER FUNCTION flashback.get_roadmaps("user" integer) OWNER TO flashback;

--
-- Name: get_sections(integer); Type: FUNCTION; Schema: flashback; Owner: flashback
--

CREATE FUNCTION flashback.get_sections(resource integer) RETURNS TABLE("position" integer, name character varying)
    LANGUAGE plpgsql
    AS $$
declare pattern section_pattern;
begin
    select resources.pattern into pattern from resources where resources.id = get_sections.resource;

    return query select sections.position, coalesce(sections.name, initcap(pattern || ' ' || sections.position)) from sections where sections.resource = get_sections.resource;
end;
$$;


ALTER FUNCTION flashback.get_sections(resource integer) OWNER TO flashback;

--
-- Name: get_sections_cards(integer, integer); Type: FUNCTION; Schema: flashback; Owner: flashback
--

CREATE FUNCTION flashback.get_sections_cards(resource integer, section integer) RETURNS TABLE(id integer, "position" integer, state flashback.card_state, heading text)
    LANGUAGE plpgsql
    AS $$ begin return query select cards.id, sc."position", cards.state, cards.heading from sections_cards sc join cards on cards.id = sc.card where sc.resource = get_sections_cards.resource and sc.section = get_sections_cards.section; end; $$;


ALTER FUNCTION flashback.get_sections_cards(resource integer, section integer) OWNER TO flashback;

--
-- Name: get_subjects(integer); Type: FUNCTION; Schema: flashback; Owner: flashback
--

CREATE FUNCTION flashback.get_subjects(roadmap integer) RETURNS TABLE(level flashback.expertise_level, "position" integer, id integer, name character varying)
    LANGUAGE plpgsql
    AS $$ begin return query select milestones.level, milestones.position, subjects.id, subjects.name from milestones join subjects on milestones.subject = subjects.id where milestones.roadmap = get_subjects.roadmap; end; $$;


ALTER FUNCTION flashback.get_subjects(roadmap integer) OWNER TO flashback;

--
-- Name: get_subjects(integer, flashback.expertise_level); Type: FUNCTION; Schema: flashback; Owner: flashback
--

CREATE FUNCTION flashback.get_subjects(roadmap integer, level flashback.expertise_level) RETURNS TABLE("position" integer, id integer, name character varying)
    LANGUAGE plpgsql
    AS $$ begin return query select milestones.position, subjects.id, subjects.name from milestones join subjects on milestones.subject = subjects.id where milestones.roadmap = get_subjects.roadmap and milestones.level = get_subjects.level; end; $$;


ALTER FUNCTION flashback.get_subjects(roadmap integer, level flashback.expertise_level) OWNER TO flashback;

--
-- Name: get_topics(integer, flashback.expertise_level); Type: FUNCTION; Schema: flashback; Owner: flashback
--

CREATE FUNCTION flashback.get_topics(subject integer, level flashback.expertise_level) RETURNS TABLE("position" integer, name character varying)
    LANGUAGE plpgsql
    AS $$ begin return query select topics.position, topics.name from topics where topics.subject = get_topics.subject and topics.level = get_topics.level; end; $$;


ALTER FUNCTION flashback.get_topics(subject integer, level flashback.expertise_level) OWNER TO flashback;

--
-- Name: get_topics(integer, integer); Type: FUNCTION; Schema: flashback; Owner: flashback
--

CREATE FUNCTION flashback.get_topics(roadmap integer, milestone integer) RETURNS TABLE("position" integer, name character varying)
    LANGUAGE plpgsql
    AS $$
begin
    return query
    select topics.position, topics.name
    from milestones
    join topics on topics.subject = milestones.subject
    where milestones.roadmap = get_topics.roadmap and milestones.position = get_topics.milestone;
end;
$$;


ALTER FUNCTION flashback.get_topics(roadmap integer, milestone integer) OWNER TO flashback;

--
-- Name: get_topics_cards(integer, integer, integer); Type: FUNCTION; Schema: flashback; Owner: flashback
--

CREATE FUNCTION flashback.get_topics_cards(roadmap integer, milestone integer, topic integer) RETURNS TABLE(id integer, "position" integer, state flashback.card_state, heading text)
    LANGUAGE plpgsql
    AS $$
begin
    return query
    select cards.id, tc."position", cards.state, cards.heading
    from milestones m
    join topics_cards tc on tc.subject = m.subject
    join cards on cards.id = tc.card
    where m.roadmap = get_topics_cards.roadmap
    and m.position = get_topics_cards.milestone
    and tc.topic = get_topics_cards.topic;
end;
$$;


ALTER FUNCTION flashback.get_topics_cards(roadmap integer, milestone integer, topic integer) OWNER TO flashback;

--
-- Name: get_unreviewed_sections_cards(); Type: FUNCTION; Schema: flashback; Owner: flashback
--

CREATE FUNCTION flashback.get_unreviewed_sections_cards() RETURNS TABLE(rid integer, sid integer, "position" integer, card integer, resource character varying, section character varying, state flashback.card_state, heading text)
    LANGUAGE plpgsql
    AS $$
begin
    return query
    select sc.resource, sc.section, sc.position, sc.card, r.name, s.name, c.state, c.heading
    from sections_cards sc
    join sections s on s.resource = sc.resource and s.position = sc.section
    join resources r on r.id = sc.resource
    join cards c on c.id = sc.card
    where c.state = 'draft'::card_state
    order by sc.resource, sc.section, sc.position;
end;
$$;


ALTER FUNCTION flashback.get_unreviewed_sections_cards() OWNER TO flashback;

--
-- Name: get_unreviewed_topics_cards(); Type: FUNCTION; Schema: flashback; Owner: flashback
--

CREATE FUNCTION flashback.get_unreviewed_topics_cards() RETURNS TABLE(sid integer, level flashback.expertise_level, tid integer, "position" integer, card integer, subject character varying, topic character varying, state flashback.card_state, heading text)
    LANGUAGE plpgsql
    AS $$
begin
    return query
    select tc.subject as sid, tc.level, tc.topic as tid, tc.position, tc.card, s.name as subject, t.name as topic, c.state, c.heading
    from topics_cards tc
    join topics t on t.subject = tc.subject and t.position = tc.topic and t.level = tc.level
    join subjects s on s.id = tc.subject
    join cards c on c.id = tc.card
    where c.state = 'draft'
    order by tc.subject, tc.level, tc.topic, tc.position;
end;
$$;


ALTER FUNCTION flashback.get_unreviewed_topics_cards() OWNER TO flashback;

--
-- Name: get_unshelved_resources(); Type: FUNCTION; Schema: flashback; Owner: flashback
--

CREATE FUNCTION flashback.get_unshelved_resources() RETURNS TABLE(resource integer)
    LANGUAGE plpgsql
    AS $$ begin return query select id from resources where id not in (select s.resource from shelves s); end; $$;


ALTER FUNCTION flashback.get_unshelved_resources() OWNER TO flashback;

--
-- Name: is_subject_relevant(integer, integer); Type: FUNCTION; Schema: flashback; Owner: flashback
--

CREATE FUNCTION flashback.is_subject_relevant(target_resource integer, target_subject integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $$ begin return (select count(cards.id) > 0 from cards join sections_cards s on s.card = cards.id join topics_cards t on t.card = cards.id where s.resource = target_resource and t.subject = target_subject); end; $$;


ALTER FUNCTION flashback.is_subject_relevant(target_resource integer, target_subject integer) OWNER TO flashback;

--
-- Name: log_resources_activities(integer, character varying, integer, flashback.user_action); Type: PROCEDURE; Schema: flashback; Owner: flashback
--

CREATE PROCEDURE flashback.log_resources_activities(IN user_id integer, IN address character varying, IN resource integer, IN action flashback.user_action)
    LANGUAGE plpgsql
    AS $$
begin
    insert into resources_activities ("user", resource, action)
    values (user_id, resource, action);

    insert into network_activities("user", address, activity)
    values (user_id, address, 'upload'::network_activity);
end;
$$;


ALTER PROCEDURE flashback.log_resources_activities(IN user_id integer, IN address character varying, IN resource integer, IN action flashback.user_action) OWNER TO flashback;

--
-- Name: log_sections_activities(integer, character varying, integer, flashback.user_action); Type: PROCEDURE; Schema: flashback; Owner: flashback
--

CREATE PROCEDURE flashback.log_sections_activities(IN user_id integer, IN address character varying, IN section integer, IN action flashback.user_action)
    LANGUAGE plpgsql
    AS $$
begin
    insert into sections_activities ("user", section, action)
    values (user_id, section, action);

    insert into network_activities("user", address, activity)
    values (user_id, address, 'upload'::network_activity);
end;
$$;


ALTER PROCEDURE flashback.log_sections_activities(IN user_id integer, IN address character varying, IN section integer, IN action flashback.user_action) OWNER TO flashback;

--
-- Name: make_section_progress(integer, timestamp with time zone, integer, integer, integer); Type: PROCEDURE; Schema: flashback; Owner: flashback
--

CREATE PROCEDURE flashback.make_section_progress(IN "user" integer, IN "time" timestamp with time zone, IN resource integer, IN section integer, IN duration integer)
    LANGUAGE plpgsql
    AS $$
begin
    insert into sections_progress (resource, section, "user", time, duration)
    values (resource, section, make_section_progress."user", make_section_progress."time", duration);
end;
$$;


ALTER PROCEDURE flashback.make_section_progress(IN "user" integer, IN "time" timestamp with time zone, IN resource integer, IN section integer, IN duration integer) OWNER TO flashback;

--
-- Name: make_topic_progress(integer, timestamp with time zone, integer, integer, integer, integer); Type: PROCEDURE; Schema: flashback; Owner: flashback
--

CREATE PROCEDURE flashback.make_topic_progress(IN "user" integer, IN "time" timestamp with time zone, IN roadmap integer, IN milestone integer, IN topic integer, IN duration integer)
    LANGUAGE plpgsql
    AS $$
declare subject integer;
declare level expertise_level;
begin
    select milestones.subject, milestones.level into subject, level
    from milestones
    where milestones.roadmap = make_topic_progress.roadmap and milestones.position = make_topic_progress.milestone;

    insert into topics_progress(subject, level, topic, "user", "time", duration)
    values (subject, level, topic, make_topic_progress."user", make_topic_progress."time", duration);
end;
$$;


ALTER PROCEDURE flashback.make_topic_progress(IN "user" integer, IN "time" timestamp with time zone, IN roadmap integer, IN milestone integer, IN topic integer, IN duration integer) OWNER TO flashback;

--
-- Name: merge_blocks(integer); Type: PROCEDURE; Schema: flashback; Owner: flashback
--

CREATE PROCEDURE flashback.merge_blocks(IN selected_card integer)
    LANGUAGE plpgsql
    AS $$
declare
    top_position integer;
    upper_position integer;
    lower_position integer;
    swap_position integer;
    lower_type content_type;
    lower_extension varchar(20);
begin
    select min(position) into upper_position from blocks where card = selected_card;
    top_position := upper_position;

    -- find the top free position of this practice for swapping
    select coalesce(max(position), 0) + 1 into swap_position from blocks where card = selected_card;

    for lower_position in select position from blocks where card = selected_card and position > top_position order by position loop
        -- collect lower block info
        select type, extension into lower_type, lower_extension
        from blocks where card = selected_card and position = lower_position;

        -- create a new record on the top most position
        insert into blocks (card, position, content, type, extension)
        select selected_card, swap_position, string_agg(coalesce(content, ''), E'\n\n' order by position), lower_type, lower_extension
        from blocks where card = selected_card and position in (upper_position, lower_position);

        -- remove the two merged blocks
        delete from blocks where card = selected_card and position in (upper_position, lower_position);

        -- move the newly created block into the lower position
        update blocks set position = lower_position
        where card = selected_card and position = swap_position;

        upper_position := lower_position;
    end loop;

    -- reorder positions from top to bottom for a practice
    update blocks pb
    set position = sub.new_position
    from (
        select card, position, row_number() over (order by position) as new_position
        from blocks where card = selected_card
    ) sub
    where pb.card = sub.card and pb.position = sub.position;
end;
$$;


ALTER PROCEDURE flashback.merge_blocks(IN selected_card integer) OWNER TO flashback;

--
-- Name: merge_blocks(integer, integer[]); Type: PROCEDURE; Schema: flashback; Owner: flashback
--

CREATE PROCEDURE flashback.merge_blocks(IN selected_card integer, VARIADIC block_list integer[])
    LANGUAGE plpgsql
    AS $$
declare
    upper_position integer;
    lower_position integer;
    swap_position integer;
    block_index integer default 1;
    lower_type content_type;
    lower_extension varchar(20);
begin
    upper_position := block_list[block_index];
    block_index := block_index + 1;

    -- find the top free position of this practice for swapping
    select coalesce(max(position), 0) + 1 into swap_position from blocks where card = selected_card;

    for block_index in 2 .. array_length(block_list, 1) loop
        lower_position := block_list[block_index];

        -- collect lower block info
        select type, extension into lower_type, lower_extension
        from blocks where card = selected_card and position = lower_position;

        -- create a new record on the top most position
        insert into blocks (card, position, content, type, extension)
        select selected_card, swap_position, string_agg(coalesce(content, ''), E'\n\n' order by position), lower_type, lower_extension
        from blocks where card = selected_card and position in (upper_position, lower_position);

        -- remove the two merged blocks
        delete from blocks where card = selected_card and position in (upper_position, lower_position);

        -- move the newly created block into the lower position
        update blocks set position = lower_position
        where card = selected_card and position = swap_position;

        upper_position := lower_position;
    end loop;

    -- reorder positions from top to bottom for a practice
    update blocks pb
    set position = sub.new_position
    from (
        select card, position, row_number() over (order by position) as new_position
        from blocks where card = selected_card
    ) sub
    where pb.card = sub.card and pb.position = sub.position;
end;
$$;


ALTER PROCEDURE flashback.merge_blocks(IN selected_card integer, VARIADIC block_list integer[]) OWNER TO flashback;

--
-- Name: merge_cards(integer, integer, character varying); Type: PROCEDURE; Schema: flashback; Owner: flashback
--

CREATE PROCEDURE flashback.merge_cards(IN lhs integer, IN rhs integer, IN new_heading character varying)
    LANGUAGE plpgsql
    AS $$
declare rhs_top_position integer;
begin
    select coalesce(max(position), 0) + 1 into rhs_top_position from blocks where card = lhs;

    update blocks set position = position + rhs_top_position, card = lhs where card = rhs;

    update cards set heading = new_heading where id = lhs;

    if not exists (
        select 1 from topics_cards tc join topics_cards tcc on tcc.subject = tc.subject and tcc.topic = tc.topic and tcc.level = tc.level where tc.card = lhs and tcc.card = rhs
    )
    then
        update topics_cards set card = lhs where card = rhs;
    end if;

    if not exists (
        select 1 from sections_cards sc join sections_cards scc on scc.resource = sc.resource and scc.section = sc.section where sc.card = lhs and scc.card = rhs
    )
    then
        update sections_cards set card = lhs where card = rhs;
    end if;

    delete from cards where id = rhs;
end;
$$;


ALTER PROCEDURE flashback.merge_cards(IN lhs integer, IN rhs integer, IN new_heading character varying) OWNER TO flashback;

--
-- Name: move_card_to_section(integer, integer, integer, integer); Type: FUNCTION; Schema: flashback; Owner: flashback
--

CREATE FUNCTION flashback.move_card_to_section(selected_card integer, current_resource integer, current_section integer, target_section integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
declare card_position integer;
declare last_position integer;
begin
    select coalesce(position, 1) into card_position from sections_cards where resource = current_resource and section = current_section and card = selected_card;

    if current_section <> target_section then
        select coalesce(max(position), 0) + 1 into last_position from sections_cards where resource = current_resource and section = target_section;
        select last_position into card_position;
        update sections_cards set section = target_section where resource = current_resource and section = current_section and card = selected_card;
        update sections_cards t set position = tt.new_position from (select position, row_number() over (order by position) as new_position from sections_cards where resource = current_resource and section = current_section) tt where t.resource = current_resource and t.section = current_section and t.position = tt.position;
    end if;

    return card_position;
end;
$$;


ALTER FUNCTION flashback.move_card_to_section(selected_card integer, current_resource integer, current_section integer, target_section integer) OWNER TO flashback;

--
-- Name: move_card_to_topic(integer, integer, flashback.expertise_level, integer, integer); Type: FUNCTION; Schema: flashback; Owner: flashback
--

CREATE FUNCTION flashback.move_card_to_topic(selected_card integer, current_subject integer, current_level flashback.expertise_level, current_topic integer, target_topic integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
declare card_position integer;
declare last_position integer;
begin
    select coalesce(position, 1) into card_position from topics_cards where subject = current_subject and topic = target_topic and level = current_level and card = selected_card;

    if current_topic <> target_topic then
        select coalesce(max(position), 0) + 1 into last_position from topics_cards where subject = current_subject and topic = target_topic and level = current_level;
        select last_position into card_position;
        update topics_cards set topic = target_topic, position = last_position where subject = current_subject and topic = current_topic and level = current_level and card = selected_card;
        update topics_cards t set position = tt.new_position from (select position, row_number() over (order by position) as new_position from topics_cards where subject = current_subject and topic = current_topic and level = current_level) tt where t.subject = current_subject and t.topic = current_topic and t.level = current_level and t.position = tt.position;
    end if;

    return card_position;
end;
$$;


ALTER FUNCTION flashback.move_card_to_topic(selected_card integer, current_subject integer, current_level flashback.expertise_level, current_topic integer, target_topic integer) OWNER TO flashback;

--
-- Name: remove_block(integer, integer); Type: PROCEDURE; Schema: flashback; Owner: flashback
--

CREATE PROCEDURE flashback.remove_block(IN card integer, IN block integer)
    LANGUAGE plpgsql
    AS $$ begin delete from blocks where blocks.card = remove_block.card and blocks."position" = remove_block.block; end; $$;


ALTER PROCEDURE flashback.remove_block(IN card integer, IN block integer) OWNER TO flashback;

--
-- Name: rename_roadmap(integer, character varying); Type: PROCEDURE; Schema: flashback; Owner: flashback
--

CREATE PROCEDURE flashback.rename_roadmap(IN roadmap integer, IN name character varying)
    LANGUAGE plpgsql
    AS $$ begin update roadmaps set roadmaps.name = rename_roadmap.name where id = roadmap; end; $$;


ALTER PROCEDURE flashback.rename_roadmap(IN roadmap integer, IN name character varying) OWNER TO flashback;

--
-- Name: reorder_blocks(integer, integer, integer); Type: PROCEDURE; Schema: flashback; Owner: flashback
--

CREATE PROCEDURE flashback.reorder_blocks(IN target_card integer, IN old_position integer, IN new_position integer)
    LANGUAGE plpgsql
    AS $$
declare top_position integer;
begin
    lock table blocks in row exclusive mode;

    select coalesce(max(position), 0) + 1 into top_position from blocks where card = target_card;

    update blocks set position = top_position where card = target_card and position = old_position;

    if new_position < old_position then
        update blocks set position = position + 1 where card = target_card and position >= new_position and position < old_position;
    else
        update blocks set position = position - 1 where card = target_card and position > old_position and position <= new_position;
    end if;

    update blocks set position = new_position where card = target_card and position = top_position;
end;
$$;


ALTER PROCEDURE flashback.reorder_blocks(IN target_card integer, IN old_position integer, IN new_position integer) OWNER TO flashback;

--
-- Name: reorder_milestone(integer, integer, integer); Type: PROCEDURE; Schema: flashback; Owner: flashback
--

CREATE PROCEDURE flashback.reorder_milestone(IN roadmap integer, IN old_position integer, IN new_position integer)
    LANGUAGE plpgsql
    AS $$
declare top_position integer;
begin
    -- locate the free position on top
    select coalesce(max(m.position), 0) + 1 into top_position from milestones m where m.roadmap = reorder_milestone.roadmap;

    -- relocate targeted milestone to the top
    update milestones set position = top_position where milestones.roadmap = reorder_milestone.roadmap and milestones.position = old_position;

    -- relocate milestones between the old and new positions upwards or downwards to open up a space for targeted milestone on the new location
    if new_position < old_position then
        update milestones set position = milestones.position + 1 where milestones.roadmap = reorder_milestone.roadmap and milestones.position >= new_position and milestones.position < old_position;
    else
        update milestones set position = milestones.position - 1 where milestones.roadmap = reorder_milestone.roadmap and milestones.position > old_position and milestones.position <= new_position;
    end if;

    -- relocate targeted milestone from top to the new free location
    update milestones set position = new_position where milestones.roadmap = reorder_milestone.roadmap and milestones.position = top_position;
end;
$$;


ALTER PROCEDURE flashback.reorder_milestone(IN roadmap integer, IN old_position integer, IN new_position integer) OWNER TO flashback;

--
-- Name: reorder_sections_cards(integer, integer, integer, integer); Type: PROCEDURE; Schema: flashback; Owner: flashback
--

CREATE PROCEDURE flashback.reorder_sections_cards(IN target_resource integer, IN target_section integer, IN target_card integer, IN new_position integer)
    LANGUAGE plpgsql
    AS $$
declare old_position integer;
declare top_position integer;
begin
    lock table sections_cards in row exclusive mode;

    select coalesce(max(position), 0) + 1 into top_position
    from sections_cards where section = target_section;

    select position into old_position from sections_cards sc
    where sc.resource = target_resource and sc.section = target_section and sc.card = target_card;

    update sections_cards sc set position = top_position
    where sc.resource = target_resource and sc.section = target_section and sc.card = target_card and sc.position = old_position;

    if new_position < old_position then
        update sections_cards sc set position = sc.position + 1
        where sc.resource = target_resource and sc.section = target_section and sc.position >= new_position and sc.position < old_position;
    else
        update sections_cards sc set position = sc.position - 1
        where sc.resource = target_resource and section = sc.target_section and sc.position > old_position and sc.position <= new_position;
    end if;

    update sections_cards sc set position = new_position
    where sc.resource = target_resource and sc.section = target_section and sc.card = target_card and sc.position = top_position;
end;
$$;


ALTER PROCEDURE flashback.reorder_sections_cards(IN target_resource integer, IN target_section integer, IN target_card integer, IN new_position integer) OWNER TO flashback;

--
-- Name: reorder_topics_cards(integer, flashback.expertise_level, integer, integer, integer); Type: PROCEDURE; Schema: flashback; Owner: flashback
--

CREATE PROCEDURE flashback.reorder_topics_cards(IN subject integer, IN level flashback.expertise_level, IN target_topic integer, IN target_card integer, IN new_position integer)
    LANGUAGE plpgsql
    AS $$
declare old_position integer;
declare top_position integer;
begin
    select position into old_position from topics_cards
    where subject = subject and level = level and topic = target_topic and card = target_card;

    select max(position) + 1 into top_position from topics_cards
    where subject = subject and level = level and topic = target_topic;

    update topics_cards set position = top_position
    where subject = subject and level = level and topic = target_topic and card = target_card and position = old_position;

    if new_position < old_position then
        update topics_cards set position = position + 1
        where subject = subject and level = level and topic = target_topic and position >= new_position and position < old_position;
    else
        update topics_cards set position = position - 1
        where subject = subject and level = level and topic = target_topic and position > old_position and position <= new_position;
    end if;

    update topics_cards set position = new_position
    where subject = subject and level = level and topic = target_topic and card = target_card and position = top_position;
end;
$$;


ALTER PROCEDURE flashback.reorder_topics_cards(IN subject integer, IN level flashback.expertise_level, IN target_topic integer, IN target_card integer, IN new_position integer) OWNER TO flashback;

--
-- Name: split_block(integer, integer); Type: PROCEDURE; Schema: flashback; Owner: flashback
--

CREATE PROCEDURE flashback.split_block(IN card integer, IN block integer)
    LANGUAGE plpgsql
    AS $$
declare parts_count integer;
declare type content_type;
declare extension varchar(20);
declare margin integer;
begin
    create temp table block_parts as
    select row_number() over () - 1 + block as position, part
    from (
        select regexp_split_to_table(content, E'\n\n\n+') as part
        from blocks where blocks.card = split_block.card and blocks.position = block
    );

    select count(position) into parts_count from block_parts;

    select coalesce(max(position), 1) - block into margin
    from blocks where blocks.card = split_block.card;

    select blocks.type, blocks.extension into type, extension
    from blocks where blocks.card = split_block.card and blocks.position = block;

    update blocks set position = position + margin
    where blocks.card = split_block.card and blocks.position > block;

    --update blocks set position = new_position from (
    --    select row_number() over (order by position) - 1 + position + parts_count as new_position, position as old_position
    --    from blocks where blocks.card = split_block.card and blocks.position > block
    --) where blocks.card = split_block.card and blocks.position = old_position;

    delete from blocks where blocks.card = split_block.card and position = block;

    insert into blocks (card, position, content, type, extension)
    select split_block.card, block_parts.position, part, type, extension from block_parts;

    update blocks set position = position - margin + parts_count - 1
    where blocks.card = split_block.card and blocks.position > block + margin;

    drop table block_parts;
end; $$;


ALTER PROCEDURE flashback.split_block(IN card integer, IN block integer) OWNER TO flashback;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: assessments; Type: TABLE; Schema: flashback; Owner: flashback
--

CREATE TABLE flashback.assessments (
    topic integer NOT NULL,
    card integer NOT NULL,
    subject integer NOT NULL,
    level flashback.expertise_level NOT NULL
);


ALTER TABLE flashback.assessments OWNER TO flashback;

--
-- Name: blocks; Type: TABLE; Schema: flashback; Owner: flashback
--

CREATE TABLE flashback.blocks (
    card integer NOT NULL,
    "position" integer NOT NULL,
    content text,
    type flashback.content_type NOT NULL,
    extension character varying(20) NOT NULL
);


ALTER TABLE flashback.blocks OWNER TO flashback;

--
-- Name: blocks_activities; Type: TABLE; Schema: flashback; Owner: flashback
--

CREATE TABLE flashback.blocks_activities (
    id integer NOT NULL,
    "user" integer NOT NULL,
    card integer NOT NULL,
    action flashback.user_action NOT NULL,
    "time" timestamp with time zone DEFAULT now() NOT NULL,
    "position" integer NOT NULL
);


ALTER TABLE flashback.blocks_activities OWNER TO flashback;

--
-- Name: blocks_activities_id_seq; Type: SEQUENCE; Schema: flashback; Owner: flashback
--

ALTER TABLE flashback.blocks_activities ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME flashback.blocks_activities_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: card_position; Type: TABLE; Schema: flashback; Owner: flashback
--

CREATE TABLE flashback.card_position (
    "coalesce" integer
);


ALTER TABLE flashback.card_position OWNER TO flashback;

--
-- Name: cards; Type: TABLE; Schema: flashback; Owner: flashback
--

CREATE TABLE flashback.cards (
    id integer NOT NULL,
    heading text,
    state flashback.card_state DEFAULT 'draft'::flashback.card_state NOT NULL
);


ALTER TABLE flashback.cards OWNER TO flashback;

--
-- Name: cards_activities; Type: TABLE; Schema: flashback; Owner: flashback
--

CREATE TABLE flashback.cards_activities (
    id integer NOT NULL,
    "user" integer NOT NULL,
    card integer NOT NULL,
    action flashback.user_action NOT NULL,
    "time" timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE flashback.cards_activities OWNER TO flashback;

--
-- Name: cards_activities_id_seq; Type: SEQUENCE; Schema: flashback; Owner: flashback
--

ALTER TABLE flashback.cards_activities ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME flashback.cards_activities_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: cards_id_seq; Type: SEQUENCE; Schema: flashback; Owner: flashback
--

ALTER TABLE flashback.cards ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME flashback.cards_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: last_position; Type: TABLE; Schema: flashback; Owner: flashback
--

CREATE TABLE flashback.last_position (
    max integer
);


ALTER TABLE flashback.last_position OWNER TO flashback;

--
-- Name: margin; Type: TABLE; Schema: flashback; Owner: flashback
--

CREATE TABLE flashback.margin (
    "coalesce" integer
);


ALTER TABLE flashback.margin OWNER TO flashback;

--
-- Name: milestones; Type: TABLE; Schema: flashback; Owner: flashback
--

CREATE TABLE flashback.milestones (
    subject integer NOT NULL,
    roadmap integer NOT NULL,
    level flashback.expertise_level DEFAULT 'surface'::flashback.expertise_level NOT NULL,
    "position" integer
);


ALTER TABLE flashback.milestones OWNER TO flashback;

--
-- Name: milestones_activities; Type: TABLE; Schema: flashback; Owner: flashback
--

CREATE TABLE flashback.milestones_activities (
    id integer NOT NULL,
    "user" integer NOT NULL,
    action flashback.user_action NOT NULL,
    "time" timestamp with time zone DEFAULT now() NOT NULL,
    subject integer NOT NULL,
    roadmap integer NOT NULL,
    level flashback.expertise_level NOT NULL
);


ALTER TABLE flashback.milestones_activities OWNER TO flashback;

--
-- Name: milestones_activities_id_seq; Type: SEQUENCE; Schema: flashback; Owner: flashback
--

ALTER TABLE flashback.milestones_activities ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME flashback.milestones_activities_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: network_activities; Type: TABLE; Schema: flashback; Owner: flashback
--

CREATE TABLE flashback.network_activities (
    id integer NOT NULL,
    "user" integer NOT NULL,
    "time" timestamp with time zone DEFAULT now() NOT NULL,
    activity flashback.network_activity NOT NULL,
    address character varying(39) NOT NULL
);


ALTER TABLE flashback.network_activities OWNER TO flashback;

--
-- Name: network_activities_id_seq; Type: SEQUENCE; Schema: flashback; Owner: flashback
--

ALTER TABLE flashback.network_activities ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME flashback.network_activities_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: resources; Type: TABLE; Schema: flashback; Owner: flashback
--

CREATE TABLE flashback.resources (
    id integer NOT NULL,
    name character varying(200) NOT NULL,
    type flashback.resource_type NOT NULL,
    pattern flashback.section_pattern NOT NULL,
    condition flashback.condition NOT NULL,
    presenter character varying(60),
    provider character varying(60),
    link character varying(2000)
);


ALTER TABLE flashback.resources OWNER TO flashback;

--
-- Name: resources_activities; Type: TABLE; Schema: flashback; Owner: flashback
--

CREATE TABLE flashback.resources_activities (
    id integer NOT NULL,
    "user" integer NOT NULL,
    resource integer NOT NULL,
    action flashback.user_action NOT NULL,
    "time" timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE flashback.resources_activities OWNER TO flashback;

--
-- Name: resources_activities_id_seq; Type: SEQUENCE; Schema: flashback; Owner: flashback
--

ALTER TABLE flashback.resources_activities ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME flashback.resources_activities_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: resources_id_seq; Type: SEQUENCE; Schema: flashback; Owner: flashback
--

ALTER TABLE flashback.resources ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME flashback.resources_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: roadmaps; Type: TABLE; Schema: flashback; Owner: flashback
--

CREATE TABLE flashback.roadmaps (
    id integer NOT NULL,
    name character varying(200) NOT NULL
);


ALTER TABLE flashback.roadmaps OWNER TO flashback;

--
-- Name: roadmaps_activities; Type: TABLE; Schema: flashback; Owner: flashback
--

CREATE TABLE flashback.roadmaps_activities (
    id integer NOT NULL,
    "user" integer NOT NULL,
    roadmap integer NOT NULL,
    action flashback.user_action NOT NULL,
    "time" timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE flashback.roadmaps_activities OWNER TO flashback;

--
-- Name: roadmaps_activities_id_seq; Type: SEQUENCE; Schema: flashback; Owner: flashback
--

ALTER TABLE flashback.roadmaps_activities ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME flashback.roadmaps_activities_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: roadmaps_id_seq; Type: SEQUENCE; Schema: flashback; Owner: flashback
--

ALTER TABLE flashback.roadmaps ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME flashback.roadmaps_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: section_name; Type: TABLE; Schema: flashback; Owner: flashback
--

CREATE TABLE flashback.section_name (
    pattern flashback.section_pattern
);


ALTER TABLE flashback.section_name OWNER TO flashback;

--
-- Name: sections; Type: TABLE; Schema: flashback; Owner: flashback
--

CREATE TABLE flashback.sections (
    resource integer NOT NULL,
    "position" integer NOT NULL,
    name character varying(200)
);


ALTER TABLE flashback.sections OWNER TO flashback;

--
-- Name: sections_activities; Type: TABLE; Schema: flashback; Owner: flashback
--

CREATE TABLE flashback.sections_activities (
    id integer NOT NULL,
    "user" integer NOT NULL,
    resource integer NOT NULL,
    "position" integer NOT NULL,
    action flashback.user_action NOT NULL,
    "time" timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE flashback.sections_activities OWNER TO flashback;

--
-- Name: sections_activities_id_seq; Type: SEQUENCE; Schema: flashback; Owner: flashback
--

ALTER TABLE flashback.sections_activities ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME flashback.sections_activities_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: sections_cards; Type: TABLE; Schema: flashback; Owner: flashback
--

CREATE TABLE flashback.sections_cards (
    resource integer NOT NULL,
    section integer NOT NULL,
    card integer NOT NULL,
    "position" integer NOT NULL
);


ALTER TABLE flashback.sections_cards OWNER TO flashback;

--
-- Name: sections_progress; Type: TABLE; Schema: flashback; Owner: flashback
--

CREATE TABLE flashback.sections_progress (
    resource integer NOT NULL,
    section integer NOT NULL,
    "user" integer NOT NULL,
    "time" timestamp with time zone DEFAULT now() NOT NULL,
    duration integer DEFAULT 0 NOT NULL,
    id integer NOT NULL
);


ALTER TABLE flashback.sections_progress OWNER TO flashback;

--
-- Name: sections_progress_id_seq; Type: SEQUENCE; Schema: flashback; Owner: flashback
--

ALTER TABLE flashback.sections_progress ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME flashback.sections_progress_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: shelves; Type: TABLE; Schema: flashback; Owner: flashback
--

CREATE TABLE flashback.shelves (
    resource integer NOT NULL,
    subject integer NOT NULL
);


ALTER TABLE flashback.shelves OWNER TO flashback;

--
-- Name: subjects; Type: TABLE; Schema: flashback; Owner: flashback
--

CREATE TABLE flashback.subjects (
    id integer NOT NULL,
    name character varying(200) NOT NULL
);


ALTER TABLE flashback.subjects OWNER TO flashback;

--
-- Name: subjects_activities; Type: TABLE; Schema: flashback; Owner: flashback
--

CREATE TABLE flashback.subjects_activities (
    id integer NOT NULL,
    "user" integer NOT NULL,
    subject integer NOT NULL,
    action flashback.user_action NOT NULL,
    "time" timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE flashback.subjects_activities OWNER TO flashback;

--
-- Name: subjects_activities_id_seq; Type: SEQUENCE; Schema: flashback; Owner: flashback
--

ALTER TABLE flashback.subjects_activities ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME flashback.subjects_activities_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: subjects_id_seq; Type: SEQUENCE; Schema: flashback; Owner: flashback
--

ALTER TABLE flashback.subjects ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME flashback.subjects_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: topics; Type: TABLE; Schema: flashback; Owner: flashback
--

CREATE TABLE flashback.topics (
    "position" integer NOT NULL,
    name character varying(200) NOT NULL,
    subject integer NOT NULL,
    level flashback.expertise_level NOT NULL
);


ALTER TABLE flashback.topics OWNER TO flashback;

--
-- Name: topics_activities; Type: TABLE; Schema: flashback; Owner: flashback
--

CREATE TABLE flashback.topics_activities (
    id integer NOT NULL,
    "user" integer NOT NULL,
    topic integer NOT NULL,
    action flashback.user_action NOT NULL,
    "time" timestamp with time zone DEFAULT now() NOT NULL,
    subject integer NOT NULL,
    level flashback.expertise_level NOT NULL
);


ALTER TABLE flashback.topics_activities OWNER TO flashback;

--
-- Name: topics_activities_id_seq; Type: SEQUENCE; Schema: flashback; Owner: flashback
--

ALTER TABLE flashback.topics_activities ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME flashback.topics_activities_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: topics_cards; Type: TABLE; Schema: flashback; Owner: flashback
--

CREATE TABLE flashback.topics_cards (
    topic integer NOT NULL,
    card integer NOT NULL,
    "position" integer NOT NULL,
    subject integer NOT NULL,
    level flashback.expertise_level NOT NULL
);


ALTER TABLE flashback.topics_cards OWNER TO flashback;

--
-- Name: topics_progress; Type: TABLE; Schema: flashback; Owner: flashback
--

CREATE TABLE flashback.topics_progress (
    "user" integer NOT NULL,
    topic integer NOT NULL,
    "time" timestamp with time zone DEFAULT now() NOT NULL,
    duration integer DEFAULT 0 NOT NULL,
    subject integer NOT NULL,
    level flashback.expertise_level NOT NULL,
    id integer NOT NULL
);


ALTER TABLE flashback.topics_progress OWNER TO flashback;

--
-- Name: topics_progress_id_seq; Type: SEQUENCE; Schema: flashback; Owner: flashback
--

ALTER TABLE flashback.topics_progress ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME flashback.topics_progress_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: users; Type: TABLE; Schema: flashback; Owner: flashback
--

CREATE TABLE flashback.users (
    id integer NOT NULL,
    name character varying(30) NOT NULL,
    email character varying(150) NOT NULL,
    state flashback.user_state DEFAULT 'active'::flashback.user_state NOT NULL,
    verified boolean DEFAULT false NOT NULL,
    joined timestamp with time zone DEFAULT now() NOT NULL,
    hash character varying(98)
);


ALTER TABLE flashback.users OWNER TO flashback;

--
-- Name: users_id_seq; Type: SEQUENCE; Schema: flashback; Owner: flashback
--

ALTER TABLE flashback.users ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME flashback.users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: users_roadmaps; Type: TABLE; Schema: flashback; Owner: flashback
--

CREATE TABLE flashback.users_roadmaps (
    "user" integer NOT NULL,
    roadmap integer NOT NULL
);


ALTER TABLE flashback.users_roadmaps OWNER TO flashback;

--
-- Data for Name: assessments; Type: TABLE DATA; Schema: flashback; Owner: flashback
--

COPY flashback.assessments (topic, card, subject, level) FROM stdin;
1	5370	6	surface
3	5371	6	surface
4	5371	6	surface
5	5371	6	surface
8	5371	6	surface
9	5371	6	surface
14	5372	6	surface
15	5372	6	surface
16	5372	6	surface
17	5372	6	surface
8	5372	6	surface
13	5372	6	surface
\.


--
-- Data for Name: blocks; Type: TABLE DATA; Schema: flashback; Owner: flashback
--

COPY flashback.blocks (card, "position", content, type, extension) FROM stdin;
1	1	Since C++26, `std::format` is supported as the second argument to `static_assert` for better message formatting at compile-time.	text	txt
1	2	static_assert(sizeof(std::int64_t) == 64, std::format("Unexpected size for a 64 bit integer: {}", sizeof(std::int64_t)));	code	cpp
2	1	Since C++26 deleting a member functions should have a reason.	text	txt
2	2	void oldapi() = delete("oldapi() is outdated and been removed - look at newapi().");	code	cpp
3	1	Since C++26 the new header `<debugging>` provides a way to create breakpoints in the code:	text	txt
3	2	#include <debugging>\n\nint main()\n{\n    std::breakpoint_if_debugging(); // stops here in debugger\n}	code	cpp
4	1	Since C++26, with the `<debugging>` header we can realize if the program is being run by a debugger:	text	txt
4	2	std::is_debugger_present();	code	cpp
5	1	Since C++26, `_` placeholder can be used in places where the object is not needed but receiving it cannot be avoided, or where the object should exist but never touched:	text	txt
5	2	std::lock_guard unnecessary_naming(mutex); // prior to C++26	code	cpp
5	3	std::lock_guard _(mutex); // since C++26	code	cpp
5	4	[[maybe_unused]] auto [x, y, std::ignore]] = f(); // prior to C++26	code	cpp
5	5	auto [x, y, _] = f(); // since C++26	code	cpp
6	1	Since C++26, structured bindings can be used in if, while, for, and switch statements:	text	txt
6	2	if (auto result = std::to_chars(p, last, 42)) // prior to C++26\n{\n    auto [ptr, _] = result;\n}\nelse\n{\n    auto [_, ec] = result;\n}	code	cpp
6	3	if (auto [to, ec] = std::to_chars(p, last, 42)) // since C++26\n{\n    auto s = std::string(p, to);\n}	code	cpp
7	1	Since C++26 structured binding members can have attributes:	text	txt
7	2	auto g()\n{\n    [[maybe_unused]] auto h = f();\n    auto [a, b [[maybe_unused]], c] = f();\n    return a + c;\n}	code	cpp
8	1	Since C++26 we can take values of complex type easily:	text	txt
8	2	std::complex<double> c{};\nauto & [r, i]{ reinterpret_cast<double(&)[2]>(c) };	code	cpp
8	3	auto & [r, i]{c};	code	cpp
9	1	- Template class `cv::Point<>` with aliases in form of `cv::Point{2,3}{i,f,d}`\n- Class `cv::Scalar<>` a four dimensional point derived from `cv::Vec<double, 4>`\n- Template class `cv::Vec<>` known as *fixed vector classes* with aliases in form of `cv::Vec{2,3,4,6}{b,w,s,i,f,d}`\n- Template class `cv::Matx<>` known as *fixed matrix classes* with aliases in form of `cv::Matx{1,2,3,4,6}{1,2,3,4,6}{f,d}`\n- Template class `cv::Size<>` with aliases in form of `cv::Size{2,3}{i,f,d}`\n- Class `cv::Rect<>`\n- Class `cv::RotatedRect<>`	text	txt
10	1	The point class is a container of two or three values of one of the primitive\ntypes and are derived from their own template.	text	txt
10	2	|Operation|Example|\n|---|---|\n|Default constructors|`cv::Point2i{}` `cv::Point3f{}`|\n|Copy constructor|`cv::Point3f{p}`|\n|Value constructor|`cv::Point2i{x0, x1}` `cv::Point3d{x0, x1, x2}`|\n|Cast to fixed vector|`(cv::Vec3d) cv::Point3d{}`|\n|Member access|`p.x` `p.y`|\n|Dot product|`float x = p1.dot(p2)`|\n|Double-precision dot product|`double x = p1.ddot(p2)`|\n|Cross product|`p1.cross(p2)`|\n|Query if Point is inside Rect|`p.inside(r)`|	text	txt
11	1	A four-dimensional point class derived from `cv::Vec<double, 4>` inheriting\nall of the vector algebra operations, member access functions, and other\nproperties.	text	txt
11	2	|Operation|Example|\n|---|---|\n|Default constructor|`cv::Scalar{}`|\n|Copy constructor|`cv::Scalar{s}`|\n|Value constructor|`cv::Scalar{x0}` `cv::Scalar{x0, x1, x2, x3}`|\n|Element-wise multiplication|`s1.mul(s2)`|\n|Conjugation|`s.conj()`|\n|Real test|`s.isReal()`|	text	txt
12	1	The size classes are similar to point classes, and can be cast to and from\nthem. The primary difference is that the point data members are named `x` and\n`y`, while the size data members are named `width` and `height`.	text	txt
12	2	|Operation|Example|\n|---|---|\n|Default constructor|`cv::Size{}` `cv::Size2i{}` `cv::Size2f{}`|\n|Copy constructor|`cv::Size{s}`|\n|Value constructor|`cv::Size2f{w, h}`|\n|Member access|`sz.width` `sz.height`|\n|Compute area|`sz.area()`|	text	txt
13	1	Similar to `cv::Point` class there are `x` and `y` data members in `cv::Rect`\nclass. Additionally, there are `width` and `height` data members.	text	txt
13	2	|Operation|Example|\n|---|---|\n|Default constructor|`cv::Rect{}`|\n|Copy constructor|`cv::Rect{r}`|\n|Value constructor|`cv::Rect{x, y, w, h}`|\n|Construct from origin and size|`cv::Rect{p, sz}`|\n|Construct from two corners|`cv::Rect{tl, br}`|\n|Member access|`r.x` `r.y` `r.width` `r.height`|\n|Compute area|`r.area()`|\n|Extract upper-left corner|`r.tl()`|\n|Extract bottom-right corner|`r.br()`|\n|Determine if a point is inside|`r.contains(p)`|\n|Intersection of rectangles|`r1 &= r2`|\n|Minimum area rectangle|`r1 |= r2`|\n|Translate rectangle by an amount|`r += x`|\n|Enlarge rectangle by size|`r += s`|\n|Compare rectangles for exact quality|`r1 == r2`|\n|Compare rectangles for inequality|`r1 != r2`|	text	txt
14	1	A non-template class holding a `cv::Point2f` member called `center`, a\n`cv::Size2f` called `size`, and one additional `float` called `angle`, with\nthe latter representing the rotation of the rectangle around `center`.	text	txt
14	2	|Operation|Example|\n|---|---|\n|Default constructor|`cv::RotatedRect{}`|\n|Copy constructor|`cv::RotatedRect{rr}`|\n|Value constructor|`cv::RotatedRect{p, sz, theta}`|\n|Construct from two corners|`cv::RotatedRect{p1, p2}`|\n|Member access|`rr.center` `rr.size` `rr.angle`|\n|Return a list of corners|`rr.points{pts[4]}`|	text	txt
15	1	A matrix whose dimensions are known at compile time. The fixed vector class\nderives from the fixed matrix class, and other classes either derive frmo the\nfixed vector class or they rely on casting to the fixed vector class for many\nimportant operations.	text	txt
31	1	Toolchain can be completely built manually by [Cross Linux From Scratch](https://trac.clfs.org).\nAnother alternative to build toolchains is [crosstool-NG](https://crosstool-ng.github.io).	text	txt
32	1	git clone https://github.com - https://github.com/crosstool-ng/crosstool-ng.git\ncd crosstool-ng\ngit checkout <latest>\n./bootstrap\n./configure --enable-local\nmake -j<cores>\n./ct-ng --version	code	txt
34	1	./ct-ng show-<sample>\n./ct-ng show-armv6-unknown-linux-gnueabihf\n./ct-ng show-arm-cortex_a8-linux-gnueabi\n./ct-ng show-arm-unknown-linux-gnueabi	code	txt
35	1	Considering the processor used in this device which is `bmc2835` having an armv6 core, we should use the following target:	text	txt
35	2	./ct-ng distclean\n./ct-ng show-armv6-unknown-linux-gnueabihf\n./ct-ng armv6-unknown-linux-gnueabihf	code	txt
35	3	Change following kernel configurations and set their values accordingly:	text	txt
35	4	* Tarbal path\n* Build path\n* Vendor tuple	text	txt
15	2	|Operation|Example|\n|---|---|\n|Default constructor|`cv::Matx33f{}` `cv::Matx43d{}`|\n|Copy constructor|`cv::Matx22d{n22d}`|\n|Value constructor|`cv::Matx21f{x0, x1}` `cv::Matx22d{x0,x1,x2,x3}`|\n|Matrix of identical elements|`cv::Matx33f::all(x)`|\n|Matrix of zeros|`cv::Matx23d::zeros()`|\n|Matrix of ones|`cv::Matx16f::ones()`|\n|Unit matrix|`cv::Matx33f::eye()`|\n|Diagonal of matrix|`m31f = cv::Matx33f::diag()`|\n|Matrix of uniformly distributed entries|`m33f = cv::Matx33f::randu(min, max)`|\n|Matrix of normally distributed entries|`m33f = cv::Matx33f::nrandn(mean, variance)`|\n|Member access|`m(i,j)` `m(i)`|\n|Matrix algebra|`m1 = m0` `m0 * m1` `m0 + m1` `m0 - m1`|\n|Singelton algebra|`m * a` `a * m` `m / a`|\n|Comparison|`m1 == m2` `m1 != m2`|\n|Dot product|`m1.dot(m2)`|\n|Double-precision dot product|`m1.ddot(m2)`|\n|Reshape matrix|`m91f = m33f.reshape<9, 1>()`|\n|Extract submatrix|`m44f.get_minor<2, 2>(i, j)`|\n|Extract row|`m41f = m44f.row(i)`|\n|Extract column|`m14f = m44f.col(j)`|\n|Extract diagonal|`m41f = m44f.diag()`|\n|Matrix Transpose|`n44f = m44f.t()`|\n|Invert Matrix|`n44f = m44f.inv(method = cv::DECOMP_LU)`|\n|Solve linear system|`m31f = m33f.solve(rhs31f, method)`|\n|Per-element multiplication|`m1.mul(m2)`|	text	txt
16	1	The fixed vector classes are derived from fixed matrix classes.	text	txt
16	2	Alias templates are `cv::Vec{2,3,4,6}{b,s,w,i,f,d}`	text	txt
16	3	|Operation|Example|\n|---|---|\n|Default constructor|`cv::Vec2s{}` `cv::Vec6d{}`|\n|Copy constructor|`cv::Vec3f{v3f}`|\n|Value constructor|`cv::Vec2f{x0, x1}` `cv::Vec6d{x0,x1,x2,x3,x4,x5}`|\n|Member access|`v4f[i]` `v3w(j)`|\n|Cross-product|`v3f.cross(u3f)`|	text	txt
17	1	The `cv::Complex` template class is not indentical to, but is compatible\nwith, and can be cast to and from, the `std::complex<>`.	text	txt
17	2	In `std::complex<>` the real and imaginary parts are accessed through the\nmember functions `real()` and `imag()`, while in `cv::Complex<>` they are\ndirectly accessible as public members `re` and `im`.	text	txt
17	3	|Operation|Example|\n|---|---|\n|Default constructor|`cv::Complexf{}` `cv::Complexd{}`|\n|Copy constructor|`cv::Complexd{c}`|\n|Value constructor|`cv::Complexd{re)` `cv::Complexd{re, im}`|\n|Member access|`z1.re` `z2.im`|\n|Complex conjugate|`z2 = z1.conj()`|	text	txt
18	1	Drawing functions work with images of any depth, but most of them affect only\nthe first three channels defaulting to only the first channel in the case of\nsingle channel images. They also support a color, thickness, a line type, and\nsubpixel alignment of objects.	text	txt
19	1	The convention is to use `cv::Scalar` object to specify color.	text	txt
19	2	Only the first three values are used most of the time eventhough it is\nconvinient to use the fourth value to represent an alpha channel, but drawing\nfunctions do not currently support alpha bending.	text	txt
19	3	By convention, OpenCV uses BGR ordering for converting multichannel images to\ncolor renderings. In any case, the core functions of the library are always\nagnostic to any "meaning" you might assign to a channel.	text	txt
20	1	The `lineType` parameter only acceptes values `4`, `8`, or `cv::LINE_AA`.	text	txt
20	2	* 4-connected Bresenham algorithm:	text	txt
20	3	```\n|X|X| | | | | | | | |\n| |X|X|X| | | | | | |\n| | | |X|X|X|X| | | |\n| | | | | | |X|X|X| |\n| | | | | | | | |X|X|\n``````	text	txt
20	4	* 8-connected Bresenham algorithm:	text	txt
20	5	```\n|X|X| | | | | | | | |\n| | |X|X| | | | | | |\n| | | | |X|X| | | | |\n| | | | | | |X|X| | |\n| | | | | | | | |X|X|\n``````	text	txt
20	6	* Anti-Aliased line with Guassian Smoothing	text	txt
20	7	```\n|O|O| | | | | | | | |\n| |O|X|O| | | | | | |\n| | | |O|X|O| | | | |\n| | | | | |O|X|O| | |\n| | | | | | | |O|X|O|\n| | | | | | | | | |O|\n``````	text	txt
21	1	The `thickness` of the lines measured in pixles. For all closed shapes, it\ncan be set to `cv::FILLED` which is an alias for `-1`.	text	txt
22	1	The signature of this function is as follows:	text	txt
22	2	void cv::circle(\n    cv::Mat&            image,      // image to be drawn on\n    cv::Point           center,     // location of circle center\n    int                 radius,     // radius of circle\n    const cv::Scalar&   color,      // color RGB form\n    int                 thickness=1,// thickness of line\n    int                 lineType=8, // connectedness, 4 or 8\n    int                 shift=0     // bits of radius to treat as fraction\n)	code	cpp
22	3	A sample usage of this drawing function is:	text	txt
22	4	#include <opencv2/imgproc.hpp>\n\nint main()\n{\n    cv::Mat image = cv::imread("/tmp/image.jpg");\n    cv::Point2i center{image.cols / 2, image.rows / 2};\n    int radius{100};\n    cv::Scalar color{};\n    int thickness{4};\n    int linetype{4};\n    int shift{0};\n\n    cv::circle(image, center, radius, color, thickness, linetype, shift);\n}	code	cpp
23	1	1. Board Bring-Up\n2. System Architecture and Design Choice\n3. Writing Embedded Applications\n4. Debugging and Optimizing Performance	text	txt
24	1	1. Toolchain\n2. Bootloader\n3. Kernel\n4. Root filesystem\n5. Embedded Applications	text	txt
25	1	1. CPU architecture\n2. Reasonable amout of RAM\n3. Non-volatile storage\n4. Serial port\n5. Debugging interface (e.g. JTAG)	text	txt
26	1	qemu-system-arm -machine vexpress-a9 -m 256M -drive file=rootfs.ext4,sd -net nic -net use -kernel zImage -dtb vexpress-v2p-ca9.dtb -append "console=ttyAMA0,115200 root=/dev/mmcblk0" -serial stdio -net nic,model=lan9118 -net tap,ifname=tap0	code	sh
26	2	`-machine`: creates a machine with specified processor\n`-m`: specifies the amount of memory available on the emulated machine\n`-drive`: locates the filesystem image\n`-kernel`: locates the kernel image\n`-dtb`: locates the device driver files\n`-serial`: connects the serial port to the terminal that launched the machine\n`-net nic,model=lan9118`: creates a network interface\n`-net tap,ifname=tap0`: connects the network interface to the virtual network interface `tap0`	text	txt
26	3	To configure the host side of the network, use `tunctl` from the **User Mode Linux (UML)** project.	text	txt
26	4	sudo tunctl -u $USER -t tap0	code	sh
27	1	* binutils **(base-devel)**: https://gnu.org - https://gnu.org/software/binutils\n* gcc **(base-devel)**: [https://gcc.gnu.org](https: - https://gcc.gnu.org](https://gcc.gnu.org)\n* C library + Linux header files	text	txt
28	1	* CPU Architecture + Endianness (e.g. `x86_64`, `mipsel`, `armeb`)\n* Vendor (e.g. `buildroot`)\n* Kernel (e.g. `linux`)\n* Operating System + ABI (e.g. `gnueabi`, `gnueabihf`, `musleabi`, `musleabihf`)	text	txt
29	1	gcc -dumpmachine	code	txt
30	1	* glibc: https://gnu.org - https://gnu.org/software/libs\n* musl libs: [https://musl.libc.org](https: - https://musl.libc.org](https://musl.libc.org)\n* uClibc-ng: [https://uclibc-ng.org](https: - https://uclibc-ng.org](https://uclibc-ng.org)\n* eglibc: https://uclibc.org - https://uclibc.org/home	text	txt
33	1	./ct-ng list-samples	code	txt
35	5	./ct-ng build	code	txt
36	1	./ct-ng distclean\n./ct-ng show-arm-cortex_a8-linux-gnueabi\n./ct-ng arm-cortex_a8-linux-gnueabi	code	txt
36	2	Change the following kernel configurations and set their values accordingly:	text	txt
36	3	* **Paths and misc options** >> **Render the toolchain read-only**: disable\n* **Target options** >> **Floating point**: **hardware (FPU)**\n* **Target options** >> **Use specific FPU**: neon	text	txt
36	4	./ct-ng build	code	txt
37	1	./ct-ng distclean\n./ct-ng show-arm-unknown-linux-gnueai\n./ct-ng arm-unknown-linux-gnueai	code	txt
37	2	Change the following kernel configurations and set their values accordingly:	text	txt
37	3	* **Paths and misc options** >> disable **Render the toolchain read-only**	text	txt
37	4	./ct-ng build	code	txt
38	1	${CROSS_COMPILE}gcc -v	code	txt
39	1	${CROSS_COMPILE}gcc -mcpu=cortex-a5 main.c -o app	code	txt
40	1	${CROSS_COMPILE}gcc --target-help	code	txt
41	1	${CROSS_COMPILE}gcc -print-sysroot	code	txt
42	1	* libc (linked by default)\n* libm\n* libpthread\n* librt	text	txt
43	1	${CROSS_COMPILE}readelf -a app | grep "Shared library"	code	txt
44	1	${CROSS_COMPILE}readelf -a app | grep "program interpreter"	code	txt
45	1	${CROSS_COMPILE}gcc -static main.c -o app	code	txt
46	1	SYSROOT=$(${CROSS_COMPILE}gcc -print-sysroot)\ncd $SYSROOT\nls -l usr/lib/libc.a	code	txt
47	1	${CROSS_COMPILE}gcc -c test1.o\n${CROSS_COMPILE}gcc -c test2.o\n${CROSS_COMPILE}ar rc libtest1.a test1.o test2.o\n${CROSS_COMPILE}gcc main.c -ltest -L../libs -I../include -o app	code	txt
48	1	${CROSS_COMPILE}gcc -fPIC -c test1.c\n${CROSS_COMPILE}gcc -fPIC -c test2.c\n${CROSS_COMPILE}gcc -shared -o libtest.so test1.o test2.o\n${CROSS_COMPILE}gcc main.c -ltest -L../libs -I../include -o app\n${CROSS_COMPILE}readelf -a app | grep library\n${CROSS_COMPILE}readelf -a app | grep interpreter	code	txt
49	1	${CROSS_COMPILE}readelf -a /usr/lib/x86_64-linux-gnu/libjpeg.so.8.2.2 | grep SONAME\nlibjpeg.so.8	code	txt
50	1	By using environment variables to specify toolchains:	text	txt
50	2	export CROSS_COMPILE=armv6-rpi-linux-gnueabihf-\nmake	code	txt
50	3	Or by specifying behind the `make` command directly:	text	txt
50	4	make CROSS_COMPILE=armv6-rpi-linux-gnueabihf-	code	txt
51	1	* GNU Autoconf [https::/gnu.org/software/autoconf/autoconf.html](https::/gnu.org/software/autoconf/autoconf.html)\n* GNU Automake https://gnu.org - https://gnu.org/savannah-checkouts/gnu/automake\n* GNU Libtool https://gnu.org - https://gnu.org/software/libtool/libtool.html\n* Gnulib https://gnu.org - https://gnu.org/software/gnulib	text	txt
51	2	./configure\nmake\nmake install	code	txt
52	1	CC=armv6-rpi-linux-gnueabihf-gcc ./configure --host=armv6-rpi-linux-gnueabihf	code	txt
53	1	wget http://www.sqlite.org/2020/sqlite-autoconf-3330000.tar.gz\ntar xf sqlite-autoconf-3330000.tar.gz\ncd sqlite-autoconf-3330000\nCC=armv6-rpi-linux-gnueabihf-gcc ./configure --host=armv6-rpi-linux-gnueabihf --prefix=/usr\nmake\nmake DESTDIR=$(armv6-rpi-linux-gnueabi-gcc -print-sysroot) install	text	txt
53	2	armv6-rpi-linux-gnueabihf main.c -o sqlite-test -lsqlite3	code	txt
54	1	In order for `pkg-config` to address library and header files belonging to *sqlite3*, it should be able to see `<sysroot>/usr/lib/pkgconfig/sqlite3.pc`:	text	txt
54	2	export CROSS_COMPILE="xtools/armv6-rpi-linux-gnueabihf-"\nexport PKG_CONFIG_LIBDIR=$(${CROSS_COMPILE}gcc -print-sysroot)/usr/lib/pkgconfig\n${CROSS_COMPILE}gcc $(pkg-config sqlite3 --cflags --libs) main.c -o sqlite-test	code	txt
55	1	export CROSS_COMPILE="xtools/armv6-rpi-linux-gnueabihf-"\ncmake -S . -B build -D CMAKE_INSTALL_PREFIX:PATH=sysroot -D CMAKE_C_COMPILER:PATH=${CROSS_COMPILE}gcc\ncmake --build build --parallel 8 --target all\ncmake --build build --parallel 8 --target install	code	txt
56	1	* **Phase 1 Rom Code**: loads a small chunk of code from first few pages of NAND, from flash memory connected through **Serial Peripheral Interface**, or from the first sector of an MMC device, or from a file named ML on the first partition of an MMC device.\n* **Phase 2 Secondary Program Loader (SPL)**: sets up memory controller and other essential parts of the system in preparation for loading the **TPL** into DRAM.\n* **Phase 3 Tertiary Program Loader (TPL)**: full bootloader such as U-Boot loads the kernel + optional FDT and initramfs into DRAM.	text	txt
57	1	* The machine number, which is used on PowerPC and Arm platform without support for a device tree, to Identify the type of SoC.\n* Basic details of the hardware that's been detected so far, including the size and location of the physical RAM and the CPU's clock speed.\n* The kernel command line.\n* Optionally, the location and size of a device tree binary.\n* Optionally, the location and size of an initial RAM disk, called the **initial RAM file system (initramfs)**.	text	txt
58	1	* https://github.com - https://github.com/devicetree-org/devicetree-specification/releases	text	txt
59	1	* Device tree begins with a root node.\n* **reg** property referes to a range of units in a register space.	text	txt
59	2	/dts-v1/;\n/{\n    model = "TI AM335x BeagleBone";\n    compatible = "ti,am33xx";\n    #address-cells = <1>;\n    #size-cells = <1>;\n    cpus {\n        #address-cells = <1>;\n        #size-cells = <0>;\n        cpu@0 {\n            compatible = "arm,cortex-a8";\n            device_type = "cpu";\n            reg = <0>;\n        };\n    };\n    memory@80000000 {\n        device_type = "memory";\n        reg = <0x80000000 0x20000000>; /* 512 MB */\n    };\n};	code	txt
60	1	* Labels used can be expressed in connections to reference to a node.\n* Labels are also referred to as **phandles**.\n* **interrupt-controller** property identifies not as interrupt controller.\n* **interrupt-parrent** property references the interrupt controller.	text	txt
60	2	/dts-v1/;\n{\n    intc: interrupt-controller@48200000 {\n        compatible = "ti,am33xx-intc";\n        interrupt-controller;\n        #interrupt-cells = <1>;\n        reg = <0x48200000 0x1000>;\n    };\n    lcdc: lcdc@48200000 {\n        compatible = "ti,am33xx-tilcdc";\n        reg = <0x4830e000 0x1000>;\n        interrupt-parent = <&intc>;\n        interrupts = <36>;\n        ti,hwmods = "lcdc";\n        status = "disabled";\n    };\n};	code	txt
61	1	/include/ "vexpress-v2m.dtsi"	code	txt
62	1	* The **status** is disabled, meaning that no device driver should be bound to it.	text	txt
62	2	mmc1: mmc@48060000 {\n    compatible = "ti,omap4-hsmmc";\n    t.hwmods = "mmc1";\n    ti,dual-volt;\n    ti,needs-special-reset;\n    ti,needs-special-hs-handling;\n    dmas = <&edma_xbar 24 0 0 &edma_xbar 25 0 0>;\n    dma_names = "tx", "rx";\n    interrupts = <64>;\n    reg = <0x48060000 0x1000>;\n    status = "disabled";\n};	code	txt
62	3	* The **status** property is set to *okay*, which causes the MMC device driver to bind with this interface.	text	txt
62	4	&mmc1 {\n    status = "okay";\n    bus-width = <0x4>;\n    pinctrl-names = "default";\n    pinctrl-0 = <&mmc1_pins>;\n    cd-gpios = <&gpio0 6 GPIO_ACTIVE_LOW>;\n};	code	txt
62	5	* The **mmc1** interface is connected to a different voltage regulator on the BeagleBone Black as expressed in am335x-boneblack.dts, which associates it with the voltage regulator via the **vmmcsd_fixed** label:	text	txt
62	6	&mmc1 {\n    vmmc-supply = <&vmmcsd_fixed>;\n};	code	txt
63	1	dtc beaglebone-black.dts -o beaglebone-black.dtb	code	txt
64	1	git clone git:://git.denx.de/u-boot.git\ncd u-boot\ngit checkout v2021.01\nmake ARCH=arm CROSS_COMPILE=arm-cortex_a8-linux-gnueabihf- am335x_emv_defconfig\nmake ARCH=arm CROSS_COMPILE=arm-cortex_a8-linux-gnueabihf- -j2\nsudo fdisk /dev/sda\nmkfs.vfat -F 16 -n boot /dev/sda1\nmkfs.ext4 -L rootfs /dev/sda2\nmount /dev/sda1 /run/media/brian/boot\ncp MLO u-boot.img /run/media/brian/boot\numount /run/media/brian/boot\npicocom -b 115200 /dev/ttyUSB0	code	txt
64	2	The results of the compilation:	text	txt
64	3	* `u-boot`: U-Boot in ELF object format, suitable for use with a debugger\n* `u-boot.map`: The symbol table\n* `u-boot.bin`: U-Boot in raw binary format, suitable for running on your device\n* `u-boot.img`: This is `u-boot.bin` with a U-Boot header added, suitable for uploading to a running copy of U-Boot\n* `u-boot.srec`: U-Boot in Motoral S-record (**SRECORD** or **SRE**) format, suitable for transferring over a serial connection\n* `MLO`: The BeagleBone Black also requires a **SPL** which is built here	text	txt
65	1	Read `0x200000` bytes from offset `0x400000` from the start of the NAND memory into RAM address `0x82000000`	text	txt
65	2	nand read 82000000 400000 200000	code	txt
66	1	setenv foo bar\nprintenv foo	text	txt
66	2	setenv foo # reset foo\nprintenv # print all environment variables	code	txt
67	1	mkimage --help\nmkimage -A arm -O linux -T kernel -C gzip -a 0x80008000 0e 0x80008000 -n 'Linux' -d zImage uImage	code	txt
68	1	mmc rescan\nfatload mmc 0:1 82000000 uimage\niminfo 82000000	code	txt
69	1	setenv ipaddr 192.168.1.12\nsetenv serverip 192.168.1.18\ntftp 82000000 uImage\ntftpboot 82000000 uimage\nnandecc hw\nnand erase 280000 400000\nnand write 82000000 280000 400000\nnand read 82000000 280000 400000	code	txt
70	1	# bootm [kernel address] [ramdist address] [dtb address]\nbootm 82000000 - 83000000	code	txt
71	1	setenv bootcmd nand read 82000000 400000 200000\\\\;bootm 82000000	code	txt
72	1	To follow kernel mainline, below repository should be used:	text	txt
72	2	git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git	code	txt
72	3	To use long-term releases of the kernel, below repository should be used instead:	text	txt
72	4	git clone git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git	code	txt
73	1	Follow up overviews of each kernel release on **KernelNewbies** to see changes.	text	txt
74	1	* `arch`: architecture specific files.\n* `Documentation`: main kernel documentation.\n* `drivers`: device drivers, each type having specific subdirectory.\n* `fs`: filesystem code.\n* `include`: kernel header files, including required headers for building the toolchain.\n* `init`: kernel startup code.\n* `kernel`: core functions, including scheduling, locking, timers, power management, and debug/trace code.\n* `mm`: memory management.\n* `net`: network protocols.\n* `scripts`: useful scripts, including the **device tree compiler**.\n* `tools`: useful tools, including the Linux performance counters tool, `perf`.	text	txt
75	1	The configuration mechanism is called `Kconfig`, and the build system that it integrates with it is called `Kbuild`.	text	txt
76	1	The value you put into `ARCH` is one of the subdirectories you find in the `arch` directory in the kernel source tree.	text	txt
77	1	Each `config` identifier is constructed as follows:	text	txt
77	2	menu "Menu Title"\n[...]\nconfig EXAMPLE\n    bool "config inline description"\n    default [y,m,n]\n    help\n        multi-line config description.\n[...]\nendmenu	code	txt
77	3	This config can be found in `.config` file as `CONFIG_EXAMPLE=y`.	text	txt
78	1	* `bool`: either `y` or not defined.\n* `tristate`: feature can be built as a kernel module or built into the main kernel image.\n* `int`: integer value using decimal notation.\n* `hex`: unsigned integer value using hexadecimal notation.\n* `string`: string value.	text	txt
79	1	Dependencies can be expressed by `depends on` construct:	text	txt
79	2	config EXAMPLE\n    tristate "config inline description"\n    depends on DEPENDENCY	code	txt
79	3	`EXAMPLE` will not be shown in menu if `DEPENDENCY` is not set.	text	txt
79	4	Reverse dependencies can be expressed by `select` construct, as an example in `arch/arm`	text	txt
79	5	config ARM\n    bool\n    default y\n    select ARCH_KEEP_MEMBLOCK\n    ...	code	txt
79	6	Selecting any config as reverse dependency, sets its value as `y`.	text	txt
80	1	* `menuconfig`: requires `ncurses`, `flex`, and `bison` packages.\n* `xconfig`\n* `gconfig`	text	txt
81	1	There is a set of known working configuration files in `arch/$ARCH/configs`, each containing suitable configuration values for a single SoC or a group of SoCs.	text	txt
81	2	To make configuration for `arm64` SoCs:	text	txt
81	3	make ARCH=arm64 defconfig	code	txt
81	4	To make configuration for SoC of `raspberry pi zero`, considering its `bcm2835` 32-bits processor:	text	txt
81	5	make ARCH=arm bcm2835_defconfig	code	txt
82	1	`ARCH` environment variable needs to be set for almost all `make` targets:	text	txt
82	2	make ARCH=arm menuconfig	code	txt
83	1	The `oldconfig` target validates modified `.config`.	text	txt
83	2	make ARCH=arm oldconfig	code	txt
83	3	Use `olddefconfig` target to use a preconfigured `.config` file and set new parameters as default.	text	txt
83	4	make ARCH=arm olddefconfig	code	txt
84	1	A header file `include/generated/autoconf.h` contains `#define` preprocessors to be included in the kernel source.	text	txt
85	1	This is reported at runtime through the `uname` command.\nIt is also used in naming the directory where kernel modules are stored.	text	txt
85	2	make ARCH=arm kernelversion\nmake ARCH=arm kernelrelease	code	txt
86	1	`CONFIG_LOCALVERSION` option is the release information string to be appended to kernel release.\nKernel version can never be appended.	text	txt
87	1	`Kbuild` takes configurations from `.config` file and follows below pattern in make files such as `drivers/char/Makefile`:	text	txt
87	2	obj-y += mem.o random.o\nobj-$(CONFIG_TTY_PRINTK) += ttyprintk.o	code	txt
88	1	* `ARCH`: architecture name\n* `CROSS_COMPILE`: toolchain prefix ending with a hyphen, visible in `PATH`	text	txt
89	1	* **U-Boot**: traditionally `uImage`, but newer versions can load `zImage`\n* **x86 targets**: `bzImage`\n* **Most other bootloaders**: `zImage`	text	txt
89	2	make -j $(($(nproc) / 2)) ARCH=arm CROSS_COMPILE=armv6-rpi-linux-gnueabihf- zImage	code	txt
90	1	The relocation address is coded into the `uImage` header by the `mkimage` command when the kernel is built, but fails with multiple reloaction addresses.	text	txt
90	2	make -j $(($(nproc)/2)) ARCH=arm CROSS_COMPILE=arm-rpi-linux-gnueabihf- LOADADDR=0x80008000 uImage	code	txt
91	1	* `vmlinux`: the kernel as an ELF binary, suited for debugging by `kgdb`.\n* `System.map`: the symbol table in a human-readable form.\n* `arch/$ARCH/boot`: the directory containing vmlinux image converted for bootloaders.	text	txt
91	2	* `arch/$ARCH/boot/Image`: `vmlinux` converted to raw binary format.\n* `zImage`: compressed version of `Image`.\n* `uImage`: `zImage` plus a 64-byte U-Boot header.	text	txt
92	1	By enabling `CONFIG_DEBUG_INFO` configuration option.	text	txt
93	1	make -j $(($(nproc)/2)) ARCH=arm CROSS_COMPILE=arm-rpi-linux-gnueabihf- V=1 zImage	code	txt
94	1	Compiling device trees:	text	txt
94	2	make ARCH=arm dtbs	code	txt
94	3	Compiling modules:	text	txt
94	4	make -j 8 ARCH=arm CROSS_COMPILE=arm-rpi-linux-gnueabihf- modules	code	txt
94	5	Install modules:	text	txt
94	6	make -j 8 ARCH=arm CROSS_COMPILE=arm-rpi-linux-gnueabihf- INSTALL_MOD_PATH=/run/media/user/rootfs install_modules	code	txt
95	1	* `clean`: remove object files and most intermediates.\n* `mrproper`: remove all intermediate files and `.config` file.\n* `distclean`: remove all, also delete editor backup files, patch files, and other artifacts.	text	txt
96	1	Raspberry Pi is a little different here. So prebuilt binaries or patched sources are preferred:	text	txt
96	2	* Clone a stable branch of Raspberry Pi Foundations' kernel fork into a `linux` directory.\n* Export contents of the `boot` subdirectory from Raspberry Pi Foundation's `firmware` repo to a `boot` directory.\n* Delete existing kernel images, device tree blobs, and device tree overlays from the `boot` directory.\n* From the `linux` directory, build the 64-bit kernel, modules, and device tree for the Raspberry Pi 4.\n* Copy the newly built kernel image, device tree blobs, and device tree overlays from `arch/arm64/boot/` to the `boot` directory.\n* Write `config.txt` and `cmdline.txt` files out to the boot directory for the Raspberry Pi's bootloader to read and pass to the kernel.	text	txt
96	3	Prebuilt toolchain:	text	txt
96	4	https://developer.arm.com - https://developer.arm.com/-/media/Files/downloads/gnu-a/10.3-2021.07/binrel/gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu.tar.xz?rev=1cb9c51b94f54940bdcccd791451cec3&hash=A56CA491FA630C98F7162BC1A302F869	text	txt
96	5	* Clone a stable branch of Raspberry Pi Foundations' kernel fork into a `linux` directory.\n* Export contents of the `boot` subdirectory from Raspberry Pi Foundation's `firmware` repo to a `boot` directory.\n* Delete existing kernel images, device tree blobs, and device tree overlays from the `boot` directory.\n* From the `linux` directory, build the 64-bit kernel, modules, and device tree for the Raspberry Pi 4.\n* Copy the newly built kernel image, device tree blobs, and device tree overlays from `arch/arm64/boot/` to the `boot` directory.\n* Write `config.txt` and `cmdline.txt` files out to the boot directory for the Raspberry Pi's bootloader to read and pass to the kernel.	text	txt
96	6	Patched kernel source for Raspberry Pi:	text	txt
96	7	https://github.com - https://github.com/raspberrypi/linux.git	text	txt
96	8	cd ~\nwget [AArch64 GNU/Linux target (aarch64-none-linux-gnu)]\ntar xf archive.tar.xz\nmv gcc-executable gcc-arm-aarch32-none-linux-gnu\nsudo pacman -S subversion openssl\ngit clone --depth 1 -b rpi-4.5.y https://github.com - https://github.com/raspberrypi/linux.git\nsvn export https://github.com - https://github.com/raspberrypi/firmware/trunk/boot\nrm boot/kernel*\nrm boot/*.dtb\nrm boot/overlays/*.dtbo	text	txt
96	9	PATH=~/gcc-arm-aarch64-none-linux-gnu/bin/:$PATH\ncd linux\nmake ARCH=arm64 CROSS_COMPILE=aarch64-none-linux-gnu- bcm2711_defconfig\nmake -j $(($(nproc)/2)) ARCH=arm64 CROSS_COMPILE=aarch64-none-linux-gnu-\ncp arch/arm64/boot/Image ../boot/kernel8.img\ncp arch/arm64/boot/dts/overlays/*.dtbo ../boot/overlays/\ncp arch/arm64/boot/dts/broadcom/*.dtb ../boot\necho 'enable_uart=1' > ../boot/config.txt\necho 'arm_64bit=1' >> ../boot/config.txt\necho 'console=serial0,115200 console=tty1 root=/dev/mmcblk0p2 rootwait' > ../boot/cmdline.txt	code	txt
97	1	Prebuilt toolchain:\n[AArch32 target with hard float (arm-none-linux-gnueabihf)](AArch32 target with hard float (arm-none-linux-gnueabihf))	text	txt
97	2	cd ~\nwget [AArch32 GNU/Linux target (aarch32-none-linux-gnu)]\ntar xf archive.tar.xz\nmv gcc-executable gcc-arm-aarch32-none-linux-gnu\nsudo pacman -S subversion openssl\ngit clone --depth 1 -b rpi-4.5.y https://github.com - https://github.com/raspberrypi/linux.git\nsvn export https://github.com - https://github.com/raspberrypi/firmware/trunk/boot\nrm boot/kernel*\nrm boot/*.dtb\nrm boot/overlays/*.dtbo	text	txt
97	3	PATH=~/gcc-arm-aarch32-none-linux-gnu/bin/:$PATH\ncd linux\nmake ARCH=arm CROSS_COMPILE=aarch32-none-linux-gnu- bcm2711_defconfig\nmake -j $(($(nproc)/2)) ARCH=arm CROSS_COMPILE=aarch32-none-linux-gnu-\ncp arch/arm/boot/Image ../boot/kernel8.img\ncp arch/arm/boot/dts/overlays/*.dtbo ../boot/overlays/\ncp arch/arm/boot/dts/broadcom/*.dtb ../boot\necho 'enable_uart=1' > ../boot/config.txt\necho 'console=serial0,115200 console=tty1 root=/dev/mmcblk0p2 rootwait' > ../boot/cmdline.txt	code	txt
98	1	cd linux-stable\nmake ARCH=arm CROSS_COMPILE=arm-cortex_a8-linux-gnueabihf- distclean\nmake ARCH=arm multi_v7_defconfig\nmake ARCH=arm CROSS_COMPILE=arm-cortex_a8-linux-gnueabihf- zImage -j $(($(nproc)/2))\nmake ARCH=arm CROSS_COMPILE=arm-cortex_a8-linux-gnueabihf- modules -j $(($(nproc)/2))\nmake ARCH=arm CROSS_COMPILE=arm-cortex_a8-linux-gnueabihf- dts	code	txt
99	1	cd linux-stable\nmake ARCH=arm CROSS_COMPILE=arm-unknown-linux-gnueabihf- distclean\nmake ARCH=arm CROSS_COMPILE=arm-unknown-linux-gnueabihf- zImage -j $(($(nproc)/2))\nmake ARCH=arm CROSS_COMPILE=arm-unknown-linux-gnueabihf- modules -j $(($(nproc)/2))\nmake ARCH=arm CROSS_COMPILE=arm-unknown-linux-gnueabihf- dts	code	txt
100	1	Nothing.\nRaspberry Pis use a proprietary bootloader provided by Broadcom instead of U-Boot.\nKernel will boot and ends with a kernel panic because of the abcense of root filesystem.	text	txt
101	1	fatload mmc 0:1 0x80200000 zImage\nfatload mmc 0:1 0x80f00000 am335x-boneblack.dtb\nsetenv bootargs console=ttyo0\nbootz 0x80200000 - 0x80f00000	code	txt
102	1	QEMU_AUDIO_DRV=none qemu-system-arm -m 256M -nographic -M versatilepb -kernel zImage -apend "console=ttyAMA0,115200" -dtb versatile-pb.dts"	code	txt
103	1	The kernel has to mount a root filesystem and execute the first user space process via a ramdisk or by mounting a real filesystem on a block device.	text	txt
103	2	The code for this process is in `init/main.c`, starting with `rest_init()` function which creates the first thread with PID 1 and runs the code in `kernel_init()`.	text	txt
103	3	If there is a ramdisk, it will try to execute the program `/init`, which will take on the task of setting up the user space.	text	txt
103	4	If the kernel fails to find and run `/init`, it tries to mount a filesystem by calling the `prepare_namespace()` function in `init/do_mounts.c`.	text	txt
103	5	root=/dev/ mmcblk0p1	code	txt
104	1	* `debug`: set console log level.\n* `init`: the `init` program to run from a mounted root filesystem which defaults to `/sbin/init`.\n* `lpj`: sets `loops_per_jiffy` to a given constant.\n* `panic`: behavior when the kernel panics. above zero is number of seconds before reboot, zero waits forever, and below zero reboots instantly.\n* `quiet`: no log levels.\n* `rdinit`: the `init` program to run from a ramdisk. defaults to `/init`.\n* `ro`: mounts root device as read-only.\n* `root`: the device on which to mount the root filesystem.\n* `rootdelay`: number of seconds to wait before mounting root device.\n* `rootfstype`: filesystem type for the root device.\n* `rootwait`: wait indefinitely for the root device to be detected.\n* `rw`: mounts root device as read-write (default).	text	txt
105	1	By setting `lpj=4980736` to the kernel parameter.\nThe number should be different on each device.	text	txt
106	1		code	txt
107	1	/dts-v1/;	text	txt
107	2	#include "am33xx.dtsi"\n#include "am335x-bone-common.dtsi"\n#include "am335x-boneblack-common.dtsi"	text	txt
107	3	/ {\n    model = "Nova";\n    compatible = "ti,am335x-bone-black", "ti,am335x-bone", "ti,am33xx";\n};	text	txt
107	4	/ {\n    model = "Nova";\n    compatible = "ti,nova", "ti,am33xx";\n};\n[…]	code	txt
107	5	make ARCH=arm nova.dtb	code	txt
107	6	*arch/arm/boot/dts/Makefile*\n[…]\ndtb-$(CONFIG_SOC_AM33XX) += nova.dtb\n[…]	code	txt
107	7	*arch/arm/mach-omap2/board-generic.c*\n#ifdef CONFIG_SOC_AM33XX\nstatic const char *const am33xx_boards_compat[] __initconst = {\n    "ti,am33xx",\n    NULL,\n};	text	txt
107	8	DT_MACHINE_START(AM33XX_DT, "Generic AM33XX (Flattened Device Tree)")\n    .reserve = omap_reserve,\n    .map_io = am33xx_map_io,\n    .init_early = am33xx_init_early,\n    .init_machine = omap_generic_init,\n    .init_late = am33xx_init_late,\n    .init_time = omap3_gptimer_timer_init,\n    .dt_compat = am33xx_boards_compat,\n    .restart = am33xx_restart,\nMACHINE_END	text	txt
107	9	static const char *const nova_compat[] __initconst = {\n    "ti,nova",\n    NULL,\n};	text	txt
107	10	DT_MACHINE_START(NOVA_DT, "Nova board (Flattened Device Tree)")\n    .reserve = omap_reserve,\n    .map_io = am33xx_map_io,\n    .init_early = am33xx_init_early,\n    .init_machine = omap_generic_init,\n    .init_late = am33xx_init_late,\n    .init_time = omap3_gptimer_timer_init,\n    .dt_compat = nova_compat,\n    .restart = am33xx_restart,\nMACHINE_END\n#endif	code	txt
107	11	*drivers/net/ethernet/ti/cpsw-common.c*\nint ti_cm_get_macid(struct device *dev, int slave, u8 *mac_addr)\n{\n    […]\n    if (of_machine_is_compatible("ti,am33xx"))\n        return cpsw_am33xx_cm_get_macid(dev, 0x630, slave, mac_addr);\n    […]\n}	code	txt
108	1	g++ -o program source.cpp -std=c++20	code	txt
108	2	clang++ -o program source.cpp -std=c++20	code	txt
109	1	#include <iostream>	text	txt
109	2	int main()\n{\n    using std::cout;\n    using std::endl;	text	txt
109	3	    cout << 42 << endl;\n}	code	txt
110	1	void do_something();	text	txt
110	2	int main()\n{\n    do_something();\n}	text	txt
110	3	void do_something()\n{\n}	code	txt
111	1	#include <iostream>	text	txt
111	2	int global_number = 42;	text	txt
111	3	int function()\n{\n    int local_number = 77;\n    return local_number;\n}	text	txt
111	4	int main()\n{\n    std::cout << function() << '\\\\n';\n    std::cout << global_number << '\\\\n';\n    return 0;\n}	code	txt
112	1	#include <iostream>	text	txt
112	2	int main()\n{\n    std::cout << sizeof(long double) << '\\\\n';\n}	code	txt
113	1	int number = 200000;\nlong large_number = 200000000;\nint regular_number{large_number}; // ERROR: Type long narrowed to int	code	txt
114	1	auto flag = true; // bool	code	txt
115	1	typedef unsigned long positive_t;	code	txt
116	1	- Literal constants\n- Constants defined by `const`\n- Constant expressions defined by `constexpr`\n- Immediate functions marked by `consteval`\n- Enumerations\n- Scoped Enumerations\n- Preprocessor macro `#define`	text	txt
117	1	const double pi = 22.0 / 7;	code	txt
118	1	constexpr double get_pi()\n{\nreturn 22.0 / 7;\n}	code	txt
119	1	consteval double divide(double a, double b)\n{\n    return a / b;\n}	text	txt
119	2	consteval double get_pi()\n{\n    return divide(22.0, 7); // OK\n}	text	txt
119	3	double dividen{22.0}, divisor{7.0};\ndivide(dividen, divisor); // ERROR: non-const arguments to consteval	code	txt
120	1	An enumeration comprises a set of constants called enumerators.	text	txt
120	2	enum class directions\n{\n    north,\n    east,\n    south,\n    west\n};	code	txt
121	1	#include <string>\n#include <format>	text	txt
121	2	int main()\n{\n    std::string date = std::format("{}/{}/{}", 2023, 10, 1);\n}	code	txt
122	1	#include <string>\n#include <format>	text	txt
122	2	int main()\n{\n    std::string date = std::format("{0}/{1}/{2}", 2023, 10, 1);\n}	code	txt
123	1	#include <string>\n#include <format>	text	txt
123	2	int main()\n{\n    std::string date = std::format("{:.^15}", "message");\n}	code	txt
124	1	#include <string>\n#include <format>\n#include <cstdio>	text	txt
124	2	template<typename... Args>\nvoid print(std::string_view const fmt_str, Args&&... args)\n{\n    auto fmt_args{std::make_format_args(args...)};\n    std::string out{vformat(fmt_str, fmt_args)};\n    fputs(out.c_str(), stdout);\n}	text	txt
124	3	int main()\n{\n    print("message\\\\n");\n}	code	txt
125	1	#include <string>\n#include <string_view>\n#include <format>\n#include <cstdio>	text	txt
125	2	class Data\n{\n    std::string buffer;\n};	text	txt
159	4	factorial(1) returns 1	text	txt
125	3	template <>\nstruct std::formatter<Data>\n{\n    template<typename Context>\n    constexpr auto parse(Context& ctx)\n    {\n        return ctx.begin();\n    }	text	txt
125	4	    template<typename Format>\n    auto format(Data const& d, Format& ctx)\n    {\n        return formal_to(ctx.out(), "{}", d.buffer);\n    }\n};	text	txt
125	5	template<typename... Args>\nvoid print(std::string_view const fmt_str, Args&&... args)\n{\n    auto fmt_args{std::make_format_args(args...)};\n    std::string out{vformat(fmt_str, fmt_args)};\n    fputs(out.c_str(), stdout);\n}	text	txt
125	6	int main()\n{\n    Data data;\n    print("{}", data);\n}	code	txt
126	1	C++20 allows the use of constexpr in several new contexts.	text	txt
126	2	constexpr auto use_string()\n{\n    std::string buffer{"sample"};\n    return buffer.size();\n}	text	txt
126	3	constexpr auto use_vector()\n{\n    std::vector<int> buffer{1,2,3,4,5};\n    return std::accumulate(buffer.begin(), buffer.end(), 0);\n}	code	txt
127	1	- Read\n- Search\n- Insert\n- Delete	text	txt
128	1	We can measure the speed of an operation in terms of how many computational steps it takes.	text	txt
129	1	**Read:** Computers read an array in just one step.	text	txt
129	2	**Search:** To Search for a value within an array, computers have no choice but to inspect each cell one at a time.\nThis algorithm is called **linear search**.	text	txt
129	3	**Insert:** Inserting data in an array can take N+1 steps for an array containing N elements.\nThis is because in the worst case scenario we need to shift all N elements over, and then finally execute the insertion step.	text	txt
129	4	**Delete:** For an array containing N elements, the maximum number of steps that deletion would take is N steps.\nThis is because we need one deletion and N-1 shifts.	text	txt
130	1	The only difference between array-based set and an array is that the set never allows duplicate values to be inserted into it.	text	txt
131	1	**Reading:** Reading from an array-based set is exactly as reading from an array, it takes just one step for a computer to look up what's contained within a particular index.	text	txt
131	2	**Search:** Searching an array-based set also turns out to be no different than searching an array, it takes up to N steps to search for a value within an array-based set.	text	txt
131	3	**Delete:** Deletion is also identical between an array-based set and an array.\nIn the worst case scenario, it takes N steps to delete a value within an array-based set.	text	txt
131	4	**Insert:** Insertion, however is different between arrays and array-based set.\nWith an array it takes N shifts and one insertion step.\nWith an array-based set however, every insertion first requires a search to check for existence of a duplicate.\nInsertion into the end of an array-based set will take up to N steps to search and one step for the actual insertion, which takes N+1 steps in total.\nIn the worst case scenario, inserting a value at the beginning of an array-based set takes N steps to look up for duplicates,\nand N steps to shift all the data to the right, and one last final step to insert the new value.\nThat's total of 2N+1 steps.	text	txt
132	1	**Read:** Same as *array* and *array-based set*.	text	txt
132	2	**Delete:** Same as *array* and *array-based set*.	text	txt
132	3	**Insert:** In terms of N, it takes N elements in an ordered array, the insertion takes N+2 steps in total, no matter where in the ordered array the new value ends up.\nIf the value ends up toward the beginning of the ordered array, we have fewer comparisons and more shifts.\nIf the value ends up toward the end, we get more comparisons but fewer shifts.	text	txt
132	4	**Search:** Searching can be applied to ordered array using different algorithms.\nUsing **linear search** algorithm, the operation can be stopped early when the value is found.\nUsing **binary search** algorithm, it would take only one more step to search each time data set grows twice.	text	txt
133	1	Within an ordered array, we can stop a **linear search** early even if the value isn't contained within the array as soon as we reach a value with a higher order.	text	txt
133	2	*pseudocode in ruby*\ndef linear_search(array, search_value)\n    array.each_with_index do |element, index|\n        if element == search_value\n            return index\n        elsif element > search_value\n            break\n        end\n    end\n    return nil\nend	code	txt
133	3	*pseudocode in C++*\n#include <vector>	text	txt
133	4	auto linear_search(std::vector<int> const& ordered_array, int const search_value)\n{\n    for (auto iter = ordered_array.cbegin(); iter != ordered_array.cend() && *iter <= search_value; ++iter)\n        if (*iter == search_value)\n            return iter;\n    return ordered_array.cend();\n}	code	txt
133	5	Though, using an ordered array we can also use **binary search** to attempt a search much faster!	text	txt
133	6	*pseudocode in ruby*\ndef binary_search(array, search_value)\n    lower_bound = 0\n    upper_bound = array.length - 1	text	txt
133	7	    while lower_bound <= upper_bound do\n        midpoint = (upper_bound + lower_bound) / 2\n        value_at_midpoint = array[midpoint]	text	txt
133	8	        if search_value = value_at_midpoint\n            return midpoint\n        elsif search_value < value_at_midpoint\n            upper_bound = midpoint - 1\n        elsif search_value > value_at_midpoint\n            lower_bound = midpoint + 1\n        end\n    end	text	txt
133	9	    return nil\nend	code	txt
133	10	*pseudocode in C++*\n#include <vector>\n#include <stdexcept>	text	txt
133	11	auto binary_search(std::vector<int> const& array, int const search_value)\n{\n    auto lower_bound = array.begin();\n    auto upper_bound = std::prev(array.end());	text	txt
133	12	    while (std::distance(lower_bound, upper_bound) >= 0)\n    {\n        auto midpoint = std::distance(lower_bound, upper_bound) / 2;\n        auto midpoint_value = array.at(midpoint);	text	txt
133	13	        if (search_value == midpoint_value)\n            return midpoint;\n        else if (search_value > midpoint_value)\n            upper_bound = array.begin() + midpoint - 1;\n        else if (search_value < midpoint_value)\n            lower_bound = array.begin() + midpoint + 1;\n    }	text	txt
133	14	    throw std::out_of_range{"value out of range"};\n}	code	txt
134	1	The key question of Big O notation is if there are N data elements, how may steps will the algorithm take?\nBig O tells the story of **how much the number of step increases as the data changes**.	text	txt
159	1	1. Identify the base case.\n2. Walk through the function for the base case.\n3. Identify the next-to-last case.\n4. Walk through function for the next-to-last case.\n5. Repeat this process by identifying before the case you just analyzed, and walking through the function for that case.	text	txt
135	1	* **Read:** it would take `1` step to read from an array, so it is `O(1)`.\n* **Search:** it would take `N` steps to search through an array, so it is `O(N)`.\n* **Insert:** it would take `N+1` steps to insert into an array in the worst case scenario, so it is `O(N)`.\n* **Delete:** it would take `N` steps to delete from an array, so it is `O(N)`.	text	txt
136	1	* **Read:** same as arrays, it would take `1` step to read from an array-based set, so it is `O(1)`.\n* **Search:** same as arrays it would take `N` steps to search through an array-based set, so it is `O(N)`.\n* **Insert:** it would take `N` steps to search first and `N+1` steps to insert into an array in the worst case scenario, so it is `O(N)`.\n* **Delete:** same as arrays it would take `N` steps to delete from an array-based set, so it is `O(N)`.	text	txt
137	1	* **Read:** same as arrays, it would take `1` step to read from an array-based set, so it is `O(1)`.\n* **Search:** same as arrays it would take `N` steps to search through an array-based set, so it is `O(N)`.\n* **Insert:** it would take `N` steps to search first and `N` steps to insert into an array in the worst case scenario, so it is `O(N)`.\n* **Delete:** same as arrays it would take `N` steps to delete from an array-based set, so it is `O(N)`.	text	txt
138	1	In constant time efficiency no matter how many elements exist, the operation always takes one step.	text	txt
139	1	`O(log N)` means the algorithm takes as many steps as it takes to keep halving the data elements until we remain with `1`.	text	txt
140	1	1. Point to two first consecutive values in the array.\n2. If the two items are out of order, swap them.\n3. Move pointers one cell to the right.\n4. Repeat steps 1 through 3 until we reach the end of the array.\n5. Move back the two pointers back to the first two values of the array, and execute another pass-through of the array until we have a pass-through in which we did not perform any swaps.	text	txt
140	2	Initial array:	text	txt
140	3	```\n 4  2  7  1  3\n``````	text	txt
140	4	First pass-through: 3 swaps	text	txt
140	5	```\n(4  2) 7  1  3\n(2  4) 7  1  3    swap\n 2 (4  7) 1  3\n 2  4 (7  1) 3\n 2  4 (1  7) 3    swap\n 2  4  1 (7  3)\n 2  4  1 (3  7)   swap\n``````	text	txt
140	6	Second pass-through: 2 swaps	text	txt
140	7	```\n(2  4) 1  3 |7|\n 2 (4  1) 3 |7|\n 2 (1  4) 3 |7|   swap\n 2  1 (4  3)|7|\n 2  1 (3  4)|7|   swap\n``````	text	txt
140	8	Third pass-through: 1 swaps	text	txt
140	9	```\n(2  1) 3 |4  7|\n(1  2) 3 |4  7|   swap\n 1 (2  3)|4  7|\n``````	text	txt
140	10	Fourth pass-through:	text	txt
140	11	```\n(1  2)|3  4  7|   no swap means end of pass-throughs\n``````	text	txt
140	12	Sorted array:	text	txt
140	13	```\n 1  2  3  4  7\n``````	text	txt
140	14	For `N` elements we make `(N-1) + (N-2) + ... + 1 = N²/2` comparisons and in worst case scenario we make swap for each comparison,\nmaking it `N²` steps in total which falls into the `O(N²)` general category.	text	txt
140	15	*pseudocode in python*\ndef bubble_sort(list):\n    unsorted_until_index = len(list) - 1\n    sorted = False\n    while not sorted:\n        sorted = True\n        for i in range(unsorted_until_index):\n            if list[i] > list[i+1]:\n                list[i], list[i+1] = list[i+1], list[i]\n            sorted = False\n        unsorted_until_index -= 1\n    return list	code	txt
140	16	bubble_sort([65, 55, 45, 35, 25, 15, 10])\n# 10, 15, 25, 35, 45, 55, 65	code	txt
140	17	*pseudocode in C++*\n#include <vector>\n#include <ranges>\n#include <algorithm>	text	txt
140	18	void bubble_sort(std::vector<int>& container)\n{\n    bool sorted{false};	text	txt
140	19	    for (auto last_unsorted{container.end()}; !sorted && last_unsorted != container.begin(); --last_unsorted)\n    {\n        sorted = true;\n        --last_unsorted;	text	txt
140	20	        for (auto iter = container.begin(); std::distance(iter, last_unsorted) > 0; ++iter)\n        {\n            if (*iter > *std::next(iter))\n            {\n                auto buffer = *iter;\n                *iter = *std::next(iter);\n                *std::next(iter) = buffer;\n                sorted = false;\n            }\n        }\n    }\n}	code	txt
141	1	1. Step through array from left to right to determine which value has least order and keep track of the lowest value we've encountered so far.\n2. Once we've determined which index contains the lowest value, swap its value with the first value in pass-through.\n3. Repeat each pass-through from step 1 and 2 until a pass-through starting at the end of the array is reached.	text	txt
141	2	Initial array:	text	txt
141	3	```\n 4  2  7  1  3\n``````	text	txt
141	4	First pass-through: starting at index 0	text	txt
141	5	```\n(4) 2  7  1  3        lowest value: 4\n 4 (2) 7  1  3        lowest value: 2\n 4  2 (7) 1  3        lowest value: 2\n 4  2  7 (1) 3        lowest value: 1\n 4  2  7  1 (3)       lowest value: 1\n|1| 2  7  4  3        swap lowest value with the first value in pass-through\n``````	text	txt
141	6	Second pass-through: starting at index 1	text	txt
141	7	```\n|1|(2) 7  4  3        lowest value: 2\n|1| 2 (7) 4  3        lowest value: 2\n|1| 2  7 (4) 3        lowest value: 2\n|1| 2  7  4 (3)       lowest value: 2\n|1  2| 7  4  3        no swap needed as lowest value is already the first value in pass-through\n``````	text	txt
141	8	Third pass-through: starting at index 2	text	txt
141	9	```\n|1  2|(7) 4  3        lowest value: 7\n|1  2| 7 (4) 3        lowest value: 4\n|1  2| 7  4 (3)       lowest value: 3\n|1  2  3| 4  7        swap lowest value with the first value in pass-through\n``````	text	txt
141	10	Fourth pass-through: starting at index 3	text	txt
141	11	```\n|1  2  3|(4) 7        lowest value: 4\n|1  2  3| 4 (7)       lowest value: 4\n|1  2  3  4| 7        no swap needed as lowest value is already the first value in pass-through\n``````	text	txt
141	12	Fifth pass-through: starting at index 4	text	txt
141	13	```\n|1  2  3  4|(7)       pass-through starts at the end of the array\n``````	text	txt
141	14	Sorted array:	text	txt
141	15	```\n 1  2  3  4  7\n``````	text	txt
142	1	* `O(1)`\n* `O(log N)`\n* `O(N)`\n* `O(N²)`\n* `O(N³)`\n* `O(2ⁿ)`	text	txt
143	1	It's enough to identify them by their general category.	text	txt
144	1	When two algorithms fall under the same classification of Big O, it doesn't necessarily mean that both algorithms have the same speed.\nFurther analysis is required to determine which algorithm is faster.	text	txt
159	3	Writing upwards from base case:	text	txt
159	5	And the for the next-to-last case:	text	txt
159	6	factorial(2) returns 2\nfactorial(1) returns 1	text	txt
159	7	And again a case before that:	text	txt
145	1	1. In the first pass-through, remove the value at index 1 and store it in a temporary variable. This will leave a gap at that index.\n2. Begin shifting by taking each value to the left of the gap and compare it to the value in the temporary variable. If the value to the left of the gap is greater from the temporary variable, we shift that value to the right. As soon as a value with lower order than the temporary value encountered in the array, shifting is over.\n3. Insert the temporarily removed value into the gap.\n4. Repeat all steps from 1 to 3 until the pass-through begins at the final index of the array.	text	txt
145	2	Initial array:	text	txt
145	3	```\n 4  2  7  1  3\n``````	text	txt
145	4	First pass-through: temporarily remove the value at index 1.	text	txt
145	5	```\n(4)    7  1  3        temporary variable = 2\n``````	text	txt
145	6	The value to the left of the gap is greater than the temporary variable, so we shift that value to the right.	text	txt
145	7	```\n   (4) 7  1  3        temporary variable = 2\n``````	text	txt
145	8	As soon as we encounter a value that is lower than the temporarily removed value, or we reach the left end of the array, this shifting phase is over.	text	txt
145	9	```\n 2  4  7  1  3        push back temp value\n``````	text	txt
145	10	Second pass-through: gap index = 2	text	txt
145	11	```\n 2  4 <7> 1  3        move index 2 to temporary variable\n 2  4     1  3        temporary variable = 7\n 2 (4)    1  3        reached value less than temp\n 2  4  7  1  3        push back temp value\n``````	text	txt
145	12	Third pass-through: gap index = 3	text	txt
145	13	```\n 2  4  7 <1> 3        move index 3 to temporary variable\n 2  4  7     3        temporary variable = 1\n 2  4 (7)    3        value greater than temp\n 2  4    (7) 3        shift the value to right\n 2 (4)    7  3        value greater than temp\n 2    (4) 7  3        shift the value to right\n(2)    4  7  3        value greater than temp\n   (2) 4  7  3        shift the value to right\n    2  4  7  3        reached the left end of array\n 1  2  4  7  3        push back temp value\n``````	text	txt
145	14	Fourth pass-through: gap index = 4	text	txt
145	15	```\n 1  2  4  7 <3>       move index 4 to temporary variable\n 1  2  4  7           temporary variable = 3\n 1  2  4 (7)          value greather than temp\n 1  2  4    (7)       shift the value to right\n 1  2 (4)    7        value greather than temp\n 1  2    (4) 7        shift the value to right\n 1 (2)    4  7        reached value less than temp\n 1  2  3  4  7        push back temp value\n``````	text	txt
145	16	Sorted array:	text	txt
145	17	```\n 1  2  3  4  7\n``````	text	txt
145	18	Insertion sort implementation:	text	txt
145	19	def insertion_sort(array):\n    for index in range(1, len(array)):\n        temp_value = array[index]\n        position = index - 1	text	txt
145	20	        while position >= 0:\n            if array[position] > temp_value:\n                array[position + 1] = array[position]\n                position = position - 1\n            else:\n                break	text	txt
145	21	        array[position + 1] = temp_value\n    return array	code	txt
145	22	We can formulate the total number of comparisons as `1 + 2 + 3 + … + (N - 1)` comparisons.	text	txt
145	23	```\nN² / 2 comparisons\n= N² / 2 steps\n``````	text	txt
145	24	Shifts occur each time we move a value one cell to the right.\nWhen an array is sorted in reverse order, there will be as many shifts as there are comparisons, since every comparison will force us to shift a value to the right.	text	txt
145	25	```\nN² / 2 comparisons\n+ N² / 2 shifts\n= N² steps\n``````	text	txt
145	26	Removing and inserting the temporary value from the array happens once per pass-through.\nSince there are always `N - 1` pass-throughs, we can conclude that there are `N - 1` removals and `N - 1` insertions.	text	txt
145	27	```\nN² / 2 comparisons\n+ N² / 2 shifts\n+ (N - 1) removals\n+ (N - 1) insertions\n= N² + 2N - 2 steps\n``````	text	txt
145	28	It emerges that in a worst-case scenario, **Insertion Sort** has the same time complexity as **Bubble Sort** and **Selection Sort**.\nThey’re all `O(N²)`.	text	txt
146	1	Big O notation only takes into account the highest order of N when we have multiple orders added together.\n`N³ + 2N² + N + 5` is expressed as `O(N³)`.	text	txt
147	1	* **Bubble Sort:** worst case `O(N²)`, average case `O(N²)`, best case `O(N²)`.\n* **Selection Sort:** worst case `O(N²/2)`, average case `O(N²/2)`, best case `O(N²/2)`.\n* **Insertion Sort:** worst case `O(N²)`, average case `O(N²/2)`, best case `O(N)`.	text	txt
148	1	In an average case, when an array is randomly sorted, they perform similarly.\nIf an array can be assumed to be mostly sorted, then **Insertion Sort** will be a better choice.\nIf an array is known to be mostly sorted in reverse order, then **Selection Sort** will be faster.	text	txt
149	1	A hash table is a list of paired values.\nThe first item in each pair is called the key, and the second item is called the value.	text	txt
150	1	A hash function needs to meet only one criterion to be valid.\nIt must convert the same string to the same number every single time it's applied.	text	txt
151	1	The ratio of data to cells ideally is 0.7 which means 7 elements per 10 cells.	text	txt
152	1	By storing objects as keys and assign boolean true as the associated value for each object.	text	txt
153	1	* Data can be inserted only at the end of a stack.\n* Data can be deleted only from the end of a stack.\n* Only the last element of a stack can be read.	text	txt
154	1	* `push()`\n* `pop()`\n* `top()`	text	txt
155	1	It's a kind of data structure that is a set of theoretical rules that revolve around some other basic data structures.\nThe set, stack, and queue are examples of abstract data types.\nSome implementations of sets use arrays under the hood while other implementations actually use hash tables.\nThe set itself, though, is simply a theoertical concept, it's a list of non-duplicated data elements.	text	txt
156	1	* The first data added to a queue is the first item to be removed.\n* Data can be inserted only at the end of a queue, similar to stacks.\n* Data can be deleted only from the front of a queue, in opposite behavior of the stacks.\n* Only the element at the front of a queue can be read.	text	txt
157	1	* `enqueue()`\n* `dequeue()`\n* `front()`	text	txt
158	1	In recursion terminology, the case in which a function will not recurse is known as the base case.\nAll recursive functions should have at least one base case. They will keep recalling themselves infinitely otherwise.	text	txt
159	2	def factorial(number)\n    if number == 1\n        return 1\n    else\n        return number * factorial(number-1)\n    end\nend	code	txt
159	8	factorial(3) returns 6\nfactorial(2) returns 2\nfactorial(1) returns 1	text	txt
160	1	In case of infinite recursion, the same function keeps being pushed onto the call stack.\nThe call stack will eventually be consumed until further calls will not be possible.	text	txt
161	1	When a problem is solved by solving smaller version of the same problem, the smaller problem is called a *subproblem*.\nWhat makes these subproblem overlapping is the fact that each subproblem calls many of the same functions as each other.	text	txt
162	1	**Dynamic Programming** is the process of optimizing recursive problems that have overlapping subproblems.\nOptimizing an algorithm with dynamic programming is typically accomplished with one of two techniques.\nThe first technique is something called memoization which reduces recursive calls by remembering previously computed functions.\nThe second technique, known as **going bottom-up** uses iteration instead of recursion to prevent duplicate calls.	text	txt
163	1	With memoization, each time we make a new calculation, we store it in a hash table for future calls.\nThis way we only make a calculation if it hadn't ever been made before.	text	txt
164	1	By using iteration instead of recursion to ensure that it doesn't make duplicate calls for overlapping subproblems.	text	txt
165	1	To partition an array is to take a random value from the array, which is then called the pivot,\nand make sure that every number that is less than the pivot ends up to the left of the pivot,\nand that every number greater than the pivot ends up to the right of the pivot.	text	txt
166	1	0. Set the rightmost index as pivot, leftmost index as the left index and rightmost index other that pivot as right index.\n1. The left pointer continuously moves one cell to the right until it reaches a value that is greater than or equal to the pivot, and then stops.\n2. The right pointer continuously moves one cell to the left until it reaches a value that is less than or equal to the pivot, or when it reaches the beginning of the array.\n3. Once the right pointer has stopped, if the left pointer has reached or gone beyond the right pointer, we move on to step 4. Otherwise, we swap the values that the two pointers are pointing to, and then go back to repeat steps 1, 2, and 3 again.\n4. Finally, swap the pivot with the value that the left pointer is currently pointing to.	text	txt
166	2	When we are done with paritioning, we are now assured that all values to the left of the pivot are less than the pivot itself, and all values to the right of the pivot are greater than it.\nAnd that means the pivot itself is now in its correct place within the array, although the other values are not yet necessarily completely sorted.	text	txt
166	3	```\n 0  5  2  1  6  3     set the pivot, left and right pointers\n<0> 5  2  1 <6>(3)    compare the left pointer to the pivot\n<0> 5  2  1 <6>(3)    move left pointer since 0 is less than pivot 3\n 0 <5> 2  1 <6>(3)    left pointer stops, move right pointer since 6 is greater than pivot 3\n 0 <5> 2 <1> 6 (3)    both pointers stopped, swap the values of the two pointers\n 0 <1> 2 <5> 6 (3)    left pointer moves further to the next step\n 0  1 <2><5> 6 (3)    left pointer moves on since its value is less than the pivot\n 0  1  2 «5» 6 (3)    both pointers point to the same value, we are done moving pointers\n 0  1  2 «3» 6 (5)    swap the value that the left pointer is pointing to with the pivot\n 0  1  2 |3| 6  5     now 3 is in its correct location within the array\n``````	text	txt
166	4	*pseudocode in ruby*\nclass SortableArray\n    attr_reader :array	text	txt
166	5	    def initialize(array)\n        @array = array\n    end	text	txt
166	6	    def partition!(left_pointer, right_pointer)\n        pivot_index = right_pointer\n        pivot = @array[pivot_index]\n        right_pointer -= 1	text	txt
166	7	        while true\n            while @array[left_pointer] < pivot do\n                left_pointer += 1\n            end	text	txt
166	8	            while @array[right_pointer] > pivot do\n                right_pointer -= 1\n            end	text	txt
166	9	            if left_pointer >= right_pointer\n                break	text	txt
166	10	            else\n                @array[left_pointer], @array[right_pointer] = @array[right_pointer], @array[left_pointer]\n                left_pointer += 1\n            end\n        end	text	txt
166	11	        @array[left_pointer], @array[pivot_index] = @array[pivot_index], @array[left_pointer]	text	txt
166	12	        return left_pointer\n    end\nend	code	txt
166	13	*pseudocode in C++*\n#include <algorithm>\n#include <iostream>\n#include <iterator>\n#include <vector>	text	txt
166	14	class container\n{\npublic:\n\tusing iter_t = std::vector<long>::iterator;\n    using iter_const_t = std::vector<long>::const_iterator;	text	txt
166	15	    container(std::vector<long> const& init): buffer{std::move(init)} { }	text	txt
166	16	    void sort(iter_t left, iter_t right)\n    {\n        if (std::distance(right, left) >= 0)\n        {\n            iter_t pivot = partition(left, right);\n            sort(left, pivot - 1);\n            sort(pivot + 1, right);\n        }\n    }	text	txt
166	17	    void sort()\n    {\n        sort(buffer.begin(), buffer.end()-1);\n    }	text	txt
166	18	    void print() const\n    {\n        std::copy(buffer.cbegin(), buffer.cend(), std::ostream_iterator<int>(std::cout, " "));\n        std::cout << "\\\\n";\n    }	text	txt
166	19	    void print_detail(long left, long right, long pivot) const\n    {\n        for (auto e: buffer)\n        {\n            if (left == right == e)\n                std::cout << "<" << e << ">";\n            else if (e == left)\n                std::cout << "<" << e << "<";\n            else if (e == right)\n                std::cout << ">" << e << ">";\n            else if (e == pivot)\n                std::cout << "(" << e << ")";\n            else\n                std::cout << " " << e << " ";\n        }\n        std::cout << "\\\\n";\n    }	text	txt
166	20	protected:\n    iter_t partition(iter_t left, iter_t right)\n    {\n        iter_t pivot{right};\n        right--;	text	txt
166	21	        while (true)\n        {\n            while (*left < *pivot && left != pivot)\n            {\n                left++;\n            }	text	txt
166	22	            while (*right > *pivot && right != buffer.cbegin())\n            {\n                right--;\n            }	text	txt
166	23	            if (std::distance(right, left) >= 0)\n            {\n                break;\n            }\n            else\n            {\n                long temp{*left};\n                *left = *right;\n                *right = temp;\n                left++;\n            }\n        }	text	txt
166	24	        long temp{*left};\n        *left = *pivot;\n        *pivot = temp;\n        return left;\n    }	text	txt
166	25	private:\n    std::vector<long> buffer;\n};	text	txt
166	26	int main()\n{\n    container container{{6,3,1,4,2,5}};\n    container.print();\n    container.sort();\n    container.print();\n}	code	txt
603	14	exit(0);\n}	text	txt
167	1	1. Partition the array. The pivot is not in its proper place.\n2. Treat the subarrays to the left and right of the pivot as their own arrays, and recursively repeat step 1 and 2.\n3. When we have a subarray that has zero or one elements, that is our base case and we do nothing.	text	txt
167	2	void quicksort(int* left_index, int* right_index)\n{\n    if (right_index - left_index > 0)\n    {\n        int* pivot_index = partition(left_index, right_index);\n        quicksort(left_index, pivot_index - 1);\n        quicksort(pivot_index + 1, right_index);\n    }\n}	code	txt
168	1	To figure out the efficiency of Quicksort, first determine the efficiency of a single partition.	text	txt
168	2	A partition involves two primary types of steps: *comparison*, and *swaps*.\nEach partition has at least `N` comparisons, we compare each element of the array with the pivot.\nThe number of swaps, however, will depend upon how the data is sorted.\nA single partition can have, at most, `N / 2` swaps,\nBut, on average, we make about `N` comparisons and `N / 4` swaps.\nIn Big O Notation, we’d say that a partition runs in `O(N)` time.	text	txt
168	3	Now, that’s the efficiency of a single partition, but **Quicksort** involves many partitions.\nSince **Quicksort** is essentially comprised of this series of partitions, and each partition takes about `N` steps for `N` elements of each subarray.	text	txt
168	4	The number of Quicksort steps for `N` elements in the array is about `N` multiplied by `log N`.\nEach time we partition the array, we end up breaking it down into two subarrays.\nAssuming the *pivot* ends up somewhere in the middle of the array — which is what happens in the average case — these two subarrays are of roughly equal sizes.\nHow many times can we break an array into halves until we’ve broken it completely down to the point of where each subarray is of size `1`?\nFor an array of size `N`, this will take us `log N` times.	text	txt
168	5	```\n|¹ |² |³ |⁴ |⁵ |⁶ |⁷ |⁸ |     1st halving	text	txt
168	6	|¹ |² |³ |⁴ |      |⁵ |⁶ |⁷ |⁸ |  2nd halving	text	txt
168	7	|¹ |² |     |³ |⁴ |      |⁵ |⁶ |     |⁷ |⁸ |  3nd halving	text	txt
168	8	|¹ |     |² |     |³ |     |⁴ |      |⁵ |     |⁶ |     |⁷ |     |⁸ |\n``````\nAs you can see, for an array of size 8, it takes us three “halvings” until we’ve reduced the array into eight individual elements.\nThis is `log N`, and fits with our definition of `log N` as being the number of times it takes to halve something until we reach `1`.	text	txt
168	9	For many other algorithms we’ve encountered, the best case was one where the array was already sorted.\nWhen it comes to **Quicksort**, however, the best-case scenario is one in which the pivot always ends up smack in the middle of the subarray after the partition.\nInterestingly, this generally occurs when the values in the array are mixed up pretty well.	text	txt
168	10	The worst-case scenario for **Quicksort** is one in which the pivot always ends up on one side of the subarray instead of in the middle.\nThis can happen where the array is in perfect ascending or descending order.\nSo, in worst-case scenario, we’d say that for `N` elements, there are `N + (N - 1) + (N - 2) + (N - 3) … + 1` steps.\nSo, in a worst-case scenario, Quicksort has an efficiency of O(N2).	text	txt
169	1	| Algorithm | Best Case | Average Case | Worst Case |\n|---|---|---|---|\n| Insertion Sort | `O(N)` | `O(N)` | `O(N)` |\n| Quick Sort | `O(N log N)` | `O(N log N)` | `O(N)` |	text	txt
169	2	The reason **Quicksort** is superior to **Insertion Sort** is because of the average scenario which is what happens most of the time.	text	txt
170	1	One of the beautiful things about **Quickselect** is that we can find the correct value without having to sort the entire array.	text	txt
170	2	Let’s say you have an array in random order, and you do not need to sort it, but you do want to know the *tenth-lowest* value in the array, or the *fifth-highest*.\nThis can be useful if we had a lot of test grades and want to know what the *25th percentile* was, or if we want to find the *median grade*.	text	txt
170	3	One way to solve this would be to sort the entire array and then jump to the appropriate index.	text	txt
170	4	However, even were we to use a fast sorting algorithm like **Quicksort**, this algorithm would take at least `O(N log N)` for average cases.\nAnd while that isn’t bad, we can do even better with a brilliant little algorithm known as **Quickselect**.	text	txt
170	5	Like **Quicksort**, **Quickselect** relies on partitioning, and can be thought of as a hybrid of **Quicksort** and binary search.	text	txt
170	6	After a partition, the *pivot* value ends up in the appropriate spot in the array.\n**Quickselect** takes advantage of this in the following way:	text	txt
170	7	Let’s say we have an array of eight values, and we want to find the second-to-lowest value within the array.\nFirst, we partition the entire array.\nAfter the partition, the *pivot* will hopefully end up somewhere toward the middle of the array.\nThis pivot is now in its correct spot.\nFor example, since it’s in the fifth cell, we now know which value is the *fifth-lowest* value within the array.\nWe know that the *second-lowest* value is somewhere to the left of the *pivot*.\nWe can now ignore everything to the right of the *pivot* and focus on the left subarray.\nIt is in this respect that **Quickselect** is similar to binary search.	text	txt
170	8	With **Quicksort**, each time we halved the array, we needed to re-partition every single element again, giving us `O(N log N)`.\nWith **Quickselect**, on the other hand, each time we cut the array in half, we only had to partition the one half we cared about.	text	txt
170	9	When analyzing the efficiency of **Quickselect**, we’ll see that it’s `O(N)` for average scenarios.	text	txt
170	10	*pseudocode in ruby*\ndef quickselect!(kth_lowest_value, left_index, right_index)	text	txt
170	11	    # We reached the best-case, sub-array has one cell.\n    if right_index - left_index <= 0\n        return @array[left_index]\n    end	text	txt
170	12	    pivot_index = partition!(left_index, right_index)	text	txt
170	13	    if kth_lowest_value < pivot_index\n        quickselect!(kth_lowest_value, left_index, pivot_index - 1)\n    elsif kth_lowest_value > pivot_index\n        quickselect!(kth_lowest_value, pivot_index + 1, right_index)\n    else\n        return @array[pivot_index]\n    end\nend	code	txt
170	14	*pseudocode in C++*	code	txt
171	1	A linked list is a data structure that represents a list of connected data dispersed throughout memory known as *nodes*.	text	txt
172	1	Each node comes with memory address of its next node in the list.	text	txt
172	2	#include <memory>	text	txt
172	3	template<typename T>\nstruct Node\n{\n    T data;\n    std::shared_ptr<Node> next;	text	txt
172	4	    explicit Node(T const& data): data{data}, next{} { }\n};	text	txt
603	17	errno = 0;	text	txt
172	5	int main()\n{\n    auto node1 = std::make_shared<Node>{"once"};\n    auto node2 = std::make_shared<Node>{"upon"};\n    auto node3 = std::make_shared<Node>{"a"};\n    auto node4 = std::make_shared<Node>{"time"};	text	txt
172	6	    node1->next = node2;\n    node2->next = node3;\n    node3->next = node4;\n}	code	txt
172	7	```\n["once"|1001] -> ["upon"|1002] -> ["a"|1003] -> ["time"|1004]\n``````	text	txt
173	1	A linked list class keeps track of its first node of the list.	text	txt
173	2	#include <memory>	text	txt
173	3	template<typename T>\nstruct Node\n{\n    T data;\n    std::shared_ptr<Node> next;	text	txt
173	4	    explicit Node(T const& data): data{data}, next{} { }\n};	text	txt
173	5	template<typename T>\nclass LinkedList\n{\n    std::shared_ptr<Node<T>> first_node;	text	txt
173	6	public:\n    explicit LinkedList(std::shared_ptr<Node<T>> root): first_node{root} { }\n};	text	txt
173	7	int main()\n{\n    auto node1 = std::make_shared<Node>{"once"};\n    auto node2 = std::make_shared<Node>{"upon"};\n    auto node3 = std::make_shared<Node>{"a"};\n    auto node4 = std::make_shared<Node>{"time"};	text	txt
173	8	    node1->next = node2;\n    node2->next = node3;\n    node3->next = node4;	text	txt
173	9	    LinkedList sentence(node1);\n}	code	txt
174	1	**Reading**\nLinked lists having a worst-case read of `O(N)` is a major disadvantage when compared with arrays that can read any element in just `O(1)`.	text	txt
174	2	template<typename T>\nclass LinkedList\n{\n    std::shared_ptr<Node<T>> first_node;	text	txt
174	3	public:\n    explicit LinkedList(std::shared_ptr<Node<T>> root): first_node{root};	text	txt
174	4	    T read(int index)\n    {\n        std::shared_ptr<Node> current_node{first_node};\n        int current_index{};	text	txt
174	5	        while (current_index < index)\n        {\n            current_node.reset(current_node.next);\n            current_index++;	text	txt
174	6	            if (current_node == nullptr)\n                return nullptr;\n        }	text	txt
174	7	        return current_node.data;\n    }\n};	code	txt
174	8	**Searching**\nSearching means looking for a value within the list and returning its index.\nSearching an array has a speed of `O(N)`, since the computer needs to inspect each value one at a time.\nLinked lists also have a search speed of `O(N)` as we need to go through a similar process as we did with reading.	text	txt
174	9	template<typename T>\nclass LinkedList\n{\n    std::shared_ptr<Node<T>> first_node;	text	txt
174	10	public:\n    explicit LinkedList(std::shared_ptr<Node<T>> root): first_node{root};	text	txt
174	11	    T read(int index);	text	txt
174	12	    int index_of(int index)\n    {\n        std::shared_ptr<Node> current_node{first_node};\n        int current_index{};	text	txt
174	13	        while (current_index < index)\n        {\n            if (current_node.data == value)\n                return current_index;	text	txt
174	14	            current_node.reset(current_node.next);\n            current_index++;\n        }	text	txt
174	15	        return -1;\n    }\n};	code	txt
174	16	**Insertion**\nWorst-case scenario for insertion into an array is `O(N)`.\nWith linked lists, however, insertion at the beginning of the list takes just one step, which is `O(1)`.\nPractically speaking inserting into a linked list is `O(N)`, as the worst-case scenario of inserting at the end of the list will take N+1 steps.	text	txt
174	17	Analysis shows that the best- and worst-case scenarios for arrays and linked lists are the opposite of one another.	text	txt
174	18	* Insert at beginning: array (worst case), linked list (best case)\n* Insert at middle: array (average case), linked list (average case)\n* Insert at end: array (best case), linked list (worst case)	text	txt
174	19	template<typename T>\nclass LinkedList\n{\n    std::shared_ptr<Node<T>> first_node;	text	txt
174	20	public:\n    explicit LinkedList(std::shared_ptr<Node<T>> root): first_node{root} { }	text	txt
174	21	    T read(int index);	text	txt
174	22	    int index_of(int index);	text	txt
174	23	    void insert_at_index(int index, T value)\n    {\n        auto new_node{std::make_shared<Node>(value)};	text	txt
174	24	        if (index == 0)\n        {\n            new_node.next = first_node;\n            first_node = new_node;\n            return;\n        }	text	txt
174	25	        std::shared_ptr<Node> current_node{first_node};\n        int current_index{};	text	txt
174	26	        while (current_index < (index-1))\n        {\n            current_node.reset(current_node.next);\n            current_index++;\n        }	text	txt
174	27	        new_node.next = current_node.next;\n        current_node.next = new_node;\n    }\n};	code	txt
174	28	**Deletion**\nTo delete a node from the beginning of a linked list, all we need to do is change the first node of the linked list to now point to the node after that.\nWhen it comes to deleeting the final node of a linked list, the actual deletion takes one step, however, it takes N steps to access the second-to-last node in first place.	text	txt
174	29	* Delete at beginning: array (worst case), linked list (best case)\n* Delete at middle: array (average case), linked list (average case)\n* Delete at end: array (best case), linked list (worst case)	text	txt
174	30	template<typename T>\nclass LinkedList\n{\n    std::shared_ptr<Node<T>> first_node;	text	txt
174	31	public:\n    explicit LinkedList(std::shared_ptr<Node<T>> root): first_node{root} { }	text	txt
174	32	    T read(int index);	text	txt
174	33	    int index_of(int index);	text	txt
174	34	    void insert_at_index(int index, T value);	text	txt
174	35	    void delete_at_index(int index)\n    {\n        if (index == 0)\n        {\n            first_node = first_nodex.next;\n            return;\n        }	text	txt
174	36	        std::shared_ptr<Node> current_node{first_node};\n        int current_index{};	text	txt
174	37	        while (current_index < (index-1))\n        {\n            current_node.reset(current_node.next);\n            current_index++;\n        }	text	txt
174	38	        std::shared_ptr<Node> node_after_deleted_node{current_node.next.next};\n        current_node.reset(node_after_deleted_node);\n    }\n};	code	txt
174	39	* Read: array O(1), linked list O(N)\n* Search: array O(N), linked list O(N)\n* Insert: array O(N) (O(1) at end), linked list O(N) (O(1) at end)\n* Delete: array O(N) (O(N) at beginning), linked list O(N) (O(1) at end)	text	txt
199	1	#include <iostream>\n#include <iterator>	text	txt
175	1	A doubly linked list is like a list except that each node has two links, one that points to the next node, and another that points to the previous node.\nIn addition, the doubly linked list always keeps track of both the first and last node.	text	txt
175	2	#include <memory>	text	txt
175	3	template<typename T>\nstruct Node\n{\n    T data;\n    std::shared_ptr<Node> next;\n    std::shared_ptr<Node> previous;	text	txt
175	4	    explicit Node(T const& data): data{data}, next{} { }\n};	text	txt
175	5	class DoublyLinkedList\n{\n    std::shared_ptr<Node> first_node;\n    std::shared_ptr<Node> last_node;\n};	code	txt
175	6	Now we can insert and delete from the end of the list in `O(1)` as well.	text	txt
175	7	#include <memory>	text	txt
175	8	class DoublyLinkedList\n{\n    std::shared_ptr<Node> first_node;\n    std::shared_ptr<Node> last_node;	text	txt
175	9	public:\n    void insert_at_end(T value)\n    {\n        auto new_node{std::make_shared<Node>(value)};	text	txt
175	10	        if (first_node)\n        {\n            new_node.previous.reset(last_node);\n            last_node.next.reset(new_node);\n            last_node.reset(new_node);\n        }\n        else\n        {\n            first_node.reset(new_node);\n            last_node.reset(new_node);\n        }\n    }	text	txt
175	11	    std::shared_ptr<Node<T>> remove_from_front()\n    {\n        std::shared_ptr<Node> removed_node{first_node};\n        first_node.reset(first_node.next);\n        return removed_node;\n    }\n};	code	txt
176	1	Because doubly linked lists have immediate access to both the front and end of the list, they can insert or delete on either side at `O(1)`.\nBecause doubly linked lists can insert data at the end in `O(1)` and delete data from the front in `O(1)` time, they make perfect underlying data structure for a queue.	text	txt
176	2	template<typename T>\nclass Queue\n{\n    DoublyLinkedList<T> data;	text	txt
176	3	public:\n    void enqueue(T value)\n    {\n        data.insert_at_end(value);\n    }	text	txt
176	4	    void dequeue()\n    {\n        std::shared_ptr<Node> removed_node{data.remove_from_front()};\n        return removed_node.value;\n    }	text	txt
176	5	    T read()\n    {\n        if (data.first_node)\n            return data.first_node.data;\n        else\n            return T{};\n    }\n};	code	txt
177	1	A tree is a node-based data structure, but within a tree, each node can have links to multiple nodes.	text	txt
178	1	* The upper most node is called **root**.\n* Node below the root are children to root.\n* The root is parent to second level nodes.\n* The last level of the tree is called the depth of the tree.\n* One property of a tree is how balanced it is. A tree is balanced when its nodes' subtrees have the same number of nodes in it.	text	txt
179	1	A binary tree is a tree in which each node has zero, one, or two children.\nA binary search tree is a binary tree that also abides by the following rules:	text	txt
179	2	1. Each node can have at most one left child and one right child.\n2. A node's left descendants can only contain values that are less than the node itself. Likewise, a node's right descendants can only contain values that are greater that the node itself.	text	txt
179	3	template<typename T>\nstruct TreeNode\n{\n    T value;\n    std::shared_ptr<TreeNode> left;\n    std::shared_ptr<TreeNode> right;	text	txt
179	4	public:\n    explicit TreeNode(T value, std::shared_ptr<Node> left = nullptr, std::shared_ptr<node> right = nullptr): left{left}, right{right} { }\n};	text	txt
179	5	int main()\n{\n    auto node1 = std::make_shared<TreeNode>(25);\n    auto node2 = std::make_shared<TreeNode>(75);\n    auto root = std::make_shared<TreeNode>(50, node1, node2);\n}	code	txt
180	1	1. Designate a node to be the current node, aka. the root node.\n2. Inspect the value at the current node.\n3. If we have found the value we are looking for, stop.\n4. If the value we are looking for is less than the current node, search for it in its left subtree.\n5. If the value we are looking for is greater than the current node, search for it in its right subtree.\n6. Repeat steps 1 through 5 until we find the value we are searching for, or until we hit the bottom of the tree, in which case our value must not be in the tree.	text	txt
180	2	Searching a binary search tree takes `O(long N)`.	text	txt
180	3	std::shared_ptr<TreeNode> search(T value, std::shared_ptr<TreeNode> node)\n{\n    if (node == nullptr || node->value == value)\n        return node;\n    else if (value < node->value)\n        return search(value, node->left);\n    else\n        return search(value, node->right);\n}	code	txt
181	1	First, we have to find the correct node to attach the new value.\nInsertion takes `O(log N)`.	text	txt
181	2	def insert(value, node)\n    if value < node.value\n        if node.left == nil\n            node.left = TreeNode{value}\n        else\n            insert(value, node.left)\n    elif value > node.value\n        if node.right == nill\n            node.right = Node{value}\n        else\n            insert(value, node.right)	code	txt
182	1	* If the node being deleted has no children, simply delete it.\n* If the node being deleted has one child, delete the node and plug the child into the spot where the deleted node was.\n* When deleting a node with two children, replace the deleted node with the successor node. The successor node is the child node whose value is the least of all values that are greater than the deleted node.	text	txt
183	1	Visit the right child of the deleted value and then keep on visiting the left child of each subsequent child until there are no more left children.\nThe bottom value is the successor node.	text	txt
183	2	```\n          50\n         / \\\\\n        /   \\\\\n       /     \\\\\n      /       \\\\\n     /         \\\\\n    25         75\n   / \\\\        /  \\\\\n  11 33      61  89\n     / \\\\    /    / \\\\\n    30 40 (52)  82 95\n``````	text	txt
183	3	If the successor node has a right child, after plugging the successor node into the spot of the deleted node,\ntake the former right child of the successor node and turn it into the left child of the former parent of the successor node.	text	txt
183	4	```\n          X\n         / \\\\\n        /   \\\\\n       /     \\\\\n      /       \\\\\n     /         \\\\\n    25         75\n   / \\\\        /  \\\\\n  11 33      61  89\n     / \\\\    /    / \\\\\n    30 40 (52)  82 95\n            \\\\\n            55	text	txt
183	5	          52\n         / \\\\\n        /   \\\\\n       /     \\\\\n      /       \\\\\n     /         \\\\\n    25         75\n   / \\\\        /  \\\\\n  11 33      61  89\n     / \\\\    /    / \\\\\n    30 40  55   82 95\n``````	text	txt
198	2	- `std::istream_iterator`\n- `std::ostream_iterator`\n- `std::istreambuf_iterator`\n- `std::ostreambuf_iterator`	text	txt
208	1	Standard Library containers use value semantics on elements. Thus, when you\nwrite classes that you intend to use with the Standard Library, you need to\nmake sure they are copyable.	text	txt
183	6	def delete(valueToDelete, node):\n    if node is None:\n        return None\n    elif valueToDelete < node.value:\n        node.leftChild = delete(valueToDelete, node.leftChild)\n        return node\n    elif valueToDelete > node.value:\n        node.rightChild = delete(valueToDelete, node.rightChild)\n        return node\n    elif valueToDelete == node.value:\n        if node.leftChild is None:\n            return node.rightChild\n        elif node.rightChild is None:\n            return node.leftChild\n        else:\n            node.rightChild = lift(node.rightChild, node)\n            return node	text	txt
183	7	def lift(node, nodeToDelete):\n    if node.leftChild:\n        node.leftChild = lift(node.leftChild, nodeToDelete)\n        return node\n    else:\n        nodeToDelete.value = node.value\n        return node.rightChild	code	txt
184	1	1. Call itself recursively on the node's left child. The function will keep getting called until we hit a node that does not have a left child.\n2. Visit a node.\n3. Call itself recursively on the node's right child. The function will keep getting called until we hit a node that does not have a right child.	text	txt
184	2	def traverse_and_print(node):\n    if node is None:\n        return	text	txt
184	3	    traverse_and_print(node.left)\n    print(node.value)\n    traverse_and_print(node.right)	code	txt
185	1	A priority queue is a list whose deletions and access are just like a classic queue, but insertions are like an ordered array.	text	txt
186	1	Array-based priority queues have deletions that are `O(1)` and insertions that are `O(N)`.\nThe `O(N)` insertions may cause some real unwanted drags to applications.\nHeap data structures serve as a more efficient foundation for the priority queue.	text	txt
187	1	The binary heap is a specific kind of binary tree.\nThe binary heaps come in two flavors: the binary max-heap, and the binary min-heap.	text	txt
188	1	* The value of each node must be greater than each of its descendant nodes. This rule is known as the heap condition.\n* The tree must be complete.	text	txt
189	1	The heap requires that each nodes' value must be greater than each and every descendants.	text	txt
189	2	```\n     100\n    /   \\\\\n   /     \\\\\n  88     25\n / \\\\     / \\\\\n87 16   8  12\n``````	text	txt
189	3	The following tree isn't a valid heap, because it doesn't meet the heap condition.	text	txt
189	4	```\n     100\n    /   \\\\\n   /     \\\\\n  88     25\n / \\\\     / \\\\\n87 (92) 8  12\n``````	text	txt
190	1	A complete tree is a tree that is completely filled with nodes.\nSo if you read each level of the tree from left to right, all the nodes are there.\nHowever, the bottom row can have empty positions, as long as aren't any nodes to the right of these empty positions.	text	txt
190	2	```\n          100\n         /   \\\\\n        /     \\\\\n       /       \\\\\n      /         \\\\\n     88         25\n    /  \\\\        / \\\\\n   /    \\\\      /   \\\\\n  87    16    8    12\n / \\\\   / \\\\   / \\\\\n86 50 2  15 3  (X)\n``````	text	txt
191	1	|Iterator Category|Operations Required|\n|---|---|\n|Input Iterator|Read-only access: `operator*` `operator->`<br>forward only: `operator++`<br>assignable: `operator=`<br>copyable<br>comparable for equality: `operator==` `operator!=`|\n|Output Iterator|Read-only access: `operator*` (no `operator->` access)<br>forward only: `operator++`<br>assignable: `operator=`<br>copyable<br>no comparability supported|\n|Forward Iterator|Input Iterator capability<br>default constructor|\n|Bidirectional Iterator|Forward Iterator capability<br>bidirectional `operator++` `operator--`|\n|Random Access Iterator|Bidirectional Iterator capability<br>assignable: `operator=` `operator+=` `operator-=`<br>arithmetic: `operator+` `operator-`<br>copyable<br>comparable `operator==` `operator!=` `operator>` `operator<` `operator<=` `operator>=`<br>element-wise access `operator[]`|\n|Contiguous Iterator|Random access capability<br>logically adjacent elements of the container must be physically adjacent in memory|	text	txt
192	1	Every data structure of the Standard Library that supports iterators provides\npublic type aliases for its iterator type, called `iterator` and\n`const_iterator`.	text	txt
192	2	Containers that allow iteration over their elements in reverse order also\nprovide public type aliases called `reverse_iterator` and\n`const_reverse_iterator`.	text	txt
192	3	std::vector<int>::const_reverse_iterator cr_iter;\nstd::vector<std::string>::const_iterator c_iter;\nstd::vector<double>::iterator iter;	code	txt
193	1	`<iterator>` provides the following global nonmember functions to retrieve\nspecific iterators for a container:	text	txt
193	2	- `std::begin()` and `std::end()`\n- `std::rbegin()` and `std::rend()`\n- `std::cbegin()` and `std::cend()`\n- `std::crbegin()` and `std::crend()`	text	txt
193	3	These functions are also supported by standard data structures.	text	txt
194	1	When a function is called without its namespace qualification like `std::` ,\nit is said that the so called *argument dependent lookups* (ADL) is supported\nfor this function.	text	txt
194	2	#include <iterator>\n#include <vector>	text	txt
194	3	std::vector<double> scalar{1,2,3,4};\nauto iter = begin(scalar);\n// compiler deduces std::vector<double>::iterator due argument type	code	txt
195	1	When you specialize a nonmember function for your own type, you can either\nput those specializations in the `std` namespace or put them in the same\nnamespace as the type for which you are specializing them. The latter is\nrecommended as this enables ADL.	text	txt
195	2		code	txt
196	1	#include <iterator>	text	txt
196	2	std::vector<double> v;\nauto element_count = std::distance(std::begin(v), std::end(v));	code	txt
197	1	Standard provides a class template called `iterator_traits`, defined in\n`<iterator>`, that allows you to find the type of the elements referred to by\nthe iterator to store temporary values, or to figure out whether the iterator\nis bidirectional or random access.	text	txt
197	2	To access to this information, instantiate `iterator_traits` class template\nwith the iterator type of interest, and access one of five type aliases:	text	txt
197	3	- `value_type`: The type of elements referred to\n- `difference_type`: A type capable of representing the distance\n- `iterator_category` (c++20): The type of iterator\n  + `input_iterator_tag`\n  + `output_iterator_tag`\n  + `forward_iterator_tag`\n  + `bidirectional_iterator_tag`\n  + `random_access_iterator_tag`\n  + `contiguous_iterator_tag`\n- `pointer`: The type of pointer to an element\n- `reference`: The type of reference to an element	text	txt
197	4	template<typename IteratorType>\nvoid print_value(IteratorType it)\n{\n    typename iterator_traits<IteratorType>::value_type temp;\n    temp = *it;\n    std::cout << temp << std::endl;\n}	text	txt
197	5	std::vector<double> v{42};\nprint_value(std::cbegin(v));	code	txt
198	1	The standard library provides four stream iterators:	text	txt
199	2	template<typename InputIterator, typename OutputIterator>\nvoid copy(InputIterator begin, InputIterator end, OutputIterator target)\n{\n    for (auto iter = begin; iter != end; ++iter, ++target)\n    {\n        *target = *iter;\n    }\n}	text	txt
199	3	std::vector<double> v{1,2,3,4};\nstd::vector<double> copy(v.size());\ncopy(std::begin(v), std::end(v), std::begin(copy));\ncopy(std::begin(v), std::end(v), std::ostream_iterator<int>{std::cout, " "});	code	txt
200	1	#include <iterator>\n#include <vector>	text	txt
200	2	template<typename InputIterator>\nauto get_input(InputIterator begin, InputIterator end)\n{\n    std::vector<namespace std::iterator_traits<InputIterator>::value_type> results;	text	txt
200	3	    for (auto iter = begin; iter != end; ++iter)\n    {\n        results.push_back(*iter);\n    }	text	txt
200	4	    return results;\n}	text	txt
200	5	std::vector<int> inputs = get_input(std::istream_iterator<int>{std::cin}, std::istream_iterator<int>{});	code	txt
201	1	The standard library provides five iterator adapters.	text	txt
201	2	The first group of adapters are created from a container and are usually used\nas output iterators:	text	txt
201	3	- `std::back_insert_iterator`: Uses `push_back()` to insert elements into a\n  container\n- `std::front_insert_iterator`: Uses `push_front()` to insert elements into a\n  container\n- `std::insert_iterator`: Uses `insert()` to insert elements into a container	text	txt
201	4	The second group of adapters are created from another iterator, not a\ncontainer, and are usually used as input iterators:	text	txt
201	5	- `reverse_iterator`: reverse the iteration order of another iterator\n- `move_iterator`: the dereferencing operator for a `move_iterator`\n  automatically converts the value to an rvalue reference, so it can be moved\n  to a new destination.	text	txt
202	1	#include <iterator>\n#include <algorithm>\n#include <vector>	text	txt
202	2	std::vector<double> v{1.1, 2.2, 3.3, 4.4, 5.5};\nstd::vector<double> copy_v;\nstd::back_insert_iterator<std::vector<double>> populate_v{copy_v};\nstd::copy(std::begin(v), std::end(v), populate_v);	code	txt
202	3	You can also use `std::back_inserter()` utility function to create a `std::back_insert_iterator`.	text	txt
202	4	std::copy(std::begin(v), std::end(v), std::back_inserter(copy_v));	code	txt
202	5	With class template argument deduction (CTAD), this can also be written as follows:	text	txt
202	6	std::copy(std::begin(v), std::end(v), std::back_insert_iterator{copy_v});	code	txt
203	1	#include <iterator>\n#include <algorithm>\n#include <queue>	text	txt
203	2	std::queue<double> q{1.1, 2.2, 3.3, 4.4, 5.5};\nstd::queue<double> copy_q;\nstd::front_insert_iterator<std::queue<double>> populate_q{copy_q};\nstd::copy(std::begin(q), std::end(q), populate_q);	code	txt
203	3	You can also use `std::front_inserter()` utility function to create a `std::front_insert_iterator`.	text	txt
203	4	std::copy(std::begin(q), std::end(q), std::front_inserter(copy_q));	code	txt
203	5	With class template argument deduction (CTAD), this can also be written as follows:	text	txt
203	6	std::copy(std::begin(q), std::end(q), std::front_insert_iterator{copy_q});	code	txt
204	1	`std::insert_iterator` works similarly, except that the it also takes an\ninitial iterator position in its constructor, which it passes to the first\ncall to `std::insert(position, element)`.	text	txt
204	2	#include <iterator>\n#include <algorithm>\n#include <set>	text	txt
204	3	std::set<double> s{1.1, 2.2, 3.3, 4.4, 5.5};\nstd::set<double> copy_s;\nstd::insert_iterator<std::set<double>> populate_s{copy_s, std::begin(copy_s)};\nstd::copy(std::begin(s), std::end(s), populate_s);	code	txt
204	4	The `std::insert_iterator` modifies the iterator hint that it passes to\n`insert()` after each call to `insert()`, such that the position is one past\nthe just inserted element.	text	txt
204	5	You can also use `std::inserter()` utility function to create a\n`std::insert_iterator`.	text	txt
204	6	std::copy(std::begin(s), std::end(s), std::inserter(copy_s, std::begin(copy_s)));	code	txt
204	7	With class template argument deduction (CTAD), this can also be written as\nfollows:	text	txt
204	8	std::copy(std::begin(s), std::end(s), std::insert_iterator{copy_s, std::begin(copy_s)});	code	txt
205	1	The standard library provides an `std::reverse_iterator` class template that\niterates through bidirectional or random-access iterator in a reverse\ndirection.	text	txt
205	2	An `std::reverse_iterator` is useful mostly with algorithms in the standard\nlibrary or your own functions that have no equivalents that work in reverse\norder.	text	txt
205	3		code	txt
206	1	You can always obtain the underlying `std::iterator` from a\n`std::reverse_iterator` by calling its `base()` method. However, because of\nhow `std::reverse_iterator` is implemented, the `std::iterator` returned from\n`base()` always refers to one element past the element referred to by the\n`std::reverse_iterator` on which it's called. To get to the same element, you\nmust subtract one.	text	txt
206	2	#include <vector>\n#include <iterator>\n#include <algorithm>	text	txt
206	3	std::vector<int> v{11, 22, 33, 22, 11};\nstd::vector<int>::iterator iter1{ std::find(std::begin(v), std::end(v), 22) };\nstd::vector<int>::reverse_iterator iter2{ std::find(std::rbegin(v), std::rend(v), 22) };	text	txt
206	4	if (iter1 != std::end(v) && iter2 != std::rend(v))\n{\n    auto first{ std::distance(std::begin(v), iter1);\n    auto second{ std::distance(std::begin(v), --iter2.base());\n}	code	txt
207	1	The standard library provides an iterator adapter called\n`std::move_iterator`. The dereferencing operator of a `std::move_iterator`\nautomatically converts the value to an rvalue reference, which means that the\nvalue can be moved to a new destination without the overhead of copying.	text	txt
207	2	MovableType m;	text	txt
207	3	std::vector<MovableType> source;\nsource.push_back(m);\nsource.push_back(m);	text	txt
207	4	std::vector<MovableType> copies{std::begin(source), std::end(source)};	code	txt
207	5	By using `std::make_move_iterator()` to create `std::move_iterator`, the move constructor of `MovableType` is called instead of the copy constructors:	text	txt
207	6	std::vector<MovableType> steals{std::make_move_iterator(source), std::make_move_iterator(source)};	code	txt
207	7	Class template argument deduction (CTAD) with `std::move_iterator` can also be used:	text	txt
207	8	std::vector<MovableType> steals{std::move_iterator{std::begin(source)}, std::move_iterator{std::end(source)}};	code	txt
208	2	If you prefer reference semantics, you can store pointers to elements instead\nof the elements themselves. To do so, store `std::reference_wrappers` in the\ncontainer. A `std::reference_wrapper` basically exists to make references\ncopyable and can be created using the std::ref() and cref() helper functions,\nall defined in `<functional>` header.	text	txt
209	1	One of the template type parameters for Standard Library containers is an\nallocator. The container uses this allocator to allocate and deallocate\nmemory for elements.	text	txt
209	2	template<typename T, typename Allocator = std::allocator<T>> class vector;	code	txt
209	3	Some containers, such as a map, additionally accept a comparator as one of\nthe template type parameters. This comparator is used to order elements. This\ndefault is to compare elements using `operator<`.	text	txt
209	4	template<typename Key, typename T, typename Compare = std::less<Key>,\n    typename Allocator = std::allocator<std::pair<const Key, T>>> class map;	code	txt
210	1	- Default Constructor\n- Copy Constructor\n- Move Constructor\n- Copy Assignment Operator\n- Move Assignment Operator\n- Destructor\n- `operator==`\n- `operator<`\n- `operator>,<=,>=,!=`	text	txt
211	1	Following containers are sequential containers because they store a sequence of elements:	text	txt
211	2	- `std::vector`\n- `std::deque`\n- `std::list`\n- `std::forward_list`\n- `std::array`	text	txt
212	1	In a vector the elements are stored in contiguous memory. You can index into\na vector, as well as add new elements to the back or insert them anywhere.	text	txt
212	2	Vector is a class template with two type parameters, the element type and an\nallocator type.	text	txt
212	3	template <typename T, typename Allocator = allocator<T>> class vector;	code	txt
213	1	- **Atomicity**: Complex database operations is proccessed as a single\n  instruction.\n- **Consistency**: Data within the database will not be corrupted due to\n  partially performed operations.\n- **Isolation**: Allows database to handle concurrency, without interleaved\n  changes.\n- **Durability**: Database engine is supposed to protect the data it\n  contains, even in the case of software and hardware failures.	text	txt
214	1	PostgreSQL stores its data on storage system in binary format and this format\ncould possibly change between major versions.	text	txt
215	1	PostgreSQL provides support and upgrades for 5 years after a new release is\nissued; after this length of time, a major release will reach its end of life\n(EOL) and PostgreSQL developers will no longer maintain it.	text	txt
216	1	A PostgreSQL instance is called a cluster because a single instance can serve\nand handle multiple databases.	text	txt
217	1	A database can be organized into namespaces, called schemas. Schemas cannot\nbe nested, so they represent a flat namespace.	text	txt
218	1	Database objects are represented by everything the user can create and manage\nwithin the database; for instance, tables, functions, triggers, and data\ntypes.	text	txt
219	1	Every object belongs to one and only one schema that, if not specified, is\nthe default public schema.	text	txt
220	1	Users are defined at a cluster-wide level, which means they are not tied to a\nparticular database in the cluster.	text	txt
221	1	PostgreSQL has two user categories: normal users who can connect to and\nhandle databases and objects, and superusers who can do anything with any\ndatabase object.	text	txt
222	1	PostgreSQL allows the configuration of as many superusers as you need, and\nevery superuser has the very same permissions.	text	txt
223	1	PostgreSQL internal data, such as users, databases, namespaces,\nconfiguration, and database runtime status, is provided by means of catalogs,\nwhich are special tables that present information in a SQL-interactive way.	text	txt
224	1	PostgreSQL stores all of its content in a single filesystem directory known\nas `PGDATA`.	text	txt
225	1	The `PGDATA` directory represents what the cluster is serving as databases, and\nit consists of at least the write-ahead logs (WALs) and the data storage.	text	txt
226	1	It is possible to have a single installation of PostgreSQL and make it switch\nto different `PGDATA` directories to deliver different content.	text	txt
227	1	The `PGDATA` directory needs to be initialized by creation of the directory\nstructure within it before it can be used by PostgreSQL.	text	txt
228	1	The first single process of PostgreSQL is **postmaster** which waits for incoming\nclient connections.	text	txt
229	1	The postmaster process forks backend processes which each of them serve one\nand only one connection.	text	txt
230	1	First build the project:	text	txt
230	2	git clone https://github.com - https://github.com/postgresql/postgresql\ncd postgresql\ngit checkout <latest>\n./configure --prefix=$HOME/.local\nmake\nmake install	code	txt
230	3	Create postgres user and initialize database:	text	txt
230	4	sudo useradd postgres\nsudo mkdir /opt/postgres\nsudo chown postgres:postgres /opt/postgres\ninitdb -D /opt/postgresql	code	txt
231	1	./configure --prefix=$HOME/.local --with-systemd	code	txt
232	1	git clone https://github.com - https://github.com/theory/pgenv\ncp pgenv/bin/pgenv ~/.local/bin/\npgenv available\npgenv build <version>	code	txt
233	1	psql -U postgres -h localhost template1	code	txt
234	1	target_link_libraries(executable PRIVATE pq pqxx)	code	txt
235	1	`pg_ctl` command-line utility is shipped with postgres that helps in managing\nthe clusters.	text	txt
236	1	* `start`, `stop`, and `restart` execute the corresponding actions.\n* `status` reports current status of cluster.\n* `reload` reloads the configuration.\n* `initdb` or briefly `init` executes the initialization of the cluster.\n* `promote` is used when the cluster is running as a subordinate server in a\n  replication setup and now must be detached from the origin master and\n  become independent.	text	txt
237	1	`postmaster` process is started by `pg_ctl start` and prints\n`$PGENV_ROOT/bin/postgres` when it runs.	text	txt
238	1	* `smart`: waits for connected clients to disconnect first\n* `fast`: immediately disconnects clients but cleans up before exit\n* `immediate`: aborts every postgres process and exists	text	txt
238	2	$PGENV_ROOT/bin/postgres stop -m smart	code	txt
238	3	By default `fast` stop mode is the default.	text	txt
239	1	Postgres must be run by an unprivileged user.\nPostgres is run by a normal user usually named `postgres`.	text	txt
239	2	sudo -E -u postgres pg_ctl stop	code	txt
240	1	That almost every Postgres-related command searches for the value of PGDATA\nas an environmental variable or as a `-D` command-line option.	text	txt
240	2	export PGDATA=/opt\npg_ctl status -D /usr/local	code	txt
240	3	Option `-D` precedes using environment variables.	text	txt
241	1	`template0` and `template1` are first databases. `template0` is a safe copy\nfor rebuilding in case `template1` is accidentally damaged or removed.	text	txt
242	1	You can either use command options or use a connection string to address a\ncluster.	text	txt
242	2	psql -U <username> -h <hostname> -d <database>\npsql postgresql://username@hostname:5432/database	code	txt
243	1	\\\\q	code	txt
244	1	psql -l	code	txt
245	1	When you connect to an instance, you connect to one of the nodes in the\ncluster.	text	txt
245	2	${PGENV_ROOT}/bin/initdb	code	txt
246	1	Trust is enabled on local connections by default. You can change this by\nediting `pg_hba.conf` or using the option `-A`, or `--auth-local` and\n`--auth-host`, the next time you run initdb.	text	txt
246	2	${PGENV_ROOT}/bin/initdb --auth-local --auth-host	code	txt
247	1	Postgres builds the filesystem layout of `PGDATA` directory and builds two\ntemplate databases `template0` and `template1`.	text	txt
248	1	su -u postgres psql -d template1 -h postgres	code	txt
248	2	select current_time;	code	txt
249	1	select current_time \\\\g	code	txt
250	1	\\\\e	code	txt
250	2	Opens the editor specified in `EDITOR` environment variable.	text	txt
251	1	\\\\i <file>	code	txt
252	1	\\\\h select	code	txt
253	1	\\\\?	code	txt
254	1	select current_database();	code	sql
255	1	select current_date;	code	sql
256	1	select current_timestamp;	code	sql
257	1	`postgres` user is default admin in postgres.	text	txt
258	1	Every role must have a unique username.	text	txt
258	2	A role can be a single account, or a group representing a collection of database permissions and connection properties.	text	txt
259	1	A role is defined at the cluster level, while permissions are defined at the database level.	text	txt
260	1	create role <name> with password 'secret' login;	code	sql
260	2	The default option is `NOLOGIN`. Therefore, in order to define interactive users, remember to add the `LOGIN` option when creating a role.	text	txt
261	1	Almost every option of the `create role` statement has a positive form that adds the ability to the role, and a negative form with `NO` prefix that excludes the ability from the role.	text	txt
262	1	create role <user> with password 'secret' superuser login;	code	sql
263	1	create role <user> with password null;	code	sql
264	1	create role <user> with password 'secret' login connection limit 1;	code	sql
265	1	create role <user> with password 'secret' login valid until '2026-12-31';	code	sql
266	1	A group is a role that contains other roles.	text	txt
266	2	To create a group simply create a role without a login capability.	text	txt
266	3	create role <group> with nologin;	code	sql
267	1	create role <user> with login password 'secret' in role <group> connection limit 1 valid until '2026-12-31';	code	sql
267	2	The `in group` clause of `create role` is an absolute synonym for the `in role` clause.	text	txt
268	1	grant <group> to <user>;	code	sql
269	1	create role <group> with nologin admin <user>;	code	sql
269	2	The <user>, even if not a cluster superuser, will be able to add new members to the <group>.	text	txt
270	1	grant <group> to <user> with admin option;	code	sql
271	1	drop role if exists <user>;	code	sql
272	1	select current_role;	code	sql
273	1	\\du	code	sql
274	1	\\drg	code	sql
275	1	select rolname, rolcanlogin, rolconnlimit, rolpassword from pg_roles where rolname = 'user';	code	sql
276	1	The catalog `pg_roles` can be queried by either superuser or normal users, but `pg_authid` can only be queried by superuser.	text	txt
276	2	select rolname, rolcanlogin, rolconnlimit, rolpassword from pg_authid where rolname = 'user';	code	sql
277	1	After every change on the cluster firewall, instruct the cluster to reload to the new rules via a `HUP` signal or by means of a `reload` command in `pg_ctl`.	text	txt
277	2	`$PGDATA/pg_hba.conf`	text	txt
278	1	select pg_reload_conf();	code	sql
279	1	<connection-type> <database>  <role> <remote-machine> <auth-method>\n  local             all         all    all              scram-sha-256\n  host              replication        samehost         md5\n  hostssl           *                  samenet          reject\n  nohostsll                            *                trust	text	txt
280	1	Database will stop at first match.	text	txt
281	1	host forumdb brian all reject\nhost forumdb +group all scram-sha-256	code	conf
282	1	include_file, include_if_exists, include_dir	code	sql
282	2	host forumdb @rejected_users all reject\nhost forumdb @allowed_users all scram-sha-256	code	conf
283	1	select line_number, type, database, user_name, address, auth_method from pg_hba_filel_rules;	code	sql
284	1	createuser	code	sh
285	1	dropuser	code	sh
286	1	**Data Manipulation Language (DML)** commands are used to insert, delete, update and select data inside databases. 	text	txt
286	2	**Data Definition Language (DDL)** commands are used to manage databases and tables.	text	txt
287	1	psql -U <username> -h <hostname> -d <database>	code	sh
287	2	psql -U postgres -h localhost -d template1	code	sh
288	1	\\x	code	sql
289	1	\\l	code	sql
290	1	\\c postgres	code	sql
290	2	\\c <database>	code	sql
291	1	create database <database>	code	sql
291	2	create database sample	code	sql
292	1	`template1`	text	txt
293	1	`template0` is a read-only backup in case `template1` is accidentally removed.	text	txt
294	1	Databases can be organized by namespaces called schema.	text	txt
294	2	Schemas cannot be nested, and they represent a flat namespace.	text	txt
295	1	A normal user cannot perform DDL on the public schema.	text	txt
295	2	A normal user cannot perform DML on the public schema unless superuser allows that.	text	txt
296	1	Contains the sequence of schemas that postgres uses to find tables.	text	txt
297	1	create database sample;\n\\c sample\ncreate user first_user with password "complex password" login;\ncreate schema sample_uexamples	code	sql
298	1	\\dt	code	sql
299	1	create database project template project_defaults;	code	sql
300	1	drop database projects cascade;	code	sql
300	2	drop database projects;	code	sql
300	3	When there are dependencies to the database, this action can cascade to all of them too.	text	txt
301	1	drop table users;	code	sql
302	1	select pg_size_pretty(pg_database_size('project'));	code	sql
302	2	\\l+ project	code	sql
302	3	select pg_database_size('project');	code	sql
303	1	select * from pg_database where datname = 'project';	code	sql
304	1	create table users ( id int generated always as identity, username varchar(40) not null, primary key(id), unique(username));	code	sql
305	1	create table if not exists users;	code	sql
306	1	create table sample (id int generated always as identity, primary key (id));	code	sql
306	2	2. Unlogged Tables: faster than regular tables but they are not crash-safe..	text	txt
306	3	create unlogged table sample (id int generated always as identity, primary key (id));	code	sql
306	4	3. Temporary Tables: mostly used in transactions for isolation and is only visible to the session where it was created.	text	txt
306	5	create temp table sample (id int generated always as identity, primary key (id));	code	sql
306	6	1. Logged Tables: these are the regular tables we create.	text	txt
307	1	begin work;\ncreate temp table sample (id int generated always as identity, primary key (id)) on commit drop;\ncommit work;	code	sql
307	2	First, create a session. Then create the temp table. And finally, commit or roll back the transaction.	text	txt
308	1	select oid, relanem from pg_class where relname = 'users';	code	sql
309	1	It is possible to insert one or more rows specified by value expressions, or zero or more rows resulting from a query.	text	txt
310	1	insert into users (username) values ('user1');	code	sql
311	1	select * from users;	code	sql
312	1	select * from users order by joined;	code	sql
313	1	insert into users (username) values ('user1'), ('user2');	code	sql
314	1	select * from users where joined between '2024-08-01' and '2026-08-01';	code	sql
315	1	1. Asending `asc` which is the default when not specified.\n2. Desending: `desc`.	text	txt
316	1	select * from users order by name, age;	code	sql
316	2	select * from users order by 2, 3;	code	sql
317	1	select * from <table> order by <column> nulls first;	code	sql
318	1	select * from <table> order by <column> nulls last;	code	sql
319	1	create temp table active_users as select * from users where active = true;	code	sql
320	1	update <table> set <column> = <value> where id = 2;	code	sql
321	1	delete from <table> where <column = <value>;	code	sql
322	1	select * from users where age > 18 and age < 35;	code	sql
323	1	select * from products where name like '%Laptop%';	code	sql
324	1	select * from products where upper(name) like '%LAPTOP%';	code	sql
324	2	select * from products where name ilike '%Laptop%';	code	sql
325	1	select coalesce(profile_picture, 'profile.png') from users;	code	sql
326	1	\\pset null (NULL);	code	sql
327	1	select coalesce(profile_picture, 'profile.png') as profile_picture from users;	code	sql
328	1	select distinct name from users;	code	sql
329	1	select * from users limit 10;	code	sql
330	1	select * from users offset 20 limit 5;	code	sql
331	1	create table banned_users as select * from users limit 0;	code	sql
332	1	select * from users where role in ('manager', 'team manager');	code	sql
332	2	select * from users where role not in ('manager', 'team manager');	code	sql
333	1	select * from users where nationality in (select id from countries where region = 'Europe');	code	sql
334	1	select * from users where exists (select 1 from comments where user_id = users.id);	code	sql
334	2	select * from users where not exists (select 1 from comments where user_id = users.id);	code	sql
335	1	A window function performs calculations across a set of table rows that are somehow related to the current row. This is similar to aggregation functions. However, window functions do not cause rows to become grouped into a single output row. Instead, the window function is able to access more than just current row of the query result.	text	txt
336	1	category | count\n1 | 2\n1 | 2\n3 | 1	text	txt
336	2	Aggregation functions first sort data and then aggregate them. The data is then flattened through aggregation.	text	txt
336	3	select category, count(*) from posts group by category order by category;	code	sql
336	4	The above statement can result in, for example:	text	txt
336	5	category | count\n1 | 2\n3 | 1	text	txt
336	6	Window functions create aggregations without flattening data into a single row. However, they replicate it for all the rows to which the grouping functions refer.	text	txt
336	7	select category, count(*) over (partition by category) from posts order by category;	code	sql
337	1	Use `distinct` o obtain the same results as aggregation functions from window functions:	text	txt
337	2	select distinct category, count(*) over (partition by category) from posts order by category;	code	sql
338	1	select distinct category, count(*) over (partition by category), count(*) over () from posts order by category;	code	sql
339	1	select category, count(*) over w1, count(*) over w2\nfrom posts\nwindow w1 as (partition by category),\nwindow w2 as ()\norder by category;	code	sql
340	1	All aggregate functions.	text	txt
341	1	select * from generate_series(1, 5);	code	sql
342	1	select category, row_number() over w from posts window w as (partition by category) order by category;	code	sql
342	2	category | row_number\n1 | 1\n1 | 2\n3 | 1	text	txt
343	1	select category, row_number() over () from posts order by category;	code	sql
343	2	category, row_number\n1 | 1\n1 | 2\n3 | 3	text	txt
344	1	select category, row_number() over (partition by category order by title) from posts order by category;	code	sql
345	1	select category, first_value(title) over (partition by category order by category)\nfrom posts\norder by category;	code	sql
345	2	Ordering the partition is important in this context.	text	txt
346	1	Ordering the partition is important in this context.	text	txt
346	2	select category, last_value(title) over (partition by category order by category)\nfrom posts\norder by category;	code	sql
347	1	select title, author, rank() over (order by author) from posts;	code	sql
347	2	author | rank\nA | 1\nA | 1\nB | 3	text	txt
348	1	select title, author, dense_rank() over (order by author) from posts;	code	sql
348	2	author | rank\nA | 1\nA | 1\nB | 2	text	txt
349	1	The offset defaults to 1, and the default value is null.	text	txt
349	2	select x, lag(x) over (order by x) from generate_series(1, 5) as x;	code	sql
349	3	select x, lag(x, 2) over (order by x) from (select generate_series(1, 5) as x);	code	sql
350	1	select x, lead(x) over (order by x) from (select generate_series(1, 5) as x);	code	sql
350	2	select x, lead(x, 2) over (order by x) from generate_series(1, 5) as x;	code	sql
350	3	The offset defaults to 1, and the default value is null.	text	txt
351	1	select x, cume_dist(x) over (order by x) from (select generate_series(1, 5) as x);	code	sql
352	1	select x, ntile(x, 3) over (order by x) from (select generate_series(1, 6) as x);	code	sql
352	2	x | ntile\n1 | 1\n2 | 1\n3 | 2\n4 | 2\n5 | 3\n6 | 3	text	txt
353	1	* `true`: `yes`, `on`, 1\n* `false`: `no`, `off`, 0	text	txt
354	1	alter table users add is_active boolean default true;	code	sql
355	1	select 1.23456789::int4;	code	sql
355	2	select 1.23456789::int8;	code	sql
355	3	* `integer`, `int4`\n* `bigint`, `int8`	text	txt
356	1	select 1.23456789::real;	code	sql
356	2	select 1.23456789::double precision;	code	sql
356	3	* `real` (4 byte precision, almost 6 digits)\n* `double precision` (8 byte variable precision, almost 15 digits)	text	txt
357	1	select 1.99::numeric(3,2) as wallet;	code	sql
357	2	The type `numeric` takes two arguments `(precision, scale)`, by which precision is the total count of significant digits in the whole number, and the scale of a numeric is the count of decimal digits.	text	txt
358	1	create table tags (id integer not null primary key, fixed_tag char(10), varying_tag varchar(10), long_tag text);	code	sql
358	2	* `char(n)`, `character(n)`\n* `varchar(n)`, `character varying(n)`\n* `text`, `varchar`	text	txt
359	1	select length(name) from users where id = 1;	code	sql
360	1	select octet_length(name) from users where id = 1;	code	sql
361	1		code	sql
361	2	Using the `pg_settings` view, we can view the parameters set in the `postgresql.conf` configuration file.	text	txt
362	1	select * from pg_settings where name = 'DateStyle';	code	sql
362	2	*postgresql.conf*\n\ndatestyle = 'iso, mdy'	text	txt
363	1	select to_date('2025-06-10', 'yyyy-mm-dd');	code	sql
364	1	select to_char(to_date('2025-06-10', 'yyyy-mm-dd'), 'dd.mm.yyyy');	code	sql
365	1	create table posts (creation timestamp with timezone);	code	sql
365	2	select creation::timestamp with time zone as creation_tz, creation::timestamp without time zone as creation_nz from posts;	code	sql
366	1	show timezone;	code	sql
367	1	set timezone='UTC';	code	sql
368	1	select id, username, hstore(array['first', first_name, 'last', last_name]) as name from users;	code	sql
369	1	select username from users where name->'first' = 'Brian';	code	sql
370	1	select row_to_json(q) as data from (select * from users) Q;	code	sql
370	2	create table posts (data jsonb);	code	sql
370	3	insert into posts (data) select row_to_json(q) from users;	code	sql
371	1	create table posts (data jsonb);	code	sql
371	2	select jsonb_pretty(data) from posts;	code	sql
372	1	select jsonb_pretty(data) from posts where data @> '{"tag": "design"}';	code	sql
373	1	* SQL\n* PL/pgSQL\n* C	text	txt
374	1	create or replace function show_timezone() returns varchar as begin return now(); end; language plpgsql;	code	sql
375	1	Optimizer is responsible for executing the statement with a particular access plan.	text	txt
375	2	Planner is responsible for finding the best path to the underlying data.	text	txt
376	1	SQL is declarative, meaning that you ask for execution of a statement, but you do not specify how the database is supposed to complete the execution.	text	txt
377	1	**Rewriting:** applies triggers and rules.	text	txt
377	2	**Optimizing:** finds an optimize way of execution in a short time.	text	txt
377	3	**Executing:** executor gets access to the storage using the access method.	text	txt
377	4	**Parsing:** verifies the syntax and disassembles the statement into main parts.	text	txt
378	1	The postres optimizer is a cost-based optimizer. On each way to access the data a cost is assigned, and the plan with the lowest cost is passed to the executor as a sequence of actions to perform.	text	txt
379	1	When an statement involves more than 12 joins, the planning takes so much time that overtakes the amount of time the result will take to be generated. In this case, the optimizer will use a generic algorithm to find a compromise way to access data. The compromise is between the time spent in computing the path to the data and finding a not-too-bad access path.	text	txt
380	1	The optimizer will pass two actions to the executor, and thus the nodes: one to retrieve all the data and one to sort the data.	text	txt
380	2	select * from users order by age;	code	sql
380	3	The optimizer divides the set of actions to pass to the executor in nodes; a node is an action to execute in order to provide the final or an intermediate result.	text	txt
482	1	* (`tags-and-searches`)::(`:tag-matchlist`)::(`g_ctrl-]`)	text	txt
603	22	time_t now;	text	txt
381	1	Nodes are stackable, the output of a node can be used as the input to another node. This allows the construction of very complex execution plans made by different nodes, which can produce a fine-grained access method to the data.	text	txt
382	1	* parsing\n* rewriting\n* optimization\n* execution	text	txt
383	1	Handles the textual form of a statement and verifies whether it is syntactically correct or not.	text	txt
384	1	Applies any syntactic rules to rewrite the original statement into what will be effectively executed.	text	txt
385	1	Finds the fastest path to the data.	text	txt
386	1	Goes to the storage and retrieves the data using the access method decided by the executor.	text	txt
387	1	When retrieving a very large set of data that can be performed by dividing the amount of work between different parallel workers, each one assigned to a smaller subset of the data.	text	txt
388	1	The optimizer divides the set of actions to pass to the executor in nodes. A node is an action to execute in order to provide the final or an intermediate result. For example, when executing a generic query asking for data in a specific order:	text	txt
388	2	select * from posts order by release_date;	code	sql
388	3	The optimizer will pass two actions to the executor, and thus the nodes include one to retrieve all the data and one to sort the data.	text	txt
389	1	- Sequential nodes\n- Parallel nodes	text	txt
390	1	Sequential nodes are those nodes that will be executed sequentially, one afer the other, in order to achieve the final result.	text	txt
390	2	- Sequential scan\n- Index scan, index-only scan, and bitmap index scan\n- Nested loop, hash join, and merge join\n- The gather and merge parallel nodes	text	txt
390	3		code	sql
391	1	The sequential scan is the only node that is always available to the optimizer and the executor, when there is no other valuable alternative. In sequential scan, the executor will iterate through all the data from the beginning of the dataset in sequential order.	text	txt
391	2	This node is used when the filtering clause is not very limiting in the query so that the end result will be to get almost the whole table contents.	text	txt
391	3	select * from categories;	code	sql
392	1	An index scan has access to the data that involves an index in order to quickly find the requested dataset. Indexes live alongside the table. Therefore, there will be a data file for the table and one for every index built on the table. Postgres avoids using indexes when double storage access accounts for more disadvantages than advantages. But when used, Postgres will produce an index node that can specialize in three different types:	text	txt
392	2	- Index scan\n- Index-only scan\n- Bitmap index scan	text	txt
393	1	Using this classical index access method, Postgres reads the chosen index, and from that, it goes seeking the tuples, reading again from the storage.	text	txt
394	1	If the requested data only involves columns that belong to the index, Postgres is smart enough to avoid the second trip to storage.	text	txt
395	1	PostgreSQL builds a memory bitmap containing the location of tuples that satisfy the statement clauses, then it will use that bitmap to locate the tuples.	text	txt
395	2	Bitmap index scan is usually associated with bitmap heap scan.	text	txt
396	1	When PostgreSQL performs a join between two or more tables, it uses of the following nodes:	text	txt
396	2	- Nested loop\n- hash join\n- merge join	text	txt
397	1	When bot both tables are scanned in a sequential or indexed based method and every tuple is checked to see whether there is a match.	text	txt
397	2	for (tuple o: outer)\n    for (tuple i: inner)\n        if (o.matches(i))\n            result_set.append(o, i);	code	c
397	3	Nested loop nodes are not forced to perform a sequential scan on both tables. However, the core concept does not change that there will always be a nested doule loop to search for matches among the tuples.	text	txt
397	4	PostgreSQL chooses nested loop scans only if the inner table is small enough so that looping every time over it does not introduce any penalties.	text	txt
398	1	When the inner table is mapped into a hash, which is aset of buckets containing the tuples of the table, the outer table is then walked and for every tuple extraced from the outer table, the hash is searched to see whether there is a match.	text	txt
398	2	hash inner_hash = build_hash(inner_table);\n\nfor (tuple o: outer_table)\n    if (inner_hash.contains(build_hash(o));\n        result_set.append(o, i);	code	c
399	1	#include <filesystem>	text	txt
399	2	int main()\n{\n    try\n    {\n        std::filesystem::path version_path{"/usr/src/linux/version"}; // throws std::bad_alloc	text	txt
399	3	        if (std::filesystem::exists(version_path)) // throws std::system_error\n        {\n            // ...\n        }\n    }\n    catch (std::system_error const& exp)\n    {\n        std::cerr << "file operation error: " << exp.what() << std::endl;\n    }\n    catch (std::bad_alloc const& exp)\n    {\n        std::cerr << "path could not be allocated: " << exp.what() << std::endl;\n    }\n}	code	txt
400	1	#include <iostream>\n#include <filesystem>	text	txt
400	2	int main()\n{\n    try\n    {\n        std::filesystem::path working_directory{std::filesystem::current_path()};\n        std::cout << working_directory << std::endl;\n    }\n    catch (std::filesystem::filesystem_error const& exp)\n    {\n        std::cerr << exp.what() << std::endl;\n    }\n}	code	txt
401	1	`std::filesystem::canonical()` throws a `std::filesystem_error` type\nexception if the path we want to canonicalize does not exist.	text	txt
401	2	#include <iostream>\n#include <exception>\n#include <filesystem>	text	txt
401	3	int main()\n{\n    try\n    {\n        std::filesystem::path relative_path{"/usr/././lib/../include"};\n        std::filesystem::path canonical_path{std::filesystem::canonical(relative_path)};\n        std::cout << canonical_path << std::endl;\n    }\n    catch (std::filesystem::filesystem_error const& exp)\n    {\n        std::cerr << exp.what() << std::endl;\n    }\n    catch (std::bad_alloc const& exp)\n    {\n        std::cerr << exp.what() << std::endl;\n    }\n}	code	txt
402	1	`std::filesystem::canonical()` accepts a path as an optional second argument.	text	txt
402	2	path canonical(path const& p, path const& base = current_path());	code	txt
402	3	The second path `base` is prepended to path `p` if `p` is a relative path.	text	txt
402	4	#include <iostream>\n#include <exception>\n#include <filesystem>	text	txt
567	4	int main(int argc, char **argv)\n{\nint result = -1;	text	txt
592	7	if (fclose(fp) == -1)\n{\nperror(NULL);\nreturn 3;\n}\n}	code	txt
402	5	int main()\n{\n    try\n    {\n        std::filesystem::path relative_path{"./lib/../include"};\n        std::filesystem::path base_path{"/usr"};\n        std::filesystem::path canonical_path{std::filesystem::canonical(relative_path, base_path)};\n        std::cout << canonical_path << std::endl;\n    }\n    catch (std::filesystem::filesystem_error const& exp)\n    {\n        std::cerr << exp.what() << std::endl;\n    }\n    catch (std::bad_alloc const& exp)\n    {\n        std::cerr << exp.what() << std::endl;\n    }\n}	code	txt
403	1	`std::filesystem::canonical()` does what `std::filesystem::absolute()` does,\nbut canonical additionally removes any "." or ".." paths.	text	txt
403	2	`std::filesystem::absolute()` does not call system calls.	text	txt
403	3	#include <iostream>\n#include <filesystem>	text	txt
403	4	int main()\n{\n    try\n    {\n        std::filesystem::path relative_path{"./.local/bin"};\n        auto absolute_path{std::filesystem::absolute(relative_path)};	text	txt
403	5	        std::cout << absolute_path << std::endl;\n    }\n    catch (std::filesystem::filesystem_error const& exp)\n    {\n        std::cerr << exp.what() << std::endl;\n    }\n    catch (std::bad_alloc const& exp)\n    {\n        std::cerr << exp.what() << std::endl;\n    }\n}	code	txt
404	1	`std::filesystem::path` overloads `operator/` and `operator+` for path\nconcatenation, but `operator/` uses path separators between junctions and\n`operator+` only acts as string concatanation.	text	txt
404	2	#include <filesystem>	text	txt
404	3	std::filesystem::path parent{"/usr/bin"};\nstd::filesystem::path executable{"bash"};\nstd::filesystem::path shell{parent + executable}; // /usr/binbash\nstd::filesystem::path shell{parent / executable}; // /usr/bin/bash	code	txt
405	1	`std::filesystem::equivalent()` canonicalizes the paths, which it accepts as\narguments and returns true if they describe the same path after all.	text	txt
405	2	Both operands need to exist before call to this free-standing function. It\nwill throw `std::filesystem::system_error` otherwise.	text	txt
405	3	#include <iostream>\n#include <filesystem>	text	txt
405	4	int main()\n{\n    std::filesystem::path p1{"/lib/modules"};\n    std::filesystem::path p2{"/usr/lib/modules"};\n    std::cout << std::boolalpha << std::filesystem::equivalent(p1, p2) << std::endl;\n    // true\n}	code	txt
406	1	#include <filesystem>	text	txt
406	2	std::filesystem::is_directory("/usr/bin"); // true\nstd::filesystem::is_regular_file("/usr/bin/bash"); // true\nstd::filesystem::is_symlink("/lib"); // true\nstd::filesystem::is_character_file("/dev/random"); // true\nstd::filesystem::is_block_file("/dev/sda"); // true\nstd::filesystem::is_fifo("/dev/null"); // false\nstd::filesystem::is_socket("/dev/null"); // false\nstd::filesystem::other("/dev/null"); // false	code	txt
407	1	#include <filesystem>	text	txt
407	2	std::filesystem::path executables_path{"/usr/local/bin"};\nstd::filesystem::file_status executables_status{std::filesystem::file_status(executables_path)};	text	txt
407	3	std::filesystem::is_directory(executables_status);\nstd::filesystem::is_regular_file(executables_status);\nstd::filesystem::is_symlink(executables_status);\nstd::filesystem::is_character_file(executables_status);\nstd::filesystem::is_block_file(executables_status);\nstd::filesystem::is_fifo(executables_status);\nstd::filesystem::is_socket(executables_status);\nstd::filesystem::other(executables_status);	code	txt
408	1	#include <fstream>\n#include <iostream>\n#include <filesystem>	text	txt
408	2	int main()\n{\n    std::filesystem::perms perms = std::filesystem::status("/dev/null").permissions();	text	txt
408	3	    std::cout << ((perms & std::filesystem::perms::owner_read)   == std::filesystem::perms::none ? '-' : 'r');\n    std::cout << ((perms & std::filesystem::perms::owner_write)  == std::filesystem::perms::none ? '-' : 'w');\n    std::cout << ((perms & std::filesystem::perms::owner_exec)   == std::filesystem::perms::none ? '-' : 'x');\n    std::cout << ((perms & std::filesystem::perms::group_read)   == std::filesystem::perms::none ? '-' : 'r');\n    std::cout << ((perms & std::filesystem::perms::group_write)  == std::filesystem::perms::none ? '-' : 'w');\n    std::cout << ((perms & std::filesystem::perms::group_exec)   == std::filesystem::perms::none ? '-' : 'x');\n    std::cout << ((perms & std::filesystem::perms::others_read)  == std::filesystem::perms::none ? '-' : 'r');\n    std::cout << ((perms & std::filesystem::perms::others_write) == std::filesystem::perms::none ? '-' : 'w');\n    std::cout << ((perms & std::filesystem::perms::others_exec)  == std::filesystem::perms::none ? '-' : 'x');\n}	code	txt
409	1	#include <filesystem>	text	txt
409	2	std::filesystem::path file_path{"/usr/bin/g++"};\nstd::size_t size = std::filesystem::file_size(file_path);	code	txt
410	1	#include <filesystem>\n#include <algorithm>\n#include <ranges>\n#include <vector>	text	txt
410	2	std::vector<std::filesystem::directory_entry> entries;\nstd::filesystem::path directory_path{"/usr/bin"};\nstd::filesystem::directory_iterator entry_iterator{std::filesystem::directory_iterator{directory_path}};\nstd::copy(entry_iterator, std::back_inserter(entries));	code	txt
411	1	* (`:help`)	text	txt
412	1	* (`reference`)	text	txt
413	1	* (`quickref`)	text	txt
414	1	* (`user-manual`)	text	txt
415	1	* (`repeating`)::(`single-repeat`)::(`.`)	text	txt
416	1	* (`Insert`)::(`inserting`)::(`a` or `A`)\n* (`Insert`)::(`inserting`)::(`i` or `I`)\n* (`Insert`)::(`inserting`)::(`o` or `O`)\n* (`Insert`)::(`delete-insert`)::(`s` or `S`)\n* (`Insert`)::(`delete-insert`)::(`c` or `C`)	text	txt
417	1	* (`cursor-motions`)::(`left-right-motions`)::(`f` or `F`)\n* (`cursor-motions`)::(`left-right-motions`)::(`t`) and (`T`)\n* (`cursor-motions`)::(`left-right-motions`)::(`;`)\n* (`cursor-motions`)::(`left-right-motions`)::(`,`)	text	txt
418	1	* (`pattern-searches`)::(`search-commands`)::(`star`)	text	txt
419	1	* (`reference`)::(`notation`)::(`count`)\n* (`changing`)::(`simple-change`)::(`ctrl-a`)\n* (`changing`)::(`simple-change`)::(`ctrl-x`)	text	txt
420	1	* (`options`)::(`option-summary`)::(`nrformats`)	text	txt
421	1	* (`changing`)::(`delete-insert`)::(`cw` or `cW`)	text	txt
422	1	* (`changing`)::(`deleting`)::(`dd`)\n* (`changing`)::(`simple-change`)::(`gUU` or `guu`)	text	txt
423	1	**Motions:**	text	txt
423	2	* (`cursor-motions`)::(`operator`)\n* (`cursor-motions`)::(`object-select`)::(`aw`)\n* (`cursor-motions`)::(`object-select`)::(`as`)\n* (`cursor-motions`)::(`object-select`)::(`ap`)	text	txt
423	3	**operator:**	text	txt
481	1	* (`tags-and-searches`)::(`tag-stack`)\n* (`tags-and-searches`)::(`tag-stack`)::(`ctrl-t`)\n* (`tags-and-searches`)::(`tag-stack`)::(`:pop`)\n* (`tags-and-searches`)::(`tag-stack`)::(`:tags`)	text	txt
610	1	tty\nstty -a	code	txt
423	4	* (`changing`)::(`deleting`)::(`d`)\n* (`changing`)::(`delete-insert`)::(`c`)\n* (`changing`)::(`copy-move`)::(`y`)\n* (`changing`)::(`simple-change`)::(`case`)::(`~` or `gU` or `gu` or `g~`)\n* (`changing`)::(`simple-change`)::(`shift-left-right`)::(`<` or `>`)\n* (`changing`)::(`complex-change`)::(`!`)	text	txt
423	5	**custom operators:**	text	txt
423	6	* (`key-mapping`)::(`map-operator`)	text	txt
423	7	**custom motions:**	text	txt
423	8	* (`key-mapping`)::(`omap-info`)	text	txt
424	1	* (`Insert`)::(`ins-special-keys`)::(`i_ctrl-h`)\n* (`Insert`)::(`ins-special-keys`)::(`i_ctrl-w`)\n* (`Insert`)::(`ins-special-keys`)::(`i_ctrl-u`)	text	txt
425	1	* (`reference`)::(`notation`)::(`<esc>`)\n* (`Insert`)::(`ins-special-keys`)::(`i_ctrl-[`)	text	txt
426	1	* (`Insert`)::(`ins-special-special`)::(`i_ctrl-o`)	text	txt
427	1	* (`scrolling`)::(`scroll-cursor`)::(`zz`)	text	txt
428	1	* (`Insert`)::(`ins-special-keys`)::(`i_ctrl-r`)	text	txt
429	1	* (`Insert`)::(`ins-special-keys`)::(`i_ctrl-r_ctrl-p`)	text	txt
430	1	* (`Insert`)::(`ins-special-keys`)::(`i_ctrl-r`)::(`i_ctrl_r_=`)	text	txt
431	1	* (`Insert`)::(`ins-special-keys`)::(`i_ctrl-v`)\n* (`Insert`)::(`ins-special-keys`)::(`i_ctrl-v_digit`)	text	txt
432	1	* (`various`)::(`varous-cmds`)::(`ga`)	text	txt
433	1	* (`Insert`)::(`ins-special-keys`)::(`i_ctrl-k`)\n* (`digraph`)::(`digraph-table`)	text	txt
434	1	* (`Insert`)::(`Replace`)\n* (`changing`)::(`delete-insert`)::(`R`)\n* (`changing`)::(`simple-change`)::(`r`)	text	txt
435	1	* (`Visual`)::(`visual-start`)::(`v`)\n* (`Visual`)::(`visual-start`)::(`V`)\n* (`Visual`)::(`visual-start`)::(`ctrl-v`)	text	txt
436	1	* (`Visual`)::(`Select`)	text	txt
437	1	* (`Visual`)::(`visual-start`)::(`gv`)	text	txt
438	1	* (`Visual`)::(`visual-start`)::(`v_v`)	text	txt
439	1	* (`Visual`)::(`visual-change`)::(`v_o`)	text	txt
440	1	* (`changing`)::(`simple-change`)::(`case`)::(`v_u` or `v_U` or `v_~`)\n* (`changing`)::(`simple-change`)::(`case`)::(`~` or `gU` or `gu` or `g~`)	text	txt
441	1	* (`Visual`)::(`visual-repeat`)	text	txt
442	1	*first reduce spaces between columns*	text	txt
442	2	* (`Visual`)::(`visual-start`)::(`ctrl-v`)	text	txt
442	3	*then reselect previous visual selection, and replace column with | character.*	text	txt
442	4	* (`Visual`)::(`visual-start`)::(`gv`)	text	txt
443	1	*first move the cursor on a line, then enter linewise visual mode:*	text	txt
443	2	* (`Visual`)::(`visual-start`)::(`V`)	text	txt
443	3	*then replace every occurance of a character in that line with another character:*	text	txt
443	4	* (`changing`)::(`simple-change`)::(`r`)	text	txt
444	1	* (`command-line-mode`)	text	txt
445	1	* (`edit-files`)::(`edit-a-file`)::(`:edit`)	text	txt
446	1	* (`edit-files`)::(`writing`)::(`:write`)	text	txt
447	1	* (`tab-page`)::(`tab-page-commands`)::(`:tabedit`)	text	txt
448	1	* (`windows`)::(`opening-window`)::(`:split`)	text	txt
449	1	* (`index`)::(`ex-cmd-index`)	text	txt
450	1	* (`vi-differences`)	text	txt
451	1	* (`changing`)::(`copy-move`)::(`:copy`)	text	txt
452	1	* (`changing`)::(`copy-move`)::(`:move`)	text	txt
453	1	* (`repeating`)::(`single-repeat`)::(`@:`)	text	txt
454	1	* (`various`)::(`various-cmds`)::(`:normal`)	text	txt
455	1	* (`cmdline-mode`)::(`cmdline-completion`)::(`c_ctrl-d`)	text	txt
456	1	* (`key-mapping`)::(`user-commands`)::(`command-completion`)	text	txt
457	1	* (`options`)::(`option-summary`)::(`wildmode`)	text	txt
458	1	* (`cmdline-mode`)::(`cmdline-editing`)::(`c_ctrl-r_ctrl-w`)	text	txt
459	1	* (`starting`)::(`viminfo`)	text	txt
460	1	* (`cmdline-mode`)::(`cmdline-window`)	text	txt
461	1	* (`cmdline-mode`)::(`cmdline-window`)::(`c_ctrl-f`)	text	txt
462	1	* (`various`)::(`various-cmds`)::(`:!`)	text	txt
463	1	* (`cmdline-mode`)::(`cmdline-special`)	text	txt
464	1	* (`cmdline-mode`)::(`cmdline-special`)::(`filename-modifiers`)	text	txt
465	1	* (`various`)::(`various-cmds`)::(`:shell`)	text	txt
466	1	* (`Insert`)::(`inserting-file`)::(`:read!`)\n* (`edit-files`)::(`writing`)::(`write_c`)\n* (`tips`)::(`rename-files`)	text	txt
467	1	* (`changing`)::(`complex-change`)::(`:range!`)	text	txt
468	1	* (`changing`)::(`complex-change`)::(`!`)	text	txt
469	1	* (`windows` or `buffers`)::(`buffer-hidden`)::(`:buffers` or `:ls`)	text	txt
470	1	* (`windows` or `buffers`)::(`buffer-hidden`)::(`:bnext`)\n* (`windows` or `buffers`)::(`buffer-hidden`)::(`:bprevious`)	text	txt
471	1	* (`windows` or `buffers`)::(`buffer-hidden`)::(`:buffer`)	text	txt
472	1	edit	code	txt
472	2	* (`edit-files`)::(`edit-a-file`)::(`:edit`)	text	txt
473	1	pwd	code	txt
473	2	* (`edit-files`)::(`current-directory`)::(`:pwd`)	text	txt
474	1	edit %:h	code	txt
474	2	* `cmdline-mode`)::(`cmdline-special`)::(`filename-modifiers`)::(`%:h`)	text	txt
475	1	set path+=src,include,docs	code	txt
475	2	* (`options`)::(`option-summary`)::(`path`)\n* (`editing-files`)::(`file-searching`)::(`starstar`)	text	txt
476	1	find main.cpp	code	txt
476	2	* (`edit-files`)::(`editing-a-file`)::(`:find`)	text	txt
477	1	vim path/to/directory	code	txt
477	2	* (`netrw`)::(`netrw-explore`)::(`:Explore`)\n* (`netrw`)::(`netrw-explore`)::(`:Sexplore`)\n* (`netrw`)::(`netrw-explore`)::(`:Vexplore`)	text	txt
478	1	ctags *.cpp	code	txt
478	2	* (`tags-and-searches`)::(`tags-file-format`)::(`ctags`)	text	txt
479	1	set tags?	code	txt
479	2	* (`tags-and-searches`)::(`tag-commands`)::(`tags`)	text	txt
480	1	! ctags -R\n:nnoremap <F5> :! ctags -R<CR>\n:autocmd bufwritepost *.cpp call system("ctags -R")	code	txt
480	2	* (`map.txt`)::(`key-mapping`)::(`map-commands`)\n* (`autocommand`)::(`autocmd-define`)::(`autocmd`)\n* (`various`)::(`various-cmds`)::(`:!cmd`)	text	txt
612	13	return read_bytes;\n}	text	txt
483	1	* (`tags-and-searches`)::(`:tag-matchlist`)::(`tselect`)\n* (`tags-and-searches`)::(`:tag-matchlist`)::(`tfirst`)\n* (`tags-and-searches`)::(`:tag-matchlist`)::(`tlast`)\n* (`tags-and-searches`)::(`:tag-matchlist`)::(`tnext`)\n* (`tags-and-searches`)::(`:tag-matchlist`)::(`tprev`)	text	txt
484	1	* (`tags-and-searches`)::(`:tag-commands`)::(`:tag`)\n* (`tags-and-searches`)::(`:tag-commands`)::(`:tjump`)	text	txt
485	1	* (`quickfix.txt`)::(`:make_makeprg`)::(`:make`)	text	txt
486	1	* (`quickfix.txt`)::(`quickfix-window`)::(`:copen`)\n* (`quickfix.txt`)::(`quickfix-window`)::(`:cclose`)	text	txt
487	1	* (`quickfix.txt`)::(`quickfix`)\n* (`quickfix.txt`)::(`quickfix`)::(`:cnext`)\n* (`quickfix.txt`)::(`quickfix`)::(`:cprev`)\n* (`quickfix.txt`)::(`quickfix`)::(`:cfirst`)\n* (`quickfix.txt`)::(`quickfix`)::(`:clast`)	text	txt
488	1	* (`quickfix.txt`)::(`quickfix`)::(`:cc`)	text	txt
489	1	* (`quickfix.txt`)::(`quickfix`)::(`:cnfile`)\n* (`quickfix.txt`)::(`quickfix`)::(`:cpfile`)	text	txt
490	1	* (`:make_makeprg`)::(`:lmake`)\n* (`quickfix.txt`)::(`quickfix`)::(`:lnext`)\n* (`quickfix.txt`)::(`quickfix`)::(`:lprev`)\n* (`quickfix.txt`)::(`quickfix`)::(`:lfirst`)\n* (`quickfix.txt`)::(`quickfix`)::(`:llast`)\n* (`quickfix.txt`)::(`quickfix`)::(`:lnfile`)\n* (`quickfix.txt`)::(`quickfix`)::(`:lpfile`)\n* (`quickfix.txt`)::(`quickfix`)::(`:ll`)\n* (`quickfix.txt`)::(`quickfix-window`)::(`:lopen`)\n* (`quickfix.txt`)::(`quickfix-window`)::(`:lclose`)	text	txt
491	1	* (`quickfix.txt`)::(`quickfix-error-lists`)::(`:chistory`)\n* (`quickfix.txt`)::(`quickfix-error-lists`)::(`:lhistory`)\n* (`quickfix.txt`)::(`quickfix-error-lists`)::(`:colder`)\n* (`quickfix.txt`)::(`quickfix-error-lists`)::(`:lolder`)\n* (`quickfix.txt`)::(`quickfix-error-lists`)::(`:cnewer`)\n* (`quickfix.txt`)::(`quickfix-error-lists`)::(`:lnewer`)	text	txt
492	1	setlocal makeprg=nasm -f elf64 -g -F dwarf -l %:r.lst %	code	txt
492	2	* (`options`)::(`option-summary`)::(`makeprg`)\n* (`options`)::(`set-options`)::(`local-options`)::(`setlocal`)	text	txt
493	1	setglobal errorformat?\n:setlocal efm=%A%f\\\\,\\\\ line\\\\ %l\\\\,\\\\ character\\\\ %c:%m,%Z%.%#,%-G%.%#	code	txt
493	2	* (`quickfix.txt`)::(`error-file-format`)::(`errorformat`)\n* (`options`)::(`set-options`)::(`local-options`)::(`setglobal`)	text	txt
494	1	compiler gcc	code	txt
494	2	* (`quickfix.txt`)::(`compiler-select`)::(`compiler`)	text	txt
567	3	int print_user_value(char const* str);	text	txt
498	1	cv::Mat colored = cv::imread("sample.bmp", cv::IMREAD_COLOR);\ncv::Mat gray    = cv::imread("sample.bmp", cv::IMREAD_GRAYSCALE);	code	cpp
497	1	cv::Mat image;\nstd::cout << image.rows << " x " << image.cols << '\\\\n';;	code	cpp
496	1	#include <opencv2/core.hpp>	code	cpp
495	1	git clone https://github.com - https://github.com/opencv/opencv.git\ncmake -S opencv -B opencv-build -D CMAKE_BUILD_TYPE=Release -D CMAKE_PREFIX_PATH=/usr/local\ncmake --build opencv-build --release Release --target all -j $(nproc)\ncmake --install opencv-build -j $(nproc)	code	sh
514	1	Some OpenCV operations allow you to define a mask that will limit the\napplicability of a given function or method, which is normally supposed to\noperate on all the image pixels. A mask is an 8-bit image that should be\nnonzero at all locations where you want an operation to be applied. At the\npixel locations that correspond to the zero values of the mask, the image is\nuntouched.	text	txt
514	2	Most of the OpenCV pixel-based operations give you the opportunity to use\nmasks.	text	txt
515	1	Using `sudo` accounts.	text	txt
516	1	Using a limited access account and by separating fine grained privileges into activities, causes damage to whole system reduced.	text	txt
517	1	On account creation:	text	txt
517	2	useradd -s /bin/bash -m -G sudo <username>	code	txt
517	3	 After account creation:	text	txt
517	4	usermod -a -G sudo <username>	code	txt
518	1	/etc/login.defs	code	txt
519	1	Set following configuration variable to `no` in `sshd` configuration:	text	txt
519	2	sudoedit /etc/ssh/sshd_config	code	txt
519	3	PermitRootLogin no	code	txt
519	4	And restart `sshd.service` on `systemd`:	text	txt
519	5	sudo systemctl restart sshd.service	code	txt
520	1	sudoedit /etc/ssh/sshd_config	code	txt
520	2	Port 9292	code	txt
521	1	sudoedit /etc/ssh/sshd_config	code	txt
521	2	AddressFamily inet	code	txt
521	3	sudo systemctl reload ssh	code	txt
522	1	**Pluggable Authentication Modules (PAM)**	text	txt
522	2	**CentOS** and **Red Hat** distros already come with **PAM** enabled.	text	txt
522	3	*archlinux*\nsudo pacman -S pam	code	txt
522	4	*debian*\nsudo apt install libpam-cracklib	code	txt
523	1	Configure **PAM** by editing following configuration file:	text	txt
523	2	sudoedit /etc/pam.d/passwd	code	txt
523	3	Uncomment the line having following content:	text	txt
523	4	password required pam_cracklib.so difok=2 minlen=8 dcredit=2 ocredit=2 retry=3	code	txt
523	5	* `difok`: check the number of characters used in the current password compared to previous one.\n* `minlen`: minimum length every password should have.\n* `dcredit`: the least number of numerals every password should have.\n* `ocredit`: the least number of special characters(?) every password should have.\n* `retry`: the number of times users can enter an incorrect password before getting locked.	text	txt
524	1	Create a new group called `sshusers`:	text	txt
524	2	sudo groupadd sshusers	code	txt
524	3	Add appropriate users to this group:	text	txt
524	4	sudo usermod -a -G sshusers <username>	code	txt
524	5	Allow users of this group to login in `/etc/ssh/sshd_config` configuration file:	text	txt
524	6	AllowGroups sshusers	code	txt
524	7	Restart `sshd.service`:	text	txt
524	8	sudo systemctl restart sshd.service	code	txt
524	9	Using this configuration, a user who does not belong to this specific group\nwill be prevented to access to the server over SSH; their passwords may be\nentered correctly, but they will not be given access. This reduces the chance\nof people hacking the server through brute force attacks.	text	txt
815	12	MODULE_LICENSE("GPL");\nMODULE_AUTHOR("Brian Salehi <salehibrian@gmail.com>");	code	txt
816	1	dd if=/dev/miscdev of=readtest bs=4K count=1\nhexdump readtest	code	txt
2763	1	In `/proc` filesystem.	text	txt
507	1	You need to specify the type of each matrix element. The letter `U` means it\nis unsigned. You can also declare signed numbers by using the letter `S`. For\na color image, you would specify three channels. You can also declare\nintegers (signed or unsigned) of size 16 and 32. You also have access to\n32-bit and 64-bit floating-point numbers	text	txt
513	1	cv::Mat region = image.rowRange(start, end);\ncv::Mat region = image.colRange(start, end);	code	cpp
514	3	cv::Mat image = cv::imread("sample.png"};\ncv::Mat logo = cv::imread{"logo.png"};\ncv::Rect region{image.cols - log.cols, image.rows - logo.rows, logo.cols, logo.rows};\ncv::Mat mask{logo};\nlogo.copyTo(region, mask);	code	cpp
525	1	- `netfilter` is the Linux firewall implemented in kernel.\n- `iptables` is a simple firewall interface to `netfilter`.\n- `firewalld` is also a commonly used firewall interface to `netfilter`.	text	txt
525	2	*archlinux*\nsudo pacman -S iptables firewalld	code	txt
525	3	Enable only one of interfaces:	text	txt
525	4	sudo systemctl enable --now firewalld	code	txt
526	1	firewall-cmd --get-zones	code	txt
527	1	sudo firewall-cmd --zone public --list-services	code	txt
528	1	sudo firewall-cmd --zone public --list-ports	code	txt
529	1	sudo firewall-cmd --list-all	code	txt
530	1	sudo firewall-cmd --list-all-zones	code	txt
531	1	Use `--permanent` optional argument to make changes take effect even after reboot.	text	txt
532	1	sudo firewall-cmd --new-zone corp --permanent	code	txt
533	1	sudo firewall-cmd --reload	code	txt
534	1	sudo firewall-cmd --zone corp --add-service ssh --permanent\nsudo firewall-cmd --reload	code	txt
535	1	sudo firewall-cmd --get-default	code	txt
536	1	You should already allow `ssh` service in new zone to prevent losing access to the server once new zone was set to the interface.	text	txt
536	2	The firewalld will access the default zone for every command is used unless any other zone is specified.	text	txt
536	3	sudo firewall-cmd --change-interface <interface> --zone corp --permanent\nsudo firewall-cmd --set-default corp	code	txt
537	1	sudo firewall-cmd --get-active-zones	code	txt
538	1	sudo firewall-cmd --get-services	code	txt
539	1	sudo systemctl enable --now <service>\nsudo firewall-cmd --add-service <service> --permanent\nsudo firewall-cmd --reload	code	txt
540	1	sudo firewall-cmd --remove-service <service> --permanent\nsudo firewall-cmd --reload\nsudo systemctl disable --now <service>	code	txt
541	1	sudo firewall-cmd --add-port 1622/tcp --permanent\nsudo firewall-cmd --reload	code	txt
542	1	sudo firewall-cmd --remove-port 1622/tcp --permanent\nsudo fierwall-cmd --reload	code	txt
543	1	ssh-keygen -t rsa -b 4096 -C "user@domain.tld" -f ~/.ssh/user_rsa	code	txt
544	1	ssh-copy-id -i ~/.ssh/user_rsa.pub -p <port> user@domain.tld	code	txt
545	1	*deprecated*\nnetstat -tuwlpn	code	txt
545	2	*common*\nss -tuwlpn	code	txt
546	1	*archlinux*\nsudo pacman -S libpam-google-authenticator	code	txt
546	2	*debian*\nsudo apt install libpam-google-authenticator	code	txt
546	3	Setup a key:	text	txt
546	4	google-authenticator	code	txt
546	5	Edit `sshd` service configuration:	text	txt
546	6	sudoedit /etc/ssh/sshd_config	code	txt
546	7	UsePAM yes\nChallengeResponseAuthentication yes	code	txt
546	8	sudo systemctl reload sshd	code	txt
546	9	Edit `pam` configuration:	text	txt
546	10	sudoedit /etc/pam.d/sshd	code	txt
546	11	Add the following line:	text	txt
546	12	auth    required    pam_google_authenticator.so	code	txt
547	1	sudoedit /etc/sysconfig/network	code	txt
547	2	NETWORKING_IPV6=no\nIPV6INIT=no	code	txt
548	1	sudo apt install selinux-basics selinux-policy-default auditd	code	txt
549	1	Edit **PAM** configuration file:	text	txt
549	2	sudoedit /etc/pam.d/system-auth	code	txt
549	3	Add following lines:	text	txt
549	4	auth    sufficient  pam_unix.so likeauth nullok\npassword    sufficient  pam_unix.so nullok use_authtok sha256 shadow remember=5	code	txt
550	1	`fail2ban` tool blocks frequently attempted login attempts.	text	txt
550	2	*archlinux*\nsudo pacman -S fail2ban	code	txt
550	3	Configure the service by copying sample config file:	text	txt
550	4	cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local\nsudoedit /etc/fail2ban/jail.local	code	txt
550	5	[sshd]\nenabled = true\nport = ssh\nprotocol = tcp\nfilter = sshd\nlogpath = /var/log/secure\nmaxretry = 5\nfindtime = 600\nbantime = 600	code	txt
550	6	sudo systemctl restart fail2ban	code	txt
551	1	sudo fail2ban-client status ssh	code	txt
552	1	* gpg\n* bcrypt\n* ccrypt\n* zip (4-zip)\n* 7za (7-zip)\n* openssl	text	txt
553	1	**GNU Privacy Guard** or **GnuPG**	text	txt
553	2	*archlinux*\nsudo pacman -S gnupg	code	txt
553	3	*debian*\nsudo apt install gnupg	code	txt
554	1	Encrypt:	text	txt
554	2	gpg -c <file>	code	txt
554	3	Decrypt:	text	txt
554	4	gpg <file>	code	txt
555	1	*archlinux*\nsudo pacman -S cryptsetup	code	txt
555	2	*debian*\nsudo apt install bcrypt	code	txt
556	1	Encrypt:	text	txt
556	2	bcrypt <file>.ext	code	txt
556	3	Decrypt:	text	txt
556	4	bcrypt <file>.bfe	code	txt
557	1	Encrypt:	text	txt
557	2	ccrypt <file>	code	txt
557	3	Decrypt:	text	txt
557	4	cdecrypt <file>.cpt	code	txt
558	1	Encrypt:	text	txt
558	2	zip -p <pass> <output.zip> files...	code	txt
558	3	Decrypt:	text	txt
558	4	unzip <output.zip>	code	txt
559	1	7za a -t zip -p -mem=aes256 output.zip files...\n7za output.zip	code	txt
560	1	openssl enc -aes-256-cbc -in file -out output.dat\nopenssl enc -aes-256-cbc -d -in output.dat > file	code	txt
561	1	dm-crypt	text	txt
561	2	*archlinux*\nsudo pacman -S cryptsetup	code	txt
561	3	*debian*\nsudo apt install cryptset	code	txt
562	1	gunzip -c /proc/config.gz | grep CONFIG_DM_CRYPT	code	txt
563	1	cryptsetup --version\ncryptsetup open /dev/sda1 encrypted_partition\ncryptsetup close encrypted_partition	code	txt
564	1	getfacl <file>\nsetfacl -m u::r <file>\nsetfacl -x m::rx <file>	code	txt
565	1	- ping\n- traceroute\n- nmap	text	txt
566	1	man 1 man	code	txt
567	1	#ifndef _POSIX_C_SOURCE\n#define _POSIX_C_SOURCE 201712L\n#endif	text	txt
567	2	#include <stdio.h>\n#include <stdlib.h>\n#include <errno.h>	text	txt
567	5	if (argc == 1)\nfprintf(stderr, "usage: %s <number>\\\\n", argv[0]);\nelse\nresult = print_user_value(argv[1]);	text	txt
567	6	return result;\n}	text	txt
567	7	int print_user_value(char const* str)\n{\nerrno = 0;\nlong double input = strtold(str, NULL);	text	txt
567	8	if (errno)\nfprintf(stderr, "cannot convert %s to long double\\\\n", str);\nelse\nfprintf(stdout, "%.2Lf\\\\n", input);	text	txt
567	9	return errno;\n}	code	txt
568	1	#ifndef _POSIX_C_SOURCE\n#define _POSIX_C_SOURCE 201108L\n#endif	text	txt
568	2	#ifndef _GNU_SOURCE\n#define _GNU_SOURCE 5000L\n#endif	text	txt
568	3	#include <stdio.h>\n#include <unistd.h>\n#include <getopt.h>\n#include <errno.h>	text	txt
568	4	int main(int argc, char **argv)\n{\nint option = 0;	text	txt
568	5	struct option longopts[] = {\n{"help",  no_argument,       NULL, 'h'},\n{"value", required_argument, NULL, 'a'}\n};	text	txt
568	6	while ((option = getopt_long(argc, argv, "hv:", longopts, NULL)) != -1)\n{\nswitch (option)\n{\ncase 'h':\nfprintf(stdout, "usage: %s [-h] [-v <value>]\\\\n", argv[0]);\nbreak;\ncase 'v':\nfprintf(stdout, "value: %s\\\\n", optarg);\nbreak;\ncase '?':\nfprintf(stderr, "invalid argument\\\\n");\nbreak;\ndefault:\nfprintf(stderr, "usage: %s [-h] [-v <value>]\\\\n", argv[0]);\n}\n}\n}	code	txt
569	1	#include <stdlib.h>	text	txt
569	2	int main(int argc, char **argv)\n{\nif (argc > 1)\nexit(1);	text	txt
569	3	return 0;\n}	code	txt
570	1	#ifndef _POSIX_C_SOURCE\n#define _POSIX_C_SOURCE 202207L\n#endif	text	txt
570	2	#include <stdio.h>	text	txt
570	3	int main(void)\n{\nfprintf(stdout, "standard output\\\\n");\nfprintf(stderr, "standard error\\\\n");\ndprintf(1, "standard output\\\\n");\ndprintf(2, "standard error\\\\n");\n}	code	txt
571	1	#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>	text	txt
571	2	#define INPUT_MAX 20	text	txt
571	3	int main(void)\n{\nchar origin[INPUT_MAX] = {0};\nchar inverted[INPUT_MAX] = {0};	text	txt
571	4	while (fgets(origin, INPUT_MAX, stdin))\n{\nfor (int index = 0; index < sizeof(origin); ++index)\n{\nif (origin[index] >= 'a' && origin[index] <= 'z')\ninverted[index] = origin[index] - 32;\nelse if (origin[index] >= 'A' && origin[index] <= 'Z')\ninverted[index] = origin[index] + 32;\nelse\ninverted[index] = origin[index];\n}	text	txt
571	5	fprintf(stdout, "%s\\\\n", inverted);\nmemset(&inverted, 0, sizeof(inverted));\nmemset(&origin, 0, sizeof(origin));\n}\n}	code	txt
572	1	#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>	text	txt
572	2	#define INPUT_MAX 20	text	txt
572	3	int main(void)\n{\nchar input[INPUT_MAX] = {0};	text	txt
572	4	if (fgets(input, sizeof(input), stdin) == NULL)\nfprintf(stderr, "invalid input\\\\n");	text	txt
572	5	if (strspn(input, "0123456789\\\\n") == strlen(input))\nprintf("valid\\\\n");\nelse\nprintf("invalid\\\\n");\n}	code	txt
573	1	#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>	text	txt
573	2	#define GRN_COLOR "\\\\033[1;31m"\n#define RST_COLOR "\\\\033[0m"	text	txt
573	3	int main(void)\n{\nchar const *term = getenv("TERM");	text	txt
573	4	if (strlen(term) && strstr(term, "256color"))\nprintf(GRN_COLOR "color supported\\\\n" RST_COLOR);\nelse\nprintf("color not supported\\\\n");\n}	code	txt
574	1	gcc -Wall -Wextra -pedantic -fPIC -c source.c\ngcc -shared -Wl,-soname,libsource.so -o libsource.so source.o	code	txt
575	1	#include <unistd.h>	text	txt
575	2	int main(void)\n{\nwrite(1, "system call\\\\n", 13);\n}	code	txt
576	1	#include <stdio.h>\n#include <errno.h>\n#include <unistd.h>\n#include <limits.h>\n#include <sys/sysinfo.h>	text	txt
576	2	int main(void)\n{\nprintf("%-20s %s\\\\n", "Current Directory:", getcwd(NULL, PATH_MAX));\nprintf("%-20s %d\\\\n", "User ID:",           getuid());\nprintf("%-20s %d\\\\n", "Effective User ID:", geteuid());\nprintf("%-20s %d\\\\n", "Process ID:",        getpid());\nprintf("%-20s %d\\\\n", "Parent Process ID:", getppid());	text	txt
576	3	struct sysinfo info;\nif (sysinfo(&info) == -1)\n{\nperror("failed to retrieve system information");\nreturn errno;\n}	text	txt
576	4	printf("%-20s %ld\\\\n", "Uptime:",              info.uptime);\nprintf("%-20s %ld\\\\n", "Total Ram in Use:",    info.totalram);\nprintf("%-20s %ld\\\\n", "Free Ram:",            info.freeram);\nprintf("%-20s %d\\\\n",  "Number of Processes:", info.procs);\nprintf("%-20s %ld\\\\n", "Total Swap:",          info.totalswap);\n}	code	txt
579	1	gcc -P -E # stop at preprocessing stage\ngcc -S    # stop at assembly stage\ngcc -c    # stop at object file stage\ngcc -o    # create an executable	code	txt
581	1	#include <errno.h>\n#include <stdio.h>\n#include <stdlib.h>	text	txt
581	2	int main(void)\n{\nlong int number = strtol("1234", NULL, 10);	text	txt
581	3	if (errno)\nperror("cannot convert to long int");\nelse\nprintf("%ld\\\\n", number);	text	txt
581	4	return errno;\n}	code	txt
582	1	#include <stdio.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <limits.h>\n#include <string.h>\n#include <unistd.h>	text	txt
582	2	int main(int argc, char **argv)\n{\nint fd = 0;\nchar filepath[PATH_MAX] = {0};	text	txt
582	3	if (argc != 2)\n{\nprintf("usage: %s <filepath>\\\\n", argv[0]);\nreturn 1;\n}	text	txt
582	4	strncpy(filepath, argv[1], sizeof(filepath));	text	txt
582	5	if ((fd = creat(filepath, S_IRUSR | S_IWUSR)) == -1)\n{\nperror(NULL);\nreturn errno;\n}	text	txt
582	6	if (write(fd, "another sample\\\\n", 16) == -1)\n{\nperror(NULL);\nreturn errno;\n}	text	txt
582	7	if (close(fd) == -1)\n{\nperror(NULL);\nreturn errno;\n}\n}	code	txt
583	1	#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n#include <limits.h>\n#include <sys/stat.h>	text	txt
583	2	int main(int argc, char **argv)\n{\nif (argc != 2)\n{\nfprintf(stderr, "usage: %s <filepath>\\\\n", argv[0]);\nreturn 1;\n}	text	txt
583	3	char filepath[PATH_MAX] = {0};\nstrncpy(filepath, argv[1], sizeof(filepath));	text	txt
583	4	struct stat filestat;\nif (stat(filepath, &filestat) == -1)\n{\nperror(NULL);\nreturn errno;\n}	text	txt
583	5	printf("Name: %s\\\\n", filepath);\nprintf("Device: %lu\\\\n", filestat.st_dev);\nprintf("Mode: %o\\\\n", filestat.st_mode);\nprintf("Inode: %lu\\\\n", filestat.st_ino);\nprintf("Size: %zd\\\\n", filestat.st_size);\nprintf("Links: %lu\\\\n", filestat.st_nlink);\n}	code	txt
584	1	#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n#include <unistd.h>\n#include <limits.h>	text	txt
584	2	int main(int argc, char **argv)\n{\nif (argc != 4)\n{\nfprintf(stderr, "usage: %s <realpath> <linkpath> <symlink>\\\\n", argv[0]);\nreturn 1;\n}	text	txt
584	3	char realpath[PATH_MAX] = {0};\nstrncpy(realpath, argv[1], sizeof(realpath));	text	txt
584	4	char hardlinkpath[PATH_MAX] = {0};\nstrncpy(hardlinkpath, argv[2], sizeof(hardlinkpath));	text	txt
584	5	char symlinkpath[PATH_MAX] = {0};\nstrncpy(symlinkpath, argv[3], sizeof(symlinkpath));	text	txt
584	6	if (link(realpath, hardlinkpath) == -1)\n{\nperror(NULL);\nreturn errno;\n}	text	txt
584	7	if (symlink(realpath, symlinkpath) == -1)\n{\nperror(NULL);\nreturn errno;\n}\n}	code	txt
585	1	#include <stdio.h>\n#include <utime.h>\n#include <errno.h>\n#include <string.h>\n#include <limits.h>	text	txt
585	2	int main(int argc, char **argv)\n{\nif (argc != 2)\n{\nfprintf(stderr, "usage: %s <filepath>\\\\n", argv[0]);\nreturn 1;\n}	text	txt
585	3	char filepath[PATH_MAX] = {0};\nstrncpy(filepath, argv[1], sizeof(filepath));	text	txt
585	4	if (utime(filepath, NULL))\n{\nperror(NULL);\nreturn errno;\n}\n}	code	txt
586	1	#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n#include <unistd.h>\n#include <limits.h>	text	txt
586	2	int main(int argc, char **argv)\n{\nif (argc != 2)\n{\nfprintf(stderr, "usage: %s <filepath>\\\\n", argv[0]);\nreturn 1;\n}	text	txt
586	3	char filepath[PATH_MAX] = {0};\nstrncpy(filepath, argv[1], sizeof(filepath));	text	txt
586	4	if (unlink(filepath) == -1)\n{\nperror(NULL);\nreturn errno;\n}\n}	code	txt
587	1	#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n#include <limits.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <pwd.h>\n#include <grp.h>	text	txt
587	2	int main(int argc, char **argv)\n{\nif (argc != 2)\n{\nfprintf(stderr, "usage: %s <filepath>\\\\n", argv[0]);\nreturn 1;\n}	text	txt
587	3	char filepath[PATH_MAX] = {0};\nstrncpy(filepath, argv[1], sizeof(filepath));	text	txt
587	4	struct stat filestat;\nif (stat(filepath, &filestat) == -1)\n{\nperror(NULL);\nreturn errno;\n}	text	txt
587	5	printf("Name: %s\\\\n", filepath);\nprintf("Device: %lu\\\\n", filestat.st_dev);\nprintf("Mode: %o\\\\n", filestat.st_mode);\nprintf("Inode: %lu\\\\n", filestat.st_ino);\nprintf("Size: %zd\\\\n", filestat.st_size);\nprintf("Links: %lu\\\\n", filestat.st_nlink);	text	txt
587	6	struct passwd *userinfo;	text	txt
587	7	if ((userinfo = getpwuid(filestat.st_uid)) == NULL)\nperror(NULL);\nelse\nprintf("User: %u (%s)\\\\n", userinfo->pw_uid, userinfo->pw_name);	text	txt
587	8	struct group *groupinfo;	text	txt
587	9	if ((groupinfo = getgrgid(filestat.st_gid)) == NULL)\nperror(NULL);\nelse\nprintf("Group: %u (%s)\\\\n", groupinfo->gr_gid, groupinfo->gr_name);\n}	code	txt
588	1	#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n#include <stdlib.h>\n#include <limits.h>\n#include <sys/stat.h>\n#include <sys/types.h>	text	txt
588	2	int main(int argc, char **argv)\n{\nif (argc != 3)\n{\nfprintf(stderr, "usage: %s <mode> <filepath>\\\\n", argv[0]);\nreturn 1;\n}	text	txt
588	3	mode_t mode = 0;	text	txt
588	4	mode = strtol(argv[1], NULL, 8);\nif (errno)\n{\nperror(NULL);\nreturn errno;\n}	text	txt
588	5	char filepath[PATH_MAX] = {0};\nstrncpy(filepath, argv[2], sizeof(filepath));	text	txt
588	6	if (chmod(filepath, mode) == -1)\n{\nperror(NULL);\nreturn errno;\n}\n}	code	txt
589	1	#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n#include <unistd.h>\n#include <limits.h>\n#include <sys/types.h>\n#include <pwd.h>\n#include <grp.h>	text	txt
589	2	int main(int argc, char **argv)\n{\nif (argc != 3)\n{\nfprintf(stderr, "usage: %s <user[:group]> <filepath>\\\\n", argv[0]);\nreturn 1;\n}	text	txt
589	3	char *owner = strtok(argv[1], ":");\nchar *group = strtok(NULL, ":");	text	txt
589	4	char filepath[PATH_MAX] = {0};\nstrncpy(filepath, argv[2], sizeof(filepath));	text	txt
589	5	struct passwd *userinfo;\nstruct group *groupinfo;	text	txt
589	6	if ((userinfo = getpwnam(owner)) == NULL)\n{\nif (errno == 0)\nfprintf(stderr, "\\\\033[1;31m%s\\\\033[0m\\\\n", "owner not found");\nelse\nfprintf(stderr, "\\\\033[1;31m%s\\\\033[0m\\\\n", strerror(errno));\nreturn errno;\n}	text	txt
589	7	if ((groupinfo = getgrnam(group)) == NULL)\n{\nif (errno == 0)\nfprintf(stderr, "\\\\033[1;31m%s\\\\033[0m\\\\n", "group not found");\nelse\nfprintf(stderr, "\\\\033[1;31m%s\\\\033[0m\\\\n", strerror(errno));	text	txt
589	8	return errno;\n}	text	txt
589	9	if (chown(filepath, userinfo->pw_uid, groupinfo->gr_gid) == -1)\n{\nperror(NULL);\nfprintf(stderr, "\\\\033[1;31m%s\\\\033[0m\\\\n", strerror(errno));\nreturn errno;\n}\n}	code	txt
590	1	#include <stdio.h>\n#include <fcntl.h>\n#include <errno.h>\n#include <string.h>\n#include <unistd.h>\n#include <limits.h>\n#include <time.h>	text	txt
590	2	int main(int argc, char **argv)\n{\nif (argc != 2)\n{\nfprintf(stderr, "usage: %s <filepath>\\\\n", argv[0]);\nreturn 1;\n}	text	txt
590	3	char filepath[PATH_MAX] = {0};\nstrncpy(filepath, argv[1], sizeof(filepath));	text	txt
590	4	int fd = 0;	text	txt
590	5	if ((fd = open(filepath, O_CREAT|O_RDWR|O_TRUNC, S_IRUSR|S_IWUSR|S_IRGRP|S_IROTH)) == -1)\n{\nperror(NULL);\nreturn errno;\n}	text	txt
590	6	time_t const epoch = time(NULL);\nchar const *now = ctime(&epoch);	text	txt
590	7	if (write(fd, now, strlen(now)) == -1)\n{\nperror(NULL);\nreturn errno;\n}	text	txt
590	8	if (close(fd) == -1)\n{\nperror(NULL);\nreturn errno;\n}\n}	code	txt
591	1	#include <stdio.h>\n#include <fcntl.h>\n#include <errno.h>\n#include <unistd.h>\n#include <string.h>\n#include <limits.h>	text	txt
591	2	int main(int argc, char **argv)\n{\nif (argc != 2)\n{\nfprintf(stderr, "usage: %s <filepath>\\\\n", argv[0]);\nreturn 1;\n}	text	txt
591	3	char filepath[PATH_MAX] = {0};\nstrncpy(filepath, argv[1], sizeof(filepath));	text	txt
591	4	int fd = 0;\nif ((fd = open(filepath, O_RDONLY)) == -1)\n{\nperror(NULL);\nreturn errno;\n}	text	txt
591	5	char buffer[100] = {0};\nif (read(fd, buffer, sizeof(buffer)) == -1)\n{\nperror(NULL);\nreturn errno;\n}	text	txt
591	6	printf("%s\\\\n", buffer);	text	txt
591	7	if (close(fd) == -1)\n{\nperror(NULL);\nreturn errno;\n}\n}	code	txt
592	1	#include <stdio.h>\n#include <string.h>\n#include <limits.h>	text	txt
592	2	int main(int argc, char **argv)\n{\nif (argc != 2)\n{\nfprintf(stderr, "usage: %s <filepath>\\\\n", argv[0]);\nreturn 1;\n}	text	txt
592	3	char filepath[PATH_MAX] = {0};\nstrncpy(filepath, argv[1], sizeof(filepath));	text	txt
592	4	FILE *fp = NULL;\nif ((fp = fopen(filepath, "w")) == NULL)\n{\nperror(NULL);\nreturn 2;\n}	text	txt
592	5	char buffer[100] = {0};	text	txt
592	6	while (fgets(buffer, sizeof(buffer), stdin))\n{\nfprintf(fp, "%s\\\\n", buffer);\n}	text	txt
593	1	#include <stdio.h>\n#include <string.h>\n#include <limits.h>	text	txt
593	2	int main(int argc, char **argv)\n{\nif (argc != 2)\n{\nfprintf(stderr, "usage: %s <filepath>\\\\n", argv[0]);\nreturn 1;\n}	text	txt
593	3	char filepath[PATH_MAX] = {0};\nstrncpy(filepath, argv[1], sizeof(filepath));	text	txt
593	4	FILE *fp = NULL;\nif ((fp = fopen(filepath, "rwb")) == NULL)\n{\nperror(NULL);\nreturn 2;\n}	text	txt
593	5	double numbers[3] = {1.1, 2.2, 3.3};	text	txt
593	6	if (fwrite(&numbers, sizeof(double), sizeof(numbers)/sizeof(double), fp) == -1)\n{\nperror(NULL);\nreturn 3;\n}	text	txt
593	7	printf("wrote %.1f %.1f %.1f numbers\\\\n", numbers[0], numbers[1], numbers[2]);	text	txt
593	8	double buffer[3] = {0};	text	txt
593	9	if (fread(&buffer, sizeof(double), sizeof(buffer)/sizeof(double), fp) == -1)\n{\nperror(NULL);\nreturn 4;\n}	text	txt
593	10	printf("read %.1f %.1f %.1f numbers\\\\n", buffer[0], buffer[1], buffer[2]);	text	txt
593	11	if (fclose(fp) == -1)\n{\nperror(NULL);\nreturn 5;\n}\n}	code	txt
594	1	#include <stdio.h>\n#include <fcntl.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <limits.h>	text	txt
594	2	int main(int argc, char **argv)\n{\nif (argc != 3)\n{\nfprintf(stderr, "usage: %s <filepath> <offset>\\\\n", argv[0]);\nreturn 1;\n}	text	txt
594	3	char filepath[PATH_MAX] = {0};\nstrncpy(filepath, argv[1], sizeof(filepath));	text	txt
594	4	off_t offset = strtol(argv[2], NULL, 10);	text	txt
594	5	int fd = 0;\nif ((fd = open(filepath, O_RDONLY)) == 0)\n{\nperror(NULL);\nreturn 2;\n}	text	txt
594	6	if (lseek(fd, offset, SEEK_SET) == -1)\n{\nperror(NULL);\nreturn 3;\n}	text	txt
594	7	char buffer[10000] = {0};\nif (read(fd, buffer, sizeof(buffer)) == -1)\n{\nperror(NULL);\nreturn 4;\n}	text	txt
594	8	printf("%s\\\\n", buffer);	text	txt
594	9	if (close(fd) == -1)\n{\nperror(NULL);\nreturn 5;\n}\n}	code	txt
595	1	#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <limits.h>	text	txt
595	2	int main(int argc, char **argv)\n{\nif (argc != 3)\n{\nfprintf(stderr, "usage: %s <filepath> <offset>\\\\n", argv[0]);\nreturn 1;\n}	text	txt
595	3	char filepath[PATH_MAX] = {0};\nstrncpy(filepath, argv[1], sizeof(filepath));	text	txt
595	4	off_t offset = strtol(argv[2], NULL, 10);	text	txt
595	5	FILE *fp = NULL;\nif ((fp = fopen(filepath, "r")) == NULL)\n{\nperror(NULL);\nreturn 2;\n}	text	txt
595	6	if (fseek(fp, offset, SEEK_SET) == -1)\n{\nperror(NULL);\nreturn 3;\n}	text	txt
595	7	char buffer[1000] = {0};\nwhile (fgets(buffer, sizeof(buffer), fp) != NULL)\n{\nprintf("%s", buffer);\n}\nprintf("\\\\n");	text	txt
595	8	if (fclose(fp) == -1)\n{\nperror(NULL);\nreturn 5;\n}\n}	code	txt
596	1	#ifndef _POSIX_C_SOURCE\n#define _POSIX_C_SOURCE 11082022L\n#endif	text	txt
596	2	#include <stdio.h>\n#include <signal.h>\n#include <unistd.h>\n#include <stdlib.h>	text	txt
596	3	void signal_handler(int);	text	txt
596	4	int main(void)\n{\nstruct sigaction action;	text	txt
596	5	action.sa_flags = SA_RESTART;\naction.sa_handler = signal_handler;\nsigfillset(&action.sa_mask);	text	txt
596	6	sigaction(SIGHUP, &action, NULL);\nsigaction(SIGINT, &action, NULL);	text	txt
596	7	for (;;)\nsleep(10);\n}	text	txt
596	8	void signal_handler(int signal)\n{\nprintf("\\\\nprocess killed by signal %d\\\\n", signal);\nexit(signal);\n}	code	txt
597	1	#include <stdio.h>\n#include <signal.h>\n#include <unistd.h>	text	txt
597	2	int main(void)\n{\nsigset_t signals;\nsigset_t old_signals;	text	txt
597	3	if (sigemptyset(&signals) == -1)\n{\nperror(NULL);\nreturn 1;\n}	text	txt
597	4	if (sigaddset(&signals, SIGHUP) == -1)\n{\nperror(NULL);\nreturn 2;\n}	text	txt
597	5	if (sigprocmask(SIG_BLOCK, &signals, &old_signals) == -1)\n{\nperror(NULL);\nreturn 3;\n}	text	txt
597	6	sleep(10);	text	txt
597	7	sigprocmask(SIG_UNBLOCK, &signals, &old_signals);\n}	code	txt
598	1	#include <stdio.h>\n#include <errno.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/wait.h>	text	txt
598	2	int main(void)\n{\npid_t child;\nint status;	text	txt
598	3	if ((child = fork()) == -1)\n{\nperror(NULL);\nreturn errno;\n}	text	txt
598	4	if (child == 0)\n{\nprintf("child:  %d\\\\n", getpid());	text	txt
598	5	if (execl("/usr/bin/ps", "ps", "-f", "--forest", (char*)NULL) == -1)\n{\nperror(NULL);\nreturn errno;\n}\n}\nelse\n{\nprintf("parent: %d\\\\n", getpid());\nwaitpid(child, &status, 0);\nprintf("return: %d\\\\n", status);\n}\n}	code	txt
599	1	#include <stdio.h>\n#include <signal.h>\n#include <unistd.h>\n#include <stdlib.h>\n#include <sys/types.h>	text	txt
599	2	int main(void)\n{\npid_t child_pid;\nint seconds = 20;	text	txt
599	3	printf("parent: %d\\\\n", getpid());	text	txt
599	4	if ((child_pid = fork()) == -1)\n{\nperror(NULL);\nreturn 1;\n}	text	txt
599	5	if (child_pid == 0)\n{\nprintf("child: %d\\\\n", getpid());\nexit(0);\n}\nelse\n{\nprintf("parent waiting for %ds\\\\n", seconds);\nsleep(seconds);\n}\n}	code	txt
600	1	#include <stdio.h>\n#include <unistd.h>\n#include <sys/types.h>	text	txt
600	2	int main(void)\n{\npid_t child;\nint seconds = 20;	text	txt
600	3	if ((child = fork()) == -1)\n{\nperror(NULL);\nreturn 1;\n}	text	txt
600	4	if (child == 0)\n{\nprintf("child:  %d\\\\n", getpid());\nsleep(seconds);\n}\nelse\n{\nprintf("parent: %d\\\\n", getpid());\n}\n}	code	txt
601	1	#include <stdio.h>\n#include <errno.h>\n#include <unistd.h>\n#include <signal.h>\n#include <sys/types.h>\n#include <sys/wait.h>	text	txt
601	2	int main(void)\n{\npid_t child = 0;\nint status = 0;	text	txt
601	3	if ((child = fork()) == -1)\n{\nperror(NULL);\nreturn errno;\n}	text	txt
601	4	if (child == 0)\n{\nif (execl("/usr/bin/ping", "ping", "localhost", (char*)NULL) == -1)\n{\nperror(NULL);\nreturn errno;\n}\n}\nelse\n{\nsleep(3);\nprintf("stopping...\\\\n");	text	txt
601	5	if (kill(child, SIGINT) == -1)\n{\nperror(NULL);\nreturn errno;\n}	text	txt
601	6	waitpid(child, &status, 0);\n}\n}	code	txt
602	1	#include <stdio.h>\n#include <stdlib.h>	text	txt
602	2	int main(void)\n{\nif (system("/usr/bin/ping -c3 localhost") != 0)\n{\nperror("cannot run command");\n}\n}	code	txt
603	1	#ifndef _POSIX_C_SOURCE\n#define _POSIX_C_SOURCE 11082022L\n#endif	text	txt
603	3	void signal_handler(int);	text	txt
603	2	#include <stdio.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <signal.h>\n#include <string.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <sys/stat.h>\n#include <time.h>	text	txt
603	4	int stop = 0;\nFILE *fp = NULL;\nchar const *pidfile = "/var/run/custom-daemon.pid";\nchar const *storage = "/tmp/daemon.db";	text	txt
1284	9	It's important that you understand containers are persistent in nature.\nContainers are designed to be immutable objects and it’s not a good practice to write data to them.\nFor this reason, Docker provides volumes that exist separately from the container, but can be mounted into the container at runtime.	text	txt
1286	4	* Registry\n* Repository\n* Tag	text	txt
1287	2	docker image push registry/repository/container:latest	code	txt
1290	1	Some instructions create new layers, whereas others just add metadata to the image config file.	text	txt
1290	4		code	txt
1292	2		code	txt
1293	3	To protect against this, Docker performs a checksum against each file being\ncopied, and compares that to a checksum of the same f i le in the cached\nlayer.\nIf the checksums do not match, the cache is invalidated and a new layer is built.	text	txt
1295	1	If you are building Linux images, and using the apt package manager, you\nshould use the --no-install-recommends flag with the apt-get install command.\nThis makes sure that apt only installs main dependencies\n(packages in the Depends field) and not recommended or suggested packages.	text	txt
1296	1	A *swarm* consists of one or more Docker nodes.	text	txt
1298	1	The configuration and state of a *swarm* is held in a distributed *etcd* database located on all *managers*.\nIt's installed as part of the swarm and just takes care of itself.	text	txt
1299	2	Joining a Docker host to an existing *swarm* switches them into *swarm mode* as part of the operation.	text	txt
1301	1	The default port that *swarm mode* operates on is 2377.\nThis is customizable, but it's convention to use 2377/tcp for secured client-to-swarm connections.	text	txt
1302	2	Nodes with nothing in the `MANAGER STATUS` column are *workers*.\nThe asterisk after the `ID` column indicates the node you are logged on to and executing commands from.	text	txt
1303	2	docker swarm join-token worker\ndocker swarm join-token manager	code	txt
1304	2	docker swarm join --token <token> 10.0.0.1:2377 --advertise-addr 10.0.0.1:2377 --listen-addr 10.0.0.1:2377	code	txt
1304	3	The `--advertise-addr` and `--listen-addr` flags are optional, but it's best practice to be as specific as possible when it comes to network configuration.	text	txt
1305	1	Swarm implements a form of active-passive multi-manager high availability mechanism.\nThis means that although you have multiple *managers*, only one of them is *active* at any given moment.\nThis active *manager* is called the *leader*, and is the only *manager* that will ever issue live commands against the *swarm*.\nSo, it's only ever the *leader* that changes the config, or issues tasks to workers.\nIf a *follower manager* (passive) receives commands for the swarm, it proxies them across the *leader*.	text	txt
1306	1	1. Deploy an odd number of managers.\n2. Don't deploy too many managers (3 or 5 is recommended)	text	txt
1306	2	Having an odd number of *managers* reduced the chance of split-brain condition.\nFor example, if you had 4 *managers* and the network partitioned, you could be left with two managers on each side of the partition.\nThis is known as a split brain, each side knows there used to be 4 but can now only see 2.\nBut crucially, neither side has any way of knowing if the other are still alive and whether it holds a majority (quorum).\nA swarm cluster continues to operate during split-brain condition, but you are no longer able to alter the configuration, or add and manage application workloads.\nHowever, if you have 3 or 5 managers and the same network partition occurs, it is impossible to have an equal number of managers on both sides of the parition, then one side achieves quorum and full cluster management services remain available.	text	txt
1307	1	Restarting an old manager or restoring an old backup has the potential to compromise the cluster.\nOld managers re-joining a swarm automatically decrypt and gain access to the Raft log time-series database, this can pose security concerns.\nRestoring old backups can also wipe the current swarm configuration.	text	txt
1307	2	To prevent situations like these, Docker allows to lock a swarm with the Autolock feature.\nThis forces restarted managers to present the cluster unlock key before being admitted back into the cluster.	text	txt
1308	2	docker swarm init --autolock	code	txt
1308	3	However, to lock an already initialized swarm, run the following command on a swarm *manager*:	text	txt
1308	4	docker swarm update --autolock true	code	txt
1310	1	Restart docker daemon one of the *manager* nodes:	text	txt
1310	2	sudo systemctl restart docker	code	txt
1310	3	Try to list the nodes in the swarm on restarted *manager* to confirm that it has not been allowed to re-join the swarm:	text	txt
1310	5	Unlock the swarm on restarted *manager*:	text	txt
1310	7	Confirm that *manager* has re-joined by listing swarm nodes.	text	txt
1311	1	1. Imperatively on the command line with `docker service create`\n2. Declaratively with a stack ﬁle	text	txt
1312	1	docker service create --name my-service --publish 80:80 --replicas 5 repository/project:v1	code	txt
1314	1	docker service ps my-service	code	txt
1315	1	docker service inspect --pretty my-service	code	txt
1316	1	The default replication mode of a service is *replicated*.\nThis deploys a desired number of replicas and distributes them as evenly as possible across the cluster.	text	txt
1316	2	The other mode is *global*, which runs a single replica on every node in swarm.\nTo deploy a *global service* you need to pass the `--mode global` flag to the `docker service create` command.	text	txt
1317	1	docker service scale my-service=10\ndocker service scale my-service=2\ndocker service ls\ndocker service ps my-service	code	txt
1318	1	docker service rm my-service	text	txt
1319	1	docker network create --driver overlay my-network	code	txt
1319	2	An overlay network creates a new layer 2 network that we can place containers on, and all containers on it will be able to communicate.	text	txt
1321	1	docker service create --name my-service --network my-network --publish 80:80 --replicas 10 repository/project:v1	text	txt
1322	1	This mode of publishing a port on every node in the swarm — even nodes not running service replicas — is called *ingress mode* and is the default.\nThe alternative mode is *host mode* which only publishes the service on swarm nodes running replicas.	text	txt
603	5	int main(void)\n{\npid_t process_id;\npid_t session_id;	text	txt
603	6	if ((process_id = fork()) == -1)\n{\nperror("cannot fork");\nreturn 1;\n}	text	txt
603	7	if (process_id > 0)\n{\nwaitpid(process_id, NULL, 0);\nreturn 0;\n}	text	txt
603	8	if ((session_id = setsid()) == -1)\n{\nperror("cannot create new session");\nreturn errno;\n}	text	txt
603	9	printf("new parent process id %d with session id %d\\\\n", getpid(), session_id);	text	txt
603	10	if ((process_id = fork()) == -1)\n{\nperror("cannot create daemon process");\nreturn errno;\n}	text	txt
603	11	if (process_id > 0)\n{\nif ((fp = fopen(pidfile, "w")) == NULL)\n{\nperror("cannot create pid file");\nkill(process_id, SIGKILL);\nreturn errno;\n}	text	txt
603	12	fprintf(fp, "%d\\\\n", process_id);\nprintf("daemon started with id %d\\\\n", process_id);	text	txt
603	13	if (fclose(fp) == -1)\n{\nperror("cannot close pid file");\nreturn errno;\n}	text	txt
603	15	mode_t process_mask = 0022;\numask(process_mask);	text	txt
603	16	if (chdir("/") == -1)\nperror("cannot change working directory of daemon");	text	txt
603	18	if ((fp = fopen(storage, "w")) == NULL)\n{\nperror("cannot create storage");\nreturn errno;\n}	text	txt
603	19	fprintf(fp, "daemon running with id %d\\\\n", getpid());	text	txt
603	20	struct sigaction signals;\nsignals.sa_flags = SA_RESTART;\nsignals.sa_handler = signal_handler;\nsigaction(SIGINT, &signals, NULL);\nsigaction(SIGTERM, &signals, NULL);\nsigaction(SIGABRT, &signals, NULL);\nsigaction(SIGQUIT, &signals, NULL);\nsigaction(SIGHUP, &signals, NULL);	text	txt
603	21	close(STDIN_FILENO);\nclose(STDOUT_FILENO);\nclose(STDERR_FILENO);\nopen("/dev/null", 1);\nopen("/dev/null", 2);\nopen("/dev/null", 3);	text	txt
603	23	while (stop == 0)\n{\nnow = time(NULL);\nfprintf(fp, "%s", ctime(&now));\nfflush(fp);\nsleep(5);\n}	text	txt
603	24	fprintf(fp, "daemon stopped\\\\n");	text	txt
603	25	if (fclose(fp) == -1)\nexit(errno);\n}	text	txt
603	26	void signal_handler(int signal)\n{\nstop = 1;\nfprintf(fp, "stopping daemon\\\\n");	text	txt
603	27	if (unlink(pidfile) == -1)\nfprintf(fp, "cannot remove pid file: %s\\\\n", strerror(errno));\n}	code	txt
604	1	[Unit]\nAfter=network-online.target\nWants=network-online.target	text	txt
604	2	[Service]\nType=forking\nExecStart=/usr/local/sbin/sample-daemon\nRestart=on-failure\nPIDFile=/var/run/sample-daemon.pid	text	txt
604	3	[Install]\nWantedBy=multi-user.target	code	txt
605	1	[Unit]\nAfter=network-online.target\nWants=network-online.target	text	txt
605	2	[Service]\nType=simple\nExecStart=/usr/local/bin/daemon\nRestart=on-failure	text	txt
605	3	[Install]\nWantedBy=multi-user.target	code	txt
606	1	#include <stdio.h>\n#include <curl/curl.h>	text	txt
606	2	int main(void)\n{\nCURL *curl = NULL;	text	txt
606	3	curl = curl_easy_init();\nif (curl)\n{\ncurl_easy_setopt(curl, CURLOPT_URL, "https://ifconfig.me - https://ifconfig.me/ip");\ncurl_easy_perform(curl);\ncurl_easy_cleanup(curl);\n}\nelse\n{\nfprintf(stderr, "curl initialization failed\\\\n");\nreturn 1;\n}\n}	code	txt
607	1	file object.o\nar -cvr libobject.a object.o\nnm libobject.a\nstrip app	code	txt
608	1	gcc -c object.c\nar -cvr libobject.a object.o\ngcc main.c libobject.a -o app	text	txt
608	2	gcc -c -fPIC object.c\ngcc -shared -Wl,-soname,libobject.so -o libobject.so.1 object.o\ngcc -lobject main.c -o app	code	txt
609	1	sudo install -o root -g root -m 644 libobject.a /usr/local/lib/libobject.a	code	txt
611	1	#include <stdio.h>\n#include <unistd.h>	text	txt
611	2	int main(void)\n{\nif (isatty(STDOUT_FILENO) == 1)\nprintf("tty name: %s\\\\n", ttyname(STDOUT_FILENO));\nelse\nperror("no tty");\n}	code	txt
612	1	#ifndef _XOPEN_SOURCE\n#define _XOPEN_SOURCE 600\n#endif	text	txt
612	2	#include <stdio.h>\n#include <errno.h>\n#include <unistd.h>\n#include <string.h>\n#include <stdlib.h>\n#include <fcntl.h>	text	txt
612	3	inline void check_error(int const);\nint read_input(int);	text	txt
612	4	int main(void)\n{\nint master = 0;	text	txt
612	5	check_error((master = posix_openpt(O_RDWR)));\ncheck_error(grantpt(master));\ncheck_error(unlockpt(master));	text	txt
612	6	printf("slave: %s\\\\n", ptsname(master));	text	txt
612	7	while (read_input(master))\n{ }\n}	text	txt
612	8	void check_error(int const ret)\n{\nif (ret == -1)\n{\nperror(NULL);\nexit(errno);\n}\n}	text	txt
612	9	int read_input(int pts)\n{\nchar rxbuf[1];\nchar txbuf[3];\nint read_bytes = 0;	text	txt
612	10	if ((read_bytes = read(pts, rxbuf, 1)) == -1)\n{\nperror("input failed");\nread_bytes = 0;\n}	text	txt
612	11	if (read_bytes == 1)\n{\nif ('\\\\r' == rxbuf[0])\n{\nprintf("\\\\n\\\\r");\nsprintf(txbuf, "\\\\n\\\\r");\n}\nelse\n{\nprintf("%c", rxbuf[0]);\nsprintf(txbuf, "%c", rxbuf[0]);\n}	text	txt
612	12	fflush(stdout);\nwrite(pts, txbuf, strlen(txbuf));\n}\nelse\n{\nfprintf(stderr, "disconnected\\\\n\\\\r");\n}	text	txt
1285	1	The period (.) at the end of the command tells Docker to use the shell’s current working directory as the build context.	text	txt
1286	5	docker login	code	txt
1288	1	This command adds an additional tag, it does not overwrite the original.	text	txt
1290	2	Examples of instructions that create new layers are FROM, RUN, and COPY.\nExamples that create metadata include EXPOSE, WORKDIR, ENV, and ENTRYPOINT.	text	txt
1291	1	docker image history web:latest	code	txt
1293	1	The COPY and ADD instructions include steps to ensure that the content being\ncopied into the image has not changed since the last build.	text	txt
1294	1	Add the --squash flag to the `docker image build` command if you want to create a squashed image.	text	txt
1295	2	apt update && apt upgrade --yes && apt install --yes --no-install-recommends packages...	code	txt
1297	1	Nodes are configured as *managers* or *workers*.	text	txt
1299	1	Docker nodes that are not part of a *swarm* are said to be in a **single-engine** mode.\nOnce they're added to a *swarm* they're automatically switched into **swarm mode**.	text	txt
1300	1	docker swarm init --advertise-addr 10.0.0.1:2377 --listen-addr 10.0.0.1:2377	code	txt
1302	1	docker node ls	code	txt
1303	1	In a *manager* node extract tokens required to add new *workers* and *managers* to the swarm:	text	txt
1304	1	In a *worker* node use extracted token to join to the swarm:	text	txt
1308	1	To apply a lock directly to a new swarm:	text	txt
612	14		code	txt
613	1	#include <stdio.h>\n#include <errno.h>\n#include <unistd.h>\n#include <termios.h>	text	txt
613	2	int main(void)\n{\nstruct termios terminal;	text	txt
613	3	tcgetattr(STDIN_FILENO, &terminal);\nterminal.c_lflag = terminal.c_lflag & ~ECHO;\ntcsetattr(STDIN_FILENO, TCSAFLUSH, &terminal);	text	txt
613	4	char buffer[100] = {0};	text	txt
613	5	printf("Enter sensitive data: ");\nscanf("%s", buffer);\nprintf("\\\\nSpoilers!\\\\nYou entered: %s\\\\n", buffer);	text	txt
613	6	terminal.c_lflag = terminal.c_lflag | ECHO;\ntcsetattr(STDIN_FILENO, TCSAFLUSH, &terminal);\n}	code	txt
614	1	#include <stdio.h>\n#include <unistd.h>\n#include <sys/ioctl.h>	text	txt
614	2	int main(void)\n{\nstruct winsize window = {0};	text	txt
614	3	if (ioctl(STDOUT_FILENO, TIOCGWINSZ, &window) == -1)\nperror("cannot retrieve window size");	text	txt
614	4	printf("%dx%d\\\\n", window.ws_row, window.ws_col);\n}	code	txt
615	1	#ifndef _POSIX_C_SOURCE\n#define _POSIX_C_SOURCE 600\n#endif	text	txt
615	2	#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n#include <signal.h>	text	txt
615	3	int main(int argc, char **argv)\n{\nif (argc != 2)\n{\nfprintf(stderr, "usage: %s <pid>\\\\n", argv[0]);\nreturn 1;\n}	text	txt
615	4	int pid = 0;\nsscanf(argv[1], "%d", &pid);	text	txt
615	5	if (kill(pid, SIGINT) == -1)\n{\nfprintf(stderr, "cannot kill process %d: %s\\\\n", pid, strerror(errno));\nreturn errno;\n}	text	txt
615	6	return errno;\n}	code	txt
616	1	#ifndef _POSIX_C_SOURCE\n#define _POSIX_C_SOURCE 200809L\n#endif	text	txt
616	2	#include <stdio.h>\n#include <errno.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/wait.h>	text	txt
616	3	int main(void)\n{\nchar buffer[100] = {0};\nint pipefd[2] = {0};\nint status = 0;\npid_t child = 0;	text	txt
616	4	if (pipe(pipefd) == -1)\n{\nperror("cannot create pipe");\nreturn errno;\n}	text	txt
616	5	if ((child = fork()) == -1)\n{\nperror("cannot fork");\nreturn errno;\n}	text	txt
616	6	if (0 == child)\n{\nclose(pipefd[STDOUT_FILENO]);	text	txt
616	7	printf("child:  %d\\\\n", getpid());	text	txt
616	8	if (read(pipefd[STDIN_FILENO], buffer, sizeof(buffer)) == -1)\n{\nperror("cannot read from pipe");\nreturn errno;\n}	text	txt
616	9	printf("%s\\\\n", buffer);	text	txt
616	10	close(pipefd[STDIN_FILENO]);\n}\nelse\n{\nclose(pipefd[STDIN_FILENO]);	text	txt
616	11	printf("parent: %d - child: %d\\\\n", getpid(), child);\ndprintf(pipefd[STDOUT_FILENO], "parent starting conversation");	text	txt
616	12	close(pipefd[STDOUT_FILENO]);\nwaitpid(child, &status, 0);\n}\n}	code	txt
617	1	#ifndef _POSIX_C_SOURCE\n#define _POSIX_C_SOURCE 200809L\n#endif	text	txt
617	2	#include <stdio.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <time.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <signal.h>\n#include <sys/types.h>\n#include <sys/stat.h>	text	txt
617	3	int fifofd = 0;\nchar const *fifoname = "/tmp/named-pipe";	text	txt
617	4	inline void close_pipe(void);\ninline void remove_pipe(void);\ninline void setup_signals(void);	text	txt
617	5	void clean_up(int);	text	txt
617	6	int main(int argc, char **argv)\n{\ntime_t now = time(NULL);	text	txt
617	7	setup_signals();	text	txt
617	8	if (mkfifo(fifoname, 0600) == -1)\n{\nperror("cannot create named pipe");\nreturn errno;\n}	text	txt
617	9	if ((fifofd = open(fifoname, O_WRONLY)) == -1)\n{\nperror("cannot open named pipe");\nremove_pipe();\nreturn errno;\n}	text	txt
617	10	if (dprintf(fifofd, "%s\\\\n", ctime(&now)) == -1)\n{\nperror("failed to write into named pipe");\nclean_up(0);\nreturn errno;\n}	text	txt
617	11	clean_up(0);\n}	text	txt
617	12	void clean_up(int signal)\n{\nclose_pipe();\nremove_pipe();\nexit(errno);\n}	text	txt
617	13	void close_pipe(void)\n{\nif (close(fifofd) == -1)\n{\nperror("failed to close named pipe");\n}\n}	text	txt
617	14	void remove_pipe(void)\n{\nif (unlink(fifoname) == -1)\n{\nperror("failed to remove named pipe");\n}\n}	text	txt
617	15	void setup_signals(void)\n{\nstruct sigaction action;\naction.sa_flags = SA_RESTART;\naction.sa_handler = clean_up;\nsigfillset(&action.sa_mask);\nsigaction(SIGINT, &action, NULL);\nsigaction(SIGTERM, &action, NULL);\nsigaction(SIGABRT, &action, NULL);\nsigaction(SIGQUIT, &action, NULL);\nsigaction(SIGHUP, &action, NULL);\nsigaction(SIGPIPE, &action, NULL);\n}	code	txt
618	1	#include <stdio.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <string.h>\n#include <mqueue.h>\n#include <sys/stat.h>\n#include <sys/types.h>	text	txt
618	2	int main(int argc, char **argv)\n{\nif (argc != 2)\n{\nfprintf(stderr, "usage: %s <message>\\\\n", argv[0]);\nreturn 1;\n}	text	txt
618	3	int fd = 0;\nchar message[100] = {0};\nstrncpy(message, argv[1], sizeof(message));	text	txt
618	4	struct mq_attr attributes;\nattributes.mq_maxmsg = 10;\nattributes.mq_msgsize = 100;	text	txt
618	5	fd = mq_open("/msgs", O_CREAT|O_RDWR, S_IRUSR|S_IWUSR|S_IRGRP|S_IROTH, &attributes);\nif (fd == -1)\n{\nperror("cannot create message queue");\nreturn errno;\n}	text	txt
618	6	if (mq_send(fd, message, strlen(message), 1) == -1)\nperror("failed to write into message queue");	text	txt
618	7	if (mq_close(fd) == -1)\n{\nperror("cannot close message queue");\nreturn errno;\n}\n}	code	txt
619	1	#include <stdio.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <string.h>\n#include <stdlib.h>\n#include <mqueue.h>\n#include <sys/stat.h>\n#include <sys/types.h>	text	txt
619	2	int main(void)\n{\nint fd = 0;	text	txt
619	3	struct mq_attr attributes;	text	txt
619	4	if ((fd = mq_open("/msgs", O_RDONLY)) == -1)\n{\nperror("cannot open message queue");\nreturn errno;\n}	text	txt
816	2	dd if=/dev/urandom of=/dev/miscdev bs=4K count=1	code	txt
619	5	if (mq_getattr(fd, &attributes) == -1)\n{\nperror("cannot get message queue attributes");\nreturn errno;\n}	text	txt
619	6	char *buffer = NULL;\nif ((buffer = calloc(attributes.mq_msgsize, sizeof(char))) == NULL)\n{\nperror("cannot allocate memory for message queue");\nreturn errno;\n}	text	txt
619	7	printf("%ld messages in queue\\\\n", attributes.mq_curmsgs);	text	txt
619	8	for (int i = 0; i < attributes.mq_curmsgs; ++i)\n{\nif (mq_receive(fd, buffer, attributes.mq_msgsize, NULL) == -1)\n{\nperror("failed to receive message");\n}	text	txt
619	9	printf("%s\\\\n", buffer);\nmemset(buffer, '\\\\0', attributes.mq_msgsize);\n}	text	txt
619	10	free(buffer);	text	txt
670	2	- The parameters can be a parameter pack:	text	txt
619	11	if (mq_close(fd) == -1)\n{\nperror("cannot close message queue descriptor");\n}	text	txt
619	12	if (mq_unlink("/msgs") == -1)\n{\nperror("cannot remove message queue");\n}	text	txt
619	13	return errno;\n}	code	txt
620	1	#include <stdio.h>\n#include <errno.h>\n#include <unistd.h>\n#include <string.h>\n#include <sys/mman.h>\n#include <sys/stat.h>\n#include <sys/wait.h>\n#include <sys/types.h>	text	txt
620	2	int main(void)\n{\nchar *mem_name = NULL;\nint status = 0;\npid_t child = 0;	text	txt
620	3	mem_name = mmap(NULL, 100, PROT_WRITE|PROT_READ, MAP_SHARED|MAP_ANONYMOUS, -1, 0);\nif (mem_name == MAP_FAILED)\n{\nperror("memory map failed");\nreturn errno;\n}	text	txt
620	4	char const *parent_msg = "parent message";\nchar const *child_msg = "child message";	text	txt
620	5	if ((child = fork()) == -1)\n{\nperror("cannot fork");\nreturn errno;\n}	text	txt
620	6	if (0 == child)\n{\nmemcpy(mem_name, child_msg, strlen(child_msg) + 1);\nprintf("parent %d: %s\\\\n", getpid(), mem_name);\n}\nelse\n{\nwaitpid(child, &status, 0);\nmemcpy(mem_name, parent_msg, strlen(parent_msg) + 1);\nprintf("child  %d: %s\\\\n", child, mem_name);\n}	text	txt
620	7	munmap(mem_name, 100);\n}	code	txt
621	1		code	txt
622	1	#ifndef _XOPEN_SOURCE\n#define _XOPEN_SOURCE 800\n#endif	text	txt
622	2	#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n#include <unistd.h>\n#include <stdlib.h>\n#include <signal.h>\n#include <sys/un.h>\n#include <sys/types.h>\n#include <sys/socket.h>	text	txt
622	3	char const *socket_name = "/tmp/socket";\nint connection = 0;\nint client = 0;	text	txt
622	4	void clean_up(int);\nvoid setup_signals(void);\nint setup_connection(void);\nint get_client(int);\nvoid message_client(int, int);	text	txt
622	5	int main(void)\n{\nsetup_signals();\nconnection = setup_connection();\nclient = get_client(connection);\nmessage_client(connection, client);\n}	text	txt
622	6	void setup_signals(void)\n{\nstruct sigaction action;\naction.sa_flags = SA_RESTART;\naction.sa_handler = clean_up;\nsigfillset(&action.sa_mask);\nsigaction(SIGINT, &action, NULL);\nsigaction(SIGTERM, &action, NULL);\nsigaction(SIGABRT, &action, NULL);\nsigaction(SIGQUIT, &action, NULL);\nsigaction(SIGHUP, &action, NULL);\nsigaction(SIGPIPE, &action, NULL);\n}	text	txt
622	7	int setup_connection(void)\n{\nint connection = 0;\nif ((connection = socket(AF_UNIX, SOCK_SEQPACKET, 0)) == -1)\n{\nperror("cannot create socket");\nexit(errno);\n}	text	txt
622	8	struct sockaddr_un address;\naddress.sun_family = AF_UNIX;\nstrncpy(address.sun_path, socket_name, sizeof(address.sun_path));	text	txt
622	9	if (bind(connection, (struct sockaddr const*)&address, sizeof(address)) == -1)\n{\nperror("cannot bind to socket");\nclose(connection);\nexit(errno);\n}	text	txt
622	10	if (listen(connection, 10) == -1)\n{\nperror("cannot listen to socket");\nclose(connection);\nexit(errno);\n}	text	txt
622	11	return connection;\n}	text	txt
622	12	int get_client(int connection)\n{\nint client = 0;	text	txt
622	13	if ((client = accept(connection, NULL, NULL)) == -1)\n{\nperror("cannot accept new connection");\nclose(connection);\nexit(errno);\n}	text	txt
622	14	return client;\n}	text	txt
622	15	void message_client(int connection, int client)\n{\nint bytes_read = 0;\nchar buffer[100] = {0};	text	txt
622	16	while (1)\n{\nif ((bytes_read = read(client, buffer, sizeof(buffer))) == -1)\n{\nperror("failed to read from client");\nclean_up(0);\n}\nelse if (bytes_read == 0)\n{\nfprintf(stderr, "client disconnected\\\\n");\nclean_up(0);\n}\nelse\n{\nprintf("message: %s\\\\n", buffer);\n}	text	txt
622	17	write(client, "message received\\\\n", 18);\n}\n}	text	txt
622	18	void clean_up(int signal)\n{\nprintf("\\\\nuser interrupted\\\\n");	text	txt
622	19	if (close(connection) == -1)\nperror("cannot close connection");	text	txt
622	20	if (close(client) == -1)\nperror("cannot disconnect client");	text	txt
622	21	if (unlink(socket_name) == -1)\nperror("cannot remove socket");	text	txt
622	22	exit(errno);\n}	code	txt
623	1		code	txt
624	1	#include <stdio.h>\n#include <unistd.h>\n#include <pthread.h>	text	txt
624	2	void *worker(void *);\nvoid *progress(void *);	text	txt
624	3	int main()\n{\npthread_t worker_thread = 0;\npthread_t progress_thread = 0;\npthread_attr_t attributes;	text	txt
624	4	pthread_attr_init(&attributes);\npthread_create(&worker_thread, &attributes, worker, NULL);\npthread_create(&progress_thread, &attributes, progress, NULL);\npthread_detach(progress_thread);\npthread_join(worker_thread, NULL);\npthread_attr_destroy(&attributes);\npthread_cancel(progress_thread);\n}	text	txt
624	5	void *worker(void *arg)\n{\nsleep(3);	text	txt
624	6	return NULL;\n}	text	txt
624	7	void *progress(void *arg)\n{\nfor (;;)\n{\nsleep(1);\nputchar('.');\nfflush(stdout);\n}	text	txt
624	8	return NULL;\n}	code	txt
625	1	#include <stdio.h>\n#include <unistd.h>\n#include <pthread.h>	text	txt
625	2	void *add(void *);\nvoid *progress(void *);	text	txt
625	3	pthread_mutex_t add_mutex;	text	txt
625	4	int main(void)\n{\npthread_attr_t attributes;\npthread_attr_init(&attributes);	text	txt
625	5	pthread_t add_worker1, add_worker2, progress_worker;	text	txt
625	6	pthread_mutex_init(&add_mutex, NULL);	text	txt
625	7	pthread_create(&progress_worker, &attributes, progress, NULL);\npthread_detach(progress_worker);	text	txt
625	8	pthread_create(&add_worker1, &attributes, add, NULL);\npthread_create(&add_worker2, &attributes, add, NULL);	text	txt
625	9	pthread_join(add_worker1, NULL);\npthread_join(add_worker2, NULL);	text	txt
625	10	pthread_cancel(progress_worker);	text	txt
625	11	pthread_mutex_destroy(&add_mutex);\n}	text	txt
625	12	void *add(void *arg)\n{\npthread_mutex_lock(&add_mutex);\nsleep(1);\npthread_mutex_unlock(&add_mutex);\nreturn NULL;\n}	text	txt
625	13	void *progress(void *arg)\n{\nint milli = 3;\nint max = milli * 100000;	text	txt
625	14	printf("waiting");	text	txt
625	15	while (1)\n{\nfor (int i = 0; i < 3; ++i)\n{\nputchar('.');\nfflush(stdout);\nusleep(max);\n}\nprintf("\\\\b\\\\b\\\\b   \\\\b\\\\b\\\\b");\n}	text	txt
625	16	return NULL;\n}	code	txt
626	1	#include <stdio.h>\n#include <unistd.h>\n#include <pthread.h>	text	txt
626	2	void *delay(void *);\nvoid *progress(void *);	text	txt
626	3	pthread_mutex_t delay_mutex;\npthread_cond_t delay_cond;	text	txt
1309	1	docker swarm unlock-key	code	txt
626	4	int main(void)\n{\npthread_t delay_thread;\npthread_t progress_thread;	text	txt
626	5	pthread_mutex_init(&delay_mutex, NULL);\npthread_cond_init(&delay_cond, NULL);	text	txt
626	6	pthread_attr_t attributes;\npthread_attr_init(&attributes);	text	txt
626	7	pthread_create(&delay_thread, &attributes, delay, NULL);\npthread_create(&progress_thread, &attributes, progress, NULL);	text	txt
626	8	pthread_mutex_lock(&delay_mutex);\nfor (int i = 0; i < 2; ++i)\n{\n}\npthread_mutex_unlock(&delay_mutex);	text	txt
626	9	pthread_detach(progress_thread);\npthread_join(delay_thread, NULL);	text	txt
626	10	pthread_attr_destroy(&attributes);\npthread_cancel(progress_thread);\n}	text	txt
626	11	void *delay(void *arg)\n{\nsleep(1);\nreturn NULL;\n}	text	txt
626	12	void *progress(void *arg)\n{\nwhile (1)\n{\nputchar('.');\nfflush(stdout);\nusleep(100000);\n}\nreturn NULL;\n}	code	txt
627	1	gdb -q ./program	code	txt
628	1	run args	code	txt
629	1	break main	code	txt
630	1	watch var	code	txt
631	1	next	code	txt
632	1	print var	code	txt
633	1	step	code	txt
634	1	finish	code	txt
635	1	x/20bd text\nx/8x $rip	code	txt
636	1	set var = 20\nset text[20] = '\\\\0'\nx/20bd text	code	txt
637	1	break main\nset follow-fork-mode child\nrun	code	txt
638	1	info threads\nthread 3\nnext	code	txt
639	1	valgrind ./leaked	code	txt
640	1	If `operator <=>` is defaulted and the object has a base class having the\n`operator <=>` defined, that operator is called. Otherwise, `operator ==` and\n`operator <` are called to decide whether the objects are `equivalent`,\n`less`, `greater` or `unordered`. In that case, the return type of the\ndefaulted `operator <=>` calling these operators cannot be `auto`.	text	txt
640	2	struct Base\n{\n    bool operator==(Base const&) const;\n    bool operator<(Base const&) const;\n};	text	txt
640	3	struct Derived: public Base\n{\n    std::strong_ordering operator<=>(Derived const&) const = default;\n};	text	txt
640	4	Derived d1, d2;\nd1 > d2; // calls Base::operator== and Base::operator<	code	txt
640	5	If `operator ==` yields true, we know that the result of `>` is `false`,\notherwise `operator <` is called to find out the expression is `true` or\n`false`.	text	txt
640	6	struct Derived: public Base\n{\n    std::partial_ordering operator<=>(Derived const&) const = default;\n};	code	txt
640	7	The compiler might call `operator <` twice to find out whether there is any\norder at all.	text	txt
640	8	struct Base\n{\n    bool operator==(Base const&) const;\n    bool operator<(Base const&) const;\n};	text	txt
640	9	struct Derived: public Base\n{\n    auto operator<=>(Derived const&) const = default;\n};	code	txt
640	10	The compiler does not compile because it cannot decide which ordering\ncategory the base class has.	text	txt
640	11	Checks for equality work for Derived because `operator ==` automatically declared equivalent to `operator <=>`:	text	txt
640	12	struct Derived: public Base\n{\n    auto operator<=>(Derived const&) const = default;\n    bool operator==(Derived const&) const = default;\n};	text	txt
640	13	Derived d1, d2;\nd1 > d2; // ERROR: cannot deduce comparison category of operator <=>\nd1 == d2; // OK: only tries operator <=> and Base::operator==	code	txt
641	1	When we have a trivial class that stores an integral value and has an\nimplicit constructor and is comparable with integral values only enable\nimplicit type conversions for the second operand. So, a global operator that\nswaps the order of the arguments might be defined:	text	txt
641	2	class MyType\n{\n    int i;	text	txt
641	3	public:\n    bool operator==(MyType const&) const;\n};	text	txt
641	4	bool operator==(int i, MyType const& t)\n{\n    return t == i; // OK with C++17\n}	code	txt
641	5	Usually, the class should better define the `operator ==` as **hidden\nfriend** declared with `friend` inside the class so that both operators\nbecome parameters and support implicit type conversions. However, this is a\nvalid approach to have the same effect.	text	txt
641	6	This code no longer works in C++20 due to endless recursion. The reason is\nthat inside the global function the expression `t == i` can also call the\nglobal `operator ==` itself, because the compiler also tries to rewrit the\ncall as `t == i`:	text	txt
641	7	bool operator==(int i, MyType const& t)\n{\n    return t == i; // finds operator==(i, t) in addition to t.operator(MyType{i})\n}	code	txt
641	8	Unfortunately, the rewritten statement is a better match, because it does not\nneed the implicit type conversion.	text	txt
642	1	[[nodiscard]] friend constexpr bool operator== (const Value& lhs, const Value& rhs) noexcept;\n[[nodiscard]] friend constexpr bool operator!= (const Value& lhs, const Value& rhs) noexcept;\n[[nodiscard]] friend constexpr bool operator< (const Value& lhs, const Value& rhs) noexcept;\n[[nodiscard]] friend constexpr bool operator<= (const Value& lhs, const Value& rhs) noexcept;\n[[nodiscard]] friend constexpr bool operator> (const Value& lhs, const Value& rhs) noexcept;\n[[nodiscard]] friend constexpr bool operator>= (const Value& lhs, const Value& rhs) noexcept;	code	cpp
642	2	The definitions are tedious and they add a lot of visual clutter, specially that well defined types should use `noexcept`, `constexpr`, `friend`, `[[nodiscard]]` qualifiers.	text	txt
643	1	Highest priority is to find a directly calling `operator!=`, and the lowest priority is to change the order of operands.	text	txt
643	2	So just implementing `operator==` is enough for the compiler to do inequality because the compiler will rewrite the expression `a != b` as `!(a == b)`.	text	txt
643	3	TypeB::operator==(TypeA);	code	cpp
2763	2	cat /proc/<pid>/cmdline	code	txt
643	4	Since C++20, when the compiler finds no matching declaration for an expression `a != b`, the compiler rewrites the expression and looks for `!(a == b)`. If that does not work, the compiler also tries to change the order of the operands, so it tries `!(b == a)`.	text	txt
643	5	operator!=(TypeA, TypeB);	code	cpp
643	6	operator==(TypeA, TypeB);	code	cpp
643	7	operator==(TypeB, TypeA);	code	cpp
643	8	TypeA::operator==(TypeB);	code	cpp
643	9	TypeA::operator!=(TypeB);	code	cpp
643	10	Having both a free-standing function and a member function is an ambiguity error.	text	txt
644	1	auto operator<=>(const Type& rhs) const = default;	code	cpp
670	5	template<typename... Types>\nvoid foo(Types... args);	code	txt
644	2	There is no rule that for all relational operators it is enough to have `operator<` defined. Instead, we can define `operator<=>`.	text	txt
644	3	This expands for all relational and equality operators.	text	txt
645	1	Defaulted `operator==` handles equality of objects by defining `operator==` and `operator!=`, while `operator<=>` only handles relational operators. But a defaulted member `operator<=>` implicitly generates a defaulted `operator==`, resulting the full support of all relational and equality operators.	text	txt
645	2	auto operator==(const Type& rhs) const = default; // implicitly defaulted	code	cpp
645	3	auto operator<=>(const Type& rhs) const = default;	code	cpp
646	1	#include <compare>	code	cpp
647	1	Generates:	text	txt
647	2	constexpr auto operator==(T const& rhs) const noexcept;	code	cpp
647	3	auto operator<=>(T const& rhs) const = default;	code	cpp
647	4	constexpr auto operator<=>(T const& rhs) const noexcept;	code	cpp
647	5	When declaring the default member `operator<=>`, the following applies for the generated operators:	text	txt
647	6	- `noexcept`: if comparing the members never throws.\n- `constexpr`: if comparing the members is possible at compile time.\n- **rewriting**: implicit type conversions for the first operand is supported.\n- `operator==`: defines equality support with `operator==` and `operator!=`.\n- `operator<=>`: defines relational support with `<`, `<=`, `>`, `>=` operators.	text	list
648	1	To have more control over the generated comparison operators, we can define `operator==` and `operator<=>` ourselves.	text	txt
648	2	constexpr auto operator==(T const& rhs) const noexcept\n{\n    return value == rhs.value;\n}\n\nconstexpr auto operator<=>(T const& rhs) const noexcept\n{\n    return value <=> rhs.value;\n}	code	cpp
649	1	When `x <= y` does not find a matching definition of `operator<=`, it might be rewritten as `(x <=> y) <= 0` or `0 <= (y <=> x)`.	text	txt
649	2	Rewriting might change the order of relational operands, which might enable implicit type conversion for the first operand.	text	txt
649	3	If `x <=> y` is equal to 0, `x` and `y` are equal or equivalent. If `x <=> y` is less than 0, `x` is less than `y`. If `x <=> y` is greater than 0, `x` is greater than `y`.	text	txt
650	1	The return type is a type that signals the *comparison category*, which could be *strong ordering*, *weak ordering*, or *partial ordering*. These types support the comparison with 0 to deal with the result.	text	txt
650	2	(x <=> y) == 0; // equal or equivalent\n(x <=> y) < 0; // x less than y\n(x <=> y) > 0; // x greater than y	code	cpp
651	1	`operator<=>` takes precedence over all other comparison operators.	text	txt
652	1	constexpr auto operator<=>(T const& rhs) const noexcept\n{\n    return value <=> rhs.value;\n}	code	cpp
652	2	Outside the implementation of an `operator<=>`, programmers should never invoke `<=>` directly. Although you can, you should never write `a <=> b < 0` instead of `a < b`.	text	txt
653	1	Examples of this category are case-insensitive strings. `"hello"` and `"HELLO"` are equiavlent but not equal.	text	txt
653	2	std::partial_ordering::less;\nstd::partial_ordering::equivalent;\nstd::partial_ordering::greater;\nstd::partial_ordering::unordered;	code	cpp
653	3	This category works similar with an exception that the two types might not be comparable at all, like `NaN`. Any comparison with `NaN` results to `unordered` which is equivalent to false.	text	txt
653	4	std::weak_ordering::less;\nstd::weak_ordering::equivalent;\nstd::weak_ordering::greater;	code	cpp
653	5	Examples of this category are integral values or common strings.	text	txt
653	6	std::strong_ordering::less;\nstd::strong_ordering::equal;\nstd::strong_ordering::equivalent;\nstd::strong_ordering::greater;	code	cpp
654	1	This not only returns the right value; it also ensures that the return value has the right comparison category type depending on the type of the member value.	text	txt
654	2	Instead of returning one of the comparison categories:	text	txt
654	3	std::strong_ordering operator<=>(T const& rhs) const noexcept\n{\n    if (value == rhs.value) return std::strong_ordering::equal;\n    if (value < rhs.value) return std::strong_ordering::less;\n    return std::strong_ordering::greater;\n}	code	cpp
654	4	We should return the result of comparison of the two underying types without specifying return type:	text	txt
654	5	auto operator<=>(T const& rhs) const noexcept\n{\n    return value <=> rhs.value;\n}	code	cpp
655	1	&lvalue <=> nullptr;	code	cpp
656	1	`operator<=>` is predefined for all fundamental types for which the relational operators are defined.	text	txt
656	2	int x{17};\nint y{42};\n\nx <=> y; // std::strong_ordering::equal\nx <=> 17.0; // std::partial_ordering::equivalent\n&x <=> &y; // std::weak_ordering::equal\n&x <=> nullptr; // error: not supported\n\nstd::string{"hi"} <=> "hi"; // std::strong_ordering::equal\nstd::pair{42, 0.0} <=> std::pair{42, 7.7}; // std::partial_ordering::less	code	cpp
657	1	Comparison between fundamental types or standard library types might return different comparison categories, depending on the supported types.	text	txt
658	1	if (x <=> y == std::partial_ordering::equivalent) // always okay	code	cpp
658	2	Because the return type depends on the comparison category, you can check against a specific return value:	text	txt
658	3	But implicit type conversions only work from stronger to weaker ordering types, not the other way around. Therefore, using `std::weak_ordering` category for comparing the result will compile even if `operator<=>` yields a `std::strong_ordering` or `std::weak_ordering` value.	text	txt
658	4	However, a comparison with 0 is always possible and usually easier:	text	txt
658	5	if (x <=> y == 0) // always okay	code	cpp
659	1	class complex_type\n{\nprivate:\n    std::string name;\n    double amount;\n\npublic:\n    std::strong_ordering operator<=>(complex_type const& rhs) const noexcept\n    {\n        std::strong_ordering name_result{name <=> rhs.name};\n        if (name_result != std::strong_ordering::equal)\n        {\n            return name_result; // std::strong_ordering\n        }\n        else\n        {\n            return amount <=> rhs.amount; // std::partial_ordering\n        }\n    }\n};	code	cpp
670	4	This is equivalent to the following (without introducing Types):	text	txt
670	6	- Using `decltype(auto)` is not allowed.	text	txt
671	1	void foo(auto x, auto y)\n{\n  ...\n}	text	txt
820	1	To check recompiled headers:	text	txt
869	3	make ARCH=$(uname -m) defconfig	code	sh
659	2	class complex_type\n{\nprivate:\n    std::string name;\n    double amount;\n\npublic:\n    auto operator<=>(complex_type const& rhs) const noexcept\n        -> std::common_comparison_category_t<decltype(name <=> rhs.name),\n                                             decltype(amount <=> rhs.amount)>\n    {\n        auto name_result{name <=> rhs.name};\n        if (name_result != 0)\n        {\n            return name_result; // std::partial_ordering\n        }\n        else\n        {\n            return amount <=> rhs.amount; // std::partial_ordering\n        }\n    }\n};	code	cpp
659	3	We can either choose the weakest comparison category, or use `std::common_comparison_category<>`:	text	txt
659	4	There are cases where comparison of a complex type might return different comparison category types:	text	txt
660	1	class complex_type\n{\nprivate:\n    std::string name;\n    double amount;\n\npublic:\n    std::strong_ordering operator<=>(complex_type const& rhs) const noexcept\n    {\n        std::strong_ordering name_result{name <=> rhs.name};\n        if (name_result != std::strong_ordering::equal)\n        {\n            return name_result; // std::strong_ordering\n        }\n        else\n        {\n            return std::compare_strong_order_fallback(amount <=> rhs.amount); // std::strong_ordering\n        }\n    }\n};	code	cpp
661	1	auto operator<=>(auto const& rhs) const;\nfriend auto operator<=>(auto const& rhs, auto const& lhs) const;\nfriend auto operator<=>(auto rhs, auto lhs) const;	code	cpp
661	2	The member functions have to take the second parameter as `const` lvalue reference. Friend functions might alternatively take both parameters by value.	text	txt
661	3	Defaulted `operator==` require the support of `operator==` in the members and base classes.	text	txt
661	4	Defaulted `operator<=>` require the support of `operator==` and either an implemented `operator<` or a defaulted `operator<=>` in the members and base classes.	text	txt
662	1	If and only if an `operator<=>` member is defined as defaulted, then by definition a corresponding `operator==` member is also defined if no defaulted `operator==` is provided.	text	txt
662	2	[[nodiscard]] friend constexpr auto operator<=>(auto const& rhs) const noexcept requires(!std::same_as<decltype(rhs), bool>) = default;	code	cpp
663	1	It defines a total order for raw pointers (which is not the case for operators `<=>` or `<`). Therefore, you should use it when generic types are used that can be raw pointer types.	text	txt
663	2	auto operator<=>(auto const& rhs) const noexcept(noexcept(value<=>value))\n{\n    return std::compare_three_way{}(value<=>rhs.value);\n}	code	cpp
664	1	std::compare_three_way_result_t<T,T> operator<=>(auto const& rhs) const noexcept(noexcept(value<=>value));	code	cpp
665	1	std::vector v1{0, 8, 15, 47, 11};\nstd::vector v2{0, 15, 8};\nauto r1 = std::lexicographical_compare(v1.begin(), v1.end(), v2.begin(), v2.end());\nauto r2 = std::lexicographical_compare_three_way(v1.begin(), v1.end(), v2.begin(), v2.end());	code	cpp
666	1	Note that there is no ranges support (yet) for `lexicographical_compare_three_way()`. You can neither pass a range as a single argument nor pass projection parameters:	text	txt
666	2	auto r3 = std::ranges::lexicographical_compare(v1, v2); // OK\nauto r4 = std::ranges::lexicographical_compare_three_way(v1, v2); // ERROR	code	cpp
667	1	Since C++14, lambdas can be declared with `auto` placeholder as their\nparameters representing any type, provided the operations inside the lambda\nare supported.	text	txt
667	2	auto print = [](auto const& container) {\n    for (auto const& e: container)\n        std:: cout << e << '\\\\n';\n}	text	txt
667	3	std::vector numbers{1,2,3,4,5};\nprint(numbers); // compiles the lambda for std::vector<int>\nprint(std::string("hello")); // compiles the lambda for std::string	code	txt
667	4	Since C++20, `auto` can also be used for all functions including member\nfunctions and operators.	text	txt
667	5	void print(auto const& container)\n{\n    for (auto const& e: container)\n        std:: cout << e << ' ';\n    std:: cout << '\\\\n';\n}	code	txt
667	6	This declaration is just a shortcut for declaring a template function.	text	txt
667	7	template<typename C>\nvoid print(C const& container)\n{\n    for (auto const& e: container)\n        std:: cout << e << ' ';\n    std:: cout << '\\\\n';\n}	code	txt
668	1	Because functions with `auto` are function templates, all rules of using\nfunction templates apply. You cannot implement an abbreviated function\ntemplate in one translation unit while calling it in a different translation\nunit.	text	txt
668	2	Abbreviated function templates need not to be declared as `inline` because\nfunction templates are always inline.	text	txt
668	3	Template parameters can be specified explicitly.	text	txt
668	4	void print(auto value)\n{\n    std::cout << value << '\\\\n';\n}	text	txt
668	5	print(42);\nprint<char>(42);	code	txt
669	1	You cannot pass a function with `auto` as a parameter without specifying the\ngeneric parameter.	text	txt
669	2	bool is_less(auto const& lhs, auto const& rhs)\n{\n    return lhs.get_value() < rhs.get_value();\n}	text	txt
669	3	std::sort(container.begin(), container.end(), is_less);\n// ERROR: can't deduce type of parameter	code	txt
669	4	Because the function template is not called directly, the compiler cannot\ndeduce the template parameters to compile the call. Therefore, the template\nparameters have to be specified explicitly.	text	txt
669	5	std::sort(container.begin(), container.end(), is_less<container::value_type>);	code	txt
669	6	Though, this can be prevented by passing a lambda.	text	txt
669	7	auto is_less = [](auto const& lhs, auto const& rhs)\n{\n    return lhs.get_value() < rhs.get_value();\n}	text	txt
669	8	std::sort(container.begin(), container.end(), is_less);	code	txt
5504	1	`ftxui::borderEmpty` is a border with space.	text	md
669	9	The reason is that the lambda is an object that does not have a generic type.\nOnly the use of the object as a function is generic.	text	txt
669	10	On the other hand, the explicit specification of an abbreviated function\ntemplate parameter is easier:	text	txt
669	11	void print(auto const& arg)\n{\n    ...\n}	text	txt
669	12	print<std::string>("something to see");	code	txt
669	13	While for a generic lambda, the function call operator `operator()` is\ngeneric. Therefore, you have to pass the requested type as an argument to\n`operator()` to specify the template parameter explicitly:	text	txt
669	14	auto print = [](auto const& arg) {\n    ...\n});	text	txt
669	15	print.operator()<std::string>("something to see");	code	txt
670	1	- For each parameter declared with `auto`, the function has an implicit\n  template parameter.	text	txt
670	3	void foo(auto... args);	code	txt
671	2	foo("hello", 42);                     // x has type const char*, y has type int\nfoo<std::string>("hello", 42);        // x has type std::string, y has type int\nfoo<std::string, long>("hello", 42);  // x has type std::string, y has type long	code	txt
672	1	Abbreviated function templates can still have explicitly specified template\nparameters. Therefore, the following declarations are equivalent:	text	txt
672	2	template<typename T>\nvoid foo(auto x, T y, auto z);	text	txt
672	3	template<typename T, typename T2, typename T3>\nvoid foo(T2 x, T y, T3 z);	code	txt
673	1	template<std::integral T>\nvoid foo(auto x, T y, std::convertible_to<T> auto z)\n{\n  ...\n}	text	txt
673	2	foo(64, 65, 'c');              // OK, x is int, T and y are int, z is char\nfoo(64, 65, "c");              // ERROR: "c" cannot be converted to type int\nfoo<long,char>(64, 65, 'c');   // NOTE: x is char, T and y are long, z is char	code	txt
673	3	Note that the last statement specifies the type of the parameters in the\nwrong order.	text	txt
673	4	#include <vector>\n#include <ranges>	text	txt
673	5	void addValInto(const auto& val, auto& coll)\n{\n  coll.insert(val);\n}	text	txt
673	6	template<typename Coll>   // Note: different order of template parameters\nrequires std::ranges::random_access_range<Coll>\nvoid addValInto(const auto& val, Coll& coll)\n{\n  coll.push_back(val);\n}	text	txt
673	7	int main()\n{\n  std::vector<int> coll;\n  addValInto(42, coll);   // ERROR: ambiguous\n}	code	txt
673	8	Due to using `auto` only for the first parameter in the second declaration of\n`addValInto()`, the order of the template parameters differs. this means that\noverload resolution does not prefer the second declaration over the first one\nand we get an ambiguity error.	text	txt
673	9	For this reason, be careful when mixing template and `auto` parameters.	text	txt
674	1	- Using `requires` clause\n- Using concepts\n- Using `requires` expression	text	txt
675	1	template<typename T>\nrequires (!std::is_pointer_v<T>)\nT get_max(T a, T b)\n{\n    return a > b ? a : b;\n}	text	txt
675	2	int x{42}, y{77};	text	txt
675	3	std::cout << get_max(x, y) << '\\\\n'; // OK\nstd::cout << get_max(&x, &y) << '\\\\n'; // ERROR: constraint not met	code	txt
675	4	When raw pointers are passed, the compiler behaves as if the template were\nnot there.	text	txt
676	1	A `concept` is a template that introduces a name for one or more requirements\nthat apply to the passed template parameters so that we can use these\nrequirements as constraints.	text	txt
676	2	template<typename T>\nconcept is_pointer = std::is_pointer_v<T>;	code	txt
677	1	Note that requires clauses that just constrain a template with a concept (or\nmultiple concepts combined with `&&`) no longer need parentheses.	text	txt
677	2	A negated concept always needs parentheses.	text	txt
677	3	template<typename T>\nconcept is_pointer = std::is_pointer_v<T>;	text	txt
677	4	template<typename T>\nrequires (!is_pointer<T>)\nT get_max(T a, T b)\n{\n    return a > b ? a : b;\n}	text	txt
677	5	template<typename T>\nrequires is_pointer<T>\nT get_max(T a, T b)\n{\n    return get_max(*a, *b);\n}	text	txt
677	6	int x{42}, y{77};	text	txt
677	7	std::cout << get_max(x, y) << '\\\\n'; // calls get_max() for non-pointers\nstd::cout << get_max(&x, &y) << '\\\\n'; // calls get_max() for pointers	code	txt
677	8	The second call delegates the computations of both function templates.	text	txt
678	1	Overload resolution considers templates with constraints as more specialized\nthan templates without constraints. Therefore, it is enough to constrain the\nimplementation only for pointers.	text	txt
678	2	template<typename T>\nconcept is_pointer = std::is_pointer_v<T>;	text	txt
678	3	template<typename T>\nvoid print(T value)\n{\n    std::cout << value << '\\\\n';\n}	text	txt
678	4	template<typename T>\nrequires is_pointer<T>\nvoid print(T value)\n{\n    print(*value);\n}	text	txt
678	5	int x{42};	text	txt
678	6	print(x);  // print() for a value of type T\nprint(&x); // print() for pointers (higher priority)	code	txt
678	7	However, be careful: overloading once using references and once using\nnon-references might cause ambiguities.	text	txt
678	8	By using concepts, we can even prefer some constraints over others. However,\nthis requires the use of concepts that **subsume** other concepts.	text	txt
679	1	Specifying concepts as a type constraint in template parameters:	text	txt
679	2	template<typename T>\nconcept is_pointer = std::is_pointer_v<T>;	text	txt
679	3	template <is_pointer T>\nauto print(T value)\n{\n    std::cout << value << '\\\\n';\n}	code	txt
679	4	Specifying concepts as a type constraint behind parameters with `auto`:	text	txt
679	5	template<typename T>\nconcept is_pointer = std::is_pointer_v<T>;	text	txt
679	6	auto print(is_pointer auto value)\n{\n    std::cout << value << '\\\\n';\n}	code	txt
679	7	This also works for parameters passed by reference:	text	txt
679	8	template<typename T>\nconcept is_pointer = std::is_pointer_v<T>;	text	txt
679	9	auto print(is_pointer auto const& value)\n{\n    std::cout << value << '\\\\n';\n}	code	txt
680	1	- Specifying requires clause with constraints or concepts\n- Using concepts in template parameters\n- Using concepts behind parameter types\n- Specifying trailing requires clause after parameters list	text	txt
681	1	It has the benefit that it can use the name of a parameter or combine even\nmultiple parameter names to formulate constraints.	text	txt
5535	1		code	cpp
681	2	template<typename T>\nconcept is_pointer = std::is_pointer_v<T>;	text	txt
681	3	template<typename L, typename R>\nconcept is_comparable_with = std::totally_ordered_with<L, R>;	text	txt
681	4	auto get_max(is_point auto a, is_pointer auto b)\nrequires is_comparable_with<decltype(*a), decltype(*b)>\n{\n    return get_max(*a, *b);\n}	code	txt
682	1	auto compare(auto lhs, auto rhs)\nrequires std::totally_ordered_with<decltype(lhs), decltype(rhs)>\n{\n    return lhs < rhs ? rhs : lhs;\n}	code	txt
682	2	The concept `std::totally_ordered_with` takes two template parameters to\ncheck whether the values of the passed types are comparable with the\noperators `==`, `!=`, `<`, `<=`, `>`, and `>=`.	text	txt
682	3	<=>` is supported.	text	txt
682	4	To check support for comparisons of two objects of the same type, we can use\nthe concept `std::totally_ordered`.	text	txt
820	2	make C=1 CHECK=/usr/bin/sparse ARCH=x86_64	code	txt
683	1	Here, we are using the requires keyword again to introduce a **requires\nexpression**, which can define one or more requirements for types and\nparameters.	text	txt
683	2	template<typename T>\nconcept is_pointer = requires(T p) {\n    *p; // expression *p has to be well-formed\n    p == nullptr; // can compare with nullptr\n    (p < p) -> std::same_as<bool>; // operator < yields bool\n};	code	txt
683	3	Note that we do not need two parameters of type `T` to check whether\n`operator <` can be called.	text	txt
683	4	The runtime value does not matter. However, note that there are some\nrestrictions for how to specify what an expression yields (e.g., you cannot\nspecify just `bool` without `std::same_as<>` there).	text	txt
683	5	We require here that we can compare `p` with `nullptr`. However, that rules\nout iterators, because in general, they cannot be compared with `nullptr`\n(except when they happen to be implemented as raw pointers, as in the case\nfor type `std::array<>`).	text	txt
684	1	This is a compile-time constraint that has no impact on the generated code;\nwe only decide for which types the code compiles. Therefore, it does not\nmatter whether we declare the parameters as a value or as a reference.	text	txt
685	1	template<typename T>\nconcept is_pointer = requires(T p) {\n    *p;\n    p == nullptr;\n    (p < p) -> std::same_as<bool>;\n};	text	txt
685	2	template<typename T>\nrequires is_pointer<T>\nvoid print(T value)\n{\n    std::cout << *value << '\\\\n';\n}	text	txt
685	3	template<typename T>\nrequires requires(T p) { *p; }\nvoid print(T value)\n{\n    std::cout << *value << '\\\\n';\n}	code	txt
686	1	- To have random access iterators, iterators that can be used to read, write,\n  jump back and forth, and compute distance.\n- To be sortable and support comparison operators.	text	txt
687	1	#include <algorithm>\n#include <vector>\n#include <ranges>	text	txt
687	2	int main()\n{\n    std::vector<int> numbers{3,5,1,2,4};\n    std::ranges::sort(numbers);\n}	code	txt
688	1	Views	text	txt
689	1	std::ranges::take(container, 5);	code	txt
690	1	#include <vector>\n#include <ranges>	text	txt
690	2	int main()\n{\n    std::vector<int> numbers{42,80,13,26,51,9,38};\n    std::ranges::sort(std::views::take(numbers, 5));\n}	code	txt
691	1	std::views::iota(1, 11); // [1,10]	code	txt
692	1	// nested form\nauto v = std::views::take(\n            std::views::transform(\n                std::views::filter(container, [](auto e) { return e % 3 == 0; }),\n                [](auto e) { return e * e; }),\n            3);	text	txt
692	2	// piped form\nauto v = container | std::views::filter([](auto e) { return e % 2 == 0; })\n                   | std::views::transform([](auto e) { return e * e; })\n                   | std::views::take(3);	code	txt
693	1		code	txt
694	1	https://pg-sql.com	text	txt
695	1	create table cities (name varchar(50), country varchar(50), population int, area int);	code	txt
696	1	insert into cities (name, country, population, area)\nvalues ('Tehran', 'Iran', 15000000, 40000),\n       ('Munich', 'Germany', 8000000, 20000);	code	txt
697	1	select * from cities;\nselect name, country from cities;	code	txt
698	1	There are eight main arithmetic operations available in SQL:	text	txt
698	2	1. Addition `+`\n2. Subtraction `-`\n3. Multiplication `*`\n4. Division `/`\n5. Power `^`\n6. Square Root `|/`\n7. Absolute Value `@`\n8. Remainder `%`	text	txt
698	3	select name, population / area from cities;	code	txt
699	1	select name, population / area as density from cities;	code	txt
700	1	- Concatanation either by `||` operator or `concat()` function\n- Change case by `lower()` and `upper()`\n- Length of string with `length()`	text	txt
700	2	select firstname || ' ' || lastname as fullname from staff;\nselect concat(firstname, ' ', lastname) as fullname from staff;	code	txt
701	1	select name, area from cities where area > 40000;	code	txt
702	1	In a simple select query statement:	text	txt
702	2	select name, area from cities where area > 40000;	code	txt
702	3	The source `from` would be read first. Then, the filtering `where` reduces\nthe results. Finally, the columns would be selected.	text	txt
703	1	select name, country from cities where country in ('USA', 'Germany', 'France');	code	txt
704	1	select name, country from cities where country not in ('USA', 'Germany', 'France');	code	txt
705	1	- Equality `=`\n- Greater `>`\n- Less `<`\n- Greater or Equal `>=`\n- Less or Equal `<=`\n- Inequality `<>` or `!=`\n- between two `between`\n- exists in list `in`\n- not exists in list `not in`	text	txt
706	1	- `and`\n- `or`	text	txt
706	2	select device, manufacturer from devices where country in ('USA', 'China');\nselect device, manufacturer from devices where country = 'USA' or country = 'China';\nselect device, manufacturer from devices where country = 'USA' and manufacturer = 'ASUS';	code	txt
707	1	select name, country, population / area as density from cities where population / area > 40000;	code	txt
708	1	update cities set population = 20000000 where name = 'Tehran';	code	txt
709	1	delete from cities where name = 'Tehran';	code	txt
710	1	delete from cities;	code	txt
711	1	- one to one\n- one to many\n- many to one\n- many to many	text	txt
712	1	- Each row in every table has one primary key (not empty)\n- No other row in the same table can have the same value (unique)\n- 99% of the time called id\n- Either an integer or a UUID\n- Will never change	text	txt
5538	1		code	cpp
713	1	Using `serial` in postgres, we will have a value typed as integral and auto\ngenerate unique IDs.	text	txt
713	2	create table users (\n    id serial primary key,\n    username varchar(50)\n)	code	txt
714	1	- Rows only have this key if they have a cell that belongs to another record\n- Many rows in the same table can have the same foreign key\n- Name varies, usually called something like `xyz_id`\n- Exactly equal to the primary key of the referenced row\n- Will change if the relationship changes	text	txt
715	1	create table photos (\n    id serial primary key,\n    url varchar(1000),\n    user_id integer references users(id)\n)	code	txt
716	1	A record having foreign key referencing to an existing record would be\nsuccessful. But a record referencing to an invalid record will fail. Also,\nwhen inserting a record having foreign key set to `NULL` is also a successful\ninsertion.	text	txt
716	2	insert into photos (url, user_id) values ('https://cdn1.example.com - https://cdn1.example.com/image1.jpg', NULL);	code	txt
820	3	To check all headers:	text	txt
717	1	- `on delete restrict`: throw an error when deleting the record having foreign keys referenced to it\n- `on delete no action`: same as above\n- `on delete cascade`: delete the referencing record too\n- `on delete set null`: set the foreign key value to NULL\n- `on delete set default`: set the forign key value to a default value	text	txt
718	1	When the action after deletion of referenced record is not specified for a\nforeign key, `on delete restrict` is the default.	text	txt
718	2	create table photos (\n    id serial primary key,\n    url varchar(1000),\n    user_id integer references on users(id) on delete restrict\n)	code	txt
719	1	select url, username\nfrom users\njoin photos on users.id = photos.user_id;	code	txt
720	1	create table photos (\n    id serial primary key,\n    url varchar(50) not null,\n    user_id integer default 0 references on users(id) on delete set default\n)	code	txt
721	1	- **join** or **inner join**	text	txt
721	2	select photo_id, user_id\nfrom users\njoin photos on photos.user_id = users.id;	code	txt
721	3	- **left outer join**	text	txt
721	4	select photo_id, user_id\nfrom users\nleft join photos on photos.user_id = users.id;	code	txt
721	5	- **right outer join**	text	txt
721	6	select photo_id, user_id\nfrom users\nright join photos on photos.user_id = users.id;	code	txt
721	7	- **full join**	text	txt
721	8	select photo_id, user_id\nfrom users\nfull join photos on photos.user_id = users.id;	code	txt
722	1	select photo_id, user_id\nfrom users\njoin photos on photos.user_id = users.id\nwhere photos.views > 2000;	code	txt
723	1	- Reduces many rows down to fewer rows\n- Done by using the 'GROUP BY' keyword\n- Visualizing the result is key to use	text	txt
724	1	1. Group records by a specific column, e.g. `user_id`\n2. Find the set of all unqiue values in that column\n3. Take each record and assign to a group based on grouped unique values	text	txt
725	1	select user_id\nfrom comments\ngroup by user_id;	code	txt
726	1	When we are talking about filtering along with an aggregate function, we\nshould be filtering aggregated results with `having` clause.	text	txt
726	2	For example, find the number of comments for each photo where *the photo_id\nis less than 3* and *the photo has more than 2 comments*.	text	txt
726	3	In this example, the first condition involves with filtering what is going to\nbe grouped, so we use a `where` clause for it. The second condition on the\nother hand, is regarding aggregated results, which we should be using a\n`having` clause to apply it.	text	txt
726	4	select photo_id, count(*) as comments\nfrom comments\nwhere photo_id < 3\ngroup by photo_id\nhaving count(*) > 2;	code	txt
727	1	select authors.name, count(books.id) as releases\nfrom authors\njoin books on authors.	code	txt
728	1	- Reduces many values down to one\n- Done by using aggregate functions	text	txt
729	1	- `count()`\n- `min()`\n- `max()`\n- `sum()`	text	txt
730	1	select user_id, count(*)\nfrom comments\ngroup by user_id;	code	txt
731	1	Records having null value on grouped column will be ignored. To take them\ninto account, you should not use any specific column in `count()` aggregate\nfunction and use `*` instead.	text	txt
731	2	select user_id, count(*)\nfrom comments\ngroup by user_id;	code	txt
732	1	select max(content)\nfrom comments\ngroup by photo_id;	code	txt
733	1		code	txt
734	1	select *\nfrom products\norder by price asc;	code	txt
734	2	select *\nfrom products\norder by price desc;	code	txt
735	1	select *\nfrom products\norder by price asc, weight desc;	code	txt
736	1	Only gives the number of records requested.	text	txt
736	2	select *\nfrom users\nlimit 10;	code	txt
737	1	`limit` clause goes at the end of query string after `group by` clause if\nexists, and before `offset`.	text	txt
738	1	As many number of records as you want can be skipped with `offset` clause.	text	txt
738	2	select *\nfrom users\noffset 40;	code	txt
739	1	At the end, after `sort by`, `group by`, `having`, and `limit` clauses.	text	txt
740	1	There are some cases where two different result sets need to be combined to\nform the desired result set. For example:	text	txt
740	2	*Find the 4 products with the highest price, and the 4 products with the\nhighest price/weight ratio*.	text	txt
741	1	All columns of queries should match.	text	txt
742	1	(\n    select product_id\n    from products\n    order by price desc\n    limit 4\n)\nunion\n(\n    select product_id\n    from products\n    order by price / weight desc\n    limit 4\n);	code	txt
742	2	To retrieve duplicates use `union all` clause.	text	txt
743	1	When the last query has `order by` or `limit` or `offset` clauses, the union\ndoesn't know if these clauses should be used on the last query or the entire\nstatement. This is why when we have these clauses in query, we should use\nparenthesis. Otherwise, union works fine without parenthesis.	text	txt
743	2	select * from products;\nunion\nselect * from products;	code	txt
744	1	select * from products order by price desc limit 4;\nintersect\nselect * from products order by price / weight desc limit 4;	code	txt
744	2	Use `intersect all` to have duplicates appearing in both sides.	text	txt
745	1	select * from products order by price desc limit 4;\nexcept\nselect * from products order by price / weight desc limit 4;	code	txt
5539	1		code	cpp
745	2	Above clause removes duplicates. Use `except all` to also show duplicates.	text	txt
746	1	When a condition requires a value or a set of values that must be collected\nby another query as a prerequisite, we can use subqueries.	text	txt
746	2	select name, price\nfrom products\nwhere price > (select max(price) from products where manufacturer = 'Samsung');	code	txt
747	1	select name, price, (select max(price) from products) as max_price\nfrom products;	code	txt
748	1	select name, price_weight_ratio\nfrom (select name, price / weight as price_weight_ratio from produts\nwhere price_weight_ratio > 5;	code	txt
749	1	create table products (\n    id serial primary key,\n    name varchar(50),\n    price integer not null,\n    weight integer\n);	code	txt
750	1	alter table products alter column price set not null;	code	txt
751	1	update table products set price = 0 where price is null;	code	txt
793	9	Now, syscall represents the name of the kernel function that is going to attach to, using a kprobe:	text	txt
1310	4	docker node ls	code	txt
752	1	- Check if the value is already defined (not null)\n- Check if the value is unique in its column (unique)\n- Check if the value is within desired range (comparison operators)	text	txt
753	1	create table products (\n    id serial primary key,\n    name varchar(50),\n    price integer default 100,\n    weight integer default 0 not null\n);	code	txt
754	1	alter table products alter column price set default 0;	code	txt
755	1	create table products (\n    id serial primary key,\n    name varchar(50) unique,\n    price integer,\n    weight integer,\n);	code	txt
756	1	alter table products add unique (name);	code	txt
757	1		code	txt
758	1	create table products (\nid serial primary key,\nname varchar(50),\nprice integer not null,\nweight integer,\nunique(name, price)\n):	code	txt
759	1	alter table products add unique(name, price);	code	txt
760	1	create table products (\n    id serial primary key,\n    name varchar(50),\n    price integer default 0 not null check (price > 0)\n    weight integer default 0 not null (weight > 0)\n);	code	txt
761	1	alter table products add check(price > 0);	code	txt
762	1	create table products (\nid serial primary key,\nname varchar(50) not null,\ncreation timestamp not null,\ndelivery timestamp not null,\ncheck(delivery > creation)\n);	code	txt
763	1	- dbdiagram.io\n- drawsql.app\n- sqldbm.com\n- quickdatabasediagrams.com\n- ondras.zarovi.cz/sql/demo	text	txt
764	1	alter table likes add check (\n    (\n        coalesce((post_id)::boolean::integer, 0)\n        +\n        coalesce((comment_id)::boolean::integer, 0)\n    ) = 1\n);	code	txt
765	1	show data_directory;	code	txt
766	1	select oid, datname from pg_database;	code	txt
767	1	select * from pg_class;	code	txt
768	1	- **Heap File**: The file stored in the base directory within data directory that contains all the data of a table.\n- **Block** or **Page**: 8KB chunks of heap file each storing some number of rows.\n- **Tuple** or **Item**: Individual row from the table.	text	txt
769	1	|Block 1|Block 1|Block 1|Block 1|\n|---|---|---|---|\n|Information about this block|->|->|->|\n|->|->|Loc of item 1|Loc of item 2|\n|Free Space|Free Space|Free Space|Free Space|\n|Free Space|Free Space|Free Space|Free Space|\n|Data for tuple 2|\n|Data for tuple 1|	text	txt
770	1	Data structure that efficiently tells us what block a record is stored at.	text	txt
771	1	create index users_username_idx on users(username);	code	txt
772	1	drop index users_username_idx;	code	txt
773	1	explain analyze select * from users where username = 'briansalehi';	code	txt
774	1	select pg_relation_size('users');\nselect pg_relation_size('users_username_idx');\nselect pg_size_pretty(pg_relation_size('users'));	code	txt
775	1	select pg_size_pretty(1024);	code	txt
776	1	- B-Tree\n- Hash\n- GiST\n- SP-GiST\n- GIN\n- BRIN	text	txt
777	1	When primary key exists, and when a column has unique constraint on it.	text	txt
778	1	select relname from pg_class where relkind = 'i';	code	txt
779	1	|`users_username_idx`|\n|Meta Page|\n|Leaf Page|\n|Leaf Page|\n|Root Page|\n|Leaf Page|	text	txt
780	1	create extension pageinspect;	code	txt
781	1	select root from bt_metap('users_username_idx');	code	txt
782	1	The `ctid` column holds the indexes of leaf nodes in the index.	text	txt
782	2	select * from bt_page_itesm('users_username_idx', 3);	code	txt
783	1	All tables have a hidden `ctid` column which we can query.	text	txt
783	2	select ctid, * from users where username = 'briansalehi';	code	txt
784	1	The first row points to the first item of the next page for performance\nreasons.	text	txt
785	1	1. Parsing (Parser)\n2. Rewriting\n3. Planning (Planner)\n4. Executing (Executor)	text	txt
786	1	- `explain`: build a query plan and display info about it\n- `explain analyze`: build a query plan, run it, and info about it	text	txt
787	1	select * from pg_stats where tablename = 'users';	code	txt
788	1	```\n(# pages read sequencially) * seq_page_cost\n+ (# pages read at random) * random_page_cost\n+ (# rows scanned) * cpu_tuple_cost\n+ (# index entries scanned) + cpu_index_tuple_cost\n+ (# times function/operator evaluated) + cpu_operator_cost\n= cost\n``````	text	txt
789	1	With `eBPF` we can add instrumentation into the kernel to observe application interactions with the kernel and intercept what would be involved if we wanted to modify the kernel, adding new code to create some kind of output whenever that system call is invoked.	text	txt
790	1	The `eBPF` verifier, which ensures that an eBPF program is loaded only if it’s safe to run—it won’t crash the machine or lock it up in a hard loop, and it won’t allow data to be compromised.	text	txt
791	1	`eBPF` programs can be loaded into and removed from the kernel dynamically.\nOnce they are attached to an event, they’ll be triggered by that event regardless of what caused that event to occur.\nThis is a huge advantage compared to upgrading the kernel and then having to reboot the machine to use its new functionality.	text	txt
792	1	Once loaded and JIT-compiled, the program runs as native machine instructions on the CPU.\nAdditionally, there’s no need to incur the cost of transitioning between kernel and user space (which is an expensive operation) to handle each event.	text	txt
793	1	#!/usr/bin/python3	text	txt
793	2	from bcc import BPF	text	txt
793	3	program = r"""\nint sample(void *ctx)\n{\n    bpf_trace_printk("Sample BPF");\n    return 0;\n}\n"""	text	txt
793	4	try:\n    b = BPF(text = program)\n    syscall = b.get_syscall_fnname("execve")\n    b.attach_kprobe(event = syscall, fn_name = "sample")\n    b.trace_print()\nexcept KeyboardInterrupt as e:\n    print()\n    exit()	code	txt
793	5	The entire `eBPF` program is defined as a string called `program` and is compiled in the constructor of `BPF` class.	text	txt
793	6	`eBPF` programs need to be attached to an event, which in this case it is attached to the system call `execve`, which is the syscall used to execute a program.\nWhenever anything or anyone starts a new program executing on this machine, that will call `execve()`, which will trigger the `eBPF` program.	text	txt
793	7	Although the `execve()` name is a standard interface in Linux, the name of the function that implements it in the kernel depends on the chip architecture, but BCC gives us a convenient way to look up the function name for the machine we’re running on:	text	txt
793	8	syscall = b.get_syscall_fnname("execve")	code	txt
793	10	b.attach_kprobe(event=syscall, fn_name="hello")	code	txt
793	11	At this point, the `eBPF` program is loaded into the kernel and attached to an event, so the program will be triggered whenever a new executable gets launched on the machine.	text	txt
793	12	The tracing function will loop indefinitely, displaying any trace:	text	txt
793	13	b.trace_print()	code	txt
794	1	`CAP_PERFMON` and `CAP_BPF` are both required to load tracing programs.\n`CAP_NET_ADMIN` and `CAP_BPF` are both required for loading networking programs.	text	txt
795	1	The `bpf_trace_printk()` helper function in the kernel always sends output to the same predefined pseudofile `/sys/kernel/debug/tracing/trace_pipe`.	text	txt
795	2	You’ll need root privileges to access it.	text	txt
796	1	BPF maps	text	txt
797	1	A map is a data structure that can be accessed from an `eBPF` program and from user space.	text	txt
798	1	In order for a user space application to gain access to the underlying device\ndriver within the kernel, some I/O mechanism is required. The Unix (and thus\nLinux) design is to have the process open a special type of file, a **device\nfile**, or **device node**. These files typically live in the `/dev`\ndirectory.	text	txt
799	1	**LDM** creates a complex hierarchical tree unifying system components, all\nperipheral devices, and their drivers. This tree is exposed to user space via\nthe *sysfs* pseudo-filesystem analogous to how *procfs* exposes some kernel\nand process/thread internal details to user space, and is typically mounted\nunder `/sys`.	text	txt
800	1	In order for the kernel to distinguish between device files, it uses two\nattributes within their inode data structure:	text	txt
800	2	* The type of file – either char or block\n* The major and minor number	text	txt
801	1	A namespace contains the device type and major-minor pair, which form a\nhierarchy. Devices are organized within a tree-like hierarchy within the\nkernel. This hierarchy is first divided based on device type, block or char.\nWithin that we have n major numbers for each type, and each major number is\nfurther classified via some m minor numbers.	text	txt
802	1	Block devices have the kernel-level capability to be mounted and thus become\npart of the user-accessible filesystem. Character devices cannot be mounted;\nthus, storage devices tend to be block-based.	text	txt
803	1	From 2.6 Linux onward, the `{major:minor}` pair is a single unsigned 32-bit\nquantity within the inode, a bitmask (it's the `dev_t i_rdev` member). Of\nthese 32 bits, the MSB 12 bits represent the major number and the remaining\nLSB 20 bits represent the minor number.	text	txt
803	2	Only **Linux Assigned Names And Numbers Authority (LANANA)** can officially\nassign the device node (the type and `{major:minor}` numbers) to devices	text	txt
803	3	The minor number's meaning (interpretation) is left completely to the driver\nauthor; the kernel does not interfere.	text	txt
803	4	Here, the exception to the rule - that the kernel doesn't interpret the minor\nnumber – is the `misc` class (type character, major `#10`). It uses the minor\nnumbers as second-level majors.	text	txt
803	5	A common problem is that of the namespace getting exhausted. Within the misc\nclass (`#10`) live a lot of devices and their corresponding drivers. In\neffect, they share the same major number and rely on a unique minor number to\nidentify themselves.	text	txt
804	1	- The **buses** on the system.\n- The **devices** on them.\n- The **device drivers** that drive the devices.	text	txt
805	1	A fundamental **LDM** tenet is that every single device must reside on a bus.\nUSB devices will be on USB bus, PCI devices on PCI bus, I2C devices on I2C\nbus, and so on. Available buses are available under `/sys/bus` directory.	text	txt
806	1	Critically, they organize and recognize the devices on them. If a new device\nsurfaces, like a pen drive, the USB bus driver will recognize the fact and\nbind it to its device driver.	text	txt
807	1	After its corresponding bus driver binds the device to its correct device\ndriver, the kernel driver framework invokes the registered `probe()` method\nof the driver. This probe method now sets up the device, allocating\nresources, IRQs, memory setup, registering it as required, and so on.	text	txt
807	2	LDM-based drivers should typically register themselves to a kernel framework\nand to a bus. The kernel framework it registers itself to depends on the type\nof the working device. For example, a driver for an RTC chip that resides on\nthe I2C bus will register itself to the kernel's RTC framework (via\n`rtc_register_device()`), and to the I2C bus (via `i2c_register_driver()`). A\ndriver for network adapter on the PCI bus will typically register itself to\nthe kernel's network inftrastructure (via `register_netdev()`) and the PCI\nbus (`pci_register_driver()`).	text	txt
808	1	Write a platform driver, register it with the kernel's `misc` framework and\nthe **platform bus**, a pseudo-bus infrastructure that supports devices that\ndo not physically reside on any physical bus. Several peripherals built into\na modern **SoC** are not on any physical bus, and thus their drivers are\ntypically platform drivers. To get started, look under the kernel source tree\nin `drivers/` for code invoking the `platform_driver_register()` API.	text	txt
809	1	An appropriate value to return if you aren't supporting a function is\n`-ENOSYS`, which will have the user-mode process see the error `Function not\nimplemented`.	text	txt
809	2	If a method is left out, and the user space process invokes that method, the\nkernel VFS detects that function pointer is `NULL`, returns an appropriate\nnegative integer, the glibc will multiply this by -1 and set the calling\nprocess's `errno` variable to that value, signaling that the system call\nfailed.	text	txt
5540	1		code	cpp
809	3	Quite often, the negative `errno` value returned by the VFS is intuitive. For\nexample, it returns `EINVAL` when `read()` function pointer is `NULL`. This\nmisleads user space process to think of *"Invalid argument"* error, which\nisn't the case.	text	txt
810	1	The `lseek(2)` system call has the driver seek to a prescribed location in\nthe file, here of course in the device. For majority of hardware devices, the\n`lseek(2)` value is not meaningful, thus most drivers do not need to\nimplement it. The problem is, even when there is no need to support\n`lseek(2)`, it still returns a random positive value, misleading user space\nprocess to incorrectly conclude that it succeeded. Hence, to handle\nunsupported `lseek(2)` on a device driver, explicitly set `llseek` function\npointer to `no_llseek` value, which will cause a failure value (`-ESPIPE;\nillegal seek`) to be returned. In such cases, also invoke\n`nonseekable_open()` function in driver's `open()` method, specifying that\nthe file is non-seekable.	text	txt
810	2	return nonseekable_open(struct inode *inode, struct file *fp);	code	txt
811	1	#include <linux/miscdevice.h>\n#include <linux/fs.h>	text	txt
819	2	int main()\n{\n    std::println("C++{}", 23);\n}	code	txt
820	4	make C=2 CHECK=/usr/bin/sparse ARCH=x86_64	code	txt
811	2	static struct miscdevice miscdev = {\n    .name = "miscdev",\n    .minor = MISC_DYNAMIC_MINOR,\n    .mode = 0600,\n    .fops = NULL, // file operation methods\n};	text	txt
811	3	static int __init miscdev_init(void)\n{\n    int ret = 0;\n    struct device *dev = NULL;	text	txt
811	4	    ret = misc_register(&miscdev);	text	txt
811	5	    if (ret != 0)\n    {\n        pr_notice("miscdev registration failed, aborting\\\\n");\n        return ret;\n    }	text	txt
811	6	    dev = miscdev.this_device;\n}	text	txt
811	7	static void __exit miscdev_exit(void)\n{ }	text	txt
811	8	module_init(miscdev_init);\nmodule_exit(miscdev_exit);	text	txt
811	9	MODULE_LICENSE("GPL");\nMODULE_AUTHOR("Brian Salehi <salehibrian@gmail.com");\nMODULE_DESCRIPTION("Sample misc device");\nMODULE_VERSION("0.1");	code	txt
811	10	obj-m := miscdev.o	text	txt
811	11	KERNEL_SRC ?= /usr/lib/modules/$(shell uname -r)/build	text	txt
811	12	all: modules\ninstall: modules_install	text	txt
811	13	modules modules_install help clean:\n    $(MAKE) -C $(KERNEL_SRC) M=$(PWD) $@	code	txt
812	1	A device driver is the interface between the OS and a peripheral hardware\ndevice. It can be written inline and compiled within the kernel image file or\nwritten outside of the kernel source tree as a kernel module.	text	txt
812	2	A device driver provides several entry points into the kernel known as the\ndriver's methods. All possible methods the driver author can hook into are in\n`file_operations` kernel data structure defined in `<linux/fs.h>` header.	text	txt
812	3	`device file`, or `device node` files typically live in the `/dev` directory,\nand on modern systems are dynamic and auto-populated. The device node serves\nas an entry point into the device driver.	text	txt
813	1	The `file_operations` structure represents all possible `file_related` system\ncalls that could be issued on a device file including `open`, `read`, `poll`,\n`mmap`, `release`, and several more members.	text	txt
813	2	Once your driver is registered with the kernel, when any user space process\nopens a device file registered to this driver, the kernel **Virtual\nFilesystem Switch (VFS)** layer will take over to allocate and initialize\nthat process's open file data structure (`struct file`) for the device file.	text	txt
813	3	#include <linux/miscdevice.h>\n#include <linux/fs.h>	text	txt
813	4	static const struct file_operations misc_fops = {\n    .open = open_miscdev,\n    .read = read_miscdev,\n    .write = write_miscdev,\n    .release = release_miscdev,\n};	text	txt
813	5	static struct miscdevice miscdev = {\n    .name = "miscdev",\n    .minor = MISC_DYNAMIC_MINOR,\n    .mode = 0600,\n    .fops = &misc_fops,\n};	text	txt
813	6	static int __init miscdev_init(void)\n{\n    int ret = 0;\n    struct device *dev = NULL;	text	txt
813	7	    ret = misc_register(&miscdev);	text	txt
813	8	    if (ret != 0)\n    {\n        pr_notice("miscdev registration failed, aborting\\\\n");\n        return ret;\n    }	text	txt
813	9	    dev = miscdev.this_device;	text	txt
813	10	    if (!dev)\n    {\n        return 1;\n    }	text	txt
813	11	    dev_info(dev, "driver %d registered on /dev/%s\\\\n", miscdev.minor, miscdev.name);\n    return 0;\n}	text	txt
813	12	static void __exit miscdev_exit(void)\n{ }	text	txt
813	13	module_init(miscdev_init);\nmodule_exit(miscdev_exit);	text	txt
813	14	MODULE_LICENSE("GPL");\nMODULE_AUTHOR("Brian Salehi <salehibrian@gmail.com");\nMODULE_DESCRIPTION("Sample misc device");\nMODULE_VERSION("0.1");	code	txt
814	1	The signature of functions should be identical to that of the\n`file_operation` structure.	text	txt
814	2	static int miscdev_open(struct inode *inode, struct file *fp)\n{\n    char *kbuf = kzalloc(PATH_MAX, GFP_KERNEL);	text	txt
814	3	    if (unlikely(!kbuf))\n        return -ENOMEM;	text	txt
814	4	    PRINT_CTX(); // displays process (or atomic) context info\n    pr_info(" opening \\\\"%s\\\\": 0x%x\\\\n", file_path(fp, kbuf, PATH_MAX), fp->f_flags);\n    kfree(kbuf);\n    return nonseekable_open(inode, fp);\n}	code	txt
815	1	#include <linux/miscdevice.h>\n#include <linux/fs.h>	text	txt
815	2	static const file_operations misc_fops = {\n    .read = misc_open,\n};	text	txt
815	3	static struct miscdevice misc_dev = {\n    .name = "misc_dev",\n    .minor = MISC_DYNAMIC_MINOR,\n    .mode = 0666,\n    .fops = &misc_fops,\n};	text	txt
815	4	static int misc_open(struct inode *inode, struct file *fp)\n{\n    char *kbuf = kzalloc(PATH_MAX, GFP_KERNEL);	text	txt
815	5	    if (unlikely(!kbuf))\n        return -ENOMEM;	text	txt
815	6	    pr_info("opening %s (0x%x)\\\\n", file_path(fp, kbuf, PATH_MAX), fp->f_flags);\n    kfree(kbuf);\n    return nonseekable_open(inode, fp);\n}	text	txt
815	7	static int __init misc_init(void)\n{\n    int ret = 0;\n    struct device *dev = NULL;	text	txt
815	8	    ret = misc_register(&misc_dev);\n    if (ret != 0)\n    {\n        pr_notice("misc_dev registration failed\\\\n");\n        return ret;\n    }	text	txt
815	9	    dev = misc_dev.this_device;\n}	text	txt
815	10	static void __exit misc_exit(void)\n{\n    misc_deregister(&misc_dev);\n    pr_info("misc_dev unloaded\\\\n");\n}	text	txt
815	11	module_init(misc_init);\nmodule_exit(misc_exit);	text	txt
5541	1		code	cpp
817	1	Signature for both functions of user to kernel space and vice versa are similar:	text	txt
817	2	#include <linux/uaccess.h>	text	txt
817	3	unsigned long copy_to_user(void __user *to, const void *from, unsigned long n);\nunsigned long copy_from_user(void *to, const void __user *from, unsigned long n);	code	txt
817	4	static ssize_t read_method(struct file *fp, char __user *ubuf, size_t count, loff_t *offset)\n{\n    char *kbuf = kzalloc();	text	txt
817	5	    /* ... do what's required to get data from the hardware device into kbuf ... */	text	txt
817	6	    if (copy_to_user(ubuf, kbuf, count))\n    {\n        dev_warn(dev, "cannot copy data to user space\\\\n");\n        goto out_rd_fail;\n    }	text	txt
817	7	    return count;	text	txt
817	8	out_rd_fail:\n    kfree(kbuf);\n    return -EIO;\n}	code	txt
818	1		code	txt
819	1	import std;   // brings the entire standard library	text	txt
821	1	- Extended Berkely Packet Filtering (eBPF)\n- Linux Tracing Toolkit next generation (LTTng)	text	txt
822	1	Trace Compass GUI	text	txt
823	1	BCC or bpftrace	text	txt
824	1	v4.0	text	txt
825	1	linux-headers	text	txt
826	1	Linux Driver Verification (LDV)	text	txt
827	1	arm-none-eabi-gcc arm-none-eabi-gdb arm-none-eabi-binutils	code	txt
828	1	qemu-system-arm	code	txt
829	1	Open source tools:	text	txt
829	2	* https://sparse.wiki.kernel.org - https://sparse.wiki.kernel.org/index.php/Main_Page\n* [Coccinelle](http://coccinelle.lip6.fr/)\n* [Smatch](http://repo.or.cz/w/smatch.git)\n* https://dwheeler.com - https://dwheeler.com/flawfinder/\n* https://github.com - https://github.com/danmar/cppcheck	text	txt
829	3	Commercial tools:	text	txt
829	4	* https://www.sonarqube.org - https://www.sonarqube.org/\n* https://scan.coverity.com - https://scan.coverity.com/\n* https://www.meteonic.com - https://www.meteonic.com/klocwork	text	txt
830	1	make C=1 CHECK="/usr/bin/sparse"	code	txt
832	1	* bpftrace package (https://github.com - https://github.com/iovisor/bcc) clang dependent\n* https://github.com - https://github.com/iovisor/bcc/blob/master/INSTALL.md	text	txt
833	1	* https://linuxtesting.org	text	txt
834	1	uname -r	code	txt
835	1	git log --date-order --graph --tags --simplify-by-decoration	code	txt
836	1	1. The 5.x stable release is made. Thus, the merge window for the 5.x+1 (mainline) kernel has begun.\n2. The merge window remains open for about 2 weeks and new patches are merged into the mainline.\n3. Once (typically) 2 weeks have elapsed, the merge window is closed.\n4. rc (aka mainline, prepatch) kernels start. 5.x+1-rc1, 5.x+1-rc2, ..., 5.x+1-rcn are released. This process takes anywhere between 6 to 8 weeks.\n5. The stable release has arrived: the new 5.x+1 stable kernel is released.\n6. The release is handed off to the "stable team". Significant bug or security fixes result in the release of 5.x+1.y : 5.x+1.1, 5.x+1.2, ... , 5.x+1.n. Maintained until the next stable release or End Of Life (EOL) date reached.	text	txt
837	1	* -next trees\n* prepatches, also known as -rc or mainline\n* stable kernels\n* distribution and LTS kernels\n* Super LTS (STLS) kernels	text	txt
838	1	curl -L https://kernel.org - https://kernel.org/finger_banner	code	txt
839	1	https://git.kernel.org - https://git.kernel.org/pub/scm/linux/kernel/git/mricon/korg-helpers.git/tree/get-verified-tarball	code	txt
840	1	* obtaining kernel source\n* configuring source\n* building\n* installing targets\n* setting up bootloaders	text	txt
841	1	https://mirrors.edge.kerne.org - https://mirrors.edge.kerne.org/pub/linux/kernel/v5.x/linux_5.4.0.tar.xz	code	txt
842	1	git clone https://git.kernel.org - https://git.kernel.org/pub/scm/linux/git/torvalds/linux.git	code	txt
843	1	head Makefile	code	txt
844	1	MAINTAINERS	text	txt
845	1	scripts/get_maintainer.pl	code	txt
846	1	Major subsystem directories	text	txt
846	2	* kernel: core kernel subsystem\n* mm: memory management\n* fs: the kernel **Virtual Filesystem Switch (VFS)** and the individual filesystem drivers\n* block: the underlying block I/O code\n* net: implementation of the network protocol stack\n* ipc: the **Inter-Process Communication (IPC)** subsystem\n* sound: the **Advanced Linux Sound Architecture (ALSA)** sound subsystem\n* virt: the virtualization code, specially **Kernel Virtual Machine (KVM)** subsystem	text	txt
846	3	 Infrastructure / Misclenaous	text	txt
846	4	* arch: the arch-specific code\n* crypto: kernel level implementation of ciphers\n* include: arch-independent kernel headers\n* init: arch-independent kernel initialization code\n* lib: the closest equivalent to a library for the kernel\n* scripts: various useful scripts\n* security: the **Linux Security Module (LSM)**, containing **Mandatory Access Control (MAX)** and **Discretionary Access Control (DAC)** frameworks.\n* tools: various tools	text	txt
847	1	make help\nmake htmldocs\nmake pdfdocs	code	txt
847	2	Output will be generated in `Documentation/output/latex` and `Documentation/output/html`.	text	txt
848	1	* ctags\n* cscope	text	txt
849	1	make ctags\nmake cscope	code	txt
850	1	init/kconfig	code	txt
851	1	* defconfig: reseting all options to their defaults\n* oldconfig: asking for new configurations\n* localmodconfig: restoring options from module list\n* platform\\\\_defconfig: creating config based on platform	text	txt
852	1	ls arch/<arch>/configs/\nmake <platform>_defconfig	code	txt
853	1	lsmod > /tmp/modules.lst\nmake LSMOD=/tmp/modules.lst localmodconfig	code	txt
854	1	cp /boot/config-5.0.0 .config\nmake oldconfig	code	txt
855	1	[menu,x,q]config	code	txt
856	1	* `[.]` boolean option\n* `<.>` three state option, having `<*>` state as ON, `<m>` state as Module, `<>` state as OFF\n* `{.}` required by a dependency as a module or compiled\n* `-*-` required by a dependency as compiled\n* `(...)` alphanumeric input\n* `<Menu entry> --->` sub-menu	text	txt
857	1	git clone --depth 1 https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git	code	sh
858	1	git pull --unshallow	code	sh
859	1	git clone https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git	code	sh
860	1	It is set to the name of one the directories in `arch/` directory in the kernel source.	text	txt
861	1	This framework improves I/O operations by reducing system calls compared to typical AIO frameworks.	text	txt
862	1	The Kconfig language used in `Kconfig` files which construct the menus where the kernel config options are selected.	text	txt
862	2	The Kconfig parser that can be invoked by `make menuconfig` which internally invokes `scripts/kconfig/mconf`.	text	txt
863	1	`CONFIG_FEATURE`	text	txt
864	1	In Kconfig files.	text	txt
866	1	obj-$(CONFIG_FEATURE) += feature.o	code	make
866	2	The `CONFIG_FEATURE` can be either `y` to be built into the kernel, or `m` to build as a loadable module. Any other value disables the feature.	text	txt
867	1	The top Kbuild file starts descending into subdirectories to collect the configuration options.	text	txt
868	1	make distclean	code	sh
869	1	Specific configuration should be in `arch/${ARCH}/configs/<distro>_defconfig` directory.	text	txt
869	2	make distclean	code	sh
1310	6	docker swarm unlock	code	txt
869	4	A lot of unnecessary modules are loaded by default and the overal kernel will be heavy.	text	txt
870	1	- `.config`\n- `/lib/modules/$(uname -r)/.config`\n- `/etc/kernel-config`\n- `/boot/config-$(uname -r)`\n- `ARCH_DEFCONFIG`\n- `arch/${ARCH}/defconfig`	text	list
871	1	The old config file is read.	text	txt
871	2	Execute a config parser: `gconf` by `gconfig` target, `mconf` by `menuconfig` target, `nconf` by `nconfig` target, `qconf` by `xconfig` target.	text	txt
871	3	Construct initial configuration database: `conf_parse("Kconfig")`	text	txt
871	4	Read existing configuration: `conf_read`.	text	txt
871	5	Write the modified results into config file: `conf_write`.	text	txt
872	1	make savedefconfig	code	sh
872	2	cp defconfig arch/${ARCH}/custom_defconfig	code	sh
872	3	File name must end with `_defconfig`.	text	txt
872	4	make ARCH=$(uname -m) custom_defconfig	code	sh
873	1	make distclean	code	sh
873	2	lsmod > /tmp/config	code	sh
873	3	make LSMOD=/tmp/config localmodconfig	code	sh
873	4	You have to press enter for new options. Alternatively you can copy the distribution specific kernel config:	text	txt
873	5	cp /boot/config-$(uname -r) .config	code	sh
873	6	make olddefconfig	code	sh
874	1	make listnewconfig	code	sh
874	2	make helpnewconfig	code	sh
875	1		text	txt
875	2	make distclean	code	sh
875	3	cp /boot/config-$(uname -r) .config	code	sh
875	4	make LSMOD=/tmp/config LMC_KEEP="drivers/usb:drivers/gpu:fs" localmodconfig	code	sh
876	1	make menuconfig	code	sh
876	2	make nconfig	code	sh
876	3	make xconfig	code	sh
877	1	`CONFIG_IKCONFIG`, `CONFIG_IKCONFIG_PROC`	text	list
877	2	zcat /proc/config.gz	code	sh
878	1	There is a hidden target `syncconfig` that generates files in `header/config/` directory and the `include/generated/autoconf.h` header file which stores kernel configuration options as C macros.	text	txt
879	1	scripts/diffconfig .config.old .config	code	sh
880	1	scripts/config --disable IKCOFNIG --disable IKCONFIG_PROC	code	sh
880	2	scripts/config --enable IKCONFIG --enable IKCONFIG_PROC	code	sh
881	1	We first need to generate a security aware kernel configuration, then merge it using a script in the kernel source:	text	txt
881	2	git clone https://github.com/a13xp0p0v/kconfig-hardened-check	code	sh
881	3	kconfig-hardened-check -g x86_64 > config-secure	code	sh
881	4	scripts/kconfig/merge_config.sh config-insecure config-secure	code	sh
882	1	This requires `gcc-<version>-plugin-dev` package to be installed.	text	txt
882	2	General architecture-dependent options | GCC plugins	text	txt
882	3	The configuration option is `CONFIG_GCC_PLUGINS`.	text	txt
882	4	scripts/config --enable GCC_PLUGINS	code	sh
883	1	The configuration option is `CONFIG_IKHEADERS`.	text	txt
883	2	scripts/config --enable IKHEADERS	code	sh
884	1	The configuration option is `CONFIG_DEBUG_INFO_BTF`.	text	txt
884	2	scripts/config --enable DEBUG_INFO_BTF	code	sh
884	3	See https://kernel.org/doc/html/latest/bpf/ptf.html	text	txt
885	1	The configuration option is `CONFIG_WERROR`.	text	txt
885	2	scripts/config --enable WERROR	code	sh
886	1	if (IS_ENABLED(CONFIG_CUSTOM_DRIVER)) { /* ... */ }	code	c
887	1	./scripts/kconfig/streamline_config.pl	code	sh
887	2	make localdefconfig	code	sh
887	3	This is suitable when your distro kernel has too many modules but you just want the ones that you are using right now.	text	txt
888	1	lsmod > /tmp/modules.lst	code	sh
888	2	make LSMOD=/tmp/modules.lst LCM_KEEP="drivers/usb:drivers/gpu:fs" localmodconfig	code	sh
889	1	./scripts/extract-ikconfig	code	sh
890	1	./scripts/diffconfig <config> <config>	code	sh
895	1	section .data\n    message db "sample assembly program", 10, 0\n    length equ $ - message	text	txt
895	2	section .bss\nsection .text\n    global main	text	txt
895	3	main:\n    push rbp\n    mov rbp, rsp	text	txt
895	4	    mov rax, 1\n    mov rdi, 1\n    mov rsi, message\n    mov rdx, length\n    syscall	text	txt
895	5	    mov rsp, rbp\n    pop rbp	text	txt
895	6	    mov rax, 60\n    mov rdi, 0\n    syscall	code	txt
895	7	sample: sample.o\n    gcc -Wall -g3 -Og -no-pie sample.o -o sample\nsample.o: sample.asm\n    nasm -f elf64 -g -F dwarf sample.asm -l sample.lst	code	txt
896	1	section .data\nsection .bss\nsection .text\n    global main	text	txt
896	2	main:\n    mov rax, 60\n    mov rdi, 0\n    syscall	code	txt
898	1	* rax\n* rbx\n* rcx\n* rdx\n* rsi\n* rdi\n* rbp\n* rsp\n* r8\n* r9\n* r10\n* r11\n* r12\n* r13\n* r14\n* r15	text	txt
899	1	`rip`	text	txt
1705	1	When providing the source code, the license text is shared inside it. If we want the license text inside our final image, we can add the following to build`/conf/local.conf`:	text	txt
1705	2	COPY_LIC_MANIFEST = "1"\nCOPY_LIC_DIRS = "1"	code	bb
900	1	Name|Symbol|Bit|Content\n---|---|---|---\nCarry|CF|0|Previous instruction had a carry\nParityp|F|2|Last byte has even number of 1s\nAdjust|AF|4|BCD operations\nZero|ZF|6|Previous instruction resulted a zero\nSign|SF|8|Previous instruction resulted in most significant bit equal to 1\nDirection|DF|10|Direction of string operations (increment or decrement)\nOverflow|OF|11|Previous instruction resulted in overflow	text	txt
901	1	`xmm`\n`ymm`\n`zmm`	text	txt
902	1	gdb --quiet executable	code	txt
903	1	list\nlist 10\n`help list` or `h l`	code	txt
904	1	show listsize\nset listsize 20	code	txt
905	1	show disassembly-flavor\nset disassembly-flavor intel\nset disassembly-flavor att\nhelp set disassembly-flavor	code	txt
906	1	echo 'set disassembly-flavor intel' >> $HOME/.gdbinit	code	txt
907	1	disassemble main\ndisassemble 'path/to/source.cpp'::func\nhelp disassemble	code	txt
908	1	x/s 0x654321\nx/s &message\nx/d 0x654321\nx/x $rip\nhelp x	code	txt
909	1	break main\nhelp break	code	txt
910	1	run\nhelp run	code	txt
911	1	info registers\ninfo all-registers\nhelp info registers\nhelp info all-registers	code	txt
1313	1	docker service ls	code	txt
912	1	info breakpoints\ninfo stack\ninfo threads\ninfo source\nhelp info breakpoints\nhelp info stack\nhelp info threads\nhelp info source	code	txt
913	1	disable breakpoint 1\nenable breakpoint 1\ndelete breakpoint 1\nhelp disable breakpoint\nhelp enable breakpoint\nhelp delete breakpoint	code	txt
914	1	continue\nnext\nstep\nhelp continue\nhelp next\nhelp step\nhelp finish	code	txt
915	1	print\nhelp print	code	txt
916	1	tui enable\nhelp tui	code	txt
917	1	section .data\n    message db "sample program", 10, 0\n    message_length equ $ - message - 1\n    pi dq 3.14	text	txt
917	2	section .text\n    global main	text	txt
917	3	main:\n    push rbp\n    mov rbp, rsp	text	txt
917	4	    ; write\n    mov rax, 1\n    mov rdi, 1\n    mov rsi, message\n    mov rdx, message_length\n    syscall	text	txt
917	5	    mov rsp, rbp\n    pop rbp	text	txt
917	6	    ; exit\n    mov rax, 60\n    mov rdi, 0\n    syscall	code	txt
918	1	extern printf	text	txt
918	2	section .data\n    string_fmtstr db "%s", 10, 0\n    string db "sample program", 0	text	txt
918	3	    integer_fmtstr db "%d", 10, 0\n    number dd 37	text	txt
918	4	    float_fmtstr db "%2.6f", 10, 0\n    pi dq 3.141592	text	txt
918	5	section .text\n    global main	text	txt
918	6	main:\n    push rbp\n    mov rbp, rsp	text	txt
918	7	    ; printf\n    mov rax, 0 ; do not use xmm registers\n    mov rdi, string_fmtstr\n    mov rsi, string\n    call printf	text	txt
918	8	    ; printf\n    mov rax, 0 ; do not use xmm registers\n    mov rdi, integer_fmtstr\n    mov rsi, [number]\n    call printf	text	txt
918	9	    ; printf\n    mov rax, 1 ; use xmm registers\n    movq xmm0, [pi]\n    mov rdi, float_fmtstr\n    call printf	text	txt
918	10	    ; exit\n    mov rax, 60\n    mov rdi, 0\n    syscall	code	txt
919	1	section .text\n    global main	text	txt
919	2	main:\n    ret	code	txt
920	1	* je: jump if equal\n* jne: jump if not equal\n* jg: jump if greater\n* jge: jump if greater or equal\n* jl: jump if lower\n* jle: jump if lower or equal\n* ja: jump if above\n* jae: jump if above or equal\n* jb: jump if below\n* jbe: jump if below or equal	text	txt
920	2	extern printf	text	txt
920	3	section .data\nnumerator dq 5\ndenominator dq 6\ngreater_str db "greater", 10, 0\nless_str db "less", 10, 0	text	txt
920	4	section .text\nglobal main	text	txt
920	5	main:\npush rbp\nmov rbp, rsp	text	txt
920	6	mov rax, [numerator]\nmov rbx, [denominator]\ncmp rax, rbx\njge greater	text	txt
920	7	mov rax, 0\nmov rdi, greater_str\ncall printf\njmp exit	text	txt
920	8	greater:\nmov rax, 0\nmov rdi, less_str\ncall printf	text	txt
920	9	exit:\nxor rax, rax\nmov rsp, rbp\npop rbp\nret	code	txt
920	10	break main\nrun\nnext\ninfo rflags	code	txt
921	1	extern printf	text	txt
921	2	section .data\ncounter dq 3\nfmt db "%d", 10, 0	text	txt
921	3	section .text\nglobal main	text	txt
921	4	main:\n; make stack frame\npush rbp\nmov rbp, rsp	text	txt
921	5	; store initial value\nmov rcx, [counter]	text	txt
921	6	; print initial value\nmov rax, 0\nmov rdi, fmt\nmov rsi, rcx\ncall printf	text	txt
921	7	repeat:\n; repeat decrementing until value reached zero\ndec rcx\ncmp rcx, 0\njne repeat	text	txt
921	8	; print result\nmov rax, 0\nmov rdi, fmt\nmov rsi, rcx\ncall printf	text	txt
921	9	; remove stack frame\nmov rsp, rbp\npop rbp	text	txt
921	10	; return zero value\nxor rax, rax\nret	code	txt
922	1	extern printf	text	txt
922	2	section .data\nfmt db "%i", 10, 0\ninitial dq 3	text	txt
922	3	section .text\nglobal main	text	txt
922	4	main:\n; make stack frame\npush rbp\nmov rbp, rsp	text	txt
922	5	; assign initial value\nmov rcx, [initial]	text	txt
922	6	; print initial value\nxor rax, rax\nmov rdi, fmt\nmov rsi, rcx\ncall printf	text	txt
922	7	; printf modified rcx\nmov rcx, [initial]	text	txt
922	8	repeat:\n; decrement rcx until reached zero\nloop repeat	text	txt
922	9	; print result\nxor rax, rax\nmov rdi, fmt\nmov rsi, rcx\ncall printf	text	txt
922	10	; remove stack frame\nmov rsp, rbp\npop rbp	text	txt
922	11	; return value\nxor rax, rax\nxor rdi, rdi\nret	code	txt
923	1	section .data\n    word_array times 5 dw 0 ; array of 5 words containing 0	code	txt
924	1	section .bss\n    bvar resb 10\n    wvar resw 5\n    dvar resd 1\n    qvar resq 100	code	txt
925	1	section .data\n    text db "abc", 0	text	txt
925	2	section .text\n    global main	text	txt
925	3	main:\n    push rbp\n    mov rbp, rsp	text	txt
925	4	    ; load address of first character\n    lea al, [text]	text	txt
925	5	    ; point of second character\n    inc rax	text	txt
925	6	    ; load address of third character\n    lea al, [text + 2]	text	txt
925	7	    mov rsp, rbp\n    pop rbp	text	txt
925	8	    xor rax, rax\n    ret	code	txt
926	1	readelf --file-header ./program	code	txt
927	1	readelf --symbols ./program | grep -E 'main|start|Num:.*' --color	code	txt
928	1	readelf --symbols ./program | sort -k 2 -r	code	txt
929	1	* `mul` multiplies unsigned integers\n* `imul` multiplies signed integers\n* `imul` will store the lower 64 bits of the resulting product in rax and the upper 64 bits in rdx.\n* `idiv` will divide the dividen in rdx:rax by the divisor in the source operand and store the integer result in rax.	text	txt
929	2	section .data\n    number1 dq 36\n    number2 dq 3	text	txt
929	3	section .bss\n    result resq 1\n    modulo resq 1	text	txt
929	4	section .text\n    global main	text	txt
929	5	main:\n    push rbp\n    mov rbp, rsp	text	txt
929	6	    ; addition\n    mov rax, [number1]\n    add rax, [number2]\n    mov [result], rax ; 39	text	txt
929	7	    ; subtration\n    mov rax, [number1]\n    sub rax, [number2]\n    mov [result], rax ; 33	text	txt
929	8	    ; increment\n    mov rax, [number1]\n    inc rax\n    mov [result], rax	text	txt
929	9	    ; shift arithmetic left\n    mov rax, [number1]\n    sal rax, 2 ; multiply by 4\n    mov [result], rax	text	txt
929	10	    ; shift arithmetic right\n    mov rax, [number1]\n    sar rax, 2 ; divide by 4\n    mov [result], rax	text	txt
929	11	    ; multiply\n    mov rax, [number2]\n    imul qword[number2] ; multiplly rax with number2\n    mov [result], rax	text	txt
929	12	    ; divide\n    mov rax, [number1]\n    mov rdx, 0 ; division uses rdx:rax convention\n    idiv qword[number2]\n    mov [result], rax\n    mov [modulo], rdx	text	txt
929	13	    mov rsp, rbp\n    pop rbp	text	txt
929	14	    xor rax, rax\n    ret	code	txt
930	1	section .data\ntext db "Brian Salehi", 10, 0\nlength equ $ - text - 1	text	txt
930	2	section .text\nglobal main	text	txt
930	3	main:\npush rbp\nmov rbp, rsp	text	txt
930	4	; print initial sequence\nmov rax, 1\nmov rdi, 1\nmov rsi, text\nmov rdx, length\nsyscall	text	txt
930	5	; prepare for reverse operation\nxor rax, rax\nmov rbx, text\nmov rcx, length\nxor r12, r12 ; to store index	text	txt
930	6	store_loop:\n; push sequence to stack\nmov al, byte [rbx+r12]\npush rax\ninc r12\nloop store_loop	text	txt
930	7	xor rax, rax\nmov rbx, text\nmov rcx, length\nxor r12, r12	text	txt
930	8	reverse_loop:\n; pop sequence from stack\npop rax\nmov byte [rbx+r12], al\ninc r12\nloop reverse_loop\nmov byte [rbx+r12], 0	text	txt
930	9	; print reversed string\nmov rax, 1\nmov rdi, 1\nmov rsi, text\nmov rdx, length\nsyscall	text	txt
930	10	mov rsp, rbp\npop rbp	text	txt
930	11	xor rax, rax\nret	code	txt
931	1	* A single-precision number is 32 bits, 1 sign bit, 8 exponent bits, and 23 fraction bits.	text	txt
931	2	S   EEEEEEEE        FFFFFFFFFFFFFFFFFFFFFFF\n0   1      8        9                     31	code	txt
931	3	* A double-precision number is 64 bits, 1 sign bit, 11 exponent bits, and 52 fraction bits.	text	txt
931	4	```\nS   EEEEEEEEEEE     FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n0   1         11    12                                                 63\n```	text	txt
932	1	* Single precision floating point arithmetic instructions are postfixed with ss\n* Double precision floating point arithmetic instructions are postfixed with sd	text	txt
932	2	extern printf	text	txt
932	3	section .data\nnumber1 dq 9.0\nnumber2 dq 73.0\nfmt db "%f %f", 10, 0	text	txt
932	4	section .text\nglobal main	text	txt
932	5	main:\npush rbp\nmov rbp, rsp	text	txt
932	6	; print floating-point numbers\nmovsd xmm0, [number1]\nmovsd xmm1, [number2]\nmov rax, 2 ; two floats\nmov rdi, fmt\ncall printf	text	txt
932	7	; sum floating-point numbers\nmovsd xmm0, [number1]\naddsd xmm0, [number2]	text	txt
932	8	; difference\nmovsd xmm0, [number1]\nsubsd xmm0, [number2]	text	txt
932	9	; multiplication\nmovsd xmm0, [number1]\nmulsd xmm0, [number2]	text	txt
932	10	; division\nmovsd xmm0, [number1]\ndivsd xmm0, [number2]	text	txt
932	11	; square root\nsqrtsd xmm0, [number1]	text	txt
932	12	mov rsp, rbp\npop rbp	text	txt
932	13	xor rax, rax\nret	code	txt
933	1	section .text\n    global main	text	txt
933	2	main:\n    push rbp\n    mov rbp, rsp	text	txt
933	3	    leave\n    ret	code	txt
934	1	section .data\n    radius dq 10.0\n    pi dq 3.14	text	txt
934	2	section .text\n    global main	text	txt
934	3	main:\n    push rbp\n    mov rbp, rsp	text	txt
934	4	    call area\n    movsd xmm1, [radius]	text	txt
934	5	    xor rax, rax\n    leave\n    ret	text	txt
934	6	area:\n    push rbp\n    mov rbp, rsp	text	txt
934	7	    movsd xmm0, [radius]\n    mulsd xmm0, [radius]\n    mulsd xmm0, [pi]	text	txt
934	8	    xor rax, rax\n    leave\n    ret	code	txt
935	1	* Use `xmm0` register for floating-point values and `rax` register for other values.	text	txt
935	2	section .data\nval dq 0	text	txt
935	3	section .text\nglobal main	text	txt
935	4	main:\npush rbp\nmov rbp, rsp	text	txt
935	5	call fail_func\nxor rax, rax	text	txt
935	6	call success_func\nxor rax, rax	text	txt
935	7	leave\nret	text	txt
935	8	fail_func:\npush rbp\nmov rbp, rsp	text	txt
935	9	mov rax, 1	text	txt
935	10	leave\nret	text	txt
935	11	success_func:\npush rbp\nmov rbp, rsp	text	txt
935	12	mov rax, 0	text	txt
935	13	leave\nret	code	txt
936	1	extern printf	text	txt
936	2	section .data\nradius dq 10.0	text	txt
936	3	section .text\nglobal main	text	txt
936	4	main:\npush rbp\nmov rbp, rsp	text	txt
936	5	call area\ncall print	text	txt
936	6	xor rax, rax\nleave\nret	text	txt
936	7	area:\nsection .data\n.pi dq 3.141592     ; local to area	text	txt
936	8	section .text\npush rbp\nmov rbp, rsp	text	txt
936	9	movsd xmm0, [.pi]\nmulsd xmm0, [radius]\nmulsd xmm0, [radius]	text	txt
936	10	leave\nret	text	txt
5542	1		code	cpp
936	11	print:\nsection .data\n.fmt db "%f", 10, 0	text	txt
936	12	section .text\npush rbp\nmov rbp, rsp	text	txt
936	13	mov rax, 1\nmov rdi, .fmt\ncall printf	text	txt
936	14	leave\nret	code	txt
937	1	* Each function call results in 8 bytes return address being pushed on the stack.\n* It is necessary to make sure to restore the stack to the appropriate value before we leave a function.	text	txt
937	2	section .text\nglobal main	text	txt
937	3	main:\npush rbp\ncall func1\npop rbp\nret	text	txt
937	4	func1:\npush rbp\ncall func2\npop rbp\nret	text	txt
937	5	func2:\npush rbp\ncall func3\npop rbp\nret	text	txt
937	6	func3:\npush rbp\npop rbp\nret	code	txt
938	1	*arithmetic.asm*\nsection .text\n    global sum\n    global difference\n    global area	text	txt
938	2	sum:\n    push rbp\n    mov rbp, rsp	text	txt
938	3	    mov rax, rdi\n    add rax, rsi	text	txt
938	4	    mov rsp, rbp\n    pop rbp\n    ret	text	txt
938	5	difference:\n    push rbp\n    mov rbp, rsp	text	txt
938	6	    mov rax, rdi\n    sub rax, rsi	text	txt
1320	1	docker network ls	code	txt
938	7	    mov rsp, rbp\n    pop rbp\n    ret	text	txt
938	8	area:\n    section .data\n        .pi dq 3.141592	text	txt
938	9	    section .text\n        push rbp\n        mov rbp, rsp	text	txt
938	10	        movsd xmm1, qword[.pi]\n        mulsd xmm0, xmm0\n        mulsd xmm0, xmm1	text	txt
938	11	        mov rsp, rbp\n        pop rbp\n        ret	code	txt
938	12	*main.asm*\nextern sum\nextern difference\nextern area	text	txt
938	13	section .data\n    format_integral db "%i", 10, 0\n    format_floating db "%f", 10, 0	text	txt
938	14	section .text\n    global main	text	txt
938	15	main:\n    push rbp\n    mov rbp, rsp	text	txt
938	16	    ; use and print the results of sum function\n    mov rdi, 1\n    mov rsi, 3\n    call sum	text	txt
938	17	    mov rdi, format_integral\n    mov rsi, rax\n    xor rax, rax\n    call printf	text	txt
938	18	    ; use and print the results of difference function\n    mov rdi, 7\n    mov rsi, 5\n    call difference	text	txt
938	19	    mov rdi, format_integral\n    mov rsi, rax\n    xor rax, rax\n    call printf	text	txt
938	20	    ; use and print the results of area function\n    mov xmm0, qword[radius]\n    call area	text	txt
938	21	    mov rdi, format_floating\n    mov rax, 1\n    call printf	text	txt
938	22	    mov rsp, rbp\n    pop rbp\n    ret	code	txt
939	1	*header.nasm*\nglobal pi	text	txt
939	2	section .data\n    pi dq 3.141592	text	txt
939	3	section .text\n    ...	code	txt
939	4	*main.nasm*>\nextern pi	text	txt
939	5	section .text\n    ...	code	txt
940	1	* Following calling conventions are for System V AMD64 ABI:\n* For integral types, registers are `rdi`, `rsi`, `rdx`, `rcx`, `r8`, `r9` respectively, and additional arguments are passed via the stack and in reverse order so that we can pop off in the right order.\n* Function's return address `rip` is pushed on the stack, just after the arguments.\n* In function, then `rbp` is pushed, there maybe another 8 bytes needed to be pushed to align the stack in 16 bytes.\n* For floating point types, registers are `xmm0` to `xmm7`, additional arguments are passed via the stack but not with `push` instruction. Will be discussed later.	text	txt
940	2	section .text\nglobal main	text	txt
940	3	main:\nsection .data\n.first   dq 1\n.second  dq 2\n.third   dq 3\n.forth   dq 4\n.fifth   dq 5\n.sixth   dq 6\n.seventh dq 7\n.eighth  dq 8\n.ninth   dq 9\n.tenth   dq 10	text	txt
940	4	section .text\npush rbp\nmov rbp, rsp	text	txt
940	5	mov rdi, .first\nmov rsi, .second\nmov rdx, .third\nmov rcx, .forth\nmov r8, .fifth\nmov r9, .sixth\npush .tenth\npush .ninth\npush .eighth\npush .seventh\ncall func	text	txt
940	6	sum:\nsection .text\n; first value on stack\n; 8 bytes rip pushed onto stack\npush rbp        ; 8 bytes rbp pushed onto stack\nmov rbp, rsp	text	txt
940	7	xor rax, rax	text	txt
940	8	add rax, rdi\nadd rax, rsi\nadd rax, rdx\nadd rax, rcx\nadd rax, r8\nadd rax, r9	text	txt
940	9	push rbx        ; preserve callee register\nxor rbx, rbx	text	txt
940	10	mov rbx, qword[rbp+16]  ; first value on stack: + rip + rbp\nadd rax, rbx    ; seventh	text	txt
940	11	mov rbx, qword[rbp+24]\nadd rax, rbx    ; eighth	text	txt
940	12	mov rbx, qword[rbp+32]\nadd rax, rbx    ; ningth	text	txt
940	13	mov rbx, qword[rbp+40]\nadd rax, rbx    ; tenth	text	txt
940	14	pop rbx         ; restore callee register	text	txt
940	15	mov rsp, rbp\npop rbp\nret	code	txt
941	1	* `shl` and `sal` shift left but `sal` has sign extension.\n* `shr` and `sar` shift right but `sar` has sign extension.	text	txt
941	2	section .data\nnumber1 db 6        ; 00000110\nnumber2 db 10       ; 00001010	text	txt
941	3	section .text\nglobal main	text	txt
941	4	main:\npush rbp\nmov rbp, rsp	text	txt
941	5	mov rax, number1\nxor rax, number2    ; 00001100	text	txt
941	6	mov rax, number1\nor  rax, number2    ; 00001110	text	txt
941	7	mov rax, number1\nand rax, number2    ; 00000010	text	txt
941	8	mov rax, number1\nnot rax             ; 11111001	text	txt
941	9	mov rax, number1\nshl rax, 5          ; 11000000	text	txt
941	10	mov rax, number1\nshr rax, 3          ; 00000001	text	txt
941	11	mov rax, number1\nsal rax, 2          ; 00001100	text	txt
941	12	mov rax, number1\nsar rax, 2          ; 00000011	text	txt
941	13	mov rax, number1\nrol rax, 3          ; 00011000	text	txt
941	14	mov rax, number1\nror rax, 3          ; 10000001	text	txt
941	15	mov rsp, rbp\npop rbp\nret	code	txt
942	1	section .data\n   variable dq 0	text	txt
942	2	section .text\n    global main	text	txt
942	3	main:\n    push rbp\n    mov rbp, rsp	text	txt
942	4	    ; set bit 4\n    bts qword [variable], 4	text	txt
942	5	    ; set bit 7\n    bts qword [variable], 7	text	txt
942	6	    ; set bit 8\n    bts qword [variable], 8	text	txt
942	7	    ; reset bit 7\n    btr qword [variable], 7	text	txt
942	8	    xor rax, rax\n    leave\n    ret	code	txt
943	1	section .data\n    variable dq 0	text	txt
943	2	section .text\n    global main	text	txt
943	3	main:\n    push rbp\n    mov rbp, rsp	text	txt
943	4	    ; reset higher memory to use lower memory for comparison\n    xor rdi, rdi\n    mov rax, 8	text	txt
943	5	    ; check if 8th bit is set by checking carry flag\n    ; 1 if bit is set and 0 otherwise\n    bt [variable], rax\n    setc dil	text	txt
943	6	    xor rax, rax\n    leave\n    ret	code	txt
944	1	extern printf	text	txt
944	2	; multiply value v by shifting it n times\n%define multiply(v, n) sal v, n	text	txt
944	3	; having two arguments\n%macro print 2\n    section .data\n        %%detail db %1, 0\n        %%format_string db "%s: %i", 10, 0\n    section .text\n        xor rax, rax\n        mov rdi, %%format_string\n        mov rsi, %%detail\n        mov rdx, %2\n        call printf\n%endmacro	text	txt
944	4	section .data\n    number dq 42	text	txt
944	5	section .text\n    global main	text	txt
944	6	main:\n    push rbp\n    mov rbp, rsp	text	txt
944	7	    print "value is", number\n    multiply(number, 2)\n    print "multiplication result", number	text	txt
944	8	    xor rax, rax\n    leave\n    ret	code	txt
945	1	objdump -M intel -d macro	code	txt
946	1	section .text\nglobal write	text	txt
946	2	; preconditions:\n; address of string be set to rsi\n; length of string be set to rdx\nwrite:\npush rbp\nmov rbp, rsp	text	txt
946	3	mov rax, 1  ; write system call number\nmov rdi, 1  ; stdout\nsyscall	text	txt
946	4	xor rax, rax\nleave\nret	code	txt
947	1	section .text\nglobal read	text	txt
947	2	; preconditions:\n; address of buffer be set to rsi\n; length of buffer be set to rdx\nread:\npush rbp\nmov rbp, rsp	text	txt
947	3	mov rax, 0  ; read system call number\nmov rdi, 0  ; stdin	text	txt
947	4	xor rax, rax\nleave\nret	code	txt
948	1	section .text\nglobal read	text	txt
948	2	print:\npush rbp\nmov rbp, rsp	text	txt
948	3	push r12        ; callee saved	text	txt
948	4	xor rdx, rdx    ; character counter\nmov r12, rdi    ; string address	text	txt
948	5	.counter:\ncmp byte[r12], 0\nje .print	text	txt
948	6	inc rdx\ninc r12\njmp .counter	text	txt
948	7	.print:\ncmp rdx, 0\nje .exit	text	txt
948	8	mov rsi, rdi    ; string address\n; rdx holds string length\nmov rax, 1      ; write\nmov rdi, 1      ; stdout\nsyscall	text	txt
948	9	.exit:\npop r12\nxor rax, rax\nleave\nret	code	txt
949	1	section .text\nglobal read	text	txt
949	2	; \\\\pre rdi address of string placeholder\n; \\\\pre rsi maximum characters to read\n; \\\\post rax error code\nread:\nsection .data\nnewline db 0xa	text	txt
949	3	section .bss\n.buffer resb 1      ; hold 1 character from input	text	txt
949	4	section .text\npush rbp\nmov rbp, rsp	text	txt
949	5	push r12            ; callee saved\npush r13            ; callee saved\npush r14            ; callee saved	text	txt
949	6	mov r12, rdi        ; input string address\nmov r13, rsi        ; max count\nxor r14, r14        ; character counter	text	txt
949	7	.read:\nmov rax, 0          ; read\nmov rdi, 1          ; stdin\nlea rsi, [.buffer]  ; input address\nmov rdx, 1          ; characters to read\nsyscall	text	txt
949	8	mov al, [.buffer]   ; check if reached NL\ncmp al, byte[newline]\nje .check_exit	text	txt
949	9	cmp al, 97          ; check if input character is lower than 'a'\njl .read            ; ignore this and read next character	text	txt
949	10	cmp al, 122         ; check if input character is greater than 'z'\njg .read            ; ignore this and read next character	text	txt
949	11	inc r14             ; increment counter	text	txt
949	12	cmp r14, r13        ; check if number of characters reached maximum\nja .read            ; don't put input charater into buffer\n; but keep reading from stdin to read newline	text	txt
949	13	mov byte[r12], al   ; put input character into buffer\ninc r12             ; point to next character placeholder in buffer\njmp .read           ; read next input character	text	txt
949	14	.check_exit\ncmp r14, 0          ; check if anything was read\nja .exit_success	text	txt
949	15	mov rax, 1          ; return 1 when failed to read anything\njmp .exit	text	txt
949	16	.exit_success\nxor rax, rax        ; return 0 when read at least 0 character	text	txt
949	17	.exit\ninc r12             ; counter null character\nmov byte[r12], 0    ; close string by putting null at the end\npop r14             ; restore for callee\npop r13             ; restore for callee\npop r12             ; restore for callee	text	txt
949	18	leave\nret	code	txt
950	1	`/usr/include/asm/unistd_64.h`	text	txt
951	1	`/usr/include/asm-generic/fcntl.h`	text	txt
952	1	By appending `q` to the number.	text	txt
952	2	section .data\n    O_CREATE equ 00000100q	code	txt
953	1	section .data\n    CONDITION equ 1	text	txt
953	2	section .text\n    global main	text	txt
953	3	main:\n    push rbp\n    mov rbp, rsp	text	txt
953	4	%IF CONDITION\n    xor rdi, rdi\n%ELSE\n    mov rdi, 1\n%ENDIF	text	txt
953	5	    leave\n    ret	code	txt
954	1	section .data\n    CREATE equ 1            ; use for conditional assembly\n    NR_create equ 85        ; create system call	text	txt
954	2	section .text\n    global create	text	txt
954	3	; \\\\pre rdi address of filename string\n; \\\\post rax error code\ncreate:\n    push rbp\n    mov rbp, rsp	text	txt
954	4	    mov rax, NR_create\n    mov rsi, S_IRUSR | S_IWUSR\n    syscall	text	txt
954	5	    leave\n    ret	code	txt
954	6	section .data\n    CREATE equ 1            ; use for conditional assembly\n    NR_create equ 85        ; create system call	text	txt
954	7	section .text\n    global create	text	txt
954	8	; \\\\pre rdi file descriptor\n; \\\\post rax error code\ncreate:\n    push rbp\n    mov rbp, rsp	text	txt
954	9	    mov rax, NR_create\n    mov rsi, S_IRUSR | S_IWUSR\n    syscall	text	txt
954	10	    leave\n    ret	code	txt
954	11	extern create\nextern close	text	txt
954	12	section .text\n    global main	text	txt
5543	1		code	cpp
954	13	main:\n    section .data\n        fd dq 0                 ; to hold file descriptor	text	txt
954	14	    section .text\n        push rbp\n        mov rbp, rsp	text	txt
954	15	    %IF CREATE\n        mov rdi, filename\n        call create\n        mov qword[fd], rax      ; save file descriptor\n    %ENDIF	text	txt
954	16	    %IF CLOSE\n        mov rdi, qword[fd]      ; file descriptor\n        call close\n    %ENDIF	code	txt
955	1	section .data\n    CREATE equ 1            ; use for conditional assembly	text	txt
955	2	section .text\n    global create	text	txt
955	3	create:\n    push rbp\n    mov rbp, rsp	text	txt
955	4	    leave\n    ret	code	txt
955	5	extern create\nextern close\nextern write	text	txt
955	6	section .text\n    global main	text	txt
955	7	main:\n    section .data\n        fd dq 0                 ; to hold file descriptor	text	txt
955	8	    section .text\n        push rbp\n        mov rbp, rsp	text	txt
955	9	    %IF CREATE\n        mov rdi, filename\n        call create\n        mov qword[fd], rax      ; save file descriptor\n    %ENDIF	text	txt
955	10	    %IF WRITE\n        mov rdi, qword[fd]      ; file descriptor\n        mov rsi, text           ; address of string\n        mov rdx, qword[length]  ; length of string\n        call write\n    %ENDIF	text	txt
955	11	    %IF CLOSE\n        mov rdi, qword[fd]      ; file descriptor\n        call close\n    %ENDIF	code	txt
956	1	section .data\n    CREATE equ 1            ; use for conditional assembly	text	txt
956	2	section .text\n    global create	text	txt
956	3	create:\n    push rbp\n    mov rbp, rsp	text	txt
956	4	    leave\n    ret	code	txt
956	5	extern create\nextern close\nextern write	text	txt
956	6	section .text\n    global main	text	txt
956	7	main:\n    section .data\n        fd dq 0                 ; to hold file descriptor	text	txt
956	8	    section .text\n        push rbp\n        mov rbp, rsp	text	txt
956	9	    %IF CREATE\n        mov rdi, filename\n        call create\n        mov qword[fd], rax      ; save file descriptor\n    %ENDIF	text	txt
956	10	    %IF WRITE\n        mov rdi, qword[fd]      ; file descriptor\n        mov rsi, text           ; address of string\n        mov rdx, qword[length]  ; length of string\n        call write\n    %ENDIF	text	txt
956	11	    %IF CLOSE\n        mov rdi, qword[fd]      ; file descriptor\n        call close\n    %ENDIF	code	txt
957	1		code	txt
958	1		code	txt
959	1		code	txt
960	1		code	txt
961	1		code	txt
962	1	* `rdi`: argc or number of arguments\n* `rsi`: argv or address of array each, cell is an 8bytes of address to an argument string	text	txt
963	1	extern printf	text	txt
963	2	section .data\n    fmt db "%s", 10, 0	text	txt
963	3	section .text\n    global main	text	txt
963	4	main:\n    push rbp\n    mov rbp, rsp	text	txt
963	5	    mov r12, rdi\n    mov r13, rsi\n    xor r14, r14	text	txt
963	6	.arg:\n    mov rdi, fmt\n    mov rsi, qword[r13 + r14 * 8]\n    call printf	text	txt
963	7	    inc r14\n    cmp r14, r12\n    jl .arg	text	txt
963	8	    leave\n    ret	code	txt
964	1	info registers rdi rsi rsp\nx/1xg <the pointer in rdi>\nx/s <address where the pointer in rdi points to>\nx/s <address where the pointer in rdi points to + 8>\nx/s <address where the pointer in rdi points to + 16>	code	txt
965	1	section .text\n\tglobal sum	text	txt
965	2	sum:\n    push rbp\n    mov rbp, rsp	text	txt
965	3	    mov rax, rdi\n    add rax, rsi	text	txt
965	4	    leave\n    ret	code	txt
965	5	nasm -f elf64 -g -F dwarf sum.asm	code	txt
965	6	#include <stdio.h>	text	txt
965	7	extern int sum(int, int);	text	txt
965	8	int main(void)\n{\n    int result = sum(4, 2);\n    printf("%i\\\\n", result);\n}	code	txt
965	9	gcc -g -o program main.c sum.o\n./program	code	txt
966	1	There are two types of inline assembly: **basic** and **extended**.	text	txt
966	2	Compilers will not optimize assembly parts of the program, so using inline assembly is not advices.\nThere will be no error checking on inline assembly code.	text	txt
967	1	Instructions should be terminated by `;`.\n`-mintel` compiler option is required.\nSwitching to Intel assembly syntax is required as the first argument of `__asm__`.	text	txt
967	2	int main(void)\n{\n    __asm__(\n        ".intel_syntax noprefix;"\n        "xor rax, rax;"\n    );\n}	code	txt
967	3	gcc -o program main.c -masm=intel -no-pie	code	txt
968	1	General syntax of extended inline assembly is as follows:	text	txt
968	2	__asm__(\n    assembler code\n    : output operands\n    : input operands\n    : list of clobbered registers\n);	code	txt
968	3	* After the assembler code, additional and optional information is used.\n* Instruction orders must be respected.	text	txt
968	4	__asm__(\n    ".intel_syntax noprefix;"\n    "mov rbx, rdx;"\n    "imul rbx, rcx;"\n    "mov rax, rbx;"\n    :"=a"(eproduct)\n    :"d"(x), "c"(y)\n    :"rbx"\n);	text	txt
968	5	printf("The extended inline product is %i\\\\n", eproduct);	code	txt
968	6	`a`, `d`, `c` are register constraints, and they map to the registers `rax`, `rdx`, `rcx`, respectively.\n`:"=a"(eproduct)` means that the output will be in `rax`, and `rax` will refer to the variable `eproduct`. Register `rdx` refers to `x`, and `rcx` refers to `y`, which are the input variables.\n`rbx` is considered clobbered in the code and will be restored to its original value, because it was declared in the list of clobbering registers.	text	txt
968	7	a -> rax, eax, ax, al\nb -> rbx, ebx, bx, bl\nc -> rcx, ecx, cx, cl\nd -> rdx, edx, dx, dl\nS -> rsi, esi, si\nD -> rdi, edi, di\nr -> any register	code	txt
969	1	section .data\n    length equ 95\n    newline db 10	text	txt
969	2	section .bss\n    buffer1 resb length\n    buffer2 resb length	text	txt
969	3	section .text\n    global main	text	txt
969	4	main:\n    push rbp\n    mov rbp, rsp	text	txt
969	5	    ; fill buffer with ascii letters using simple loop\n    mov rax, 32\n    mov rdi, buffer1\n    mov rcx, length\n.next1:\n    mov byte[rdi], al\n    inc rdi\n    inc al\n    loop .next	text	txt
969	6	    leave\n    ret	code	txt
970	1	section .data\n    length equ 95\n    newline db 10	text	txt
970	2	section .bss\n    buffer1 resb length\n    buffer2 resb length	text	txt
970	3	section .text\n    global main	text	txt
970	4	main:\n    push rbp\n    mov rbp, rsp	text	txt
970	5	    ; fill buffer with ascii 0 using loop and stosb instruction\n    mov rax, 48\n    mov rdi, buffer1\n    mov rcx, length\n.next2:\n    stosb\n    loop .next2	text	txt
970	6	    leave\n    ret	code	txt
971	1	section .data\n    length equ 95\n    newline db 10	text	txt
971	2	section .bss\n    buffer1 resb length\n    buffer2 resb length	text	txt
971	3	section .text\n    global main	text	txt
971	4	main:\n    push rbp\n    mov rbp, rsp	text	txt
971	5	    ; fill buffer with ascii 1 using rep stosb instruction without a loop\n    mov rax, 49\n    mov rdi, buffer1\n    mov rcx, length\n    rep stosb	text	txt
971	6	    leave\n    ret	code	txt
972	1	section .data\n    length equ 95\n    newline db 10	text	txt
972	2	section .bss\n    buffer1 resb length\n    buffer2 resb length	text	txt
972	3	section .text\n    global main	text	txt
972	4	main:\n    push rbp\n    mov rbp, rsp	text	txt
1329	5	To restore the backup:	text	txt
972	5	    ; copy buffer1 to buffer2 without a loop\n    mov rsi, buffer1    ; source\n    mov rdi, buffer2    ; destination\n    mov rcx, length\n    rep movsb	text	txt
972	6	    ; reverse copy the buffer1 into buffer2 without a loop\n    mov rax, 48         ; fill buffer2 with ascii 0\n    mov rdi, buffer2    ; we don't increment rdi with stosb\n    mov rcx, length     ; we don't decrement rcx or loop with stosb\n    rep stosb	text	txt
972	7	    lea rsi, [buffer1 + length - 4]\n    lea rdi, [buffer2 + length]\n    mov rcx, 27         ; copy only 27 characters\n    std                 ; std sets DF, cld clears DF\n    rep movsb	text	txt
972	8	    leave\n    ret	code	txt
973	1	When using `movsb`, the content of `DF` (the direction flag) is taken into account.\nWhen `DF=0`, `rsi` and `rdi` are increased by 1, pointing to the next higher memory address.\nWhen `DF=1`, `rsi` and `rdi` are decreased by 1, pointing to the next lower memory address.\nThis means that in our example with `DF=1`, `rsi` needs to point to the address of the highest memory address to be copied and decrease from there. In addition, `rdi` needs to point to the highest destination address and decrease from there.\nThe intention is to “walk backward” when copying, that is, decreasing `rsi` and `rdi` with every loop.\n**NOTE**: `rsi` and `rdi` both are decreased; you cannot use the `DF` to increase one register and decrease another (reversing the string).	text	txt
973	2	section .data\n    length equ 95\n    newline db 10	text	txt
973	3	section .bss\n    buffer1 resb length\n    buffer2 resb length	text	txt
973	4	section .text\n    global main	text	txt
973	5	main:\n    push rbp\n    mov rbp, rsp	text	txt
973	6	    ; reverse copy the buffer1 into buffer2 without a loop\n    mov rax, 48         ; fill buffer2 with ascii 0\n    mov rdi, buffer2    ; we don't increment rdi with stosb\n    mov rcx, length     ; we don't decrement rcx or loop with stosb\n    rep stosb	text	txt
973	7	    lea rsi, [buffer1 + length - 4]\n    lea rdi, [buffer2 + length]\n    mov rcx, 27         ; copy only 27 characters\n    std                 ; std sets DF, cld clears DF which reverses direction\n    rep movsb           ; with DF set, decrements rsi and rdi until rcx reaches 0	text	txt
973	8	    leave\n    ret	code	txt
974	1	Put the address of the first (source) string in `rsi`, the address of the second string (destination) in `rdi`, and the string length in `rcx`. Just to be sure, we clear the direction flag, `DF`, with `cld`. So, we walk forward in the strings.	text	txt
974	2	The instruction `cmpsb` compares two bytes and sets the status flag `ZF` to `1` if the two compared bytes are equal or to `0` if the 2 bytes are not equal. `rcx` is adjusted only at the end of a loop, which was never completed, so we have to adjust `rcx` (decrease it with 1). The resulting position is returned to main in `rax`.	text	txt
974	3	We will use repe, a version of `rep`, meaning “repeat while equal.” As before, `cmpsb` sets `ZF` according to the comparison, and `ZF=1` means the bytes are equal. As soon as `cmpsb` sets `ZF` equal to `0`, the `repe` loop is ended, and `rcx` can be used to compute the position where the differing character appeared. If the strings are completely the same, then `rcx` will be `0` and `ZF` will be `1`. After `repe`, the instruction `je` tests if `ZF` equals `1`. If `ZF` is `1`, the strings are equal; if `0`, the strings are not equal. We use `rcx` to calculate the differing position, so there’s no need to adjust `rcx`, because `repe` decreases `rcx` first in every loop.	text	txt
974	4	section .data\n    length equ 95\n    newline db 10	text	txt
974	5	section .bss\n    buffer1 resb length\n    buffer2 resb length	text	txt
974	6	section .text\n    global main	text	txt
974	7	main:\n    push rbp\n    mov rbp, rsp	text	txt
974	8	; method 1\n;=====================\n    lea rdi, [buffer1]\n    lea rsi, [buffer2]\n    mov rdx, length	text	txt
974	9	    cld                 ; clear DF flag	text	txt
974	10	.str_loop:\n    cmpsb\n    jne .notequal\n    loop .str_loop	text	txt
974	11	    xor rax, rax	text	txt
974	12	; method 2\n;=====================\n.notequal:\n    mov rax, buffer2\n    dec rcx	text	txt
974	13	    sub rax, rcx	text	txt
974	14	    mov rcx, rdx\n    cld	text	txt
974	15	    repe cmpsb\n    je .equals	text	txt
974	16	    mov rax, buffer2\n    sub rax, rcx	text	txt
974	17	    leave\n    ret	code	txt
975	1	The scanning works similar to comparing, but with `repne`, “repeat while not equal,” instead of `repe`. We also use `lodsb` and load the byte at address `rsi` into `rax`. The instruction `scasb` compares the byte in `al` with the byte pointed to by `rdi` and sets (1=equal) or resets (0=not equal) the `ZF` flag accordingly. The instruction `repne` looks at the status flag and continues if `ZF = 0`; that is, the 2 bytes are not equal. If the 2 bytes are equal, `scasb` sets `ZF` to `1`, the `repne` loop stops, and `rcx` can be used to compute the position of the byte in the string.	text	txt
975	2	section .data\n    length equ 95\n    newline db 10	text	txt
975	3	section .bss\n    buffer1 resb length\n    buffer2 resb length	text	txt
975	4	section .text\n    global main	text	txt
975	5	main:\n    push rbp\n    mov rbp, rsp	text	txt
5544	1		code	cpp
975	6	    mov rcx, rdx\n    lodsb\n    cld\n    repne scasb\n    jne .charnotfound	text	txt
975	7	    mov rax, length	text	txt
975	8	.charnotfound:\n    sub rax, rcx	text	txt
975	9	    leave\n    ret	code	txt
976	1	By appending an `h` at the end of a number:	text	txt
976	2	2000000h	code	txt
977	1	You first put a specific parameter in `eax`, then execute the instruction `cpuid`, and finally check the returned value in `ecx` and `edx`.\nIndeed, `cpuid` uses 32-bit registers.	text	txt
977	2	Based on processor manual, SSE bits are as follows:	text	txt
977	3	* **sse**: edx:25\n* **sse2**: edx:26\n* **sse3**: ecx:1\n* **ssse3**: ecx:1 and ecx:8\n* **sse4.1**: ecx:19\n* **sse4.2**: ecx:20	text	txt
977	4	section .text\n    global main	text	txt
977	5	main:\n    push rbp\n    mov rbp, rsp	text	txt
977	6	    mov eax, 1\n    cpuid	text	txt
977	7	    leave\n    ret	code	txt
978	1	extern printf	text	txt
978	2	section .data\n    fmt_sse42 db "sse4_2", 10, 0\n    fmt_sse41 db "sse4_1", 10, 0\n    fmt_ssse3 db "ssse3", 10, 0\n    fmt_sse3 db "sse3", 10, 0\n    fmt_sse2 db "sse2", 10, 0\n    fmt_sse db "sse", 10, 0\n    fmt_sep db ",", 10, 0	text	txt
978	3	section .text\n    global main	text	txt
978	4	main:\n    push rbp\n    mov rbp, rsp	text	txt
978	5	    mov eax, 1\n    cpuid\n    mov r12, rcx      ; store the half result of cpuid\n    mov r13, rdx      ; store the half result of cpuid	text	txt
978	6	    call sse\n    call sse2\n    call sse3\n    call ssse3\n    call sse41\n    call sse42	text	txt
978	7	    xor rax, rax\n    leave\n    ret	text	txt
978	8	sse:\n    push rbp\n    mov rbp, rsp	text	txt
978	9	    ; call also be done with bt instruction: bt r13, 25\n    test r13, 2000000h  ; test bit 25\n    jz .sse_unsupported	text	txt
978	10	    xor rax, rax\n    mov rdi, fmt_sse\n    call printf	text	txt
978	11	.sse_unsupported:\n    leave\n    ret	text	txt
978	12	sse2:\n    push rbp\n    mov rbp, rsp	text	txt
978	13	    test r13, 4000000h  ; test bit 26\n    jz .sse2_unsupported	text	txt
978	14	    xor rax, rax\n    mov rdi, fmt_sse2\n    call printf	text	txt
978	15	.sse2_unsupported:\n    leave\n    ret	text	txt
978	16	sse3:\n    push rbp\n    mov rbp, rsp	text	txt
978	17	    test r12, 1         ; test bit 0\n    jz .sse3_unsupported	text	txt
978	18	    xor rax, rax\n    mov rdi, fmt_sse3\n    call printf	text	txt
978	19	.sse3_unsupported:\n    leave\n    ret	text	txt
978	20	ssse3:\n    push rbp\n    mov rbp, rsp	text	txt
978	21	    test r12, 9         ; test bit 0\n    jz .ssse3_unsupported	text	txt
978	22	    xor rax, rax\n    mov rdi, fmt_ssse3\n    call printf	text	txt
978	23	.ssse3_unsupported:\n    leave\n    ret	text	txt
978	24	sse41:\n    push rbp\n    mov rbp, rsp	text	txt
978	25	    test r12, 80000h    ; test bit 19\n    jz .sse41_unsupported	text	txt
978	26	    xor rax, rax\n    mov rdi, fmt_sse41\n    call printf	text	txt
978	27	.sse41_unsupported:\n    leave\n    ret	text	txt
978	28	sse42:\n    push rbp\n    mov rbp, rsp\n    test r12, 100000h   ; test bit 20\n    jz .sse42_unsupported	text	txt
978	29	    xor rax, rax\n    mov rdi, fmt_sse42\n    call printf	text	txt
978	30	.sse42_unsupported:\n    leave\n    ret	code	txt
979	1	16 additional 128-bit registers of `xmm`:	text	txt
979	2	* xmm0\n* ...\n* xmm15	text	txt
980	1	The `xmm` registers can contain **scalar data** or **packed data**.\nScalar data means just one value.\nPacked data means multiple values related to each other.	text	txt
981	1	The **AVX** registers are called `ymm` registers and have 256 bits, double the size of `xmm` registers.	text	txt
981	2	There is also **AVX-512** which provides 512 bits registers and are called `zmm` registers.	text	txt
982	1	Data in section `.data` and `.bss` should be aligned on a 16-byte border so that registers can be filled with data once for each block of data.	text	txt
983	1	In **NASM** the assembly directive `align 16` and `alignb 16` can be used in front of the data.	text	txt
983	2	For **AVX**, data should be aligned on a 32 bytes border and for **AVX-512**, data needs to be aligned on a 64 bytes border.	text	txt
984	1	**mxcsr**: MMX Control and Status Register	code	txt
985	1	Docker allocates the private subnet from an unused RFC 1918 private subnet\nblock. It detects which network blocks are unused on the host and allocates\none of those to the virtual network. That is bridged to the host’s local\nnetwork through an interface on the server called `docker0`. This means that,\nby default, all of the containers are on a network together and can talk to\neach other directly. But to get to the host or the outside world, they go\nover the `docker0` virtual bridge interface.	text	txt
986	1	There is a wide ecosystem of tools to either improve or augment Docker’s\nfunctionality. Some good production tools leverage the Docker API, like\n**Prometheus** for monitoring and **Ansible** for simple orchestration.\nOthers leverage Docker’s plugin architecture.	text	txt
986	2	**Plugins** are executable programs that conform to a specification for\nreceiving and returning data to Docker.	text	txt
987	1	Some features may become deprecated on future releases. To see what has been\ntagged for deprecation and eventual removal, refer to the documentation.	text	txt
988	1	sudo systemctl enable --now docker	code	txt
989	1	docker -H 10.0.0.10:12375 version	code	txt
990	1	Passing in the IP address and port every time you want to run a Docker\ncommand, is not ideal, but luckily Docker can be set up to know about\nmultiple Docker servers, using the `docker context` command.	text	txt
990	2	To start let’s check and see what context is currently in use.	text	txt
990	3	docker context create helpdesk --docker =tcp://10.0.0.10:12375	code	txt
990	4	Take note of the entry that has an asterisk next to it, which designates\nthe current context.	text	txt
991	1	docker context list	code	txt
992	1	docker context use default	code	txt
993	1	You’re not likely to have to start the Docker server yourself, but that’s\nwhat going on behind the scenes.	text	txt
993	2	sudo dockerd -H unix:///var/run/docker.sock --config-file /etc/docker/daemon.json	code	txt
994	1	1. **Docker commands:** run a container and input the commands to create new image with `docker commit`.\n2. **Dockerfile:** Build from a known base image, and specify the build with a limited set of simple commands.\n3. **Dockerfile and configuration management (CM) tool:** Same as Dockerfile, but you hand over control of the build to a more sophisticated CM tool.\n4. **Scratch image and import a set of files:** From an empty image, import a TAR file with the required files.	text	txt
995	1	You begin the Dockerfile by defining the base image with the `FROM` command.	text	txt
995	2	FROM node	code	txt
995	3	Next, you declare the maintainer with the `LABEL` command.\nThis line isn’t required to make a working Docker image, but it’s good practice to include it.	text	txt
995	4	LABEL maintainer user@domain.tld	code	txt
995	5	Next, you clone the source code with a `RUN` command.\n**Note:** Git is installed inside the base *node* image in this case, but you can’t take this kind of thing for granted.	text	txt
995	6	RUN git clone -q https://domain.com - https://domain.com/username/repository.git	code	txt
995	7	Now you move to the new cloned directory with a `WORKDIR` command.\nNot only does this change directories within the build context,\nbut the last `WORKDIR` command determines which directory you’re in by default when you start up your container from your built image.	text	txt
995	8	WORKDIR repository	code	txt
995	9	Next, you run the node package manager’s install command (npm).	text	txt
995	10	RUN npm install > /dev/null	code	txt
995	11	Because port 8000 is used by the application, you use the `EXPOSE` command to tell Docker that containers from the built image should listen on this port.	text	txt
995	12	EXPOSE 8000	code	txt
995	13	Finally, you use the CMD command to tell Docker which command will be run when the container is started up.	text	txt
995	14	CMD ["npm", "start"]	code	txt
996	1	docker build .\ndocker image build .	code	txt
996	2	Each command results in a new image being created, and the image ID is output.	text	txt
997	1	docker tag 67c76cea05bb todoapp\ndocker image tag ...	code	txt
998	1	docker run -i -t -p 8000:8000 --name example todoapp\ndocker container run ...	code	txt
998	2	The `-p` flag maps the container’s port 8000 to the port 8000 on the host machine.\nThe `--name` flag gives the container a unique name you can refer to later for convenience.	text	txt
999	1	Once the container has been started, you can press `Ctrl-C` to terminate the process and the container.	text	txt
1000	1	docker ps -a\ndocker container ps ...\ndocker container ls ...\ndocker container list ...	code	txt
1001	1	docker start example\ndocker container start ...	code	txt
1002	1	docker diff example\ndocker container diff ...	code	txt
1002	2	The docker diff subcommand shows you which files have been affected since the image was instantiated as a container.\nIn this case, the todo directory has been changed (C), and the other listed files have been added (A).\nNo files have been deleted (D), which is the other possibility.	text	txt
1003	1	Once the Docker daemon has been stopped, you can restart it manually and open it up to outside users with the following command:	text	txt
1003	2	sudo docker daemon -H tcp://0.0.0.0:2375	code	txt
1003	3	docker -H tcp://<your host's ip>:2375 <subcommand>	code	txt
1003	4	Or you can export the `DOCKER_HOST` environment variable:	text	txt
1003	5	export DOCKER_HOST=tcp://<your host's ip>:2375\nsudo --preserve-env=DOCKER_HOST docker <subcommand>	code	txt
1004	1	docker run -d -p 1234:1234 --name daemon ubuntu:20.04 nc -l 1234\ndocker run --detach -publish 1234:1234 --name daemon ...\ndocker container run ...	code	txt
1004	2	The `-d` flag, when used with docker run, runs the container as a daemon.\nWith `-p` you publish the 1234 port from the container to the host.\nThe `--name` flag lets you give the container a name so you can refer to it later.\nFinally, you run a simple listening echo server on port 1234 with **netcat**.	text	txt
1004	3	nc localhost 1234\nLook ma, I know docker!^C	code	txt
1004	4	docker container logs daemon\nLook ma, I know docker!	code	txt
1005	1	docker logs daemon\ndocker container logs ...	code	txt
1006	1	Restart policy allows you to apply a set of rules to be followed when the container terminates:	text	txt
1006	2	* `no`: Don’t restart when the container exits\n* `always`: Always restart when the container exits\n* `unless-stopped`: Always restart, but remember explicitly stopping\n* `on-failure[:max-retry]`: Restart only on failure	text	txt
1006	3	docker container run --detach --restart=on-failure:10 --name daemon ubuntu /usr/bin/false\ndocker container logs daemon	code	txt
1007	1	socat -v UNIX-LISTEN:/tmp/dockerapi.sock,fork UNIX-CONNECT:/var/run/docker.sock &\ndocker -H unix:///tmp/dockerapi.sock ps -a	code	txt
1008	1	docker search node	code	txt
1009	1	- cmake\n- ctest\n- cpack	text	list
1010	1	- ccmake\n- cmake-gui	text	list
1011	1	cd cmake	code	sh
1011	2	./configure --prefix=$HOME/.local	code	sh
1011	3	make -j$(nproc)	code	sh
1011	4	git clone https://github.com/kitware/cmake.git	code	sh
1011	5	make install	code	sh
1012	1	cmake --build <build> --parallel $(nproc) --target all	code	sh
1012	2	cmake -S <source> -B <build>	code	sh
1014	1	cmake_minimum_required(VERSION 3.30)\nproject(Sample VERSION 0.1 LANGUAGES CXX)\nadd_executable(program)\ntarget_sources(program PRIVATE src/main.cpp)	code	cmake
1015	1	- **Configuration**: parses listfiles, detects toolchains, detects architectures, finds dependencies, generates cache\n- **Generate**: writes build tool files, generates targets\n- **Build**: compile binaries, link binaries, run tests, pack artifacts	text	list
1016	1	cmake -S <source> -B <build> -G <generator>	code	sh
1017	1	Wherever the top `CMakeLists.txt` file is located.	text	txt
1018	1	There is always exactly one project per `CMakeLists.txt`, which means that each project has to have a separate directory in the source directory.	text	txt
1018	2	project(<name> VERSION <version> LANGUAGES <language>... DESCRIPTION "<description>")	code	cmake
1019	1	CMAKE_PROJECT_NAME	code	cmake
1019	2	PROJECT_NAME	code	cmake
1020	1	Version 3.21:	text	txt
1020	2	PROJECT_IS_TOP_LEVEL	code	cmake
1021	1	CMAKE_PROJECT_DESCRIPTION	code	cmake
1021	2	PROJECT_DESCRIPTION	code	cmake
1022	1	PROJECT_VERSION_MINOR	code	cmake
1022	2	PROJECT_VERSION_PATCH	code	cmake
1022	3	PROJECT_VERSION	code	cmake
1022	4	PROJECT_VERSION_MAJOR	code	cmake
1023	1	set(api_version 4.12.1)	code	cmake
1024	1	unset(api_version)	code	cmake
1025	1	${api_version}	code	cmake
1026	1	${api_${PROJECT_VERSION}}	code	cmake
1027	1	Variables might be scoped as follows:	text	txt
1027	2	- Function scope\n- Directory scope\n- Persistent cache	text	txt
1028	1	set(PARENT_SCOPE api_version 4.12.1)	code	cmake
1029	1	Modules are located in `/lib/modules/$(uname -r)/kernel`.	text	txt
1029	2	Origin: Effectively use module commands	text	txt
1030	1	- Loading modules requires privileged access to the system.\n- It also requires a kernel object.\n- And it might require other modules as dependencies.	text	txt
1165	3	int main(void)\n{\n    char* name[2];	text	txt
1285	2	docker image build --tag container:latest .	code	txt
1030	2	insmod /lib/modules/$(uname -r)/kernel/fs/                    # Operation not permitted\nsudo insmod /lib/modules/$(uname -r)/kernel/fs/btfs           # No such file or directory\nsudo insmod /lib/modules/$(uname -r)/kernel/fs/btfs/btfs.ko   # Unknown symbol in module	code	txt
1030	3	Origin: Effectively use module commands	text	txt
1031	1	Only dynamically loaded modules.	text	txt
1031	2	Origin: Effectively use module commands	text	txt
1032	1	From `/proc/modules` and `/sys/modules/*` directories.	text	txt
1032	2	Origin: Effectively use module commands	text	txt
1033	1	rmmod ecryptfs	code	txt
1033	2	Origin: Effectively use module commands	text	txt
1034	1	Module dependencies are stored in `/lib/modules/$(uname -r)/modules.dep` file.	text	txt
1034	2	Origin: Effectively use module commands	text	txt
1035	1	This utility uses dependency file to load dependencies first.	text	txt
1035	2	modprobe ecryptfs	code	txt
1035	3	This module is not usually used for modules under development.	text	txt
1035	4	Origin: Effectively use module commands	text	txt
1036	1	modinfo ecryptfs	code	txt
1036	2	Origin: Effectively use module commands	text	txt
1037	1	A vector is an ordered list of numbers like $(3, 1)$.	text	txt
1038	1	v = (3, 2)	code	txt
1039	1	The coordinates or entries of a vector only tell us how far the vector\nstretches in the x- and y-directions; not where it is located.	text	txt
1040	1	We usually position vectors so their tail is located at the origin.	text	txt
1041	1	Vectors having same length and direction are equal.	text	txt
1042	1	$(0, 0)$ denoted by 0 arrowed.	text	txt
1043	1	Sum vectors can be calculated by summing two vectors entry-wise.	text	txt
1043	2	$v + w = (v₁ + w₁, v₂ + w₂)$	text	txt
1044	1	If $v$ and $w$ are positioned so that the tail of $w$ is located at the same\npoint as the head of $v$, then $v + w$ represents the total displacement\naccrued by following $v$ and then following $w$.	text	txt
1044	2	If we instead work entirely with vectors in standard position, then $v + w$\nis the vector that points along the diagonal between sides $v$ and $w$ of a\nparallelogram.	text	txt
1045	1	Suppose $v, w, x \\\\in \\\\mathbb{R}^n$ are vectors. Then the following properties hold:	text	txt
1045	2	- Commutativity: $v + w = w + v$\n- Associativity: $(v + w) + x = v + (w + x)$	text	txt
1046	1	**Solution:**	text	txt
1046	2	1. $(2, 5, −1) + (1, −1, 2) = (2 + 1, 5 − 1, −1 + 2) = (3, 4, 1)$\n2. $(1, 2) + (3, 1) + (2, −1) = (1 + 3 + 2, 2 + 1 − 1) = (6, 2)$	text	txt
1047	1	Suppose $v = (v_1 , v_2 , ... , v_n) \\\\in \\\\mathbb{R}^n$ is a vector and $c \\\\in \\\\mathbb{R}$ is a\nscalar. Then their scalar multiplication, denoted by $cv$, is the vector:	text	txt
1047	2	$cv = (cv_1 , cv_2 , cv_3 , ... , cv_n)$	text	txt
1047	3	Scalar multiplication can be used to scale vectors, stretching them when\nmultiplied to $c > 1$ and compressed when multiplied to $c < 1$ and $c > 0$.	text	txt
1047	4	If $c = 0$ then $cv$ is the zero vector, all of whose entries are $0$, which we denote by $0$.	text	txt
1047	5	Multiplication of a vector to a negative scalar changes the direction of it.\nIf $c = −1$ then $cv$ is the vector whose entries are the negatives of $v$’s\nentries, which we denote by $−v$.	text	txt
1048	1	Suppose $v, w \\\\in \\\\mathbb{R}^n$ are vectors and $c, d \\\\in \\\\mathbb{R}$ are scalars. Then the\nfollowing properties hold:	text	txt
1048	2	- $c(v + w) = cv + cw$\n- $(c + d)v = cv + dv$\n- $c(dv) = (cd)v$	text	txt
1049	1	**Solutions:**	text	txt
1049	2	1. $x − (3 , 2 , 1) = (1 , 2 , 3) − 3x$:	text	txt
1049	3	\\\\begin{aligned}\nx − (3 , 2 , 1) &= (1 , 2 , 3) − 3x \\\\\\\\\nx &= (4 , 4 , 4) − 3x \\\\\\\\\n4x &= (4 , 4 , 4) \\\\\\\\\nx &= (1 , 1 , 1)\n\\\\end{aligned}	code	txt
1049	4	2. $x + 2(v + w) = −v − 3(x − w)$:	text	txt
1049	5	\\\\begin{aligned}\nx + 2(v + w) &= −v − 3(x − w) \\\\\\\\\nx + 2v + 2w &= −v − 3x + 3w \\\\\\\\\n4x &= −3v + w \\\\\\\\\nx &= 41 (w − 3v)\n\\\\end{aligned}	code	txt
1050	1	Subtraction of these two vectors are geometrically a vector from the head of\n$w$ to the head of $v$.	text	txt
1050	2	$v - w = (v₁ - w₁, v₂ - w₂)$	text	txt
1051	1	$v − w$ is the vector pointing from the head of $w$ to the head of $v$ when\n$v$ and $w$ are in standard position.	text	txt
1052	1	A **linear combination** of the vectors $v_1 , v_2 , ... , v_k \\\\in \\\\mathbb{R}^n$ is\nany vector of the form:	text	txt
1052	2	$c_1v_1 + c_2v_2 + ... + c_kv_k$,	text	txt
1052	3	where $c_1 , c_2 , ... , c_k \\\\in \\\\mathbb{R}$.	text	txt
1052	4	For example $(1, 2, 3)$ is a linear combination of the vectors $(1 , 1, 1)$\nand $(-1, 0, 1)$ since:	text	txt
1052	5	$(1 , 2 , 3) = 2(1 , 1 , 1) + (-1 , 0 , 1)$.	text	txt
1052	6	On the other hand $(1 , 2 , 3)$ is not a linear combination of the vectors\n$c_1(1 , 1 , 0) + c_2(2 , 1 , 0)$ has a 0 in its third entry, and thus cannot\npossibly equal $(1 , 2 , 3)$.	text	txt
5545	1		code	cpp
1053	1	When working with linear combinations, some particularly important vectors\nare those with all entries equal to $0$, except for a single entry that\nequals $1$. Specifically, for each $j = 1 , 2 , ... , n$, we define the\nvector $e_j \\\\in \\\\mathbb{R}^n$ by	text	txt
1053	2	$e_j = (0 , 0 , ... , 0 , 1 , 0 , ... , 0)$.	text	txt
1053	3	For example, in $R^2$ there are two such vectors: $e1 = (1 , 0)$ and $e2 = (0\n, 1)$. Similarly, in $R^3$ there are three such vectors: $e_1 = (1, 0, 0)$,\n$e_2 = (0, 1, 0)$, and $e_3 = (0, 0, 1)$. In general, in $R^n$ there are $n$ of\nthese vectors, $e_1 , e_2 , ... , e_n$.	text	txt
1054	1	Every vector $v \\\\in \\\\mathbb{R}^n$ can be written as a linear combination of them. In\nparticular, if $v = (v_1 , v_2 , ... , v_n)$ then $v = v_1e_1 + v_2e_2 + ... + v_ne_n$.	text	txt
1055	1	$3e_1 - 2e_2 + e_3 = 3(1,0,0) - 2(0,1,0) + (0,0,1) = (3,-2,1)$	text	txt
1056	1	$(3, 5, −2, −1) = 3e_1 + 5e_2 − 2e_3 − e_4$	text	txt
1057	1	If $v = (v_1, v_2, ..., v_n) \\\\in \\\\mathbb{R}^n)$ and $w = (w_1, w_2, ..., w_n) \\\\in\nR^n)$ then the dot product of $v$ and $w$, denoted by $v.w$ is the quantity\n$v.w = v_1w_1 + v_2w_2 + ... + v_nw_n$.	text	txt
1057	2	So the result of the dot product of two vectors is a **scalar**.	text	txt
1165	4	    name[0] = "/bin/sh";\n    name[1] = 0x0;\n    execve(name[0], name, 0x0);\n    exit(0);\n}	code	txt
1059	1	Intuitively, the dot product $v.w$ tells you how much $v$ points in the\ndirection of $w$.\n- Introduction to Linear and Matrix Algebra - Chapter 1\n- https://www.youtube.com - https://www.youtube.com/watch?v=PJfvKCXpWZM&list=PLOAf1ViVP13jmawPabxnAa00YFIetVqbd&index=4\nDrawing gets hard but algebraically works.	text	txt
1060	1	Let $v, w, z \\\\in \\\\mathbb{R}^n$ be vectors and let $c \\\\in \\\\mathbb{R}$ be a scalar. Then	text	txt
1060	2	- $v.w = w.v$ (Commutativity)\n- $v.(w + z) = v.w + v.z$ (Distributivity)\n- $(cv).w = c(v + w)$	text	txt
1061	1	$\\\\frac{1}{2}(-6, 12, 4) = \\\\frac{1}{2}(10) = 5$	text	txt
1062	1	$|\\\\vec{v}.\\\\vec{w}| \\\\le \\\\parallel\\\\vec{v}\\\\parallel \\\\parallel\\\\vec{w}\\\\parallel$	text	txt
1063	1	Suppose that $\\\\vec{v},\\\\vec{w} \\\\in \\\\mathbb{R}^n$ are vectors. Then\n$\\\\parallel\\\\vec{v}+\\\\vec{w}\\\\parallel \\\\le \\\\parallel\\\\vec{v}\\\\parallel + \\\\parallel\\\\vec{w}\\\\parallel$.	text	txt
1064	1	The length of a vector $\\\\vec{v} = (v_1, v_2, ..., v_n) \\\\in \\\\mathbb{R}^n, denoted by\n\\\\parallel\\\\vec{v}\\\\parallel, is defined by:	text	txt
1064	2	$\\\\parallel\\\\vec{v}\\\\parallel = \\\\sqrt{v.v} = \\\\sqrt{v_1^2 + v_2^2 + ... + v_n^2}$	text	txt
1064	3	In two dimensions $\\\\parallel\\\\vec{v}\\\\parallel = \\\\sqrt{v_1^2 + v_2^2} = \\\\sqrt{\\\\vec{v}.\\\\vec{v}}$.	text	txt
1064	4	In three dimensions $\\\\parallel\\\\vec{v}\\\\parallel = \\\\sqrt{v_1^2 + v_2^2 + v_3^3} = \\\\sqrt{\\\\vec{v}.\\\\vec{v}}$.	text	txt
1064	5	No matter how many dimensions do we have, the square root of dot product\nresults in the length of a vector.	text	txt
1065	1	$\\\\parallel\\\\vec{v}\\\\parallel = \\\\sqrt{3^2 + 4^2} = \\\\sqrt{25} = 5$	text	txt
1066	1	$\\\\parallel\\\\vec{v}\\\\parallel = \\\\sqrt{\\\\cos{\\\\theta}^2 + \\\\sin{\\\\theta}^2} = \\\\sqrt{1} = 1$	text	txt
1067	1	Let $\\\\vec{v} \\\\in \\\\mathbb{R}^n$ be a vector and let $c \\\\in \\\\mathbb{R}$ be a scalar. Then	text	txt
1067	2	1. $\\\\parallel{c\\\\vec{v}}\\\\parallel = |c|\\\\parallel\\\\vec{v}\\\\parallel$\n2. $\\\\parallel\\\\vec{v}\\\\parallel = 0$ if and only if $\\\\vec{v} = 0$	text	txt
1068	1	A vector with length 1 is a unit vector.	text	txt
1068	2	Scaling $\\\\vec{v}$ to have length 1 like this is called **normalizing**\n$\\\\vec{v}$, and this unit vector $\\\\vec{w}$ is called the normalization of\n$\\\\vec{v}$.	text	txt
1069	1	Every non-zero vector $\\\\vec{v} \\\\in \\\\mathbb{R}^n$ can be devided by its length to get a\nunit vector.	text	txt
1069	2	$\\\\vec{w} = \\\\div{\\\\vec{v},\\\\parallel\\\\vec{v}\\\\parallel}$	text	txt
1070	1	$\\\\vec{v} = (3,4)$	text	txt
1070	2	$\\\\vec{w} = \\\\div{\\\\vec{v},\\\\parallel\\\\vec{v}\\\\parallel}$	text	txt
1071	1	A linear transformation is a function $T: R^n → R^n$ that satisfies the following two properties:	text	txt
1071	2	$T(v+w) = T(v) + T(w)$ for all vectors $v,w \\\\in \\\\mathbb{R}^n$</br>\n$T(cv) = cT(v)$ for all vectors $v \\\\in \\\\mathbb{R}^n$ and all scalars $c \\\\in \\\\mathbb{R}$	text	txt
1072	1	This transformation is **not** linear.\nOne way to see this is to notice that $2T(0,0) = 2(1,2) = (2,4)$\nBut $T(2(0,0)) = T(0,0) = (1,2)$\nSince these are not the same, $T$ is not linear.	text	txt
1073	1	This transformation is **not** linear.\nOne way to see this is to notice that $2T(1,1) = 2(0,1) = (0,2)$\nBut $T(2(1,1)) = T(2,2) = (0,4)$\nSince these are not the same, $T$ is not linear.	text	txt
1074	1	This transformation **is** linear.\nWe can check the two defining properties of linear transformations.	text	txt
1075	1	T(c₁v₁ + c₂v₂ + … + ckvk) = c₁T(v₁) + c₂T(v₂) + … + ckT(vk)\nfor all v₁,v₂,…,vk \\\\in \\\\mathbb{R}^n and all c₁,c₂,…,ck \\\\in \\\\mathbb{R}	code	txt
1075	2	So we have:	text	txt
1075	3	T(v) = T(v₁e₁+v₂e₂+…+vnen) = v₁T(e₁)+v₂T(e₂)+…+vnT(en)	code	txt
1076	1	If we know what $T$ does to the standard basis vectors, then we know everything about $T$.	text	txt
1076	2	Since $(2,3) = 2e₁+3e₂$, we know that:\n$$T(2,3) = T(2e₁+3e₂) = 2T(e₁)+3T(e₂) = 2(1,1) + 3(-1,1) = (-1,5)$$	text	txt
1077	1	T(v₁,v₂) = T(v₁e₁+v₂e₂) = v₁T(e₁)+v₂T(e₂) = v₁(1,1)+v₂(-1,1) = (v₁-v₂,v₁+v₂)	code	txt
1078	1	A function $T: R^n → R^n$ is a linear transformation if and only if there exists a matrix $[T] \\\\in Mm,n$ such that $T(v) = [T]v$ for all $v \\\\in \\\\mathbb{R}^n$ and it is\n$[T] = [T(e₁)|T(e₂)|…|T(en)]$	text	txt
1079	1	By computing $T(e₁)=(1,3)$ and $T(e₂)=(2,4)$ and placing these as columns into a matrix, in that order:	text	txt
1079	2	[T] = [(1,3) (2,4)]	code	txt
1080	1	We could explicitly compute $T(e₁), T(e₂)$, and $T(e₃)$ and place them as columns in a matrix, or we could simply place coefficients of $v₁, v₂$ and $v₃$ in the output of $T$, in order, in the rows of a matrix.	text	txt
1080	2	[T] = [(3,2) (-1,4) (1,-2)]	code	txt
1080	3	Notice that $T$ maps from $R^3$ to $R^2$, so $[T]$ is a $2x3$ matrix.	text	txt
1081	1	add, subtract and multiply linear transformations by scalars, just like matrices.	text	txt
1081	2	(S+T)(v) = S(v)+T(v)\n(cT)(v) = cT(v)	code	txt
1082	1	Zero:	text	txt
1082	2	Ov = 0	code	txt
1083	1	The vector itself:	text	txt
1083	2	Iv = v	code	txt
5546	1		code	cpp
1084	1	Diagonal matrix does not change the direction of the standard basis vectors, but just stretches them by certain amounts.\nThis linear transformation is defined as:	text	txt
1084	2	T(v₁,v₂,…,vn) = (c₁v₁, c₂v₂, …, cnvn) which there exist scalars c₁,c₂,…,cn \\\\in \\\\mathbb{R}^n	code	txt
1084	3	The standard matrix of this linear transformation is:	text	txt
1084	4	[T] = [c₁e₁|c₂e₂|…|cnen] = [(c₁,0,…,0) (0,c₂,…,0) … (0,…,cn)]	code	txt
1085	1	[Pu] = uuT	text	txt
1086	1	Since u is a unit vector, the standard matrix of Pu is simply:\n[Pu] = uuT = [(1,0)]\\\\[1 0] = [(1,0) (0,)]\n[Pu]v = [(1,0) (0,0)]\\\\[(v₁,v₂)] = [(v₁,0)]\nWe can visualize this project as just squashing everything down onto the x-axis, [Pu]e₁ = e₁ and [Pu]e₂ = 0	text	txt
1087	1	Since w is not a unit vector, we have to first normalize it:\n∥w∥ = √1²+2²+3² = √14\nu = w/∥w∥ = (1,2,3)/√14\n[Pu] = uuT = 1/√14 [(1,2,3)]\\\\[1 2 3] = 1/14 [(1,2,3) (2,4,6) (3,6,9)]\nThis linear transformation squishes all of R^3 down onto the line in the direction of w.\nSo [Pu]w = w in this example.	text	txt
1088	1	[Fu] = 2uuT-I	text	txt
1089	1	[Fu] = 2uuT-I = 2[(0,1)]\\\\[0 1] - [(1,0) (0,1)] = [(-1,0) (0,1)]	text	txt
1090	1	[Fu] = 2uuT-I = 2[(1,1,1)]\\\\[1 1 1]/3 - [(1,0,0) (0,1,0) (0,0,1)] = ⅓[(-1,2,2) (2,-1,2) (2,2,-1)]\n[Fu]w = w	text	txt
1091	1	First compute [Fu]:\nu = (cos(π/3), sin(π/3)) = (1,√3)/2\n[Fu] = 2uuT - I = ½[(1 √3)]\\\\[1 √3] - [(1,0) (0,1)] = ½[(-1,√3) (√3,1)]\n[Fu]v = [Fu]\\\\[(-1,3)]	text	txt
1092	1	[Rθ] = Rθ(e₁)|Rθ(e₂)] = [(cos(θ),sin(θ)) (-sin(θ),cos(θ))]	text	txt
1093	1	[R^(π/4)]	text	txt
1094	1	[R^(-π/6)]	text	txt
1095	1	[R^π/4]	text	txt
1096	1	[R^-π/6]	text	txt
1097	1	[R^θ\\\\_yz] = [R^θ\\\\_yz(e₁)|R^θ\\\\_yz(e₂)|R^θ\\\\_yz(e₃)] = [(1,0,0) (0,cos(θ),sin(θ)) (0,-sin(θ),cos(θ))]	text	txt
1098	1	Since the goal is to compute R^2π/3\\\\_xy(v), we start by constructing standard matrix of R^2π/3\\\\_xy:\n[R^2π/3\\\\_xy] = [(cos(2π/3),sin(2π/3),0) (-sin(2π/3),cos(2π/3),0) (0,0,1)]\n[R^2π/3\\\\_xy]v = solve it	text	txt
1099	1	(S○T)(v) = S(T(v)) for all v \\\\in \\\\mathbb{R}^n\n[S○T] = [S]\\\\[T]	text	txt
1100	1	Compute the two standard matrices individually and then multiply them together:\nA unit vector on the line y = ¾x is u = (⅗,⅘), and the reflection Fu has standard matrix:\n[Fu] = 2[(⅗,⅘)]\\\\[⅗ ⅘] - [(1,0) (0,1)]\nThe diagonal stretch D has standard matrix:\n[D] = [(2,0) (0,3)]\nThe standard matrix of the composite linear transformation T = D○Fu is thus the product of these two individual standard matrices:\n[T] = [D]\\\\[Fu]	text	txt
1102	1	#include <stdio.h>\n#include <errno.h>\n#include <pthread.h>	text	txt
1102	2	void* handler(void*);	text	txt
1102	3	int main(void)\n{\npthread_t thread;	text	txt
1102	4	if (pthread_create(&thread, NULL, handler, NULL))\nreturn(errno);	text	txt
1102	5	if (pthread_join(thread, NULL))\nreturn(errno);\n}	text	txt
1102	6	void* handler(void* arg)\n{\n(void)arg;\nprintf("working thread\\\\n");\nreturn NULL;\n}	code	txt
1104	1	We can enumerate two synchronization mechanisms, as follows:	text	txt
1104	2	1. **Locks**: Used for mutual exclusion. When one contender holds the lock, no other can hold it (others are excluded). The most known locks in the kernel are **spinlocks** and **mutexes**.	text	txt
1104	3	A resource is said to be shared when it is accessible by several contenders, whether exclusively or not.\nWhen it is exclusive, access must be synchronized so that only the allowed contender(s) may own the resource.	text	txt
1104	4	The operating system performs mutual exclusion by atomically modifying a variable that holds the current state of the resource, making this visible to all contenders that might access the variable at the same time.	text	txt
1104	5	2. **Conditional variables**: For waiting for a change. These are implemented differently in the kernel as **wait queues** and **completion queues**.	text	txt
1104	6	Apart from dealing with the exclusive ownership of a given shared resource, there are situations where it is better to wait for the state of the resource to change.	text	txt
1104	7	The Linux kernel does not implement conditional variables, but to achieve the same or even better, the kernel provides the following mechanisms:	text	txt
1104	8	* **Wait queue**: To wait for a change — designed to work in concert with locks.\n* **Completion queue**: To wait for the completion of a given computation, mostly used with DMAs.	text	txt
1105	1	A *spinlock* is a hardware-based locking primitive that depends on hardware capabilities to provide atomic operations (such as `test_and_set`, which in a non-atomic implementation would result in read, modify, and write operations).\nIt is the simplest and the base locking primitive.	text	txt
1105	2	When *CPUB* is running, and task B wants to acquire the spinlock while *CPUA* has already called this spinlock's locking function, *CPUB* will simply spin around a `while` loop until the other CPU releases the lock.	text	txt
1105	3	This spinning will only happen on multi-core machines because, on a single-core machine, it cannot happen.	text	txt
1105	4	A *spinlock* is said to be a lock held by a CPU, in contrast to a *mutex* which is a lock held by a task.	text	txt
1106	1	A spinlock operates by disabling the scheduler on the local CPU.	text	txt
1106	2	This also means that a task currently running on that CPU cannot be preempted except by **interrupt requests (IRQs)** if they are not disabled on the local CPU.\nIn other words, spinlocks protect resources that only one CPU can take/access at a time.	text	txt
1106	3	This makes spinlocks suitable for **symmetrical multiprocessing (SMP)** safety and for executing atomic tasks.	text	txt
1107	1	A spinlock is created either statically using a `DEFINE_SPINLOCK` macro:	text	txt
1107	2	static DEFINE_SPINLOCK(my_spinlock);	code	txt
1107	3	This macro is defined in `include/linux/spinlock_types.h`.	text	txt
1107	4	For dynamic (runtime) allocation, it's better to embed the spinlock into a bigger structure, allocating memory for this structure and then calling `spin_lock_init()` on the spinlock element:	text	txt
1107	5	struct bigger_struct {\n    spinlock_t lock;\n    unsigned int foo;\n    [...]\n};\nstatic struct bigger_struct *fake_init_function()\n{\n    struct bigger_struct *bs;\n    bs = kmalloc(sizeof(struct bigger_struct), GFP_KERNEL);\n    if (!bs)\n        return -ENOMEM;\n    spin_lock_init(&bs->lock);\n    return bs;\n}	code	txt
5479	1	#include <ftxui/screen/color.hpp>\n\nint main()\n{\n    ftxui::Color blue{"ff009b"_rgb};\n}	code	cpp
1108	1	We can lock/unlock the spinlock using `spin_lock()` and `spin_unlock()` inline functions, both defined in `include/linux/spinlock.h`:	text	txt
1108	2	static __always_inline void spin_unlock(spinlock_t *lock);\nstatic __always_inline void spin_lock(spinlock_t *lock);	code	txt
1109	1	Though a spinlock prevents preemption on the local CPU, it does not prevent this CPU from being hogged by an interrupt.	text	txt
1109	2	Imagine a situation where the CPU holds a *"spinlock"* on behalf of task A in order to protect a given resource, and an interrupt occurs.\nThe CPU will stop its current task and branch to this interrupt handler.\nNow, imagine if this IRQ handler needs to acquire this same spinlock.\nIt will infinitely spin in place, trying to acquire a lock already locked by a task that it has preempted which results in a deadlock.	text	txt
1110	1	To address this issue, the Linux kernel provides `_irq` variant functions for spinlocks, which, in addition to disabling/enabling preemption, also disable/enable interrupts on the local CPU.\nThese functions are `spin_lock_irq()` and `spin_unlock_irq()`, defined as follows:	text	txt
1110	2	static void spin_unlock_irq(spinlock_t *lock)\nstatic void spin_lock_irq(spinlock_t *lock)	code	txt
1121	3	Both methods return 0 on failure (the lock is already locked) or 1 on success (lock acquired).\nThus, it makes sense to use these functions along with an if statement:	text	txt
1166	1	char* shellcode = "\\\\xff\\\\xff\\\\xfe\\\\xf4\\\\xe8\\\\xff\\\\x31\\\\x48\\\\x08\\\\xec\\\\x83\\\\x48";\n// shellcode for exit(0)	text	txt
1111	1	`spin_lock()` and all its variants automatically call `preempt_disable()`, which disables preemption on the local CPU, while `spin_unlock()` and its variants call `preempt_enable()`, which tries to enable preemption, and which internally calls schedule() if enabled.\n`spin_unlock()` is then a preemption point and might re-enable preemption.	text	txt
1112	1	`spin_lock_irq()` function is unsafe when called from IRQs off-context as its counterpart `spin_unlock_irq()` will dumbly enable IRQs, with the risk of enabling those that were not enabled while `spin_lock_irq()` was invoked.\nIt makes sense to use `spin_lock_irq()` only when you know that interrupts are enabled.	text	txt
1112	2	To achieve this, the kernel provides `_irqsave` variant functions that behave exactly like the `_irq` ones, with saving and restoring interrupts status features in addition.\nThese are `spin_lock_irqsave()` and `spin_lock_irqrestore()`, defined as follows:	text	txt
1112	3	spin_lock_irqsave(spinlock_t *lock, unsigned long flags)\nspin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)	code	txt
1112	4	`spin_lock()` and all its variants automatically call `preempt_disable()`, which disables preemption on the local CPU, while `spin_unlock()` and its variants call `preempt_enable()`, which tries to enable preemption, and which internally calls `schedule()` if enabled depending on the current value of the counter, whose current value should be 0.</br>\nIt tries because it depends on whether other spinlocks are locked, which would affect the value of the preemption counter.\n`spin_unlock()` is then a preemption point and might re-enable preemption.	text	txt
1113	1	Though disabling interrupts may prevent kernel preemption nothing prevents the protected section from invoking the `schedule()` function.\nThe kernel disables or enables the scheduler, and thus preemtion, by increasing or decreasing a kernel global and per-CPU variable called `preempt_count` with 0 as default value.\nThis variable is checked by the `schedule()` function and when it is greater than 0, the scheduler simply returns and does nothing.\nThis variable is incremented at each invocation of a `spin_lock*()` family function.\nOn the other side, releasing a spinlock decrements it from 1, and whenever it reaches 0, the scheduler is invoked, meaning that your critical section would not be that atomic.	text	txt
1113	2	Thus, disabling interrupts protects you from kernel preemption only in cases where the protected code does not trigger preemption itself.\nThat said, code that locked a spinlock may not sleep as there would be no way to wake it up as timer interrupts and/or schedulers are disabled on the local CPU.	text	txt
1114	1	It behaves exactly like a *spinlock*, with the only difference being that your code can sleep.\nA spinlock is a lock held by a CPU, a mutex, on the other hand, is a lock held by a task.	text	txt
1114	2	A mutex is a simple data structure that embeds a wait queue to put contenders to sleep and a spinlock to protect access to this wait queue.	text	txt
1114	3	struct mutex {\n    atomic_long_t owner;\n    spinlock_t wait_lock;\n#ifdef CONFIG_MUTEX_SPIN_ON_OWNER\n    struct optimistic_spin_queue osq; /* Spinner MCS lock */\n#endif\n    struct list_head wait_list;\n    [...]\n};	code	txt
1114	4	The mutex APIs can be found in the `include/linux/mutex.h` header file.	text	txt
1115	1	As for other kernel core data structures, there is a static initialization:	text	txt
1115	2	static DEFINE_MUTEX(my_mutex);	code	txt
1115	3	A second approach the kernel offers is dynamic initialization, possible thanks to a call to a `__mutex_init()` low-level function, which is actually wrapped by a much more user-friendly macro, `mutex_init()`.	text	txt
1115	4	struct fake_data {\n    struct i2c_client *client;\n    u16 reg_conf;\n    struct mutex mutex;\n};	text	txt
1115	5	static int fake_probe(struct i2c_client *client)\n{\n    [...]\n        mutex_init(&data->mutex);\n    [...]\n}	code	txt
1116	1	Acquiring (aka locking) a mutex is as simple as calling one of the following three functions:	text	txt
1116	2	void mutex_lock(struct mutex *lock);\nint mutex_lock_interruptible(struct mutex *lock);\nint mutex_lock_killable(struct mutex *lock);	code	txt
1116	3	With `mutex_lock()`, your task will be put in an uninterruptible sleep state (`TASK_UNINTERRUPTIBLE`) while waiting for the mutex to be released if it is held by another task.	text	txt
1116	4	`mutex_lock_interruptible()` will put your task in an interruptible sleep state, in which the sleep can be interrupted by any signal.	text	txt
1116	5	`mutex_lock_killable()` will allow your sleeping task to be interrupted only by signals that actually kill the task.	text	txt
1116	6	Each of these functions returns 0 if the lock has been acquired successfully.\nMoreover, interruptible variants return `-EINTR` when the locking attempt was interrupted by a signal.	text	txt
1117	1	Whichever locking function is used, only the mutex owner should release the mutex using `mutex_unlock()`:	text	txt
1117	2	void mutex_unlock(struct mutex *lock);	code	txt
1118	1	static bool mutex_is_locked(struct mutex *lock);	code	txt
1118	2	This function simply checks if the mutex owner is `NULL` and returns `true` if so or `false` otherwise.	text	txt
1119	1	The most important ones are enumerated in the `include/linux/mutex.h` kernel mutex API header file, and some of these are outlined here:	text	txt
1119	2	* A mutex can be held by one and only one task at a time.\n* Once held, the mutex can only be unlocked by the owner which is the task that locked it.\n* Multiple, recursive, or nested locks/unlocks are not allowed.\n* A mutex object must be initialized via the API. It must not be initialized by copying nor by using `memset()`, just as held mutexes must not be reinitialized.\n* A task that holds a mutex may not exit, just as memory areas where held locks reside must not be freed.\n* Mutexes may not be used in hardware or software interrupt contexts such as tasklets and timers.	text	txt
1119	3	All this makes mutexes suitable for the following cases:	text	txt
1119	4	* Locking only in the user context.\n* If the protected resource is not accessed from an IRQ handler and the operations need not be atomic.	text	txt
1120	1	It may be cheaper to use spinlocks for very small critical sections since the spinlock only suspends the scheduler and starts spinning, compared to the cost of using a mutex, which needs to suspend the current task and insert it into the mutex's wait queue, requiring the scheduler to switch to another task and rescheduling the sleeping task once the mutex is released.	text	txt
1121	1	Such methods try to acquire the lock and immediately return a status value, showing whether the lock has been successfully locked or not.	text	txt
1121	2	Both spinlock and mutex APIs provide a trylock method.\nThese are, respectively, `spin_trylock()` and `mutex_trylock()`	text	txt
1121	4	int mutex_trylock(struct mutex *lock)	code	txt
1334	1	docker volume prune	code	txt
1121	5	`spin_trylock()` will lock the spinlock if it is not already locked, just as the `spin_lock()` method does.\nHowever, it immediately returns 0 without spinning in cases where the spinlock is already locked:	text	txt
1121	6	static DEFINE_SPINLOCK(foo_lock);	text	txt
1121	7	static void foo(void)\n{\n    if (!spin_trylock(&foo_lock)) {\n        /* Failure! the spinlock is already locked */\n        return;\n    }	text	txt
1121	8	    /*\n     * reaching this part of the code means that the\n     * spinlock has been successfully locked\n     */\n    spin_unlock(&foo_lock);\n}	code	txt
1122	1	A resource is said to be shared when accessed by several contenders. When they are exclusive, access must be synchronized so that only the allowed contendeer(s) may own the resource.	text	txt
1123	1	Locks, conditional variables	text	list
1124	1	The kernel performs locking by atomically modifying a variable that holds the current state of the resource, making the shared resource visible to contenders that might access it at the same time..	text	txt
1125	1	Spinlocks, mutexes	text	list
1126	1	Waiting queues, completion queues	text	list
1127	1	There are situations where it is better to wait for the state of the resource to change; for example, waiting for a list to contain at least one object, or a task to complete.	text	txt
1128	1	When it comes to locking, it is up to the hardware to allow synchronizations by means of atomic operations.	text	txt
1129	1	Disabling interrupts around the critical code sections.	text	txt
1130	1	A spinlock operates by disabling the scheduler on the local CPU that is running the task that called the spinlock's locking API.	text	txt
1130	2	This also means that the task currently running on that CPU cannot be preempted by another task, except for interrupts if they are not disabled.	text	txt
1130	3	As a result, spinlocks protect resources that only one CPU can access at a time.	text	txt
1131	1	`preempt_count` is the preemption status variable, that if equal to 0, means preemption is enabled. However, if it's greater than 0, means preemption is disabled.	text	txt
1131	2	Disabling preepmtion by `preempt_disable()` consists of incrementing `preempt_count` by one, while `preempt_enable()` decrements `preempt_count` by one, and checks whether the new value is 0, and calls `schedule()` if so. These checkings and modifications should be done atomically.	text	txt
1132	1	Changing preemption status consists of modifying `preempt_count`, an in case of value 0 a call to `schedule()` is performed. Thus, preemption operations should be done atomically.	text	txt
1133	2	#define DEFINE_SPINLOCK(x) spinlock_t x = __SPIN_LOCK_UNLOCKED(x)	code	c
1133	3	static DEFINE_SPINLOCK(resource_lock);	code	c
1134	1	For dynamic allocation, you need to embed the spinlock into a bigger structure, allocate memory for this structure, and then call `spin_lock_init()` on the spinlock element.	text	txt
1134	2	struct bigger_struct\n{\n    spinlock_t lock;\n    unsigned int foo;\n};\n\nstatic struct bigger_struct *foo_alloc_init()\n{\n    struct bigger_struct *bs;\n    bs = kmalloc(sizeof(struct bigger_struct), GFP_KERNEL);\n    if (!bs)\n    {\n        return -ENOMEM;\n    }\n    spin_lock_init(&bs->lock);\n    return bs;\n}	code	c
1135	1	void spin_lock(spinlock_t *lock);	code	c
1135	2	void spin_unlock(spinlock_t *lock);	code	c
1136	1	void spin_unlock_irq(spinlock_t *lock);	code	c
1136	2	void spin_lock_irq(spinlock_t *lock);	code	c
1136	3	Spinlocks prevent preemptions but not interrupts. There might be cases where a task holds a spinlock in order to prevent a shared resource, and an interrupt handler preempts the task to hold and lock the same spinlock. This leads to a deadlock and a workaround to prevent that is to disable interrupts in addition to preemptions on the local CPU.	text	txt
1137	1	`spin_unlock_irq()` will enable all interrupts on local CPU, even the interrupts that were already disabled.	text	txt
1138	1	spin_lock_irqsave(spinlock_t *lock, unsigned long flags);	code	c
1138	2	spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags);	code	c
1139	1	Though disabling interrupts may prevent kernel preemption, but nothing prevents the protected section from invoking the scheduler.	text	txt
1140	1	A critical section that has locked a spinlock and has disabled interrupts should not sleep, because there would be no way to wake it up.	text	txt
1141	1	A spinlock is a lock held by a CPU, while a mutex is a lock held by a task.	text	txt
1141	2	Mutex is similar to a spinlock, except that the task can sleep meanwhile mutex is locked.	text	txt
1142	1	struct mutex\n{\n    atomic_long_t owner;\n    spinlock_t wait_lock;\n#ifdef CONFIG_MUTEX_SPIN_ON_OWNER\n    struct optimistic_spin_queue osq;\n#endif\n    struct list_head wait_list;\n};	code	c
1142	2	Wait list is the list that in which the mutex's contenders are put to sleep.	text	txt
1142	3	Owner is the process that owns the lock.	text	txt
5488	1	A stub pixel will be returned that any change on it will have no effect on the screen.	text	md
1142	4	A mutex is a simple data structure that embeds a wait queue to put contenders to sleep, and a spinlock that protects access to this wait queue.	text	txt
1143	1	static DEFINE_MUTEX(<mutex>);	code	c
1144	1	`__mutex_init()` is the low level function for mutex initialization, but more conveniently `mutex_init()` wrapper macro can be used.	text	txt
1144	2	struct data_transceiver\n{\n    struct i2c_client *client;\n    u16 reg_conf;\n    struct mutex mutex;\n};\n\nstatic int fake_probe(struct i2c_client *client, struct i2c_device_id *id)\n{\n    data_transceiver *data = /* initialization */;\n    mutex_init(&data->mutex);\n}	code	c
1145	1	int mutex_lock_interruptible(struct mutex *lock);	code	c
1145	2	int mutex_lock_killable(struct mutex *lock);	code	c
1145	3	void mutex_lock(struct mutex *lock);	code	c
1146	1	Whatever locking function used to lock a mutex, the mutex owner should unlock the mutex with the following function:	text	txt
1146	2	void mutex_unlock(struct mutex *lock);	code	c
1147	1	static bool mutex_is_locked(struct mutex *lock);	code	c
1148	1	Typically, you should use the interruptable variant instead.	text	txt
1148	2	`mutex_lock()` should only be used when we can guarantee that the mutex will not be held for a long time.	text	txt
1165	2	#include <stdlib.h>\n#include <unistd.h>	text	txt
1166	2	int main(void)\n{\n    int *ret; // empty pointer sitting on stack after (caller address)	text	txt
1149	1	- only one task can hold the mutex at a time\n- only the owner can unlock the mutex\n- multiple unlocks are not permitted\n- recursive locking is not permitted\n- a mutex object must be initialized via the API\n- a mutex object must not be initialized via memset or copying\n- task may not exit with mutex held\n- memory areas where held locks reside must not be freed\n- held mutexes must not be reinitialized\n- mutexes may not be used in hardware or software interrupt\n- contexts such as tasklets and timers	text	list
1152	1	When we want to acquire a lock without spinning if we are using a spinlock, or sleeping if we are using a mutex.	text	txt
1153	1	Both functions return 0 when lock is already locked, and 1 when lock acquired.	text	txt
1153	2	int spin_trylock(spinlock_t *lock);	code	c
1153	3	int mutex_trylock(struct mutex *lock);	code	c
1154	1	static DEFINE_SPINLOCK(lock);\n\nstatic void do_something(void)\n{\n    if (!spin_trylock(&lock))\n    {\n        return;\n    }\n\n    /* implementations after lock acquired */\n\n    spin_unlock(&lock);\n}	code	c
1155	1	static DEFINE_MUTEX(lock);\n\nstatic void do_something(void)\n{\n    if (!mutex_trylock(&lock))\n    {\n        return;\n    }\n\n    /* implementations after lock acquired */\n\n    mutex_unlock(&lock);\n}	code	c
1156	1	- The operating system creates an address space in which the program will run.\n- This address space indluces the actual program instructions as well as any required data.\n- Three segment types are created: `.text` (read-only), `.bss` (writable), `.data` (writable).\n- The `.bss` and `.data` segments are reserved for global variables.\n- The `.data` segment contains static initialized data, and `.bss` segment contains uninitialized data, `.text` segment holds the program instructions.\n- Stack and heap are initialized.	text	txt
1156	2	readelf --symbols a.out | sort -k 2 -r	code	txt
1157	1	↑ Lower addresses (0x08000000)	text	txt
1157	2	Shared libraries\n.text\n.bss\nHeap (grows ↓)\nStack (grows ↑)\nenv pointer\nArgc	text	txt
1157	3	↓ Higher addresses (0xbfffffff)	code	txt
1158	1	- General purpose registers: `rbp`, `rsp`, `rax`, `rbx`, `rcx`, `rdx`, `rdi`, `rsi`, `r8`, `r9`,...\n- Segment registers: `cs`, `ds`, `ss`\n- Control registers: `rip`\n- Other registers: `rflags`	text	txt
1159	1	C has no bounds-checking on buffers.	text	txt
1159	2	#include <stdio.h>	text	txt
1159	3	int main()\n{\n    int array[5] = {1,2,3,4,5};\n    printf("%d\\\\n", array[5]);\n}	code	txt
1160	1	int main()\n{\n    int array[5], index;\n    for (index = 0; index != 255; ++index)\n    {\n        array[index] = 10;\n    }\n}	code	txt
1160	2	Inspect the core dump for further understanding of what heppened on the\nstack:	text	txt
1160	3	coredumpctl list a.out	code	txt
1160	4	As shown by the core, machine was trying to execute address\n`0x0000000a0000000a` which is the value we filled by overwriting on the\nstack.	text	txt
1161	1	When a function has completed executing its instructions, it returns control\nto the original function caller.	text	txt
1161	2	void function(int a, int b)\n{\n    int array[5];\n}	text	txt
1161	3	main()\n{\n    function(1, 2);\n}	code	txt
1161	4	The consecutive execution of the program now needs to be interrupted, and the\ninstructions in `function` need to be executed. The first step is to push the\narguments for function, `a` and `b`, backward onto the stack. When the\narguments are placed onto the stack, the `function` is called, placing the\nreturn address, or `RET`, onto the stack. `RET` is the address stored in the\ninstruction pointer (`EIP`) at the time function is called.	text	txt
1161	5	Before any function instructions can be executed, the prolog is executed. In\nessence, the prolog stores some values onto the stack so that the function\ncan execute cleanly. The current value of `EBP` is pushed onto the stack,\nbecause the value of `EBP` must be changed in order to reference values on\nthe stack. When the function has completed, we will need this stored value of\n`EBP` in order to calculate address locations in main. Once `EBP` is stored\non the stack, we are free to copy the current stack pointer (`ESP`) into\n`EBP`. Now we can easily reference addresses local to the stack.	text	txt
1161	6	||Low Memory Addresses and Top of the Stack|\n|---|---|\n|Array||\n|EBP||\n|RET||\n|A||\n|B||\n||High Memory Addresses and Bottom of the Stack|	text	txt
1162	1	When examining the stack, we’re expecting to see the saved `EBP` and the\nsaved return address (`RET`). But after writing past the array, both `EBP`\nand `RET` values will be overwritten by the value we put past the array.	text	txt
1162	2	void function(void)\n{\n    //                  top of stack, low memory\n    // 1   x 8 bytes    [index] 0x7fffffffe368\n    // 30  x 8 bytes    [array] 0x7fffffffe360\n    // rbp x 8 bytes            0x7fffffffe460\n    // ret x 8 bytes\n    //                  bottom of stack, high memory	text	txt
1162	3	    long array[30];	text	txt
1162	4	    unsigned long index = 0;	text	txt
1162	5	    while (index != 33)\n    {\n        array[index] = 'C'; // value 0x43\n        ++index;\n    }\n}	text	txt
1162	6	main()\n{\n    function();\n}	code	txt
5500	1	`ftxui::borderLight` is similar to the default border but without round corners.	text	md
1162	7	We have now successfully overflowed a buffer, overwritten `EBP` and `RET`,\nand therefore caused our overflowed value to be loaded into `EIP` after the\nexecution reaches to the end of the function.	text	txt
1162	8	While this overflow can be useful in creating a denial of service, we can\nmove on to controlling the path of execution, or basically, controlling what\ngets loaded into `EIP`, the instruction pointer.	text	txt
1163	1	When `RET` is read off the stack and placed into `EIP`, the instruction at\nthe address will be executed. This is how we will control execution.	text	txt
1163	2	First, we need to decide what address to use. We need to determine the\naddress to jump to, so we will have to go back to gdb and find out what\naddress calls `function`.	text	txt
1163	3	We then translate the address into shellcode and use `printf` to inject it\ninto the vulnerable program.	text	txt
1163	4	printf 'AAAAAAAAAABBBBBBBBBBCCCCCCCCCC\\\\xed\\\\x83\\\\x04\\\\x08' | ./overflow	code	txt
1164	1	Assuming the address we want to use is `0x080483ed`.	text	txt
1164	2	We should separate each byte from end to the beginning separated by `\\\\x`\nresulting in `\\\\xed\\\\x83\\\\x04\\\\x3d`.	text	txt
1165	1	We will have to inject actual machine instructions, or opcodes, into the\nvulnerable input area. To do so, we must convert our shell-spawning code to\nassembly, and then extract the opcodes from our human-readable assembly. We\nwill then have what is termed shellcode, or the opcodes that can be injected\ninto a vulnerable input area and executed.	text	txt
1166	3	    ret = (int *)&ret + 6;\n    // \\\\          \\\\____________ address of ret + 6 becomes the address of (caller) on stack\n    //  \\\\______________________ put address of (caller) on ret to have access	text	txt
1166	4	    (*ret) = (int)shellcode; // replace address of (caller) with address of shellcode\n    // executes shellcode\n}	code	txt
1167	1	CRTP is most useful when you want compile-time polymorphism, meaning you want a base class to call functions from the derived class without using virtual functions (no runtime overhead).	text	txt
1168	1	template<typename Iterative>\nstruct non_iterative\n{\n    non_iterative()\n    {\n        for (auto const& item: *static_cast<Iterative*>(this))\n        {\n            (void*) item;\n        }\n    }\n};\n\nstruct iterative: public non_iterative<iterative>\n{\n    class iterator\n    {\n        friend bool operator ==(iterator const&, iterator const&) { return true; }\n        friend iterator& operator ++(iterator& iter) { return iter; }\n        friend bool operator *(iterator const&) { return true; }\n    };\n\n    iterator begin() { return {}; }\n    iterator end() { return {}; }\n};\n\nint main()\n{\n    non_iterative<iterative> range{};\n}	code	cpp
1168	2	In this case, the base type does not provide begin and end methods, but the derived type does.	text	txt
1168	3	This pattern can be used in Composite pattern.	text	txt
1169	1	A class can inherit from its own template argument.	text	txt
1169	2	template<typename T>\nclass mixin: T\n{\n};	code	cpp
1169	3	This pattern allows hierarchical composition of types:	text	txt
1169	4	Top<Middle<Bottom>> hierarchy;	code	cpp
1169	5	This implements the traits of all three classes, without the need to construct a new `TopMiddleBottom` class.	text	txt
1169	6	This pattern can be used in Decorator pattern.	text	txt
1170	1	When a class might have multiple behaviors within its methods, to make sure all variations follow the same API, we can make an interface with the functionalities shared between implementations, then we can use curiously recurring template pattern to implement multiple variations. This can be a substitution for C++ concepts prior to C++20.	text	txt
1170	2	template<typename Impl>\nclass basic_notifier\n{\npublic:\n    basic_notifier(): impl{static_cast<Impl&>(*this)}\n    {\n    }\n\n    void send_sms(std::string_view message)\n    {\n        impl.sms(message);\n    }\n\n    void send_email(std::string_view message)\n    {\n        impl.email(message);\n    }\n\nprivate:\n    Impl& impl;\n    friend Impl;\n};\n\nclass empty_notifier: public basic_notifier<empty_notifier>\n{\npublic:\n    void sms(std::string_view message) { }\n    void email(std::string_view message) { }\n};\n\ntemplate<typename Impl>\nvoid notify_all_channels(basic_notifier<Impl>& notifier, std::string_view message)\n{\n    notifier.send_sms(message);\n    notifier.send_email(message);\n}\n\nint main()\n{\n    empty_notifier notifier{};\n    notify_all_channels(notifier, "");\n}	code	cpp
1170	3	Disadvantages of this pattern is:\n\n- Parallel APIs between interface and implementations due to implementation methods hiding interface methods when they share the same name\n- Pimpl pattern seems unnecessary and normal polymorphism would look better\n- Availability of interface methods in implementations are not checked in compile time	text	txt
1170	4	The third objective can be fixed with concepts:	text	txt
1170	5	template<typename Impl>\nconcept is_notifier = requires(Impl impl) {\n    impl.send_sms(std::string_view{});\n    impl.send_email(std::string_view{});\n};\n\ntemplate<is_notifier Notifier>\nvoid notify_all_channels(Notifier& notifier, std::string message)\n{\n    notifier.send_sms(message);\n    notifier.send_email(message);\n}	code	cpp
1170	6	With concepts, there is no need for the interface.	text	txt
1171	1	#include <iostream>	text	txt
1171	2	int main()\n{\n    std::cout << "default compiler standard: " << __cplusplus << std::endl;\n}	code	txt
1172	1	void f(int);\nvoid f(void*);	text	txt
1172	2	int main()\n{\n    f(0); // calls f(int)\n    f(NULL); // calls f(int)\n    f(nullptr); // calls f(void*)\n}	code	txt
1173	1	int main()\n{\n    auto i = 42;\n    auto u = 42U;\n    auto l = 42L;\n    auto ul = 42UL;\n    auto ll = 42LL;\n    auto ull = 42ULL;\n    auto d = 42.0;\n    auto ld = 42.0L;\n}	code	txt
1174	1	int main()\n{\n    int i; // indeterminate value\n    int j{}; // initialized to 0\n    int* p; // indeterminate value\n    int* q{}; // initialized to nullptr	text	txt
1174	2	    int xi(2.3); // x1 == 2\n    int xd{2.3}; // error\n}	code	txt
1175	1	#include <initializer_list>	text	txt
1175	2	class base\n{\npublic:\n    base(int, int) { ... };\n    explicit base(int a, int b, int c) { ... }\n};	text	txt
1175	3	void fp(const base&);	text	txt
1175	4	int main()\n{\n    base a(1, 2);       // Okay\n    base b{1, 2};       // Okay\n    base c{1, 2, 3};    // Okay\n    base d = {1, 2};    // Okay, implicit conversion of {1, 2} to base\n    base e = {1, 2, 3}; // Error, due to explicit	text	txt
1175	5	    fp({1, 2});         // Okay, implicit conversion of {1, 2} to base\n    fp({1, 2, 3});      // Error, due to explicit\n    fp(base{1, 2});     // Okay, implicit conversion of {1, 2} to base\n    fp(base{1, 2, 3});  // Okay, explicit conversion of {1, 2, 3} to base\n}	code	txt
1176	1	int main()\n{\n    for (auto item: {1, 2, 3, 4, 5})\n        std::cout << item << std::endl;\n}	code	txt
1177	1		code	txt
1178	1	struct X {};	text	txt
1178	2	X foo()\n{\n    X x;\n    return x;\n}	text	txt
1178	3	int main()\n{\n    auto x = foo();\n}	code	txt
1179	1	#include <iostream>	text	txt
1179	2	int main()\n{\n    std::cout << R"(quotes can be "freely" used with raw string literals)" << std::endl;\n}	code	txt
1180	1	class pair\n{\n    pair& operator =(pair&& p)\n        noexcept(is_nothrow_move_assignable<T1>::value &&\n                 is_nothrow_move_assignable<T2>::value);\n};	code	txt
1181	1	1. Each library function that cannot throw and does not expecify any undefined behavior caused by a broken precondition, should be marked unconditionally noexcept.\n2. A library swap function, move constructor, or move assignment operator can be proven not to throw by applying the noexcept operator, it should be marked as conditionally noexcept.\n3. No library destructor should throw.\n4. Library functions designed for compatibility with C code may be marked as unconditionally noexcept.	text	txt
1182	1	#include <array>	text	txt
1182	2	template<typename S>\nconstexpr S cube(S const& size)\n{\n    return size * size * size;\n}	text	txt
1182	3	int main()\n{\n    std::array<int, cube<int>(2)> numbers;\n}	code	txt
1183	1	#include <iostream>	text	txt
1183	2	void print()\n{ }	text	txt
1285	3	You can inspect the built image to verify the configuration of the image.	text	txt
1183	3	template<typename T, typename... Args>\nvoid print(T const& to_print, Args const& ...args)\n{\n    std::cout << to_print << std::endl;\n    print(args...);\n}	text	txt
1183	4	int main()\n{\n    print("a", "b", "c");\n}	code	txt
1184	1	#include <vector>	text	txt
1184	2	template<typename T>\nusing vector = std::vector<T, std::allocator<T>>;	text	txt
1184	3	int main()\n{\n    vector<int> numbers{1,2,3,4,5};\n}	code	txt
1185	1	template<typename T = int>\nT sum(T const& a, T const& b)\n{\n    return a + b;\n}	text	txt
1185	2	int main()\n{\n    int result = sum<int>(1, 2);\n}	code	txt
1186	1	#include <iostream>	text	txt
1186	2	int main()\n{\n    [] { std::cout << "lambda" << std::endl; }();\n}	code	txt
1187	1	#include <iostream>	text	txt
1187	2	// lambda expanded to class\nclass lambda\n{\nprivate:\n    int id;\npublic:\n    void operator()()\n    {\n        std::cout << id++ << std::endl;\n    }\n};	text	txt
1187	3	int main()\n{\n    int id = 0;	text	txt
1187	4	    // stateful lambda\n    lambda l(id);\n    l();\n    l();\n    l();	text	txt
1187	5	    auto s = [id]() mutable { std::cout << id++ << std::endl; }\n    s();\n    s();\n    s();\n}	code	txt
1188	1	#include <map>\n#include <string>	text	txt
1188	2	int main()\n{\n    std::map<std::string, float> cells;\n    decltype(cells)::value_type item{};\n}	code	txt
1189	1	template<typename T1, typename T2>\nauto add(T1 a, T2 b) -> decltype(x+y);	code	txt
1190	1	enum class state {stable, unstable, unknown};	code	txt
1191	1	#include <type_traits>	text	txt
1191	2	enum class state : char {stable, unstable, unknown};\nauto type = std::underlying_type<state>::type; // char	code	txt
1192	1	#include <iostream>\n#include <string>	text	txt
1192	2	template <std::string N>\nvoid print(N const& s)\n{\n    std::cout << s << std::endl;\n}	code	txt
1193	1	class Q\n{\n    typedef int SubType;\n};	text	txt
1193	2	template<typename T>\nclass P\n{\n    typename T::SubType* ptr;\n};	text	txt
1193	3	int main()\n{\n    P<Q> x; // Okay\n}	code	txt
1194	1	// directly assigning value\ntemplate<typename T>\nclass exact\n{\nprivate:\n    T value;\npublic:\n    void assign(exact<T> const& b) { value = b.value; }\n};	text	txt
1194	2	// using getter to assign value\ntemplate<typename T>\nclass relaxed\n{\nprivate:\n    T _value;\npublic:\n    T value() const { return _value; }	text	txt
1194	3	    template<typename V>\n    void assign(relaxed<V> const& r) { _value = r.value(); }\n};	text	txt
1194	4	int main()\n{\n    exact<double> ed{};\n    exact<int> ei{};	text	txt
1194	5	    ed.assign(ed); // Okay\n    ed.assign(ei); // Error, ei is exact<int> but exact<double> is required	text	txt
1194	6	    relaxed<double> rd{};\n    relaxed<int> ri{};	text	txt
1194	7	    rd.assign(rd); // Okay\n    rd.assign(ri); // Okay, int is assignable to double\n}	code	txt
1195	1	template<typename T>\nclass base\n{\npublic:\n    // copy constructor with implicit type conversion\n    // does not suppress implicit copy constructor.\n    // when T==U, implicit copy constructor is called.\n    template<typename U>\n    base(base<U> const& x);\n};	text	txt
1195	2	int main()\n{\n    base<double> bd;\n    base<double> bd2{bd}; // calls implicitly generated copy constructor\n    base<int> bi(bd); // calls class template constructor\n}	code	txt
1196	1	template<typename T>\nvoid f()\n{\n    T x = T();\n}	text	txt
1196	2	int main()\n{\n    f<int>();\n}	code	txt
1197	1	#include <cstdlib>	text	txt
1197	2	[[noreturn]] void f() { std::exit(1); }\n[[noreturn]] void g() { std::quick_exit(1); }	text	txt
1197	3	int main()\n{\n    f();\n}	code	txt
1198	1	namespace x\n{\n    int value{};\n}	text	txt
1198	2	int main()\n{\n    int value = x::value;\n}	code	txt
1199	1	#include <boost/program_options.hpp>	text	txt
1199	2	int main()\n{\n    namespace od = boost::program_options::options_description;\n}	code	txt
1200	1	#include <iostream>	text	txt
1200	2	int main()\n{\n    using std::cout;\n    using std::endl;	text	txt
1200	3	    cout << "using declaration" << endl;\n}	code	txt
1201	1	#include <iostream>	text	txt
1201	2	int main()\n{\n    using namespace std;	text	txt
1201	3	    cout << "using directive" << endl;\n}	code	txt
1202	1	#include <string> // C++\n#include <cstring> // C	code	txt
1203	1	#include <stdexcept>\n#include <iostream>\n#include <bitset>	text	txt
1203	2	int main()\ntry\n{\n    std::bitset<4>{"012"};\n}\ncatch (std::invalid_argument const& exp)\n{\n    std::cerr << exp.what() << std::endl;\n}	code	txt
1204	1	#include <iostream>\n#include <system_error>\n#include <thread>	text	txt
1204	2	int main()\n{\n    try\n    {\n        std::thread().detach();\n    }\n    catch (std::system_error const& exp)\n    {\n        std::cerr << exp.what() << std::endl;	text	txt
1204	3	        if (exp.code() == std::errc::invalid_argument)\n            std::cerr << "std::errc::invalid_argument\\\\n";\n    }\n}	code	txt
1205	1	A `struct` with two public member variables:	text	txt
1205	2	namespace std {\n    template<typename T1, typename T2>\n    struct pair {\n        T1 first;\n        T2 second;\n        // ...\n    };\n}	code	txt
1206	1	#include <utility>	text	txt
1206	2	std::pair<T1, T2> p;\nstd::pair<T1, T2> p(value, value);\nstd::pair<T1, T2> p(rvalue, rvalue);	code	txt
1207	1	#include <utility>\n#include <string>	text	txt
1207	2	std::pair<T1, T2> p(p2);\np = p2;	text	txt
1207	3	void f(std::pair<int, char const*>);\nvoid g(std::pair<int const, std::string>);	text	txt
1207	4	std::pair<int, char const*> p3(42, "sample");\nf(p3); // calls implicitly generated copy constructor\ng(p3); // calls template constructor	code	txt
1208	1	#include <utility>	text	txt
1208	2	std::pair<T1, T2> p(rvp);\np = rvp;	code	txt
1209	1	#include <utility>\n#include <functional>	text	txt
1209	2	auto vp = std::make_pair(value, value); // value semantics\nauto rvp = std::make_pair(std::move(value), std::move(value)); // move semantics\nauto rfp = std::make_pair(std::ref(value), std::ref(value)); // reference semantics, creates std::pair<T1&, T2&>	text	txt
1231	8	    for (auto ptr : people)\n        std::cout << *ptr << " ";\n    std::cout << std::endl;	text	txt
1209	3	int main()\n{\n    int i = 0;\n    auto p = std::make_pair(std::ref(i), std::ref(i));\n    ++p.first;\n    ++p.second;\n    std::cout << "i: " << i << std::endl; // 2\n}	code	txt
1210	1	#include <utility>	text	txt
1210	2	p.first\np.second	text	txt
1210	3	std::get<0>(p);\nstd::get<1>(p);	code	txt
1211	1	* equality\n* inequality\n* lower than\n* greater than	text	txt
1211	2	#include <utility>	text	txt
1211	3	p1 == p2\np1 != p2\np1 < p2\np1 > p2\np1 <= p2\np1 >= p2	text	txt
1211	4	p1 <=> p2 // c++20	code	txt
1212	1	p1.swap(p2);\nstd::swap(p1, p2);	code	txt
1213	1	Map container family:	text	txt
1213	2	* `std::map`\n* `std::multimap`\n* `std::unordered_map`\n* `std::unordered_multimap`	text	txt
1214	1	Both arguments have to be a `std::tuple` to force this behavior.\nThis form of initialization is required to `emplace()` a new element into an (unordered) `std::map` or `std::multimap`.	text	txt
1214	2	#include <iostream>\n#include <utility>\n#include <tuple>	text	txt
1214	3	class base\n{\npublic:\n    base(std::tuple<int, float>)\n    {\n        std::cout << "base::base(tuple)" << std::endl;\n    }	text	txt
1214	4	    template<typename... Args>\n    base(Args... args)\n    {\n        std::cout << "base::base(args...)" << std::endl;\n    }\n};	text	txt
1214	5	int main()\n{\n    std::tuple<int, float> t(1, 2.22);	text	txt
1214	6	    std::pair<int, base> p1(42, t); // base(std::tuple<int, float>)	text	txt
1214	7	    std::pair<int, base> p2(std::piecewise_construct, std::make_tuple(42), t); // base(Args...)\n}	code	txt
1215	1	#include <tuple>	text	txt
1215	2	std::tuple<T1, T2, T3,...> t;\nstd::tuple<T1, T2> tp(p);\nstd::tuple<T1, T2, T3,...> t1(vt); // copy constructor\nstd::tuple<T1, T2, T3,...> t2(rvt); // move constructor\nstd::tuple<T1, T2, T3,...> t3(v1, v2, v3,...);\nstd::tuple<T1, T2, T3,...> t4(rv1, rv2, rv3,...);	text	txt
1215	3	t1 = t2;\nt = p;	code	txt
1216	1	#include <tuple>	text	txt
1216	2	auto t1 = std::make_tuple(v1, v2, v3); // value semantics\nauto t2 = std::make_tuple(std::move(v1), std::move(v2), std::move(v3)); // move semantics\nauto t3 = std::make_tuple(std::ref(v1), std::ref(v2), std::ref(v3)); // reference semantics\nauto t4 = std::make_tuple(std::cref(v1), std::cref(v2), std::cref(v3));	code	txt
1217	1	#include <tuple>	text	txt
1217	2	int main()\n{\n    std::tuple<T1, T2, T3> t(value1, value2, value3);	text	txt
1217	3	    T1 v1 = std::get<0>(t);\n    T2 v2 = std::get<1>(t);\n    T3 v3 = std::get<2>(t);\n}	code	txt
1218	1	#include <tuple>	text	txt
1218	2	std::tuple<T1, T2> t1(value1, value2);\nstd::tuple<T1, T2> t2(value1, value2);	text	txt
1218	3	t1 == t2;\nt1 != t2;\nt1 > t2;\nt1 >= t2;\nt1 < t2;\nt1 <= t2;	text	txt
1218	4	t1 <=> t2; // c++20	code	txt
1219	1	#include <tuple>	text	txt
1219	2	t1.swap(t2);\nstd::swap(t1, t2);	code	txt
1220	1	#include <tuple>	text	txt
1220	2	std::tie(r1, std::ignore(r2), r3,...) = t;	code	txt
1221	1	Explicit construction exists to avoid having single values implicitly converted into a tuple with one element. But this has consequences when using initializer lists, because they cannot be used with assignment syntax as it's considered to be an implicit conversion.	text	txt
1221	2	You can’t pass an initializer list where a tuple is expected. But pairs and containers can be initialized that way.	text	txt
1221	3	But for tuples, you have to explicitly convert the initial values into a tuple (for example, by using `make_tuple()`):	text	txt
1221	4	template<typename... Args>\nvoid t(const std::tuple<Args...> t);	text	txt
1221	5	t(42);                // ERROR: explicit conversion to tuple<> required\nt(make_tuple(42));    // OK	text	txt
1221	6	std::tuple<int,double> t1(42,3.14);     // OK, old syntax\nstd::tuple<int,double> t2{42,3.14};     // OK, new syntax\nstd::tuple<int,double> t3 = {42,3.14};  // ERROR	text	txt
1221	7	std::vector<std::tuple<int,float>> v { {1,1.0}, {2,2.0} };  // ERROR	text	txt
1221	8	std::tuple<int,int,int> foo() { return { 1, 2, 3 }; }       // ERROR	text	txt
1221	9	std::vector<std::pair<int,float>> v1 { {1,1.0}, {2,2.0} };  // OK\nstd::vector<std::vector<float>> v2 { {1,1.0}, {2,2.0} };    // OK	text	txt
1221	10	std::vector<int> foo2() { return { 1, 2, 3 }; }             // OK	code	txt
1222	1	#include <tuple>	text	txt
1222	2	int main()\n{\n    using P = std::tuple<T1, T2, T3>;\n    std::size_t values = std::tuple_size<P>::value; // 3\n}	code	txt
1223	1	#include <tuple>	text	txt
1223	2	int main()\n{\n    using P = std::tuple<T1, T2, T3>;\n    using X = std::tuple_element<0, P>::type; // T1\n    using Y = std::tuple_element<1, P>::type; // T2\n    using Z = std::tuple_element<2, P>::type; // T3\n}	code	txt
1224	1	#include <tuple>\n#include <cassert>\n#include <type_traits>	text	txt
5547	1		code	cpp
1224	2	int main()\n{\n    int n = 42;\n    std::tuple<int, double, int> t = std::tuple_cat(std::make_tuple(42, 4.2), std::tie(n));\n    static_assert(std::is_same_v<decltype(t), std::tuple<int, double, int>>);\n}	code	txt
1225	1	You can initialize a two-element tuple with a pair.\nAlso, you can assign a pair to a two-element tuple.	text	txt
1225	2	std::tuple<int, double> t(p);\nstd::pair<int, double> p(std::make_tuple(42, 9.72));	code	txt
1226	1	Shared Ownership\nExclusive Ownership	text	txt
1227	1	`std::shared_ptr`\n`std::weak_ptr`	text	txt
1228	1	`std::unique_ptr`	text	txt
1229	1	`std::bad_weak_ptr`	text	txt
1230	1	`std::enable_shared_from_this`	text	txt
1231	1	* assignment\n* copy\n* move\n* comparison\n* reference counting	text	txt
1231	2	#include <memory>\n#include <string>\n#include <vector>	text	txt
1231	3	int main()\n{\n    // construction\n    std::shared_ptr<std::string> rosa{new std::string("rosa")};\n    std::shared_ptr<std::string> lucy{new std::string("lucy")};	text	txt
1231	4	    // dereferrence\n    (*rosa)[0] = ’N’;\n    lucy->replace(0, 1, "J");	text	txt
1231	5	    // copy\n    std::vector<shared_ptr<string>> people;\n    people.push_back(lucy);\n    people.push_back(lucy);\n    people.push_back(rosa);\n    people.push_back(lucy);\n    people.push_back(rosa);	text	txt
1231	6	    for (auto ptr : people)\n        std::cout << *ptr << " ";\n    std::cout << std::endl;	text	txt
1231	7	    *rosa = "Rose";	text	txt
1231	9	    // counting instances\n    std::cout << "use_count: " << people[0].use_count() << std::endl;\n}	code	txt
1232	1	Because the constructor taking a pointer as single argument is explicit, you can’t use the assignment notation because that is considered to be an implicit conversion.\nHowever, the new initialization syntax is also possible:	text	txt
1232	2	#include <memory>\n#include <string>	text	txt
1232	3	std::shared_ptr<std::string> rosa = new std::string("rosa"); // ERROR\nstd::shared_ptr<std::string> lucy{new std::string("lucy")}; // OK	code	txt
1233	1	This way of creation is faster and safer because it uses one instead of two allocations: one for the object and one for the shared data the shared pionter uses to control the object.	text	txt
1233	2	#include <memory>\n#include <string>	text	txt
1233	3	std::shared_ptr<std::string> rosa = std::make_shared<std::string>("rosa");	code	txt
1234	1	#include <memory>\n#include <string>	text	txt
1234	2	std::shared_ptr<std::string> person;	text	txt
1234	3	person = new std::string("rosa"); // ERROR: no assignment for ordinary pointers\nperson.reset(new std::string("rosa")); // OK	code	txt
1235	1	#include <memory>\n#include <string>\n#include <vector>	text	txt
1235	2	int main()\n{\n    std::shared_ptr<std::string> rosa(new std::string("rosa"));	text	txt
1235	3	    std::vector<shared_ptr<string>> people;\n    people.push_back(rosa);\n    people.push_back(rosa);\n    people.push_back(rosa);\n    people.push_back(rosa);	text	txt
1235	4	    std::size_t count = rosa.use_count(); // 4\n}	code	txt
1236	1	When the last owner of object gets destroyed, the shared pointer calls `delete` for the object it refers to.	text	txt
1236	2	Possible deletion scenarios are:	text	txt
1236	3	* deletions happens at the end of a scope\n* by assigning `nullptr` to pointer\n* resizing the container that holds shared pointers	text	txt
1236	4	#include <memory>\n#include <string>\n#include <vector>	text	txt
1236	5	int main()\n{\n    std::shared_ptr<std::string> rosa(new std::string("rosa"));\n    std::shared_ptr<std::string> lucy(new std::string("lucy"));	text	txt
1236	6	    std::vector<shared_ptr<string>> people;\n    people.push_back(lucy);\n    people.push_back(lucy);\n    people.push_back(rosa);\n    people.push_back(lucy);\n    people.push_back(rosa);\n    people.push_back(rosa);\n    people.push_back(lucy);\n    people.push_back(rosa);	text	txt
1236	7	    std::size_t rosa_count = rosa.use_count(); // 4\n    std::size_t lucy_count = lucy.use_count(); // 4\n}	code	txt
1237	1	#include <memory>\n#include <string>\n#include <vector>	text	txt
1237	2	std::shared_ptr<std::string> person(\n    new std::string{},\n    [](std::string* p) { std::cout << *p << std::endl; delete p; }\n);\nperson = nullptr; // person does not refer to the string any longer	text	txt
1237	3	std::vector<std::string> people;\npeople.push_back(person);\npeople.push_back(person);\npeople.push_back(person);	text	txt
1237	4	std::size_t person_count = person.use_count(); // 4	text	txt
1237	5	people.erase(); // all copies of the string in person are destroyed	text	txt
1237	6	std::size_t person_count = person.use_count(); // 1	text	txt
1237	7	delete person;	text	txt
1237	8	std::size_t person_count = person.use_count(); // 0	code	txt
1238	1	#include <thread>\n#include <future>\n#include <chrono>	text	txt
1238	2	struct task\n{\n    int value;	text	txt
1238	3	    task(int initial): value{initial} { }\n    task& operator+(task const& t) { value += t.value; return *this; }\n    operator int() const { return value; }\n};	text	txt
1238	4	task sum(task a, task b)\n{\n    return a + b;\n}	text	txt
1238	5	int main()\n{\n    std::future<task> result = std::async(sum, 1, 2);\n    int value = result.get();\n    // 3\n}	code	txt
1239	1	The function ideally starts without blocking the execution of the calling\nthread. The returned *future* object is necessary for two reasons:	text	txt
1239	2	1. It allows access to the future outcome of the functionality passed to\n   `async()`.\n2. It is necessary to ensure that sooner or later, the passed functionality\n   gets called.	text	txt
1240	1	With the call of `get()`, one of three things might happen:	text	txt
1240	2	1. If function was started with `async()` in a separate thread and has\n   already finished, you immediately get its result.\n2. If function was started but not finished yet, `get()` blocks and waits for\n   its end and yields the result.\n3. If function was not started yet, it will be forced to start now and, like\n   a synchronous function call, `get()` will block until it yields the\n   result.	text	txt
1241	1	If just a background task was started that returns nothing it has to be\n`std::future<void>`.	text	txt
1705	3	The license files will be placed inside the rootfs, under `/usr/share/common-licenses/`.	text	txt
5490	1	This module defines a hierarchical set of `ftxui::Element`. An element manages the layout and can be responsive to the terminal dimension changes.	text	md
1242	1	Call to `get()` from a future might not result in concurrency because the\n`std::async()` call uses the default policy `std::launch::async` and\n`std::launch::deferred` to be both set, which might only use\n`std::launch::deferred`, in which case the function might not be invoked\nuntil the `get()` call; in that case, there is no concurrency.	text	txt
1242	2	#include <future>\n#include <thread>\n#include <mutex>\n#include <iostream>	text	txt
1242	3	class some_task\n{\nprivate:\n    mutable std::mutex exclusive;	text	txt
1242	4	public:\n    void task1() const { std::lock_guard<std::mutex> lock(exclusive); std::cout << "task1\\\\n"; }\n    void task2() const { std::lock_guard<std::mutex> lock(exclusive); std::cout << "task2\\\\n"; }\n    void task3() const { std::lock_guard<std::mutex> lock(exclusive); std::cout << "task3\\\\n"; }\n};	text	txt
1242	5	int main()\n{\n    some_task task{};	text	txt
1242	6	    // may run concurrently or defer execution\n    std::future<void> t1 = std::async(&some_task::task1, &task);	text	txt
1242	7	    // runs when wait() or get() is called\n    std::future<void> t2 = std::async(std::launch::deferred, &some_task::task2, &task);	text	txt
1242	8	    // runs concurrently\n    std::future<void> t3 = std::async(std::launch::async, &some_task::task3, &task);	text	txt
1242	9	    // executes t2\n    t2.wait();	text	txt
1242	10	    // if t1 is not done at this point, destructor of t1 executes now\n}	code	txt
1243	1	You have to ensure that you ask for the result of a functionality started\nwith `async()` no earlier than necessary.	text	txt
1243	2	std::future<int> result1{std::async(func1)};\nint result = func2() + result1.get();\n// might call func2() after func1() ends	code	txt
1286	1	In order to push an image to DockerHub, you need to login with your Docker ID.	text	txt
1243	3	Because the evaluation order on the right side of the second statement is\nunspecified, `result1.get()` might be called before `func2()` so that you\nhave sequential processing again.	text	txt
1244	1	To have the best effect, in general, your goal should be to maximaze the\ndistance between calling `async()` and calling `get()`. Or, to use the terms\nof *call early and return late*.	text	txt
1244	2		code	txt
1245	1	By explicitly passing a launch policy directing `async()` that it should\ndefinitely start the passed functionality asynchronously the moment it is\ncalled.	text	txt
1245	2	std::future<long> result = std::async(std::launch::async, do_something);	code	txt
1245	3	If the asynchronous call is not possible here, the program will throw a\n`std::system_error` exception with the error code\n`resource_unavailable_try_again`, which is equivalent to the POSIX errno\n`EAGAIN`.	text	txt
1246	1	With the `std::launch::async` policy, you don't necessarily have to call\n`get()` anymore because, if the life time of the returned future ends, the\nprogram will wait for the function to finish. Thus, if you don't call `get()`,\nleaving the scope of the future object will wait for the background task to\nend. Nevertheless, also calling `get()` here before a program ends makes the\nbehavior clearer.	text	txt
1246	2	{\n    std::future<void> result = std::async(std::launch::async, do_something);\n    // result's destructor blocks at the end of scope\n}	code	txt
1247	1	If you don't assign the result of async call anywhere, the caller will block\nuntil the passed functionality has finished, which would mean that this is\nnothing but a synchronous call.	text	txt
1247	2	std::async(std::launch::async, do_something);\nstd::async(std::launch::async, do_something);\nstd::async(std::launch::async, do_something);\n// runs sequentially	code	txt
1248	1	You can enforce a deferred execution by passing `std::launch::deferred`\npolicy to `async()`. This guarantees that function never gets called without\n`get()`. This policy especially allows to program *lazy evaluation*.	text	txt
1248	2	std::future<void> result1{std::async(std::launch::deferred, do_something)};\nstd::future<void> result2{std::async(std::launch::deferred, do_something)};\nauto value = optional_case() ? result1.get() : result2.get();	code	txt
1249	1	When `get()` is called and the background operation was or gets terminated by\nan exception, which was/is not handled inside the thread, this exception gets\npropegated again. As a result, to deal with exceptions of background\noperations, just do the same with `get()` as you would do when calling the\noperation synchronously.	text	txt
1249	2	#include <future>\n#include <thread>\n#include <exception>\n#include <iostream>	text	txt
1249	3	void raise_exception()\n{\n    throw std::invalid_argument{"user caught lying"};\n}	text	txt
1249	4	int main()\n{\n    std::future<void> execution = std::async(raise_exception);\n    // stores thrown exception and holds in std::current_exception\n    // then, rethrows when get() is called	text	txt
1249	5	    try\n    {\n        execution.get();\n    }\n    catch (std::invalid_argument const& exp)\n    {\n        std::cerr << exp.what() << std::endl;\n    }\n}	code	txt
1250	1	You can call `get()` for a `std::future<>` only once. After `get()`, the\nfuture is in an invalid state, which can be checked only by calling `valid()`\nfor the future. Any call other than destruction will result in undefined\nbehavior.	text	txt
1251	1	The waiting interface is callable more than once and might be combined with a\nduration or timepoint to limit the amount of waiting time.	text	txt
1251	2	#include <future>\n#include <thread>\n#include <chrono>	text	txt
1251	3	auto f1{std::async(do_something)};\nauto f2{std::async(do_something)};\nauto f3{std::async(do_something)};	text	txt
1251	4	f1.wait();\nf2.wait_for(std::chrono::seconds{10});\nf3.wait_until(std::chrono::steady_clock::now() + std::chrono::seconds{10});	code	txt
1252	1	Just calling `wait()` forces the start of a thread a future represents and\nwaits for the termination of the background operation.	text	txt
1252	2	auto f{std::async(do_something)};\nf.wait(); // wait for thread to finish	code	txt
1252	3	Two other wait functions exist for a limited time for an asynchronously\nrunning operation by passing a duration or a timepoint.	text	txt
1252	4	auto f{std::async(do_something)};\nf.wait_for(std::chrono::seconds{10});\nf.wait_until(std::chrono::steady_clock::now() + std::chrono::seconds{10});	code	txt
1253	1	Both `wait_for()` and `wait_until()` return one of the following:	text	txt
1253	2	- `std::future_status::deferred` if `async()` deferred the operation and no\n  calls to `wait()` or `get()` have yet forced it to start, both functions\n  return immediately in this case.\n- `std::future_status::timeout` if the operation was started asynchronously\n  but hasn't finished yet.\n- `std::future_status::ready` if the operation has finished.	text	txt
1253	3	#include <future>\n#include <thread>\n#include <chrono>\n#include <iostream>	text	txt
1253	4	long process_quickly()\n{\n    std::this_thread::sleep_for(std::chrono::milliseconds{40});\n    return 1;\n}	text	txt
1253	5	long process_accurately()\n{\n    std::this_thread::sleep_for(std::chrono::milliseconds{100});\n    return 2;\n}	text	txt
1253	6	long process()\n{\n    std::future<long> accurate_future{std::async(std::launch::async, process_accurately)};\n    std::chrono::time_point deadline{std::chrono::steady_clock::now() + std::chrono::milliseconds{100}};	text	txt
1253	7	    long quick_result{process_quickly()};\n    std::future_status accurate_status{accurate_future.wait_until(deadline)};	text	txt
1253	8	    if (accurate_status == std::future_status::ready)\n        return accurate_future.get();\n    else\n        return quick_result;\n}	text	txt
1253	9	int main()\n{\n    std::cout << process() << std::endl;\n    // sometimes 1 and sometimes 2\n}	code	txt
1253	10	Using `wait_for()` or `wait_until()` especially allows to program so-called\n*speculative execution*.	text	txt
1254	1	Checking docker version should retrieve both client and server versions.	text	txt
1254	2	docker version	code	txt
1254	3	In case docker client is not connected to the daemon, users should add themselves\nto the `docker` group.	text	txt
1254	4	sudo usermod -aG docker $USER	code	txt
1254	5	Logging out and then logging in is required for this change to take effect.\nHowever, user can temporarily apply changes to their active shell:	text	txt
1254	6	su -l $USER	code	txt
1255	1	docker image ls\ndocker image list	code	txt
1288	2	docker image tag container:latest repository/container:latest	code	txt
1336	5	docker volume ls	code	txt
1256	1	This is the command used to start new containers.\nIn its simplest form, it accepts an image and a command as arguments.\nThe image is used to create the container and the command is the application\nthe container will run when it starts.\nThis example will start an Ubuntu container in the foreground,\nand tell it to run the Bash shell:	text	txt
1256	2	docker container run --interactive --tty ubuntu /bin/bash	code	txt
1256	3	The `-it` flags tell Docker to make the container interactive and to attach\nthe current shell to the container’s terminal.	text	txt
1257	1	If you’re logged on to the container and type exit, you’ll terminate the\nBash process and the container will exit (terminate). This is because a\ncontainer cannot exist without its designated main process.	text	txt
1257	2	Press Ctrl-P then Ctrl-Q to exit the container without terminating its main process.\nDoing this will place you back in the shell of your Docker host and leave the\ncontainer running in the background.	text	txt
1258	1	This command runs a new process inside of a running container.\nIt’s useful for attaching the shell of your Docker host to a terminal\ninside of a running container.\nFor this to work, the image used to create the container must include the Bash shell.	text	txt
1258	2	docker container exec --interactive --tty container_name /usr/bin/bash	code	txt
1259	1	This command will stop a running container and put it in the Exited (0) state.\nIt does this by issuing a SIGTERM to the process with PID 1 inside of the container.\nIf the process has not cleaned up and stopped within 10 seconds, a SIGKILL will be\nissued to forcibly stop the container.\nThis command accepts container IDs and container names as arguments.	text	txt
1259	2	docker container stop my-container	code	txt
1260	1	This command will restart a stopped (Exited) container.\nYou can give this command the name or ID of a container.	text	txt
1260	2	docker container start my-container	code	txt
1261	1	This command will delete a stopped container.\nYou can specify containers by name or ID.\nIt is recommended that you stop a container before deleting it.	text	txt
1261	2	docker container stop container_name\ndocker container rm container_name	code	txt
1262	1	Lists all containers in the running (UP) state.\nIf you add the -a flag you will also see containers in the stopped (Exited) state.	text	txt
1262	2	docker container list --all	code	txt
1263	1	By checking the list of stopped containers.	text	txt
1263	2	docker container list --all	code	txt
1264	1	docker info	code	txt
1265	1	docker image pull mongo:4.2.6	code	txt
1266	1	Pulling images from an unofficial repository is essentially the same as pulling from official ones.\nYou just need to prepend the repository name with a DockerHub username or organization name.	text	txt
1266	2	The following example shows how to pull the *v2* image from the *tu-demo* repository owned by a\nnot-to-be-trusted person whose DockerHub account name is *nigelpoulton*.	text	txt
1266	3	docker image pull nigelpoulton/tu-demo:v2	code	txt
1267	1	If you want to pull images from 3rd party registries (not DockerHub), you\nneed to prepend the repository name with the DNS name of the registry. For\nexample, the following command pulls the `3.1.5` image from the\n`google-containers/git-sync` repo on the **Google Container Registry** (gcr.io).	text	txt
1267	2	docker image pull gcr.io/google-containers/git-sync:v3.1.5	code	txt
1268	1	A dangling image is an image that is no longer tagged, and appears in\nlistings as `<none>:<none>`.\nA common way they occur is when building a new image giving it a tag\nthat already exists.	text	txt
1268	2	docker image list --filter dangling=true	code	txt
1269	1	You can delete all dangling images on a system with the following command.	text	txt
1269	2	docker image prune	code	txt
1269	3	If you add the `-a` flag, Docker will also remove all unused images (those not in use by any containers).	text	txt
1269	4	docker image prune --all	code	txt
1270	1	**dangling:** Accepts true or false\ndocker image list --filter dangling=true\ndocker image list --filter dangling=false	code	txt
1270	2	**before:** Requires an image name or ID as argument, and returns all images created before it.\ndocker image list --filter before=container_name	code	txt
1270	3	**since:** Same as above, but returns images created after the specified image.\ndocker image list --filter after=container_name	code	txt
1270	4	**label:** Filters images based on the presence of a label or label and value.\nThis command does not display labels in its output.\ndocker image list --filter=reference="*:latest"	code	txt
5499	1	`ftxui::border` or `ftxui::borderRounded` is a border with continuous lines and round corners.	text	md
1271	1	You can use the `--format` flag to format output using Go templates.\nFor example, the following command will only return the size property of images on a Docker host.	text	txt
1271	2	docker image list --format "{{.Size}}"	code	txt
1271	3	Use the following command to return all images, but only display repo, tag and size.	text	txt
1271	4	docker image list --format "{{.Repository}}: {{.Tag}}: {{.Size}}"	code	txt
1272	1	The “NAME” field is the repository name. This includes the Docker ID, or\norganization name, for unofficial repositories.	text	txt
1272	2	docker search nigelpoulton	code	txt
1272	3	Use `--filter is-official=true` so that only official repos are displayed.	text	txt
1272	4	docker search alpine --filter is-official=true	code	txt
1272	5	By default, Docker will only display 25 lines of results. However, you can\nuse the `--limit` flag to increase that to a maximum of 100.	text	txt
1272	6	docker search alpine --filter is-automated=true --limit 100	code	txt
1273	1	This command will show you detailed configuration and runtime information\nabout a container.\nIt accepts container names and container IDs as its main argument.	text	txt
1273	2	docker image inspect ubuntu:latest	code	txt
1274	1	The `history` command is another way of inspecting an image and seeing layer data.\nHowever, it shows the build history of an image and is not a\nstrict list of layers in the final image.	text	txt
1274	2	docker history	code	txt
1274	3	The image is always the combination of all layers stacked in the order they were added.	text	txt
1275	1	docker image pull alpine:latest\ndocker image list --digests alpine:latest	code	txt
1286	2	Before you can push an image, you need to tag it in a special way.\nThis is because Docker needs all of the following information when pushing an image:	text	txt
1276	1	Assume you are running Docker on a Raspberry Pi (Linux running on ARM\narchitecture). When you pull an image, your Docker client makes the relevant\ncalls to the Docker Registry API exposed by DockerHub. If a manifest list\nexists for the image, it will be parsed to see if an entry exists for Linux\non ARM. If an ARM entry exists, the manifest for that image is retrieved\nand parsed for the crypto ID’s of the layers that make up the image. Each\nlayer is then pulled from DockerHub.	text	txt
1276	2	docker manifest inspect golang	code	txt
1277	1	You can create your own builds for diff erent platforms and architectures with	text	txt
1277	2	docker buildx	code	txt
1277	3	and then use	text	txt
1277	4	docker manifest create	code	txt
1277	5	to create your own manifest lists.	text	txt
1277	6	The following command builds an image for ARMv7 called myimage:arm-v7 from the\ncontents of the current directory. It’s based on code in the code in\nhttps://github.com - https://github.com/nigelpoulton/psweb.	text	txt
1277	7	docker buildx build --platform linux/arm/v7 -t myimage:arm-v7 .	code	txt
1277	8	The beauty of the command is that you don’t have to run it from an ARMv7 Docker node.	text	txt
1277	9	At the time of writing, buildx is an experimental feature and\nrequires `experimental=true` setting in your ∼/.docker/config.json file as follows.	text	txt
1277	10	{ "experimental": true }	code	txt
1278	1	Containers run until the app they are executing exits.	text	txt
1278	2	You can manually stop a running container with thedocker container stopcommand.	text	txt
1278	3	To get rid of a container forever, you have to explicitly remove it.	text	txt
1278	4	You can list multiple images on the same command by separating them with whitespace.	text	txt
1278	5	docker image rm ubuntu:22.4\ndocker image rm f70734b6a266 a4d3716dbb72	code	txt
1279	1	This is a form of self-healing that enables Docker to automatically restart them after certain events or failures have occurred.\nRestart policies are applied per-container, and can be configured\nimperatively on the command line as part of `docker container run` commands,\nor declaratively in YAML files for use with higher-level tools such as\nDocker Swarm, Docker Compose, and Kubernetes.	text	txt
1279	2	The following restart policies exist:	text	txt
1279	3	* always\n* unless-stopped\n* on-failed	text	txt
1279	4		code	txt
1280	1	The always policy is the simplest. It always restarts a stopped container\nunless it has been explicitly stopped.\nHowever, if you restart the Docker daemon, the container will be\nautomatically restarted when the daemon comes back up.	text	txt
1280	2	docker container run --interactive --tty --restart always alpine /bin/bash	code	txt
1280	3	Be aware that Docker has restarted the same container and not created a new one.\nIn fact, if you inspect it you can see there **startCount** has been incremented.	text	txt
1281	1	The main difference between the **always** and **unless-stopped** policies is that\ncontainers with the **unless-stopped** policy will not be restarted when the\ndaemon restarts if they were in the **Stopped (Exited)** state.	text	txt
1281	2	docker container run --interactive --tty --restart unless-stopped ubuntu /usr/bin	code	txt
1282	1	The **on-failure** policy will restart a container if it exits with a non-zero\nexit code. It will also restart containers when the Docker daemon restarts,\neven containers that were in the stopped state.	text	txt
1282	2	docker container run --interactive --tty --restart on-failure ubuntu /usr/bin	code	txt
1283	1	When building a Docker image, you can embed an instruction that lists the\ndefault app for any containers that use the image. You inspect an image to see this.	text	txt
1283	2	The entries after **Cmd** show the command/app that the container will run unless\nyou override it with a different one when you launch the container.	text	txt
1283	3	Cmd /bin/bash	code	txt
1284	1	FROM alpine\nLABEL maintainer="maintainer@domain.tld"\nLABEL description="Web service"\nLABEL version="0.1"\nRUN apk add --update nodejs nodejs-npm\nCOPY . /src\nWORKDIR /src\nRUN npm install\nEXPOSE 8080\nENTRYPOINT ["node", "./app.js"]	code	txt
1284	2	The `RUN` instruction uses the Alpine apk package manager to install node js and nodejs-npm into the image.\nIt creates a new image layer directly above the Alpine base layer, and installs the packages in this layer.	text	txt
1284	3	The `COPY . /src` instruction creates another new layer and copies in the\napplication and dependency f i les from the build context.	text	txt
5501	1	`ftxui::borderDashed` is similar to the light border but using dashes instead of continuous lines.	text	md
1284	4	The `WORKDIR` instruction sets the working directory inside the image filesystem for the rest of the instructions in the file.\nThis instruction does not create a new image layer.	text	txt
1284	5	Then the `RUN` npm install instruction creates a new layer and uses `npm` to install application dependencies listed in the `package.json` file in the build context.\nIt runs within the context of the `WORKDIR` set in the previous instruction, and installs the dependencies into the newly created layer.	text	txt
1284	6	The application exposes a web service on TCP port 8080, so the Dockerfile documents this with the `EXPOSE 8080` instruction.\nThis is added as image metadata and not an image layer.	text	txt
1284	7	Finally, the `ENTRYPOINT` instruction is used to set the main application that the image (container) should run.\nThis is also added as metadata and not an image layer.	text	txt
1284	8	All non-comment lines are Instructions and take the format `INSTRUCTION argument`.\nInstruction names are not case sensitive, but it’s normal practice to write them in UPPERCASE.\nThis makes reading the Docker file easier.	text	txt
1286	3	docker login	code	txt
1287	1	Docker is opinionated, so by default it pushes images to DockerHub.\nYou can push to other registries, but you have to explicitly set the registry URL as part of the `docker image push` command.	text	txt
1289	1	Comment lines start with the `#` character.	text	txt
1290	3	If an instruction is adding content such as files and programs to the image, it will create a new layer.\nIf it is adding instructions on how to build the image and run the application, it will create metadata.	text	txt
1292	1	You can force the build process to ignore the entire cache by passing the --no-cache=true flag to the `docker image build` command.	text	txt
1293	2	For example, it’s possible that the `COPY . /src` instruction in the Dockerfile\nhas not changed since the previous, but the contents of the directory being\ncopied into the image have changed!	text	txt
1294	2	docker image build --squash --tag container:latest .	code	txt
1322	2	In *ingress mode* every node gets a mapping and can therefore redirect your request to a node that is running the service.	text	txt
1323	1	docker service create --name my-service --network my-network --publish published=80,target=80,mode=host --replicas 12	code	txt
1323	2	Open a web browser and point it to the IP address of any of the nodes in the swarm on port 80 to see the service running.	text	txt
1324	1	docker service update --image repository/project:v2 --update-parallelism 2 --update-delay 20s my-project\ndocker service inspect --pretty my-project	code	txt
1325	1	docker service logs my-project	code	txt
1325	2	You can follow the logs (`--follow`), tail them (`--tail`), and get extra details (`--details`).	text	txt
1326	1	By using flags to override configuration file:	text	txt
1326	2	docker service create --name my-service --publish 80:80 --replicas 10 --log-driver journald	code	txt
1326	3	Or by configuring `docker.json` file:	text	txt
1326	4	{\n  "log-driver": "syslog"\n}	code	txt
1327	1	Managing your swarm and applications declaratively is a great way to prevent the need to recover from a backup.\nFor example, storing conﬁguration objects outside of the swarm in a source code repository will enable you to redeploy things like networks, services, secrets and other objects.\nHowever, managing your environment declaratively and strictly using source control repos requires discipline.	text	txt
1328	1	Swarm conﬁguration and state is stored in `/var/lib/docker/swarm` on every manager node.\nA swarm backup is a copy of all the ﬁles in this directory.	text	txt
1329	1	You have to stop the Docker daemon on the node you are backing up.\nIt’s a good idea to perform the backup from non-leader managers.\nThis is because stopping Docker on the leader will initiate a leader election.	text	txt
1329	2	The following commands will create the following two objects:	text	txt
1329	3	* An overlay network\n* A Secret	text	txt
1329	4	docker network create --driver overlay my-network\nprintf "Salt" | docker secret create my-secret -\nsudo systemctl stop docker\ntar -czf swarm.gzip /var/lib/docker/swarm	code	txt
1329	6	tar -xzf swarm.gzip -C /\nsudo systemctl start docker	code	txt
1329	7	The `--force-new-cluster` ﬂag tells Docker to create a new cluster using the conﬁguration stored in `/var/lib/docker/swarm/` that you recovered.	text	txt
1329	8	docker swarm init --force-new-cluster\ndocker network ls\ndocker secret ls\ndocker swarm ls\ndocker service ls\ndocker service ps\ndocker node ls	code	txt
1329	9	Add new manager and worker nodes and take fresh backups.	text	txt
1330	1	By default, Docker creates new volumes with the built-in *local* driver.	text	txt
1330	2	docker volume create my-storage	code	txt
1330	3	As the name suggests, volumes created with the *local* driver are only available to containers on the same node as the volume.\nYou can use the `-d` ﬂag to specify a diﬀerent driver.	text	txt
1331	1	docker volume ls\ndocker volume list	code	txt
1332	1	docker volume inspect my-storage	code	txt
1332	2	If both the `Driver` and `Scope` properties are *local*, it means the volume was created with the local driver and is only available to containers on this Docker host.	text	txt
1332	3	The `Mountpoint` property tells us where in the Docker host’s filesystem the volume exists.	text	txt
1333	1	docker volume rm\ndocker volume remove	code	txt
1333	2	This option lets you specify exactly which volumes you want to delete.\nIt won't delete a volume that is in use by a container or service replica.	text	txt
1334	2	`prune` will delete all volumes that are not mounted into a container or service replica.	text	txt
1335	1	VOLUME <container-mount-point>	code	txt
1335	2	Interestingly, you cannot specify a directory on the host when deﬁning a volume in a Dockerﬁle.\nThis is because host directories are different depending on what OS your Docker host is running – it could break your builds if you speciﬁed a directory on a Docker host that doesn’t exist.\nAs a result, deﬁning a volume in a Dockerfile requires you to specify host directories at deploy-time.	text	txt
1336	1	Create a volume, then you create a container and mount the volume into it.\nThe volume is mounted into a directory in the container’s filesystem, and anything written to that directory is stored in the volume.\nIf you delete the container, the volume and its data will still exist.	text	txt
1336	2	docker container run --detach --interactive --tty --name my-service --mount source=my-storage,target=/storage alpine	code	txt
1336	3	* If you specify an existing volume, Docker will use the existing volume.\n* If you specify a volume that doesn’t exist, Docker will create it for you.	text	txt
1336	4	In case `my-storage` didn't exist, it will be created:	text	txt
1337	1	docker service create --name my-service --mount source=bizvol,target=/vol alpine sleep 1d	code	txt
1337	2	`--replica` flag was not set, so only a single service replica was deployed.	text	txt
1337	3	Running service can be found in cluster by following command:	text	txt
1337	4	docker service ps my-service	code	txt
1338	1	docker plugin install purestorage/docker-plugin:latest --alias pure --grant-all-permissions	code	txt
1339	1	docker plugin ls\ndocker plugin list	code	txt
1340	1	docker plugin install purestorage/docker-plugin:latest --alias pure --grant-all-permissions\ndocker volume create --driver pure --opt size=25GB fast-volume	code	txt
1341	1	Assuming an application running on two nodes of a cluster and both have write access to the shared volume.	text	txt
1341	2	The application running on node-1 updates some data in the shared volume.\nHowever, instead of writing the update directly to the volume, it holds it in its local buﬀer for faster recall.\nAt this point, the application in node-1 thinks the data has been written to the volume.\nHowever, before node-1 flushes its buffers and commits the data to the volume, the app on node-2 updates the same data with a diﬀerent value and commits it directly to the volume.\nAt this point, both applications think they’ve updated the data in the volume, but in reality only the application in node-2 has.\nA few seconds later, on node-1 flushes the data to the volume, overwriting the changes made by the application in node-2.\nHowever, the application in node-2 is totally unaware of this! This is one of the ways data corruption happens.\nTo prevent this, you need to write your applications in a way to avoid things like this.	text	txt
1342	1	Docker Swarm Mode is secure by default. Image vulnerability scanning analyses\nimages, detects known vulnerabilities, and provides detailed reports and\nfixes.	text	txt
1342	2	Scanners work by building a list of all software in an image and then comparing the packages against databases of known vulnerabilities.\nMost vulnerability scanners will rank vulnerabilities and provide advice and help on fixes.	text	txt
1343	1	**Docker Content Trust (DCT)** lets us sign our own images and verify the\nintegrity and publisher of images we consume.	text	txt
1344	1	Kernel namespaces are the main technology used to build containers. They\nvirtualise operating system constructs such as process trees and filesystems\nin the same way that hypervisors virtualise physical resources such as CPUS\nand disks. If namespaces are about isolation, control groups (cgroups) are\nabout limits.	text	txt
1345	1	Containers are isolated from each other but all share a common set of\nresources — things like CPU, RAM, network and disk I/O. Cgroups let us set\nlimits so a single container cannot consume them all and cause a denial of\nservice (DoS) attack.	text	txt
1345	2	Docker uses seccomp to limit the syscalls a container can make to the host’s\nkernel. At the time of writing, Docker’s default seccomp profile disables 44\nsyscalls. Modern Linux systems have over 300 syscalls.	text	txt
1346	1	**Docker secrets** let us securely share sensitive data with applications.\nThey’re stored in the encrypted cluster store, encrypted over the network,\nkept in in-memory filesystems when in use, and operate a least-privilege\nmodel.	text	txt
1346	2	Run the following command from the node you want to be the first manager in\nthe new swarm.	text	txt
1346	3	*manager1*\ndocker swarm init	code	txt
1346	4	That’s literally all you need to do to configure a secure swarm.	text	txt
1346	5	*manager1* is configured as the first manager of the swarm and also as the\nroot certificate authority (CA). The swarm itself has been given a\ncryptographic cluster ID.	text	txt
1346	6	*manager1* has issued itself with a client certificate that identifies it as\na manager, certificate rotation has been configured with the default value of\n90 days, and a cluster database has been configured and encrypted. A set of\nsecure tokens have also been created so that additional managers and workers\ncan be securely joined.	text	txt
1347	1	First extract the manager token:	text	txt
1347	2	*manager1*\ndocker swarm join-token manager	code	txt
1347	3	Then using then token join new nodes as managers:	text	txt
1347	4	*node1*\ndocker swarm join --token <manager-join-token> <ip-of-existing-manager>:<swarm-port>	code	txt
1347	5	Every join token has 4 distinct fields separated by dashes (-):\n`PREFIX - VERSION - SWARM ID - TOKEN`\n- The prefix is always `SWMTKN`. This allows you to pattern-match against it\n  and prevent people from accidentally posting it publicly.\n- The `VERSION` field indicates the version of the swarm.\n- The `SWARM ID` field is a hash of the swarm’s certificate.\n- The `TOKEN` field is worker or manager token.	text	txt
1348	1	docker swarm join-token --rotate manager	code	txt
1349	1	sudo openssl x509 -in /var/lib/docker/swarm/certificates/swarm-node.crt -text	code	txt
1995	2	Open the `/etc/pam.d/common-auth` file in your favorite text editor.\nAt the top of the file, insert these two lines:	text	txt
1995	4	Open the `/etc/pam.d/common-account` file in your text editor.\nAt the bottom of the file, add this line:	text	txt
1996	2	* usermod\n* passwd	text	txt
1996	5	Using `passwd` to lock and unlock user accounts:	text	txt
1996	7	This does the same job as `usermod -L`, but in a slightly different manner.\nFor one thing, `passwd -l` will give you some feedback about what’s going on, whereas `usermod -L` gives you no feedback at all.	text	txt
1997	2	sudo passwd -l root	code	txt
1998	2	motd stands for **Message of the Day**.	text	txt
1998	4	```\nUbuntu 22.04.1 LTS \\\\n \\\\l\n``````	text	txt
1998	6	```\n\\\\S Kernel \\\\r on an \\\\m\n``````	text	txt
1999	2	echo -n $candidate_password | sha1sum\ncurl https://api.pwnedpasswords.com - https://api.pwnedpasswords.com/range/21BD1	code	txt
2000	2	sudo iptables -L\nsudo ip6tables -L	code	txt
2000	4	sudo iptables -L -n	code	txt
1706	1	|Manufacturer|Layer|\n|-|-|\n|Allwinner|meta-allwinner|\n|AMD|meta-amd|\n|Intel|meta-intel|\n|NXP|meta-freescale, meta-freescale-3rdparty|\n|Raspberry Pi|meta-raspberrypi|\n|RISC-V|meta-riscv|\n|Texas Instruments|meta-ti|	text	txt
1707	1	git clone git://git.yoctoproject.org/poky -b scarthgap	code	sh
1707	2	source oe-init-build-env beaglebone	code	sh
1707	3	The `MACHINE` variable can be changed depending on the board we want to use or set in `build/conf/local.conf`.	text	txt
2001	2	* `-A INPUT`: Places the rule at the end of the specified chain.\n* `-m`: Calls in an iptables module. In this case, we’re calling in the conntrack module to track connection states.\n* `--ctstate`: The ctstate, or connection state, portion of our rule is looking for two things. First, it’s looking for a connection that the client established with a server. Then, it looks for the related connection that’s coming back from the server in order to allow it to connect to the client. So, if a user was to use a web browser to connect to a website, this rule would allow packets from the web server to pass through the firewall to get to the user’s browser.\n* `-j`: Rules jump to a specific target, which in this case is ACCEPT.	text	txt
2002	2	sudo iptables -A INPUT -p tcp --dport ssh -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT	code	txt
2002	4	* `-A INPUT`: Place this rule at the end of the `INPUT` chain.\n* `-p tcp`: Indicates the protocol that this rule affects.\n* `--dport ssh`:  Specifies the destination port on which we want this rule to operate.\n* `-j ACCEPT`: Jump to ACCEPT target.	text	txt
2002	6	sudo iptables -A INPUT -p tcp --dport 53 -j ACCEPT\nsudo iptables -A INPUT -p udp --dport 53 -j ACCEPT	code	txt
2003	2	`sudo` needs to know the machine’s hostname so that it can know which rules are allowed to run on a particular machine.\nIt uses the loopback interface to help resolve the hostname.\nIf the lo interface is blocked, it takes longer for `sudo` to resolve the hostname.	text	txt
2004	2	sudo iptables -A INPUT -m conntrack -p icmp --icmp-type 3 --ctstate NEW,ESTABLISHED,RELATED -j ACCEPT\nsudo iptables -A INPUT -m conntrack -p icmp --icmp-type 11 --ctstate NEW,ESTABLISHED,RELATED -j ACCEPT\nsudo iptables -A INPUT -m conntrack -p icmp --icmp-type 12 --ctstate NEW,ESTABLISHED,RELATED -j ACCEPT	code	txt
2005	1	We can set a default `DROP` or `REJECT` policy for the `INPUT` chain, or we can leave the policy set to `ACCEPT` and create a `DROP` or `REJECT` rule at the end of the `INPUT` chain.\nWhich one you choose is really a matter of preference.	text	txt
2005	3	sudo iptables -A INPUT -j DROP\nsudo iptables -P INPUT DROP	code	txt
2006	2	sudo apt install iptables-persistent	code	txt
2006	4	The `iptables-persistent` package won’t save subsequent changes to your iptables rules.\nTo make these changes permanent, I’ll use the `iptables-save` command to save a new file in my own home directory.\nThen, I’ll copy the file over to the `/etc/iptables` directory, replacing the original one:	text	txt
2007	2	sudo iptables -t mangle -A PREROUTING -m conntrack --ctstate INVALID -j DROP\nsudo iptables -t mangle -A PREROUTING -p tcp ! --syn -m conntrack --ctstate NEW -j DROP	code	txt
1350	1	docker swarm update	code	txt
1350	2	The following example changes the certificate rotation period to 30 days.	text	txt
1350	3	docker swarm update --cert-expiry 720h	text	txt
1351	1	docker swarm ca --help	code	txt
1352	1	To follow along, you’ll need a cryptographic key-pair to sign images.	text	txt
1352	2	docker trust key generate brian	code	txt
1352	3	If you already have a key-pair, you can import and load it with:	text	txt
1352	4	docker trust key load key.pem --name brian	code	txt
1352	5	Now that we’ve loaded a valid key-pair, we’ll associate it with the image\nrepository we’ll push signed images to. This example uses the\nnigelpoulton/ddd-trust repo on Docker Hub and the brian.pub key that was\ncreated in the previous step.	text	txt
1352	6	docker trust signer add --key brian.pub brian briansalehi/ddd-trust	code	txt
1352	7	The following command will sign the briansalehi/ddd-trust:signed image and\npush it to Docker Hub. You’ll need to tag an image on your system with the\nname of the repo you just associated your key-pair with.	text	txt
1352	8	Push the signed image:	text	txt
1352	9	docker trust sign briansalehi/ddd-trust:signed	code	txt
1352	10	The push operation will create the repo on Docker Hub and push the image.	text	txt
1353	1	docker trust inspect nigelpoulton/ddd-trust:signed --pretty	code	txt
1354	1	You can force a Docker host to always sign and verify image push and pull\noperations by exporting the `DOCKER_CONTENT_TRUST` environment variable with\na value of 1. In the real world, you’ll want to make this a more permanent\nfeature of Docker hosts.	text	txt
1354	2	export DOCKER_CONTENT_TRUST=1	code	txt
1354	3	Once DCT is enabled like this, you’ll no longer be able to pull and work with\nunsigned images.	text	txt
1355	1	Many applications have sensitive data such as passwords, certificates, and\nSSH keys. Secrets require swarm as they leverage the cluster store. The\nsecret is shown as the key symbol and the container icons with the dashed\nline are not part of the service that has access to the secret.	text	txt
1355	2	You can create and manage secrets with the docker secret command. You can\nthen attach them to services by passing the `--secret` flag:	text	txt
1355	3	docker service create --secret	code	txt
1355	4	The secret is mounted into the containers of the blue service as an\nunencrypted ﬁle at `/run/secrets/`. This is an in-memory *tmpfs* filesystem.	text	txt
1358	1	Preconditions of alias templates:	text	txt
1358	2	* Alias templates cannot be partially or explicitly specialized.\n* Alias templates are never deduced by template argument deduction when deducing a template parameter.\n* The type produced when specializing an alias template, is not allowed to directly or indirectly make use of its own type.	text	txt
1359	1	* direct initialization initializes an object from an explicit set of constructor arguments.\n* copy initialization initializes an object from another object.\n* brace initialization prevents narrowing conversion of data types.\n* all elements of list initialization should be of the same type.	text	txt
1361	1	* The alignment must match the size of the largest member in order to avoid performance issues.	text	txt
1362	1	* `alignof` can only be applied to type-ids, and not to variables or class data members.	text	txt
1363	1	* `alignas` takes an expression evaluating 0 or valid value for alignment, a type-id, or a parameter pack.\n* only valid values are the powers of two.\n* program is ill-formed if largest `alignas` on a declaration is smaller than natural alignment without any `alignas` specifier.	text	txt
1364	1	* Scoped enumerations do not export their enumerators to the surrounding scope.\n* Scoped enumerations have an underlying type so they can be forward declared.\n* Values of scoped enumerations do not convert implicitly to int.	text	txt
1374	2	namespace incorrect_implementation\n{\n    namespace v1\n    {\n        template<typename T>\n        int test(T value) { return 1; }\n    }	text	cpp
5548	1		code	cpp
1372	1	* First, an unnamed namespaces will be expanded to a compiler defined unique name.\n* Second, a `using` directive expands namespace.\n* Third, the unnamed namespace will be named.\n* Therefore, any function declared in it have local visibility but have external linkage.	text	txt
1373	1	* Prior to C++11, non-type template arguments could not be named with internal linkage, so `static` variables were not allowed. VC++ compiler still doesn't support it.	text	txt
1374	1	* Specialization of a template is required to be done in the same namespace where the template was declared.\n* Define the content of the library inside a namespace\n* Define each version of the library or parts of it inside an inner inline namespace\n* Use preprocessor macros to enable a particular version of the library	text	txt
1374	4	    // won't compile\n    auto y = incorrect_implementation::test(foor{42});	text	txt
1374	5	    // library leaks implementation details\n    namespace incorrect_implementation\n    {\n        namespace version_2\n        {\n            template<>\n            int test(foo value) { return value.a; }\n        }\n    }	text	txt
1374	6	    // okay, but client needs to be aware of implementation details\n    auto y = incorrect_implementation::test(foor{42});\n}	code	txt
1374	7	namespace correct_implementation\n{\n    #ifndef _lib_version_1\n    inline namespace v1\n    {\n        template<typename T>\n        int test(T value) { return 1; }\n    }\n    #endif	text	txt
1376	1	* The type of objects without template arguments are not types, but act as a placeholder for a type that activates CTAD. When compiler encouters it, it builds a set of deduction guides which can be complemented by user with user defined deduction rules.\n* CTAD does not occur if the template argument list is present.	text	txt
1380	1	* A sign, plus (**+**) or minus (**-**) (optional)\n* Prefix **0** to indicate an octal base (optional)\n* Prefix **0x** or **0X** to indicate a hexadecimal base (optional)\n* A sequence of digits	text	txt
1382	1	* Decimal floating-point expression (optional sign, sequence of decimal digits with optional point, optional e or E, followed by exponent with optional sign).\n* Binary floating-point expression (optional sign, 0x or 0X prefix, sequence of hexadecimal digits with optional point, optional p or P, followed by exponent with optional sign).\n* Infinity expression (optional sign followed by case-insensitive INF or INFINITY).\n* A non-number expression (optional sign followed by case-insensitive NAN and possibly other alphanumeric characters).	text	txt
1375	1	* Only by C++20 structured bindings can include `static` or `thread_local` specifiers in the declaration.\n* Only by C++20 `[[maybe_unused]]` attribute can be used in the declaration.\n* Only by C++20 a lambda can capture structure binding identifiers.	text	txt
1376	2	std::pair p{42, "demo"};    // std::pair<int, char const*>\nstd::vector v{1, 2};        // std::vector<int>	code	cpp
1377	1	auto si  = std::to_string(42); // "42"\nauto sl  = std::to_string(42L); // "42"\nauto su  = std::to_string(42u); // "42"\nauto sd  = std::to_wstring(42.0); // "42.000000"\nauto sld = std::to_wstring(42.0L); // "42.000000"	code	cpp
1379	1	* The input string.\n* A pointer that, when not null, will receive the number of characters that were\nprocessed. This can include any leading whitespaces that were discarded,\nthe sign, and the base prefix, so it should not be confused with the number\nof digits the integral value has.\n* A number indicating the base; by default, this is 10. Valid numbers of 2 to 36.	text	txt
1380	2	auto i1 = std::stoi("42"); // 42\nauto i2 = std::stoi("    42"); // 42\nauto i3 = std::stoi("    42fortytwo"); // 42\nauto i4 = std::stoi("+42"); // 42\nauto i5 = std::stoi("-42"); // -42	code	cpp
1381	1	* `std::invalid_argument`: conversion cannot be performed.\n* `std::out_of_range`: converted value is outside the range of the result type.	text	txt
1382	2	auto d1 = std::stod("123.45");       // d1 = 123.45000000000000\nauto d2 = std::stod("+123.45");      // d2 = 123.45000000000000\nauto d3 = std::stod("-123.45");      // d3 = -123.45000000000000\nauto d4 = std::stod(" 123.45");      // d4 = 123.45000000000000\nauto d5 = std::stod(" -123.45abc");  // d5 = -123.45000000000000\nauto d6 = std::stod("1.2345e+2");    // d6 = 123.45000000000000\nauto d7 = std::stod("0xF.6E6666p3"); // d7 = 123.44999980926514\nauto d8 = std::stod("INF");          // d8 = inf\nauto d9 = std::stod("-infinity");    // d9 = -inf\nauto d10 = std::stod("NAN");         // d10 = nan\nauto d11 = std::stod("-nanabc");     // d11 = -nan	code	cpp
1383	1	Standard types that are not arithmetic types, such as `std::complex<T>` or `std::nullptr_t`, do not have `std::numeric_limits` specializations.	text	txt
1384	1	Objects in a range should have `<` comparison operator overloaded.	text	txt
1385	1	`digits` represents the number of bits (excluding the sign bit if present) and padding bits (if any) for integral types and the number of bits of the mantissa for floating-point types.	text	txt
2010	1	sudo nft list tables	code	txt
1391	1	Except for `random_device`, all engines produce numbers in a uniform distribution.	text	txt
1392	1	Random generators can be seeded using their constructors or the `seed()` method.\nNote that `random_device` cannot be seeded.	text	txt
1393	1	The function call operators of random engines are overloaded and generate a new number uniformly distributed between `min()` and `max()`:	text	txt
1395	1	The Mersenne twister engine has a bias toward producing some values repeatedly and omitting others, thus generating numbers not in a uniform distribution, but rather in a binomial or Poisson distribution.	text	txt
1396	1	T operator ""_suffix(unsigned long long int); // biggest integral type\nT operator ""_suffix(long double); // biggest floating-point type\nT operator ""_suffix(char);\nT operator ""_suffix(wchar_t);\nT operator ""_suffix(char16_t);\nT operator ""_suffix(char32_t);\nT operator ""_suffix(char const *, std::size_t);\nT operator ""_suffix(wchar_t const *, std::size_t);\nT operator ""_suffix(char16_t const *, std::size_t);\nT operator ""_suffix(char32_t const *, std::size_t);	code	cpp
1401	1	Always define literals in a separate namespace to avoid name clashes.	text	txt
2011	10	sudo nft list ruleset	code	txt
1411	1	std::regex irx{R"(...)"s, std::regex_constants::icase};	code	cpp
1413	1	The `std::regex_match()` method has overloads that take a reference to a `std::match_results` object to store the result of the match.	text	txt
1413	2	If there is no match, then `std::match_results` is empty and its size is 0. Otherwise, its size is 1, plus the number of matched subexpressions.	text	txt
1413	3	The class template `std::sub_match` represents a sequence of characters that matches a capture group; this class is actually derived from std::pair, and its first and second members represent iterators to the first and the one- past-end characters in the match sequence. If there is no match sequence, the two iterators are equal:	text	txt
1413	4	* `typedef sub_match<const char *> csub_match;`\n* `typedef sub_match<const wchar_t *> wcsub_match;`\n* `typedef sub_match<string::const_iterator> ssub_match;`\n* `typedef sub_match<wstring::const_iterator> wssub_match;`	text	txt
1413	5	The class template `std::match_results` is a collection of matches; the first element is always a full match in the target, while the other elements are matches of subexpressions:	text	txt
1413	6	* `typedef match_results<const char *> cmatch;`\n* `typedef match_results<const wchar_t *> wcmatch;`\n* `typedef match_results<string::const_iterator> smatch;`\n* `typedef match_results<wstring::const_iterator> wsmatch;`	text	txt
1414	1	The C++ standard library supports six regular expression engines:	text	txt
1414	2	* ECMAScript (default)\n* basic POSIX\n* extended POSIX\n* awk\n* grep\n* egrep (grep with the option -E)	text	txt
1416	1	The iterators available in the regular expressions standard library are as follows:	text	txt
1422	1	Converting from an `std::basic_string_view` to an `std::basic_string` is not possible. You must explicitly construct an `std::basic_string` object from a `std::basic_string_view`.	text	txt
1423	1	Only class member functions can be `defaulted`.	text	txt
1425	1	* **user defined constructor** inhibits **default constructor**: If a user-defined constructor exists, the default constructor is not generated by default.\n* **virtual destructor** inhibits **default constructor**: If a user-defined virtual destructor exists, the default constructor is not generated by default.\n* **user defined move constructor/assignment** inhibits **default copy constructor/assignment**: If a user-defined move constructor or move assignment operator exists, then the copy constructor and copy assignment operator are not generated by default.\n* **user defined copy constructor/assignment, move constructor/assignment, destructor** inhibits **default move constructor/assignment**: If a user-defined copy constructor, move constructor, copy assignment operator, move assignment operator, or destructor exists, then the move constructor and move assignment operator are not generated by default.\n* If a user-defined copy constructor or destructor exists, then the copy assignment operator is generated by default. <span style="color:green">(deprecated)</span>\n* If a user-defined copy assignment operator or destructor exists, then the copy constructor is generated by default. <span style="color:green">(deprecated)</span>	text	txt
1425	2	The rule of thumb, also known as The Rule of Five, for class special member functions is that if you explicitly define any copy constructor, move constructor, copy assignment operator, move assignment operator, or destructor, then you must either explicitly define or default all of them.	text	txt
1426	1	Declare the copy constructor and the copy assignment operator as `deleted`.	text	txt
1418	1	Apart from the identifiers of the subexpressions (`$1`, `$2`, and so on), there are other identifiers for the entire match (`$&`), the part of the string before the first match ($\\\\`), and the part of the string after the last match (`$'`).	text	txt
1419	1	Passing `std::basic_string_view` to functions and returning `std::basic_string_view` still creates temporaries of this type, but these are small-sized objects on the stack (a pointer and a size could be 16 bytes for 64-bit platforms); therefore, they should incur fewer performance costs than allocating heap space and copying data.	text	txt
1422	2	std::string_view sv{ "demo" };\nstd::string s{ sv };	code	cpp
1423	2	struct foo\n{\n    foo() = default;\n};	code	cpp
1424	1	Any function, including non-member functions can be deleted.	text	txt
1426	2	class non_copyable\n{\npublic:\n    non_copyable() = default;\n    non_copyable(non_copyable const&) = delete;\n    non_copyable& operator =(non_copyable const&) = delete;\n};	code	cpp
1427	1	Declare the copy operations as `deleted` and explicitly implement the move operations.	text	txt
1432	1	It must be well understood that the lambda expression is actually a class. In order to call it, the compiler needs to instantiate an object of the class. The object instantiated from a lambda expression is called a lambda closure.	text	txt
1432	2	* `[](){}`: does not capture.\n* `[&](){}`: capture everything by reference.\n* `[=](){}`: capture everything by copy, except `this`. <span style="color:green">(c++20)</span>\n* `[&x](){}`: capture only `x` by reference.\n* `[x](){}`: capture only `x` by copy.\n* `[&x...](){}`: capture pack extension `x` by reference.\n* `[x...](){}`: capture pack extension `x` by copy.\n* `[&, x](){}`: capture everything by reference except for `x` that is captured by copy.\n* `[=, &x](){}`: capture everything by copy except for `x` that is captured by reference.\n* `[&, this](){}`: capture everything by reference except for pointer `this` that is always captured by copy.\n* `[x, x](){}`: **error**, `x` is captured twice.\n* `[&, &x](){}`: **error**, everything is captured by reference, `x` cannot be captured again.\n* `[=, =x](){}`: everything is captured by copy, `x` cannot be captured again.\n* `[&this](){}`: **error**, the pointer `this` is always captured by copy.\n* `[&, =](){}`: **error**, cannot capture everything both by copy and by reference.\n* `[x=expr](){}`: `x` is a data member of the lambda's closure initialized from the expression `expr` suited for move-semantics. <span style="color:green">(c++14)</span>\n* `[&x=expr](){}`: `x` is a reference data member of the lambda's closure initialized from the expression `expr` suited for move-semantics. <span style="color:green">(c++14)</span>	text	txt
1433	1	* `capture-list` can be empty.\n* `parameters` can be empty.\n* `ret` value of the function can be obmitted.\n* `body` can be empty.\n* `mutable` specifier is optional and removes the `const`ness of function call operator in lambda closure and makes the lambda stateful.\n* `constexpr` specifier is optional and tells the compiler to generate a `constexpr` call operator.\n* `noexcept` specifier is optional and tells the compiler to generate a `nothrow` call operator.\n* `attributes` are optional.	text	txt
2023	1	#include <thread>	text	txt
1428	1	Functions can be declared =default outside the body of a class if and only if they are inlined.	text	txt
1431	1	Though generic lambdas can be defined anonymously in the place where they are called, it does not really make sense because the very purpose of a generic lambda is to be reused.	text	txt
1433	2	[capture-list](params) mutable constexpr exception attr -> ret { body; }	code	cpp
1435	1	The correct form of capturing `this` when the object is a temporary is `[*this]` so that object is copied by value.	text	txt
1440	1	In order to write a recursive lambda function, you must do the following:	text	txt
1440	2	* Define the lambda in a function scope\n* Assign the lambda to an `std::function` wrapper\n* Capture the `std::function` object by reference in the lambda in order to call it recursively	text	txt
1478	1	#include <fstream>\n#include <vector>\n#include <string>	text	txt
2025	5	    t.join();\n}	code	txt
1441	1	In order to write variadic function templates, you must perform the following steps:	text	txt
1441	2	1. Define an overload with a fixed number of arguments to end compile-time recursion if the semantics of the variadic function template require it.\n2. Define a template parameter pack that is a template parameter that can hold any number of arguments, including zero; these arguments can be either types, non-types, or templates.\n3. Define a function parameter pack to hold any number of function arguments, including zero; the size of the template parameter pack and the corresponding function parameter pack is the same. This size can be determined with the sizeof... operator.\n4. Expand the parameter pack in order to replace it with the actual arguments being supplied.	text	txt
1441	3	With GCC and Clang, you can use the `__PRETTY_FUNCTION__` macro to print the name and the signature of the function.	text	txt
1441	4	Make return type `auto` to ensure all of the function template initializations have the same return type, for example, in case of having `std::string` and `char` types in parameter pack.	text	txt
1443	1	Fold expressions work with all overloads for the supported **binary operators**, but do not work with **arbitrary binary operators**. It is possible to implement a workaround for that by providing a wrapper type that will hold a value and an overloaded operator for that wrapper type:	text	txt
1444	1	A higher-order function is a function that takes one or more other functions as arguments and applies them to a range (a list, vector, map, tree, and so on), thus producing either a new range or a value.	text	txt
1444	2	To implement the map function, you should:	text	txt
1444	3	* Use `std::transform` on containers that support iterating and assignment to the elements, such as `std::vector` or `std::list`.\n* Use other means such as explicit iteration and insertion for containers that do not support assignment to the elements, such as `std::map`.	text	txt
1446	1	Since the order of the processing can be important, there are usually two versions of this function. One is foldleft, which processes elements from left to right, while the other is foldright, which combines the elements from right to left.	text	txt
2026	1	#include <thread>	text	txt
1451	1	#if !defined(HEADER_NAME)\n#define HEADER_NAME\n/* ... */\n#endif	code	cpp
1454	1	void show_configuration()\n{\n#ifdef _DEBUG\n    std::cout << "debug\\\\n";\n#else\n    std::cout << "release\\\\n";\n#endif\n}	code	cpp
1467	1	#include <fstream>	text	txt
1467	2	int main()\n{\n    int data{0};\n    std::ofstream file("/tmp/sample.txt");	text	txt
1467	3	    if (file.is_open())\n    {\n        file.write(data);\n    }	text	txt
1467	4	    file.close();\n}	code	txt
1468	1	#include <fstream>	text	txt
1468	2	int main()\n{\n    int data{0};\n    std::ofstream file("/tmp/sample.txt", std::ios::app);	text	txt
1468	3	    if (file.is_open())\n    {\n        file.write(data);\n    }	text	txt
1468	4	    file.close();\n}	code	txt
1469	1	#include <fstream>	text	txt
1469	2	int main()\n{\n    int data{0};\n    std::ofstream file("/tmp/sample.bin", std::ios::binary);	text	txt
1469	3	    if (file.is_open())\n    {\n        file.write(std::reinterpret_cast<char*>(data));\n    }	text	txt
1469	4	    file.close();\n}	code	txt
1470	1	#include <fstream>\n#include <vector>	text	txt
1470	2	int main()\n{\n    std::vector<int> data{1,2,3};\n    std::ofstream file("/tmp/sample.bin", std::ios::out | std::ios:bin);	text	txt
1470	3	    if (file.is_open())\n    {\n        file.write(std::reinterpret_cast<char*>(&data), data.size());\n    }	text	txt
1470	4	    file.close();\n}	code	txt
1471	1	#include <fstream>	text	txt
1471	2	int main()\n{\n    std::ifstream file("/tmp/sample.txt");	text	txt
1471	3	    if (file.is_open())\n    {\n        file.seekg(0, std::ios_base::end);\n        std::size_t length = file.tellg();\n        file.seekg(0, std::ios_base::beg);	text	txt
1471	4	        file.close();\n    }	text	txt
1471	5	    file.open("/tmp/sample.txt", std::ios::ate);	text	txt
1471	6	    if (file.is_open())\n    {\n        std::size_t length = file.tellg();\n        file.seekg(0, std::ios_base::beg);	text	txt
1471	7	        file.close();\n    }\n}	code	txt
1472	1	#include <fstream>\n#include <iostream>	text	txt
1472	2	int main()\n{\n    std::ifstream file("/tmp/sample.txt", std::ios::in);	text	txt
1472	3	    if (file.is_open())\n    {\n        file.seekg(0, std::ios_base::end);\n        std::size_t length = file.tellg();\n        file.seekg(0, std::ios_base::beg);	text	txt
1472	4	        std::vector<unsigned char> buffer;\n        buffer.resize(length);\n        file.read(reinterpret_cast<char*>(buffer.data(), length);	text	txt
1472	5	        if (!file.fail() || file.gcount() == length)\n            std::cerr << "complete\\\\n";	text	txt
1472	6	        file.close();\n    }\n}	code	txt
1473	1	typedef basic_ifstream<char>    ifstream;\ntypedef basic_ifstream<wchar_t> wifstream;\ntypedef basic_ofstream<char>    ofstream;\ntypedef basic_ofstream<wchar_t> wofstream;\ntypedef basic_fstream<char>     fstream;\ntypedef basic_fstream<wchar_t>  wfstream;	code	txt
1474	1	All constructors except default constructor, call `open()` internally	text	txt
1474	2	std::basic_fstream(const char*, std::ios_base::openmode);\nstd::basic_fstream(std::string const&, std::ios_base::openmode);\nstd::basic_fstream(std::filesystem::path::value_type const*, std::ios_base::openmode);\ntemplate <class Path> std::basic_fstream(Path const&, sdt::ios_base::openmode);	code	txt
1475	1	* `std::ios_base::app`\n* `std::ios_base::binary`\n* `std::ios_base::in`\n* `std::ios_base::out`\n* `std::ios_base::trunc`\n* `std::ios_base::ate`	text	txt
1476	1	#include <fstream>	text	txt
1476	2	int main()\n{\n    double buffer;\n    std::ifstream file("/tmp/sample.txt");	text	txt
1476	3	    if (file.is_open())\n    {\n        file.read(reinterpret_cast<char*>(buffer), std::sizeof(buffer));	text	txt
1476	4	        if (file.gcount == std::sizeof(buffer))\n            std::clog << "successfully read\\\\n";\n        else\n            std::clog << "failed to read completely\\\\n";	text	txt
1476	5	        file.close();\n    }\n}	code	txt
1477	1	#include <fstream>\n#include <string>	text	txt
1477	2	int main()\n{\n    std::string content{"this is a sample content"};\n    std::ofstream file("/tmp/sample.txt", std::ios::out);	text	txt
1707	4	MACHINE=beaglebone-yocto bitbake core-image-full-cmdline	code	bb
1477	3	    try {\n        if (file.is_open())\n        {\n            file.write(content);\n            file.close();\n        }\n    }\n    catch (std::ios_base::failure const& exp)\n    {\n        std::cerr << exp.what() << std::endl;\n    }\n}	code	txt
1466	1	void execute_command(char cmd)\n{\n    switch(cmd)\n    {\n        [[likely]] case 'a': /* add */ break;\n        [[unlikely]] case 'd': /* delete */ break;\n        case 'p': /* print */ break;\n        default: /* do something else */ break;\n    }\n}	code	cpp
1478	2	int main()\n{\n    std::vector<unsigned char> buffer;\n    std::ifstream file("/tmp/sample.txt", std::ios::in);	text	txt
1478	3	    if (file.is_open())\n    {\n        buffer = std::vector<unsigned char>(std::istreambuf_iterator<char>(file), std::ifstreambuf_iterator<char>());\n        file.close();\n    }\n}	code	txt
1479	1	#include <vector>\n#include <fstream>	text	txt
1479	2	int main()\n{\n    std::vector<unsigned char> buffer;\n    std::ifstream file("/tmp/sample.txt", std::ios::in | std::ios::ate);	text	txt
1479	3	    if (file.is_open())\n    {\n        std::size_t length = file.tellg();\n        file.seekg(0, std::ios_base::beg);	text	txt
1479	4	        buffer.reserve(length);\n        buffer.assign(std::ifstreambuf_iterator<char>(file), std::ifstreambuf_iterator());\n        file.close();\n    }\n}	code	txt
1480	1	#include <algorithm>\n#include <fstream>\n#include <string>\n#include <vector>	text	txt
1480	2	int main()\n{\n    std::vector<unsigned char> buffer;\n    std::ifstream file("/tmp/sample.txt", std::ios::in | std::ios::ate);	text	txt
1480	3	    if (file.is_open())\n    {\n        std::size_t length = file.tellg();\n        file.seekg(0, std::ios_base::beg);	text	txt
1480	4	        buffer.reserve(length);\n        std::copy(std::ifstreambuf_iterator<char>(file), std::ifstreambuf_iterator<char>(), std::back_inserter(buffer));\n        file.close();\n    }\n}	code	txt
1481	1	- Modules are only imported once and the order they're imported in does not matter.\n- Modules do not require splitting interfaces and implementation in different source files, although this is still possible.\n- Modules reduce compilation time. The entities exported from a module are described in a binary file that the compiler can process faster than traditional precompiled headers.\n- Exported files can potentially be used to build integrations with C++ code from other languages.	text	txt
1484	1	- The **global module fragment**, introduced with a `module;` statement. This\n  part is optional and, if present, may only contain preprocessor directives.\n  Everything that is added here is said to belong to the *global module*,\n  which is the collection of all the global module fragments and all\n  translation units that are not modules.	text	txt
2726	1	* `make install`\n* `make modules_install`\n* `make headers_install`\n* `make dtb_install`	text	txt
2727	1	make install	code	txt
4156	2	- have a name\n- have external linkage	text	txt
1484	2	- The **module declaration**, which is a required statement of the form\n  `export module name;`.\n- The **module preamble**, which is optional, and may only contain import\n  declarations.\n- The **module purview**, which is the content of the unit, starting with the\n  module declaration and extending to the end of the module unit.	text	txt
1485	1	The source code of a module may become large and difficult to maintain.\nMoreover, a module may be composed of logically separate parts. To help with\nscenarios like that, modules support composition from parts called\n**partitions**.	text	txt
1485	2	Although module partitions are distinct files, they are not available as\nseparate modules or submodules to translation units using a module. They are\nexported together as a single, aggregated module.	text	txt
1483	1	Export a module by creating a **Module Interface Unit (MIU)** that can\ncontain functions, types, constants, and even macros.	text	txt
1487	1	Apart from *module interface partition*, there could also be internal\npartitions that do not export anything. Such partition unit is called a\n**module implementation partition**.	text	txt
1487	2	It is possible to create internal partitions that do not export anything, but\ncontain code that can be used in the same module.	text	txt
1486	1	A module unit that is a partition that exports entities is called a **module\ninterface partition**.	text	txt
1486	2	Here the `geometry-core.cppm` and `geometry-literals.cppm` are internal partitions.	text	txt
1486	5	In the primary module interface unit, import and then export the partitions\nwith statements of the form `export import :partitionname`.	text	txt
1486	7	The code importing a module composed from multiple partitions only sees the\nmodule as a whole if it was built from a single module unit:	text	txt
1489	1		code	txt
1490	1	Poky is the default Yocto Project reference distribution, which uses\nOpenEmbedded build system technology.	text	txt
1491	1	It is composed of a collection of tools, configuration files, and recipe data\n(known as metadata).	text	txt
1491	2	|Poky Build Tool|\n|---|\n|BitBake Tool (bitbake)|\n|OpenEmbedded Core (meta)|\n|Poky Distribution Metadata (meta-poky)|\n|Yocto Project Reference BSP (meta-yocto-bsp)|	text	txt
1491	3	It is platform-independent and performs cross-compiling using the BitBake\ntool, OpenEmbedded Core, and a default set of metadata.	text	txt
1491	4	In addition, it provides the mechanism to build and combine thousands of\ndistributed open source projects to form a fully customizable, complete, and\ncoherent Linux software stack.	text	txt
1492	1	BitBake is a task scheduler and execution system that parses Python and Shell\nScript code. The code that is parsed generates and runs tasks, which are a\nset of steps ordered per the code’s dependencies.	text	txt
1492	2	BitBake evaluates all available metadata, managing dynamic variable\nexpansion, dependencies, and code generation. In addition, it keeps track of\nall tasks to ensure their completion, maximizing the use of processing\nresources to reduce build time and predictability.	text	txt
1492	3	The source code is in the `bitbake` subdirectory of Poky.	text	txt
1493	1	The OpenEmbedded Core metadata collection provides the engine of the Poky\nbuild system. It provides the core features and aims to be generic and as\nlean as possible. It supports seven different processor architectures (ARM,\nARM64, x86, x86-64, PowerPC, PowerPC 64, MIPS, MIPS64, RISC-V32, and RISC-V\n64), only supporting platforms to be emulated by QEMU.	text	txt
1493	2	The OpenEmbedded Core houses its metadata inside the `meta` subdirectory of\nPoky.	text	txt
1494	1	The metadata includes recipes and configuration files. It is composed of a\nmix of Python and Shell Script text files, providing a tremendously flexible\ntool. Poky uses this to extend OpenEmbedded Core and includes two different\nlayers, which are other metadata subsets, shown as follows:	text	txt
1494	2	- `meta-poky`: This layer provides the default and supported distribution\n  policies, visual branding, and metadata tracking information (maintainers,\n  upstream status, and so on). This is to serve as a curated template that\n  could be used by distribution builders to seed their custom distribution.\n- `meta-yocto-bsp`: This provides the Board Support Package (BSP) used as the\n  reference hardware for the Yocto Project development and Quality Assurance\n  (QA) process.	text	txt
1495	1	The Yocto Project has a release every six months, in April and October.	text	txt
1495	2	The support for the stable release is for 7 months, offering 1 month of\noverlapped support for every stable release. The LTS release has a minimal\nsupport period of 2 years, optionally extended. After the official support\nperiod ends, it moves to Community support and finally reaches End Of Life\n(EOL).	text	txt
1495	3	`Initial Release -> Stable Release -> Community -> End of Life`	text	txt
1496	1	Poky is the default Yocto project reference distribution, which uses OpenEmbedded build system technology.	text	txt
1496	2	It is composed of a collection of tools, configuration files, and recipe data (known as metadata).	text	txt
1497	1	The code that is parsed generates and runs tasks, which are a set of steps ordered per the code's dependencies.	text	txt
1497	2	`bitbake` is a task scheduler and execution system that parses Python and Shell Script code.	text	txt
1498	1	Bitbake evaluates all available metadata, managing dynamic variable expansion, dependencies, and code generation.	text	txt
1498	2	It also minimizes the use of processing resources to reduce build time.	text	txt
1499	1	It's a metadata collection providing core features for seven processor architectures, only supporting their emulation on QEMU.	text	txt
2026	2	void do_something() { }	text	txt
1488	1	Partitions are division of a module. However, they are not submodules. They\ndo not logically exist outside of the module. There is no concept of a\nsubmodule in the C++ language.	text	txt
1500	2	Poky uses this to extend OpenEmbedded Core and includes two layers: `meta-poky` and `meta-yocto-bsp`.	text	txt
1502	1	source oe-init-build-env <build-directory>	code	txt
1503	1	*config/local.conf*\nMACHINE ??= "qemux86-64"	code	txt
1504	1	git clone https://git.yoctoproject.org/git/poky.git --branch kirkstone	code	sh
1505	1	source oe-init-buid-env [build-directory=build]	code	sh
1509	1	This configuration file is a convenient way to override several global default configurations throughout the yocto tools.	text	txt
1510	1	MACHINE ??= "qemux86-64"	code	conf
1500	1	Metadata includes configuration files, which we call them recipes	text	txt
1511	1	ls meta*/recipes*/*images/*.bb	code	sh
1512	1	- `core-image-minimal`\n- `core-image-base`\n- `core-image-weston`\n- `core-image-x11`\n- `core-image-sato`\n- `core-image-full-cmdline`	text	txt
1513	1	bitbake <recipe>	code	sh
1513	2	bitbake core-image-minimal	code	sh
1514	1	OpenEmbedded Core layer in `poky/meta` provides `runqemu` to run a built image:	text	txt
1514	2	runqemu <machine> <zimage> <filesystem>	code	sh
1514	3	runqemu qemux86-64 bzImage-qemux86-64.bin filesystem-qemux86-64.ext4	code	sh
1514	4	Just running `runqemu` is enough to launch the image in the shell where the build environment is set.	text	txt
1514	5	runqemu	code	sh
1515	1	Toaster is a web interface to configure and run builds.	text	txt
1516	1	pip3 install --user -r poky/bitbake/toaster-requirements.txt	code	sh
1517	1	source poky/oe-init-build-env	code	sh
1517	2	source toaster start	code	sh
1517	3	The web service is now accessible through http://localhost:8000 .	text	txt
1517	4	Change default port:	text	txt
1517	5	source toaster start webport=9000	code	sh
1518	2	This file defines several layer properties, such as the layer name and priority.	text	txt
1519	1	- Configurations: `.conf` files\n- Classes: `.bbclass` files\n- Recipes: `.bb` and `.bbappend` files	text	txt
1520	1	The configuration files define the global content to provide information and configure how the recipes work.	text	txt
1521	1	Classes define the commonly used system's behavoir and provide the base methods.	text	txt
1521	2	Recipes can inherit classes based on requirements.	text	txt
1521	3	For example `kernel.bbclass` abstracts tasks related to building and packaging the kernel independent from version or vendor changes.	text	txt
1522	1	- `BBPATH`: list of paths to search for metadata files\n- `BBFILES`: pattern used to index the collection recipe files\n- `BBFILE_COLLECTIONS`: create a new metadata collection with given name\n- `BBFILE_PATTERN_<layer>`: define the rule to match all paths with given pattern\n- `BBFILE_PRIORITY_<layer>`: establish the priority against the other metadata collections\n- `LAYERDEPENDS_<layer>`: add dependencies to given layer\n- `LAYERVERSION_<layer>`: specify layer version	text	txt
1522	2	BBPATH =. "${LAYERDIR}::"\n\nBBFILES += "${LAYERDIR}/recipes-*/*/*.bb ${LAYERDIR}/recipes-*/*/*.bbappend"\n\nBBFILE_COLLECTIONS += "yocto"\nBBFILE_PATTERN_yocto = "^${LAYERDIR}/"\nBBFILE_PRIORITY_yocto = "5"\n\nLAYERVERSION_yocto = "3"\nLAYERDEPENDS_yocto = "core"\n\nREQUIRED_POKY_BBLAYERS_CONF_VERSION = "2"	code	bb
1523	1	Bitbake parses `build/conf/bblayers.conf` file to list the layers considered in the build environment. After parsing all the layers in use, bitbake starts to parse `build/conf/local.conf` file to load global metadata configurations.	text	txt
1524	2	POKY_BBLAYERS_CONF_VERSION = "2"\nBBPATH = "${TOPDIR}"\nBBFILES ?= ""\nBBBLAYERS ?= "/opt/poky/meta /opt/poky/meta-poky /opt/poky/meta-yocto-bsp"	code	bb
1525	1	Bitbake first iterates through the layers specified in `BBLAYERS` in `build/conf/bblayers.conf` and load the content of each layer to the metadata collection. Dependent layers must be loaded before parsing the metadata.	text	txt
1525	2	POKY_BBLAYERS_CONF_VERSION = "2"\nBBBPATH = "${TOPDIR}"\nBBFILES ?= ""\nBBBLAYERS ?= "/opt/poky/meta /opt/poky/meta-poky /opt/poky/meta-yocto-bsp"	code	bb
1525	3	Layers will be loaded from left to right in the order.	text	txt
1526	1	Bitbake first loads `poky/meta/conf/bitbake.conf` from one of the paths listed in `BBPATH` which includes other metadata such as architecture specific metadata, machine configuration files, and `poky/meta/conf/layer.conf` file using `include` directive.	text	txt
5502	1	`ftxui::borderHeavy` is similar to the light border but with thicker lines.	text	md
1526	2	POKY_BBLAYERS_CONF_VERSION = "2"\nBBBPATH = "${TOPDIR}"\nBBFILES ?= ""\nBBLAYERS ?= "/opt/poky/meta /opt/poky/meta-poky /opt/poky/meta-yocto-bsp"	code	bb
1527	1	- Build time dependency\n- Execution time dependency\n- Task dependency	text	txt
1527	2	Build time dependencies usually happen when a package needs other packages to be used.	text	txt
1527	3	Runtime or execution dependencies include fonts, icons, translations, and dynamically shared libraries.	text	txt
1527	4	Task dependencies happen inside recipes where each task should be completely done before another begins.	text	txt
1528	1	Recipes with `-native` suffix are aimed to be run during the build process on host system, and they will not be deployed into the target.	text	txt
1529	1	Recipes express build time dependencies with the `DEPENDS` variable, and runtime dependencies with the `RDEPENDS` variable.	text	txt
1529	2	Every recipe included in the runtime dependencies is also added to the build list. They need to be ready for use so that the resulting binary packages are installable. This will be required when building images or populating feeds.	text	txt
1530	1	For a recipe to signal bitbake that it can fulfill a functionality or characteristic requirement, it must use the `PROVIDES` keyword.	text	txt
1530	2	The `virtual/kernel` provider is an example of a provider that satisfies each recipe that requires the kernel to be built. Each dependent recipe should add `virtual/kernel` to the `DEPENDS` list.	text	txt
1530	3	DEPENDS = "virtual/kernel"	code	bb
1531	1	When two or more recipes can provide the same functionality, we can make one preferred over the others using `PREFERRED_PROVIDER` keyword.	text	txt
1531	2	PREFERRED_PROVIDER_virtual/kernel = "linux-custom"	code	bb
1592	1	string append and prepend operators `:=`, `=:` are immediate operators. But the `:append` and `:prepend` operators queue the operation for execution.	text	txt
1532	1	- Every recipe with the `<name>_<version>.bb` filename provides, because every recipe provides itself by default.\n- Every recipe that assigns the name of the functionality that it provides in `PROVIDES` variable.	text	txt
1532	2	Bitbake raises an error when a dependency cannot be satisfied due to a missing provider.	text	txt
1533	1	The `virtual/` namespace is the convention adopted when we have a set of commonly overriden providers.	text	txt
1533	2	PREFERRED_PROVIDER_virtual/kernel = "linux-custom"	code	bb
1534	1	Bitbake uses the highest version by default.	text	txt
4156	3	Names of namespaces containing export declarations are implicitly exported as\nwell.	text	txt
2364	3	\\{(x, f(x)) | x \\in D\\}	code	tex
1510	2	conf/local.conf	code	sh
1535	1	We can force bitbake to use a different version by using `PREFERRED_VERSION` keyword. This is common in BSPs where vendors may use specific versions for a specific board.	text	txt
1535	2	PREFERRED_VERSION = "3.20.0"	code	bb
1536	1	We can avoid using development or unreliable recipe version by lowering the default version preference in a recipe:	text	txt
1536	2	DEFAULT_PREFERENCE = "-1"	code	bb
1536	3	Even if the version is higher, the recipe is not choosen without `PREFERENCE_VERSION` being explicitly set to use it.	text	txt
1537	1	Bitbake offers support for many different fetcher modules that allow the retrieval of tarball files and several SCM systems like Git, FTP, NPM, SSH, etc.	text	txt
1537	2	Many protocols are supported by fetcher module like http, https, git, etc.	text	txt
1538	1	`SRC_URI` contains file address. `PV` will be expanded to package name, and the file will be stored in the path held by `DL_DIR` variable. After download, the checksum from artifact will be compared with the value held by `SRC_URI[sha256sum]` variable.	text	txt
1538	2	SRC_URI = "http://pm-utils.freedesktop.org/releases/pm-utils-${PV}.tar.gz"\nSRC_URI[sha256sum] = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"	code	bb
1539	1	After downloading, bitbake creates `${DL_DIR}/<package>-<version>.<extension>.done` file to mark the archive as successfully downloaded and checked, allowing bitbake to reuse it.	text	txt
1540	1	By default, the `DL_DIR` variable points to `build/downloads`. We can override it in `build/conf/local.conf` file:	text	txt
1540	2	DL_DIR = "/opt/downloads"	code	bb
1540	3	Using this, we can share the same download cache among several build directories, thus saving download time and bandwidth.	text	txt
1541	1	Git repositories are identified by bitbake and they will be downloaded in `${DL_DIR}/git2/<git-url>` directory for each repository.	text	txt
1541	2	SRCREV = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"\nSRC_URI = "git://github.com/lz4/lz4.git;branch=release;protocol=https"	code	bb
1541	4	This method, avoids conflicts between the same project but provided by another repository.	text	txt
1542	1	- The task `do_fetch` uses this variable to ensure the repository has the required git revision\n- The task `do_unpack` uses this variable to set up the working directory with the necessary source revision	text	txt
1543	1	SRC_URI = "git://github.com/lz4/lz4.git;branch=release;protocol=https"	code	bb
1543	2	SRC_URI = "git://github.com/lz4/lz4.git;nobranch=1;protocol=https"	code	bb
1544	1	- To provide a centrally preferred server for download\n- To provide a set of fallback servers	text	txt
1545	1	- Local download directory defined by `DL_DIR` variable in a recipe\n- Mirrors specified in `MIRRORS` variable in `build/conf/local.conf` file\n- Local servers to reduce download or override blocked paths in the internet defined by `PREMIRRORS` variable in `build/conf/local.conf` file	text	txt
1546	2	PREMIRRORS = " \\\ncsv://.*/.*     https://localserver \\\nsvn://.*/.*     https://localserver \\\ngit://.*/.*     https://localserver \\\ngitsm://.*/.*   https://localserver \\\nhg://.*/.*      https://localserver \\\nbzr://.*/.*     https://localserver \\\np4://.*/.*      https://localserver \\\nosc://.*/.*     https://localserver \\\nhttps://.*/.*   https://localserver \\\nftp://.*/.*     https://localserver \\\nnpm://.*/.*     https://localserver \\\ns3://.*/.*      https://localserver"	code	bb
1546	3	The use of `PREMIRRORS` is so common that there is a class to make its configuration easier.	text	txt
1546	4	Inherit the `own-mirror` class and then set the `SOURCE_MIRROR_URL` variable to the local server address in any global configuration file such as `build/conf/local.conf` file.	text	txt
1546	5	INHERIT += "own-mirrors"\nSOURCE_MIRROR_URL = "https://localserver"	code	bb
1546	6	If the desired component is unavailable in the source mirror, bitbake falls back to the `MIRRORS` variable.	text	txt
1547	1	Override `DL_DIR` in a global configuration file such as `build/conf/local.conf` to outside of build directory:	text	txt
1547	2	DL_DIR = "/opt/downloads"	code	bb
1547	3	It is encouraged to enable the tarball generation for the SCM backends in the download foler in `build/conf/local.conf` file:	text	txt
1547	4	BB_GENERATE_MIRROR_TARBALLS = "1"	code	bb
1548	2	BB_NO_NETWORK = "1"	code	bb
1549	1	bitbake <recipe> -c <task>	code	sh
1550	1	bitbake <recipe> -c listtasks	code	sh
1551	1	A unit of work, usually written as a bash, or python function inside a recipe file, having only one responsibility.	text	txt
1552	1	- `do_fetch`: downloads source files and archives\n- `do_unpack`: unpacks the source code or checks the requested revision or branch in case of SCM\n- `do_patch`: adapts source code by applying patches\n- `do_configure`: runs configuration when possible\n- `do_compile`: builds when possible\n- `do_install`: copies build artifacts when possible\n- `do_package`: packs resulting artifacts	text	txt
1553	1	- `build/conf`: contains configuration files to control poky and bitbake\n- `build/downloads`: contains all downloaded artifacts\n- `sstate-cache`: contains snapshots of the packaged data to speed up future builds\n- `tmp`: contains temporary build directory	text	txt
1554	1	The temporary build directory `build/tmp` is created just after the build starts, and it is essential to identify why something does not behave as expected.	text	txt
1571	1	`rootfs` is a directory with the desired packages installed, with the required tweaks applied afterward. The tweaks can be when building a development image, `rootfs` is adjusted to allow us to log in as `root` without a password.	text	txt
1592	2	A = "build"\nA:append = "/work"\nA = "build/tmp"\n# A == "build/tmp/work"	code	bb
2029	1	#include <thread>	text	txt
1554	2	- `build/tmp/deploy`: contains images, binary packages, and sdk installers\n- `build/tmp/sysroot-components`: contains a representation of `recipes-sysroot` and `recipes-sysroot-native` which allows bitbake to know where each component is installed\n- `build/tmp/sysroot-uninative`: contains glibc which is used when native utilities are generated\n- `build/tmp/work`: contains the working source code, task configurations, execution logs, and contents of generated packages\n- `build/tmp/work-shared`: contains the gcc and kernel source code to be shared between recipes	text	txt
2379	2	p(x) = a_nx^n + a_(n-1)x^(n-1) + ... + a_1x + a_0	code	tex
1541	3	Above repository will be downloaded into `${DL_DIR}/git2/github.com.lz4.lz4.git` directory.	text	txt
1555	1	- `do_fetch`: may modify the build directory by using cached downloaded copy of the source code or performs the download into `build/downloads`\n- `do_unpack`: preparing source code by unpacking or cloning a locally cached git directory happens in `build/tmp/work`\n- `do_configure`, `do_build`: building happens in `build/tmp/work`\n- `do_install`: build artifacts are installed in the staging directory `build/tmp/work/.../image` and the artifacts required for cross-compilation like libraries and headers are copied and modified in `build/tmp/work/.../recipe-sysroot` and `build/tmp/work/.../recipe-sysroot-native`\n- `do_pack` packages are generated using the installed contents provided in different formats `.rpm`, `.ipk`, `.deb`, `.tar`	text	txt
1556	1	The `build/tmp/work` directory is organized by architecture to allow building system images and packages for multiple machines and architectures within one build directory without conflicts.	text	txt
1556	2	This directory is useful for troubleshooting. It is organized in subdirectories with following pattern:	text	txt
1556	4	In each of these directories, exist a few subdirectories with specific purposes:	text	txt
1556	5	- `build/tmp/work/<architecture>/<recipe>/<version>/<sources>`: extracted source code of the software to be built, `WORKDIR` variable points to this directory\n- `build/tmp/work/<architecture>/<recipe>/<version>/image`: contains the files installed by the recipe\n- `build/tmp/work/<architecture>/<recipe>/<version>/{package,packages-split}`: contains the extracted contents of output packages\n- `build/tmp/work/<architecture>/<recipe>/<version>/temp`: contains bitbake task code and execution logs\n- `build/tmp/work/<architecture>/<recipe>/<version>/recipe-sysroot`: an individual and isolated environment ensuring reproducibility and avoid contamination with the host packages	text	txt
1557	2	INHERIT += "rm_work"	code	bb
1558	1	For each recipe, inside the `WORKDIR/recipe-sysroot/sysroot-providers` directory, there is a list of providers.	text	txt
1559	1	We should check whether the `sysroot` directory contains correct entries.	text	txt
1560	1	rpm, deb, ipk, tar	text	list
1561	1	The support for package formats is provided by `package_rpm`, `package_deb`, `package_ipk` classes:	text	txt
1561	3	PACKAGE_CLASSES ?= "package_rpm package_deb package_ipk"	code	bb
1561	4	Poky defaults to the RPM package format with `dnf` package manager. OpenEmbedded Core detauls to the IPK with `opkg` package manager.	text	txt
1562	1	- `preinst`: stops running services for installation or upgrade\n- `postinst`: completes required configurations after package unpacking\n- `prerm`: stops daemons before removing files associated with the package\n- `postrm`: commonly modifies links or other files created by the package	text	txt
1562	2	The post package installation scripts run during the root filesystem creation.	text	txt
1562	3	pkkg_postinst:${PN} () {\n    # commands\n]	code	bb
1562	4	All post-installation scripts must succeed when generating `read-only-rootfs` in `IMAGE_FEATURES`. Because the filesystem is read-only and cannot be written into after creation.	text	txt
1563	1	To ensure the `postinst` runs inside the target device itself, we can add `_ontarget` postfix to the script name:	text	txt
1563	2	pkg_postinst_ontarget:${PN} () {\n    # command\n}	code	bb
1564	1	`D` variable is set to the root of the working directory during `rootfs` generation.	text	txt
1564	2	It is important not to miss `D` variable in front of paths inside installation scripts.	text	txt
1564	3	pkg_postinst:${PN} () {\n    touch ${D}${sysconfigdir}/package.conf\n}	code	bb
1565	1	A common mistake is attempting to run target processses on the target architecture. One solution is to postpone the script execution to the target:	text	txt
1565	2	pkg_postinst_ontarget:${PN} () {\n    # commands\n}	code	bb
5481	2	#include <ftxui/screen/screen.hpp>\n#include <ftxui/screen/color.hpp>\n\nint main()\n{\n    ftxui::Screen screen{ftxui::Screen::Create(ftxui::Dimension::Full())};\n    screen.Print();\n}	code	cpp
1566	1	The default behavior of poky is to build everything from scratch, unless bitbake determines that a recipe does not need to be rebuilt. Bitbake tracks as much information as possible about every task, variabke, and piece of code used in the build process. Bitbake then generates a checksum for the information used by every task, including dependencies from other tasks. Poky stores snapshots of this information provided by bitbake as a set of packaged data, generated in a cache called `sstate-cache`. This cache wraps the contents of each task output in packages stored in the `SSTATE_DIR` directory. Bitbake checks the existence of a `sstate-cache` package that matches the required computed checksum and in presence, uses the prebuilt package.	text	txt
1567	1	./poky/scripts/sstate-cache-management.sh --remove-duplicate -d --cache-dir=<sstate-cache>	code	sh
1568	1	To rebuild, either remove `build/tmp` so that we can use `sstate-cache` to speed up the build, or remove both `build/tmp` and `sstate-cache` so that no cache is reused during the build.	text	txt
1568	2	rm -r build/tmp	code	sh
1568	3	rm -r build/sstate-cache	code	sh
1569	1	${PE}:${PV}-${PR}	code	bb
1569	2	`PV` is simply the project version.	text	txt
1569	3	`PE` represents package epoch which defaults to 0 but changes when version schema changes in a project. For example, a project uses `20241223` as version but in its next releases uses `1.0`. Because there is no way to compare `20241223` with `1.0`, we should increment `PE` to 1 so that `1:1.0` becomes a higher value than `0:20241223`, thus recipe rebuilds.	text	txt
1569	4	`PR` defaults to `r0` and is part of package versioning. When updated, it forces bitbake to rebuild all tasks of a specific recipe. We rarely need to update it.	text	txt
1570	1	- `RDEPENDS`: list of packages must be available at runtime\n- `RPROVIDES`: list of symbolic names a package provides\n- `RCONFLICTS`: list of packages known to conflict with the package\n- `RREPLACES`: list of symbolic names that the package can replace	text	txt
1570	2	By default a package always includes the package name as a symbolic name.	text	txt
1593	1	A = "1 2 3 4"\nA:remove = "2"\n# A == "1 3 4"	code	bb
2029	2	void do_work() { }	text	txt
1572	1	The list of packages are defined by a union of packages listed by `IMAGE_INSTALL` and the packages included with `IMAGE_FEATURES`. Packages to be excluded from installation is listed in `PACKAGE_EXCLUDE` variable.	text	txt
1573	1	`IMAGE_FSTYPES` lists the filesystems to be generated, e.g. ext4, ubifs, etc.	text	txt
2752	1	You can find modprobe configuration file in `/etc/modprobe.d/` directory.	text	txt
2752	2	*/etc/modprobe.d/usb-storage.conf*\noptions usb-storage delay_use=0	code	txt
1574	1	After the packages in `IMAGE_INSTALL` and `IMAGE_FEATURES` excluded by `PACKAGE_EXCLUDE` are listed, `do_rootfs` subtask runs to unpack and configure the packages and required dependencies into the `rootfs` directory. When `rootfs` contents unpacked, the non-target post-installation scripts of the referred packages must run to avoid the penalty of running them during first boot. Then, the directory is ready to generate the filesystem. `IMAGE_FSTYPES` lists the filesystems to be generated, e.g. ext4, ubifs, etc. Generated image file is placed in `build/tmp/deploy/image/<machine>/`.	text	txt
1575	1	After system installation, packages are installed from a local repository instead of building packages inside the image during image generation.	text	txt
1575	2	`do_rootfs` uses a local repository to fetch binary packages when generating images and sdks. This repository is known as a package feed.	text	txt
1576	1	Images and SDKs rely on packages. So they feed from this repository which can be available internally in our development environment or publicly.	text	txt
1576	2	By using package feeds, we can easily test an updated application during the development stage without complete system re-installation.	text	txt
1576	3	We can make additional packages and install them in a running image. We can also uppdate products in the field.	text	txt
1577	1	It is vital to produce a solid package feed. We must ensure that we have consistent increments in the package revision every time a package is changed. Pr service is part of bitbake and is used to increment `PR` without human interaction every time bitbake detects a checksum change in a task. It injets a suffix in `PR` in `${PR}.X` format like `r34.1`, `r34.2`, `r34.3` and so on.	text	txt
1578	1	By default, the PR service is disabled. We can enable it to run locally by adding the `PRSERV_HOST` variable in a global configuration file.	text	txt
1578	3	PRSERV_HOST = "localhost:0"	code	bb
1578	4	With multiple computers working against a shared package feed, we must have a single PR service running used by all building systems associated with the package feed. In this case, we start the PR service in the server using `bitbake-prserv` command:	text	txt
1578	5	bitbake-prserv --host <ip> --port <port> --start	code	sh
1578	6	In addition, we need to update the bitbake configuration file of each build system and assign the PR service address to `PRSERV_HOST` variable.	text	txt
1578	7	PRSERV_HOST = "package_feed:9000	code	bb
1579	1	The set of packages offered by the package feed is determined by the recipes we build. Once satisfied with the packages offered, we must create the package index provided by the package feeds.	text	txt
1579	2	bitbake package-index	code	sh
1579	3	We must run this command after building all packages, otherwise the package index will not include a correct path to packages.	text	txt
1580	1	The packages are available inside the `build/tmp/deploy` directory. Depending on the package format, we must choose the respective sub-directory, e.g. `build/tmp/deploy/rpm`.	text	txt
1581	1	We need to add `package-management` to `EXTRA_IMAGE_FEATURES` and set the URI for package fetching on `PACKAGE_FEED_URIS` in one of the global configuration files.	text	txt
1581	2	EXTRA_IMAGE_FEATURES += "package-management"\nPACKAGE_FEED_URIS = "package_feed:9000"	code	bb
1581	3	The `PACKAGE_FEED_URIS` and `EXTRA_IMAGE_FEATURES` configurations guarantee that the image on the client side can access the server and has the utilities needed to install, remove, and upgrade its packages.	text	txt
1581	4	dnf check-update	code	sh
1581	5	dnf search <package>	code	sh
1581	6	dnf install <package>	code	sh
1581	7	dnf upgrade	code	sh
1582	1	Metadata covers three major areas:	text	txt
1707	5	After the build process is over, the image will be available inside the `build/tmp/deploy/images/beaglebone-yocto/` directory. The file we want to use is `core-image-full-cmdline-beaglebone-yocto.wic.`	text	txt
1582	2	- **Configuration:** `.conf` files define global content that configures how the classes and recipes will work\n- **Classes:** `.bbclass` files can be inherited for easier maintenance and code reuse\n- **Recipes:** `.bb` or `.bbappend` files describe the tasks to be run and allow bitbake to generate the required task chain, the mostly common used metadata	text	txt
1583	1	Classes and recipes use a mix of Python and Shell Script code.	text	txt
1584	1	bitbake --environment openssl	code	sh
1584	2	bitbake -e openssl	code	sh
1585	1	VARIABLE = "VALUE"	code	bb
1586	1	A = "value"\nB = "before-${A}-after"	code	bb
1587	1	In poky, variables have lazy expansion, meaning that they will only be expanded when used:	text	txt
1587	2	A = "value"\nB = "before-${A}-after"\n# B == "before-value-after\nA = "empty"\n# B == "before-empty-after	code	bb
1588	1	There is a syntax for assigning value to a variable when it does not already have a value:	text	txt
1588	2	A ?= "second-value"\nA = "first-value"\n# A == "first-value"	code	bb
1588	3	There is another assignment that represents a default value for scenarios that even `?=` is not used for a variable:	text	txt
1588	4	A ??= "default"\nA ?= "second"\n# A == "second"\nA ?= "thid"\n# A == "second"\nA = "first"\n# A == "first"	code	bb
1588	5	These assignments are used to ensure that even if a recipe does not reassign a variable, the variable still holds a valid value.	text	txt
1589	1	The `:=` operator can be used to assign a value with forced expansion by the time of assignment. There will be no further expansion on variable usage.	text	txt
1589	2	A = "value"\nB := "before-${A}-after"\nA = "change"\n# B == "before-value-after"	code	bb
1590	1	`+=` operator is known as list appending, adds a new value after the original one, separated with a space.	text	txt
1590	2	A = "2 3 4"\nA += "5"\n# A == "2 3 4 5"	code	bb
1590	3	`=+` operator is known as list prepending, adds a new value before the original one, separated with a space.	text	txt
1590	4	A = "2 3 4"\nA =+ "1"\n# A == "1 2 3 4"	code	bb
1591	1	String operators are similar to list append and prepend operators, with exception of space separation between values:	text	txt
1591	2	A = "build/tmp/work"\nA := "/opt/"\n# A == "/opt/build/tmp/work"	code	bb
1591	3	A = "build/tmp"\nA =: "/work"\n# A == "build/tmp/work"	code	bb
2030	2	void task() { }	text	txt
1593	2	Any appending and prepending operation is executed before remove operator is applied.	text	txt
1594	1	The `OVERRIDES` variable contains colon separated values evaluated from left to right, making conditional metadata possible.	text	txt
1594	2	OVERRIDES = "linux:arm:beaglebone"	code	bb
1595	1	OVERRIDES = "linux:arm:beaglebone"\nA = "general value"\nA:linux = "linux specific value"\nA:arm = "ARM specific value"\nA:beaglebone = "beaglebone specific value"	code	bb
1596	1	OVERRIDES = "linux:arm:beaglebone"\nA = "gcc"\nA:append:linux = "-linux"\nA:append:arm = "-arm"\nA:append:beaglebone = "-beaglebone"	code	bb
1597	1	Bitbake provides two directives: `include` and `require`	text	txt
1597	2	include "beaglebone.inc"	code	bb
1597	3	require "beaglebone.inc"	code	bb
1597	4	`include` locates the file in `BBPATH`. `require` raises `ParseError` when file cannot be found.	text	txt
1598	1	A = "${@time.strftime('%Y%m%d', time.gmtime())}"	code	bb
1598	2	The command can also be a call to a function defined inside the recipe.	text	txt
1599	1	do_something() {\n    echo "some value"\n}	code	bb
1599	2	Task code must be POSIX compatible, therefore cannot have Bash or Zsh specific features.	text	txt
1600	1	python do_something() {\n    print("some value")\n}	code	bb
1601	1	Use `d` as the last argument of a function to get access to global values visible to bitbake:	text	txt
1601	2	def get_depends(d):\n    if d.getVar('SOME_CONDITION'):\n        return "dependency-with-condition"\n    return "dependency"\n\nSOME_CONDITION = "1"\nDEPENDS = "${@get_depends(d)}"	code	bb
1602	1	A given class name is located by searching for `classes/<class>.bbclass` in `BBPATH`.	text	txt
1602	2	inherit autotools	code	bb
1603	1	A toolchain is often composed of cross-platform tools including compilers, linkers, debuggers, external libraries, headers and binaries executed on one architecture, which then produce a binary for use in another architecture. Even if build and architecture of the host and the target be the same, but the target binary use a staged root filesystem to find its dependencies, it is still a cross-compilation build. But when target binary rely on dependencies from the same host on which the tool runs, this is called a native build.	text	txt
1604	1	A software development kit is the combination of a toolchain and a set of files to develop and debug applications for a target. The yocto project can be used for development and image creation, this is possible by generating SDKs.	text	txt
1605	1	The development image needs header files and libraries, and the toolchain.	text	txt
1605	3	EXTRA_IMAGE_FEATURES += "dev-pkgs tools-sdk"	code	bb
1605	4	`dev-pkgs` installs development packages, and `tools-sdk` installs the toolchain that runs on the target device.	text	txt
1606	1	- **Standard SDK:** provides a toolchain and debugging applications for development in the target device\n- **Extensible SDK:** allows the installation of extra packages inside the SDK's sysroot directory, as well as recipe and application integration inside a project, includes `devtool`	text	txt
1607	1	An image-based SDK provides toolchains defined in an image tailored to the product. A generic SDK can also be generated without image integrations, but they are mostly used for kernel and bootloader development and debugging processes.	text	txt
1608	1	bitbake meta-toolchain	code	sh
1610	1	An standard SDK is wrapped in an installation script that can be executed in the same manner as any other script:	text	txt
1610	2	./build/tmp/deploy/sdk/<sdk>.sh	code	sh
1610	3	Right after execution, path to the SDK installation must be given, then the environment is ready to be used. To use the SDK in a new shell session later, we need to source the environment setup script in the given installation path, e.g. `/opt/poky/<version>`:	text	txt
1610	4	source /opt/poky/<version>/environment-setup-<meta>	code	sh
1611	1	The standard SDK matches the machine architecture in `MACHINE` variable inside `build/conf/local.conf`.	text	txt
1612	1	Assuming the SDK is installed in `/opt/poky/<version>/`:	text	txt
1612	2	source /opt/poky/<version>/environment-setup-<meta>	code	sh
1612	3	$CC main.cpp -o program	code	sh
1613	1	Assuming the SDK is installed in `/opt/poky/<version>/`:	text	txt
1613	2	source /opt/poky/<version>/environment-setup-<meta>	code	sh
1613	3	unset LDFLAGS	code	sh
1613	4	make defconfig	code	sh
1613	5	make bzImage	code	sh
1614	1	bitbake core-image-minimal -c populate_sdk_ext	code	sh
1614	2	The resulting files are in `build/tmp/deploy/sdk/`.	text	txt
1615	1	build/tmp/deploy/sdk/<sdk>.sh	code	sh
1615	2	Right after execution, path to the SDK installation must be given, then the environment is ready to be used. To use the SDK in a new shell session later, we need to source the environment setup script in the given installation path, e.g. `~/sdk/`:	text	txt
1615	3	source ~/sdk/environment-setup-<meta>	code	sh
1616	1	The extensible SDK is a different way to deliver the same yocto project tools and metadata. It wraps together a set of binaries for the environment execution, a standard SDK for development, a shared state cache to reduce local builds, and a snapshot of the metadata and configuration.	text	txt
1616	2	Essentially, the extensible SDK is a snapshot of the environment used to create it. Therefore, all `devtool` commands are available inside this environment.	text	txt
1617	1	Assuming the extensible SDK is installed in `~/sdk/`:	text	txt
1617	2	source ~/sdk/environment-setup-<meta>	code	sh
1617	3	devtool build-image core-image-minimal	code	sh
1617	4	Generated files reside in `~/sdk/tmp/deploy/images/qemux86-64/`.	text	txt
1618	1	Assuming the extensible SDK is installed in `~/sdk/`:	text	txt
1618	2	source ~/sdk/environment-setup-<meta>	code	sh
1618	3	devtool runqemu core-image-minimal	code	sh
1619	1	Assuming the extensible SDK is installed in `~/sdk/`:	text	txt
1619	2	source ~/sdk/environment-setup-<meta>	code	sh
1619	3	devtool add https://github.com/OSSystems/bbexample	code	sh
1647	4	The `<layer>/recipe-*` directories.	text	txt
1995	5	```\naccount required pam_faillock.so\n``````	text	txt
1619	4	`devtool` creates a basic recipe file for the given repository. It creates a workspace with the package source and the needed metadata.	text	txt
1620	1	Assuming the extensible SDK is installed in `~/sdk/`:	text	txt
1620	2	source ~/sdk/environment-setup-<meta>	code	sh
1620	3	devtool add https://github.com/OSSystems/bbexample	code	sh
1620	4	devtool build bbexample	code	sh
1621	1	Assuming the extensible SDK is installed in `~/sdk/`:	text	txt
1621	2	source ~/sdk/environment-setup-<meta>	code	sh
1621	3	devtool add https://github.com/OSSystems/bbexample	code	sh
1621	4	devtool build bbexample	code	sh
1621	5	devtool deploy-target bbexample root@192.168.10.2	code	sh
1621	6	The application can now be executed on qemu.	text	txt
1622	1	Assuming the extensible SDK is installed in `~/sdk/`:	text	txt
1622	2	source ~/sdk/environment-setup-<meta>	code	sh
1622	3	For example, to have `libusb1` available:	text	txt
1622	4	devtool sdk-install -s libusb1	code	sh
1623	1	The extensible SDK can also be used as a `sstate-cache` mirror and extensible SDK server, but it requires some infrastructure setup.	text	txt
1624	1	1. Checking the build history by inheriting `buildhistory`\n2. Using `oe-pkgdata-util`\n3. Inspecting variables and their changes during build using `bitbake-getvar`\n4. Using `devshell`	text	txt
1625	1	Poky deals with many recipes and images or SDKs which have many dependencies and it gets really hard to keep track of them. `buildhistory` keeps a history of the contents of a build so that we can see the differences between next consequent builds.	text	txt
1626	1	INHERIT += "buildhistory"\nBUILDHISTORY_COMMIT = "1"	code	bb
1626	2	The `BUILDHISTORY_COMMIT` enables bitbake to create a new git commit in the `buildhistory` repository for every new package, image, or SDK build. Diff data is stored in `build/buildhistory` directory as text files.	text	txt
1627	1	The `buildhistory-diff` is the utility that can be used to check differences.	text	txt
1627	2	poky/scripts/buildhistory-diff	code	sh
1628	1	To inspect how the recipe's content has been split, we can use the `build/tmp/work/<arch>/<recipe>/<version>/packages-split/` directory. It contains a sub-directory for every sub-package and has its contents in the sub-tree.`	text	txt
1629	1	A common issue for build failures is lacking the required artifacts in the sysroot directory. The counterpart of the sysroot generation can be seen at `build/tmp/work/<arch>/<recipe>/<version>/sysroot-destdir/`.	text	txt
1630	1	`oe-pkgdata-util` helps us to inspect the built packages and related data. For example, after running `bitbake bluez5`, we can find all packages related to it:	text	txt
1630	2	oe-pkgdata-util list-pkgs | grep bluez	code	sh
1631	1	oe-pkgdata-util list-pkgs | grep bluez	code	sh
1632	1	oe-pkgdata-util find-path /usr/bin/rfcomm	code	sh
1633	1	oe-pkgdata-util package-info bluez5	code	sh
1634	1	oe-pkgdata-util list-pkg-files bluez5	code	sh
1635	1	|Python|Shell|Effect|\n|-|-|-|\n|bb.fatal|bbfatal|Displays error and interrupts the build|\n|bb.error|bberror|Displays error but does not force build to stop|\n|bb.warn|bbwarn|Warns by logging|\n|bb.note|bbnote|Prints a note to the user|\n|bb.plain|bbplain|Prints plain text|\n|bb.debug|bbdebug|Prints debugging information shown depending on the debug level|	text	txt
1636	1	Python logs are stored in `build/tmp/log/cooker/<machine>`, Shell logs are stored in `build/tmp/work/<arch>/<recipe>/<version>/temp`.	text	txt
1636	2	Every task logs in `run.<task>.<pid>` filename. There is a link for each last run with `run.<task>` filename, for example `run.do_compile`.	text	txt
1637	1	bitbake-getvar	code	sh
1638	1	bitbake-getvar -r procps PACKAGECONFIG	code	sh
1639	1	A development shell can be used to edit packages and debug build failures. All the environment variables needed for the build ara available in the new terminal, so we can use commands like `configure` and `make`. `devshell` is the tool for it.	text	txt
1639	2	The `devshell` command is convenient for small tasks. But for more complex debugging, `devtool` is a better option.	text	txt
1640	1	bitbake linux-yocto -c devshell	code	sh
1640	2	Changes made inside a development shell do not persist between builds. We should record any critical changes before leaving.	text	txt
1641	2	IMAGE_FEATURES += "debug-pkgs tools-debug"	code	bb
1642	1	gdb may not be usable on some targets because of its memory and disk consumption due to loading debugging symbols. In that case, `gdbserver` package coming within `tools-debug` provides remote debugging.	text	txt
1643	1	bitbake-layers show-layers	code	sh
1644	1	1. The name usually starts with the `meta`\n2. To add a layer in our project that is appended to the `BBPATH` variable\n3. The layer priority determines the order of inclusion, so the `.bbappend` files within the highest priority layers are appended first, followed by the others	text	txt
1644	2	Taking Poky as an example, it has three central individual layers:	text	txt
1644	3	1. `meta-yocto-bsp` layer containing machine configuration files and recipes to configure packages for the machines\n2. `meta-poky` layer containing a distribution configuration used in the Yocto Project by default and can be used as a starting point when designing a new distribution\n3. `meta layer` containing the recipes, classes, and the QEMU machine configuration files	text	txt
1645	1	1. BSP layer defines a machine\n2. Distribution layer describes a distribution system\n3. Software layer includes only applications or configuration files for applications and can be used on any architecture	text	txt
1646	1	The most maintainable solution is to create a distribution layer to place changes into the distribution definition file.	text	txt
1646	2	We should not rely on `build/conf/local.conf` to set package versions, providers, and the system features for products but use it instead just as a shortcut for testing purposes during development.	text	txt
1647	1	Inside a layer directory there are two files, `<layer>/COPYING` and `<layer>/README`.	text	txt
1647	2	The `<layer>/classes` folder should hold the classes specific to that layer. It is an optional directory.	text	txt
1647	3	The `<layer>/conf` folder is mandatory and should provide the configuration files. The layer configuration file, <layer>/conf/layer.conf, is the file with the layer definition.	text	txt
2032	7	    print_data();	text	txt
1647	5	Specific to the layer type, there might be a `<layer>/conf/machine` directory inside a BSP layer, or a `<layer>/conf/distro` directory inside a distribution layer.	text	txt
1648	1	We first need to fetch the layer’s source code:	text	txt
1648	2	git clone https://github.com/openembedded/meta-openembedded --branch scarthgap	code	sh
1648	3	We can modify the `build/conf/bblayer.conf` file to add the layer location, using its absolute path:	text	txt
1648	4	BBLAYERS += "/opt/poky/meta-openembedded/meta-oe"	code	bb
1648	5	Alternatively, we can use the `bitbake-layers` tool to perform the inclusion for us:	text	txt
1648	6	bitbake-layers add-layer /opt/poky/meta-openembedded/meta-oe	code	sh
1649	1	To make all the available layers easier to access, the OpenEmbedded community has developed an index, available at http://layers.openembedded.org.	text	txt
1649	2	The `bitbake-layers` tool supports the use of the OpenEmbedded Layer Index.	text	txt
1650	1	For example, to add the `meta-oe` layer:	text	txt
1650	2	bitbake-layers layerindex-fetch meta-oe	code	sh
1651	1	bitbake-layers create-layer /opt/poky/meta-sample	code	sh
1651	2	After creating the layer, we need to include it in the `build/conf/bblayers.conf`:	text	txt
1651	3	bitbake-layers add-layer /opt/poky/meta-sample	code	sh
1651	4	The `bitbake-layers` tool, by default, generates the layer with layer priority 6. This can be changed with:	text	txt
1651	5	BB_PRIORITY_meta-sample = "4"	code	bb
1652	1	Some commonly used variables that may need to be added or changed are `LAYERVERSION` and `LAYERDEPENDS`. Those are useful if our layer requires other layers to work. Both variables’ names must be suffixed with the layer’s name, as follows:	text	txt
1652	2	`LAYERVERSION` is an optional variable that specifies the version of the layer in a single number.	text	txt
1652	3	LAYERVERSION_meta-sample = "1".	code	bb
1652	4	`LAYERDEPENDS` lists the layers that the recipes depend upon. For example, we add the dependency for version 2 of `meta-otherlayer` with:	text	txt
1652	5	LAYERDEPENDS_meta-sample += "meta-otherlayer:2"	code	bb
1652	6	An error occurs if a dependency cannot be satisfied or the version numbers do not match.	text	txt
1653	1	Image files are, in essence, a set of packages grouped for a purpose and configured in a controlled way.	text	txt
1654	1	We can create an image from scratch or create one by reusing an existing one and adding the extra necessary packages.	text	txt
1655	1	For example, we may want to include an application and remove an image feature from the `core-image-full-cmdline` image file. In that case, we can create an image in the `recipes-mine/images/my-image-full-cmdline.bb` file with the following lines of code:	text	txt
1655	2	require recipes-extended/images/core-image-full-cmdline.bb\n\nIMAGE_FEATURES:remove = "splash"\nCORE_IMAGE_EXTRA_INSTALL = "myapp"	code	bb
1656	1	For example, we can create an image in the `recipes-mine/images/my-image-strace.bb` file consisting of the following lines of code:	text	txt
1656	2	inherit core-image\n\nIMAGE_FEATURES += "ssh-server-openssh splash"\nCORE_IMAGE_EXTRA_INSTALL += "strace"	code	bb
1656	3	`CORE_IMAGE_EXTRA_INSTALL` is the variable we should use to include extra packages in the image when we inherit the `core-image` class, which facilitates image creation.	text	txt
1707	6	sudo dd if=core-image-full-cmdline-beaglebone-yocto.wic of=/dev/<media>	code	sh
1707	7	After copying the content to the SD card, the machine should boot nicely.	text	txt
1708	1	git clone git://git.yoctoproject.org/poky -b scarthgap	code	sh
1708	2	source oe-init-build-env rpi4	code	sh
1708	3	bitbake-layers layerindex-fetch meta-raspberrypi	code	sh
1708	4	The `MACHINE` variable can be changed depending on the board we want to use or set in `build/conf/local.conf`.	text	txt
1708	5	MACHINE=raspberrypi4 bitbake core-image-full-cmdline	code	sh
5503	1	`ftxui::borderDouble` is similar to the light border but with thicker lines.	text	md
1657	1	* `allow-empty-password`: Allows Dropbear and OpenSSH to accept logins with empty password\n* `allow-root-login`: Allows Dropbear and OpenSSH to accept root logins\n* `dbg-pkgs`: Installs debug symbol packages for all packages installed\n* `debug-tweaks`: Makes an image suitable for development\n* `dev-pkgs`: Installs development packages (headers and extra library links)\n* `empty-root-password`: Allows root login with an empty password\n* `hwcodecs`: Installs hardware acceleration codecs\n* `lic-pkgs`: Installs license packages\n* `nfs-server`: Installs an NFS server\n* `overlayfs-etc`: Configures the /etc directory to be in overlayfs, useful when the root filesystem is configured as read-only\n* `package-management`: Installs package management tools and preserves the package manager database\n* `perf`: Installs profiling tools such as perf, systemtap, and LTTng\n* `post-install-logging`: Enables you to log postinstall script runs in the `/var/log/postinstall.log` file on the first boot of the image on the target system\n* `ptest-pkgs`: Installs ptest packages for all ptest-enabled recipes\n* `read-only-rootfs`: Creates an image whose root filesystem is read-only\n* `read-only-rootfs-delayed-postinsts`: When specified in conjunction with `read-only-rootfs`, it specifies that post-install scripts are still permitted\n* `serial-autologin-root`: When specified in conjunction with empty-root-password, it will automatically login as root on the serial console\n* `splash`: Enables you to show a splash screen during boot. By default, this screen is provided by psplash, which does allow customization\n* `ssh-server-dropbear`: Installs the Dropbear minimal SSH server\n* `ssh-server-openssh`: Installs the OpenSSH SSH server\n* `stateless-rootfs`: Specifies that an image should be created as stateless – when using systemd, `systemctl-native` will not be run on the image, leaving the image to be populated at runtime by systemd\n* `staticdev-pkgs`: Installs static development packages\n* `tools-debug`: Installs debugging tools such as strace and gdb\n* `tools-sdk`: Installs a full SDK that runs on a device\n* `tools-testapps`: Installs device testing tools (for example, touchscreen debugging)\n* `weston`: Installs Weston (a reference Wayland environment)\n* `x11-base`: Installs the X server with a minimal environment\n* `x11`: Installs the X server\n* `x11-sato`: Installs the OpenedHand Sato environment	text	txt
1658	1	if both the OpenSSH SSH server and the Dropbear minimal SSH server are present in `IMAGE_FEATURES`, then OpenSSH will take precedence and Dropbear will not be installed.	text	txt
1659	1	The `do_compile` and `do_install` code blocks provide the Shell Script command for us to build and install the resulting binary into the destination directory, referenced as `${D}`, which aims to relocate the installation directory to a path inside the `build/tmp/work/` directory.	text	txt
1660	1	Assuming an autotools-based project, we can avoid a lot of code duplication by using the `autotools` class, extracted from the recipe in the `poky/meta/recipes-core/dbus-wait/dbus-wait_git.bb` file:	text	txt
1660	2	inherit autotools pkgconfigs	code	bb
1660	3	Inheriting the `autotools` class, provides the following steps:	text	txt
1660	4	* Update the configure script code and artifacts\n* Update the libtool scripts\n* Run the configure script\n* Run make\n* Run make install	text	txt
1660	5	`devtool` automates the process of creating a recipe based on an existing project with the following command:	text	txt
1660	6	devtool add https://guthub.com/ossystems/bbexamle	code	sh
1660	7	devtool ran the recipetool to generate a recipe and automatically configure all pre-built information into the new recipe file.	text	txt
1661	1	devtool finish bbexample ../meta-newlayer	code	sh
1661	2	`meta-newlayer/recipes-bbexample/bbexample/bbexample_git.bb` file will be created but should not be taken as a final recipe. We should check for compilation options, extra metadata information, and so on.	text	txt
1662	1	Even though creating a new machine definition for use in Poky is a straightforward task, it shouldn’t be underestimated. Depending on the set of features we need to support at the BSP layer, it can involve checking the bootloader, kernel, and hardware support drivers.	text	txt
1662	2	The prevailing set of variables used in a machine definition is as follows:	text	txt
2037	3	class some_big_object;	text	txt
2728	1	* `/boot/vmlinuz-<version>`: compressed kernel image, same as the one in `arch/<arch>/boot`\n* `/boot/System.map-<version>`: store kernel symbol addresses for debugging purposes\n* `/boot/config-<version>`: kernel configuration for this version	text	txt
1662	3	- `TARGET_ARCH`: the machine architecture, e.g. ARM, x86-64, etc.\n- `PREFERRED_PROVIDER_virtual/kernel`: overrides the default kernel (linux-yocto) if you need to use a specific one\n- `SERIAL_CONSOLES`: defines serial consoles and their speeds\n- `MACHINE_FEATURES`: describes hardware features, so the software stack required is included in the images by default\n- `KERNEL_IMAGETYPE`: chooses the kernel image type, e.g. bzImage, Image, etc.\n- `IMAGE_FSTYPES`: sets the generated filesystem image types, e.g. tar.gz, ext4, ubifs, etc.	text	txt
1663	1	When describing a new machine, we should pay special attention to specific features supported by it in `MACHINE_FEATURES`. This way, the software needed to help these features is installed into the images.	text	txt
1664	1	- `acpi`: support ACPI (x86/x86-64 only)\n- `alsa`: support ALSA audio drivers\n- `apm`: use APM or APM emulation\n- `bluetooth`: the hardware supports bluetooth\n- `efi`: support booting through EFI\n- `ext2`: the hardware HDD or microdrive\n- `keyboard`: support keyboard functionality\n- `numa`: the hardware has non-uniform memory access\n- `pcbios`: support booting through BIOS\n- `pci`: the hardware has a PCI bus\n- `pcmcia`: the hardware has PCMCIA or CompactFlash sockets\n- `phone`: mobile phone (voice) support\n- `qemu-usermode`: QEMU can support user-mode emulation for this machine\n- `qvga`: the machine has a QVGA (320x240) display\n- `rtc`: the machine has a real-time clock\n- `screen`: the hardware has a screen\n- `serial`: the hardware has serial support (usually RS232)\n- `touchscreen`: the hardware has a touchscreen\n- `usbgadget`: the hardware is USB gadget device-capable\n- `usbhost`: the hardware is USB host-capable\n- `vfat`: FAT filesystem support\n- `wifi`: the hardware has integrated Wi-Fi	text	txt
1665	1	Creating the final image for a machine should be addressed at the end of any BSP support layer development. The type of image depends on the processor, peripherals included on the board, and project restrictions.	text	txt
1666	1	The Yocto Project has a tool called `wic`, which provides a flexible way to generate this image. It allows the creation of partitioned images based on a template file (`.wks`), written in a common language that describes the target image layout.	text	txt
1667	1	The `.wks` file is placed within a layer inside the `wic` directory. It is common to have multiple files in this directory to specify different image layouts. However, it is essential to remember that the chosen structure must match the machine. For example, when considering the use of an `i.MX` based machine that boots using U-Boot from an SD card with two partitions, one for the boot files and the other for rootfs.	text	txt
1667	2	Add wic to `IMAGE_FSTYPES` to enable the wic-based image generation. Set .wks file the `WKS_FILE` variable to be used.	text	txt
1668	1	The distribution is where we define global options, such as the toolchain version, graphical backends, and support for OpenGL. We should make a distribution only if the default settings provided by Poky fail to fulfill our requirements.	text	txt
1669	1	Usually, we intend to change a small set of options from Poky. For example, we remove the X11 support to use a framebuffer instead. We can easily accomplish this by reusing the Poky distribution and overriding the necessary variables	text	txt
1670	1	Assuming the distribution file resides in `<layer>/conf/distro/my-distro.conf` containing:	text	txt
5505	1	`ftxui::borderWith` is a border that takes an argument of type `ftxui::Pixel` and uses the character inside the pixel instead of lines.	text	md
1670	2	require conf/distro/poky.conf\n\nDISTRO = "my-distro"\nDISTRO_NAME = "Sample"\nDISTRO_VERSION = "1.0"\nDISTRO_CODENAME = "sample"\nSDK_VENDOR = "Brian Salehi"\nSDK_VERSION = "1.0"\nMAINTAINER = "Brian Salehi <briansalehi@proton.me>"\nDISTRO_FEATURE:remove = "wayland vulkan opengl"	code	bb
1670	3	To use the distribution just created, we need to add the following piece of code to the `build/conf/local.conf` file:	text	txt
1670	4	DISTRO = "my-distro"	code	bb
1671	1	DISTRO_FEATURES	code	bb
1672	1	- `3g`: support for cellular data\n- `acl`: Access Control List support\n- `alsa`: Advanced Linux Sound Architecture support (OSS compatibility kernel modules are installed if available)\n- `api-documentation`: Enables the generation of API documentation during recipe builds\n- `bluetooth`: Bluetooth support (integrated BT only)\n- `cramfs`: CramFS support\n- `debuginfod`: support for getting ELF debugging information through a debuginfod server\n- `ext2`: tools to support devices with an internal HDD/Microdrive for storing files (instead of Flash-only devices)\n- `gobject-introspection-data`: data to support GObject introspection\n- `ipsec`: IPSec support\n- `ipv4`: IPv4 support\n- `ipv6`: IPv6 support\n- `keyboard`: keyboard support\n- `ldconfig`: support for ldconfig and ld.so.conf on the target\n- `ld-is-gold`: Uses the gold linker instead of the standard GNU linker (bfd)\n- `lto`: Enables Link-Time Optimization\n- `multiarch`: Enables you to build applications with multiple architecture support\n- `nfc`: support for Near Field Communication\n- `nfs`: NFS client support\n- `nls`: Native Language Support (NLS)\n- `opengl`: the Open Graphics Library, a cross-language, multi-platform API, used to render two- and three-dimensional graphics\n- `overlayfs`: OverlayFS support\n- `pam`: Pluggable Authentication Module (PAM) support\n- `pci`: PCI bus support\n- `pcmcia`: PCMCIA/CompactFlash support\n- `polkit`: Polkit support\n- `ppp`: PPP dial-up support\n- `ptest`: Enables you to build the package tests that were supported by individual recipes\n- `pulseaudio`: support for PulseAudio\n- `seccomp`: Enables you to build applications with seccomp support, allowing the applications to strictly restrict the system calls that they are allowed to invoke\n- `selinux`: support for Security-Enhanced Linux (SELinux) (requires meta-selinux)\n- `smbfs`: SMB network client support\n- `systemd`: support for this init manager, a full replacement for init, with parallel starting of services, reduced shell overhead, and other features\n- `usbgadget`: USB Gadget Device support\n- `usbhost`: USB Host support\n- `usrmerge`: Merges the /bin, /sbin, /lib, and /lib64 directories into their respective counterparts in the /usr directory to provide better package and application compatibility\n- `vfat`: FAT filesystem support\n- `vulkan`: support for the Vulkan API\n- `wayland`: the Wayland display server protocol and the library that supports it\n- `wifi`: Wi-Fi support (integrated only)\n- `x11`: the X server and libraries\n- `xattr`: support for extended file attributes\n- `zeroconf`: support for zero-configuration networking	text	txt
1673	1	The `DISTRO_FEATURES` and `MACHINE_FEATURES` variables work together to provide feasible support for the final system. When a machine supports a feature, this does not imply that the target system supports it because the distribution must provide its underlying base.	text	txt
1673	2	For example, a machine might support Wi-Fi but not the distribution, then the applications will be built without access to the Wi-Fi. On the other hand, if the distribution provides Wi-Fi support and a machine does not, the modules and applications needed for the Wi-Fi will not be installed in images. However, the operating system and its modules support Wi-Fi.	text	txt
1674	1	- `build/conf/local.conf`\n- `<layer>/conf/machines/<machine>.conf`\n- `<layer>/conf/distro/<distro>.conf`	text	txt
1675	1	Variables defined in configuration files are global to every recipe, also referred to as configuration metadata.	text	txt
1675	2	Variables defined within recipe files have recipe visibility scope that is local to the specific recipe only during the execution of its tasks.	text	txt
1676	1	We must create a `.bbappend` file to extend or change a preexisting recipe.	text	txt
1677	1	Suppose the original recipe is `<original-layer>/recipes-core/app/app_1.2.3.bb`. We can use `%` in the name as a wildcard character to allow for matching recipe names.	text	txt
1677	2	`app_1.2.3.bbappend` applies changes to the exact version `1.2.3`.	text	txt
1677	3	`app_1.2.%.bbappend` applies changes to the same major and minor versions `1.2.z`.	text	txt
1677	4	`app_1.%.bbappend` applies changes to the same major versions `1.y.z`.	text	txt
1677	5	`app_%.bbappend` applies changes to any version `x.y.z`.	text	txt
1678	1	All of them are joined following the layer's priority order.	text	txt
1678	2	The `.bbappend` files can be seen as a text appended at the end of the original recipe.	text	txt
1679	1	The `:append` and `:prepend` operators can extend a task:	text	txt
1679	2	do_install:append() {\n    # command\n}	code	bb
1680	1	Suppose an application is autotools-based and we need to disable `another-feature` and enable `my-feature` instead.	text	txt
1680	2	EXTRA_OECONF += "--enable-my-feature --disable-another-feature"	code	bb
1680	3	The same strategy can be applied when we need to make this extension conditional:	text	txt
1680	4	EXTRA_OECONF:append:arm = "--enable-my-feature --disable-another-feature"	code	bb
1681	1	|Build System|Variable|\n|-|-|\n|Autotools|`EXTRA_OECONF`|\n|Cargo|`EXTRA_OECARGO`|\n|CMake|`EXTRA_OECMAKE`|\n|Make|`EXTRA_OEMAKE`|\n|Meson|`EXTRA_OEMESON`|\n|NPM|`EXTRA_OENPM`|\n|SCons|`EXTRA_OESCONS`|\n|WAF|`EXTRA_OEWAF`|	text	txt
1682	1	When we need to apply a patch to an existing package, we should use `FILESEXTRAPATHS`, which includes new directories in the searching algorithm:	text	txt
1682	2	FILESEXTRAPATHS:prepend := "${THISDIR}/${PN}-${PV}:"\nSRC_URI += "file://mypatch.path"	code	bb
1682	3	Bitbake assumes that every file with a `.patch` or `.diff` extension is a patch and applies them accordingly.	text	txt
1683	1	We should use `FILESEXTRAPATHS`:	text	txt
1683	2	FILESEXTRAPATHS:prepend := "${THISDIR}/${PN}-${PV}:"\nSRC_URI += "file://newconfig.conf"\n\ndo_install:append() {\n    install -D -m 644 ${WORKDIR}/newconfig.conf ${D}/${sysconfdir}/newconfig.conf\n}	code	bb
1684	1	|Variable|Default Expanded Value|\n|-|-|\n|`base_bindir`|`/bin`|\n|`base_sbindir`|`/sbin`|\n|`sysconfdif`|`/etc`|\n|`localstatedir`|`/var`|\n|`datadir`|`/usr/share`|\n|`bindir`|`/usr/bin`|\n|`sbindir`|`/usr/sbin`|\n|`libdir`|`/usr/lib`, `/usr/lib64`|\n|`libexecdir`|`/usr/libexec`|\n|`includedir`|`/usr/include`|	text	txt
1685	1	When a file is included in `SRC_URI` variable, bitbake searches for the `FILESPATH` and `FILESEXTRAPATHS` variables. The default settings is to look in:	text	txt
1685	2	- `<recipe>-<version>/`\n- `<recipe>/`\n- `files/`	text	txt
1685	3	It also checks `OVERRIDES` for a specific file to be overriden in each directory. So for example, we have `foo_1.0.bb` recipe and the `OVERRIDES = "<board>:<arch>"` variable for the file will be searched in the following directories:	text	txt
1685	4	- `foo-1.0/<board>/`\n- `foo-1.0/<arch>/`\n- `foo-1.0/`\n- `foo/<board>/`\n- `foo/<arch>/`\n- `foo/`\n- `files/<board>/`\n- `files/<arch>/`\n- `files/`	text	txt
1686	1	`PACKAGECONFIG` is a mechanism to simplify feature set customization for recipes. It provides a way to enable and disable the recipe features.	text	txt
1708	6	After the build process is over, the image will be available inside the `build/tmp/deploy/images/raspberrypi4/` directory. The file we want to use is `core-image-full-cmdline-raspberrypi4.wic.bz2.`	text	txt
1708	7	bzcat core-image-full-cmdline-raspberrypi4.wic.bz2 | sudo dd of=/dev/<media>	code	sh
1687	1	1. extra arguments if the feature is enabled\n2. extra arguments if the feature is disabled\n3. additional build dependencies to add to `DEPENDS` if the feature is enabled\n4. additional runtime dependencies to add to `RDEPENDS` if the feature is enabled\n5. additional runtime recommendations to add to `RRECOMMENDS` if the feature is enabled\n6. any conflicting `PACKAGECONFIG` settings for this feature	text	txt
1687	2	PACKAGECONFIG ??= "feature1 feature2"\n\nPACKAGECONFIG[feature1] = " \\\n    --enable-feature1, \\\n    --disable-feature1, \\\n    build-deps-for-feature1, \\\n    runtime-deps for-feature1, \\\n    runtime-recommends-for-feature1, \\\n    packageconfig-conflicts-for-feature1"\n\nPACKAGECONFIG[feature2] = "\\\n    --enable-feature2, \\\n    --disable-feature2, \\\n    build-deps-for-feature2, \\\n    runtime-deps-for-feature2, \\\n    runtime-recommends-for-feature2, \\\n    packageconfig-conflicts-for-feature2"	code	bb
1688	1	We can create `.bbappend` file that expands the `PACKAGECONFIG` variable's default value to enable `feature2`:	text	txt
1688	2	PACKAGECONFIG += "feature2"	code	bb
1688	3	To add some features to the `build/conf/local.conf`, we can use:	text	txt
1688	4	PACKAGECONFIG:pn-<recipe>:append = " feature2"	code	bb
1689	1	The Yocto Project provides a specialized class to handle the configuration of the Kconfig-based projects. For example, when configuring `linux-yocto`, we can use `<layer>/recipes-kernel/linux/linux-yocto_%.bbappend` as follows:	text	txt
1689	2	FILESEXTRAPATHS:prepend := "${THISDIR}/${PN}:"\nSRC_URI += "file://enable-can.cfg"	code	bb
1689	3	Every configuration fragment must have `.cfg` extension.	text	txt
1689	4	The content of `<layer>/recipes-kernel/linux/linux-yocto/enable-can.cfg` is:	text	txt
1689	5	CONFIG_CAN=y	code	cfg
1690	1	bitbake virtual/kernel -c menuconfig	code	sh
1691	1	bitbake virtual/kernel -c menuconfig	code	sh
1691	2	Enable CAN as an example.	text	txt
1691	3	bitbake virtual/kernel -c diffconfig	code	sh
1691	4	The config fragment file is created under the `<build>/tmp/work` directory. We should copy this fragment file to the layer and use it in a `.bbappend` file in order to get it applied.	text	txt
1692	1	bitbake virtual/kernel -c savedefconfig	code	sh
1693	1	- `LICENSE`: This describes the license under which the package was released.\n- `LIC_FILES_CHKSUM`: This may not seem very useful at first sight. It describes the license file and checksum for a particular package, and we may find much variation in how a project describes its license. The most common license files are stored in `poky/meta/files/common-licenses/`.	text	txt
1694	1	Some projects include a file, such as `COPYING` or `LICENSE`, which specifies the license for the source code. Others use a header note in each file or the main file. The `LIC_FILES_CHKSUM` variable has the checksum for the license text of a project; if any letters are changed, the checksum is changed as well. This ensures that any change is noted and consciously accepted by the developer.	text	txt
1695	1	BitBake launches a build error and points to the project that had its license changed.	text	txt
1695	2	To be able to build anything again, you must change the `LIC_FILE_CHKSUM` value accordingly and update the `LICENSE` field to match the license change.	text	txt
1696	1	By default, Poky does not use any recipe with a commercial license restriction. In the recipe file, the `LICENSE_FLAGS` variable is used to identify which license restriction that recipe has. For example, the `gstreamer1.0-plugins-ugly` recipe has:	text	txt
1696	2	LICENSE_FLAGS = "commercial"	code	bb
1712	1	The integration or validation testing support uses the testimage class to execute the images inside the target.	text	txt
1833	4	std::filesystem::canonical(p);\nstd::filesystem::weakly_canonical(p);	code	txt
1696	3	Which indicates to Poky that this recipe requires the commercial license flag to be explicitly accepted for the recipe to be used. To allow the use of this recipe we can add `LICENSE_FLAGS_ACCEPTED` in our custom distribution, e.g. `<my-layer>/conf/distro/my-distro.conf` or inside `build/conf/local.conf` during the initial development stages.	text	txt
1697	1	LICENSE_FLAGS_ACCEPTED = "commercial_gstreamer1.0-plugins-ugly"	code	bb
1697	2	By specifying recipe name in the value, we accept only the commercial license flag from `gstreamer1.0-plugins-ugly`. It is good practice to ensure this flag is enabled for a set of recipes that you have permission to use in a commercial setting.	text	txt
1698	1	To help us achieve copyleft compliance, Poky generates a license manifest during the image build, located at build/tmp/deploy/licenses/<image_name-machine_name>-<datastamp>/.	text	txt
1698	2	The license manifest for each recipe is under `build/tmp/deploy/licenses/<package-name>`.	text	txt
1699	1	The most apparent way Poky can help us to provide the source code of every project used in our image is by sharing the `DL_DIR` content. However, this approach has one crucial pitfall – any proprietary source code will be shared within `DL_DIR` if it is shared as is. In addition, this approach will share any source code, including parts not required by copyleft compliance.	text	txt
1699	2	Poky must be configured to archive the source code before the final image is created. To have it, we can add the following variables into `build/conf/local.conf`:	text	txt
1699	3	INHERIT += "archiver"\nARCHIVER_MODE[src] = "original"	code	bb
1700	1	The archiver class copies the source code, patches, and scripts for the filtered license set. The default configuration is to have `COPYLEFT_LICENSE_INCLUDE` set to `"GPL* LGPL* AGPL*"` so the recipes that use source code licensed on those licenses are copied under the `build/tmp/deploy/sources/<architecture>` directories.	text	txt
1701	1	The archiver class also supports the `COPYLEFT_LICENSE_EXCLUDE` variable to ensure packages that use source code licensed on some specific licenses never go into the sources directory. By default, it is set to `"CLOSED Proprietary"`.	text	txt
1702	1	If we want to include the patched source code, we will only use `ARCHIVER_MODE[src] = "patched";` this way, Poky will wrap the project source code after the `do_patch` task. It includes modifications from recipes or the `.bbappend` file.	text	txt
1703	1	To have a reproducible build environment, we can share the configured project, in other words, the project after the `do_configure` task.	text	txt
1703	2	ARCHIVER_MODE[src] = "configured"	code	bb
1704	1	For all flavors of source code, the default resulting file is a tarball; other options will add `ARCHIVER_MODE[srpm] = "1"` to `build/conf/local.conf`, and the resulting file will be an `SRPM` package.	text	txt
1708	8	After copying the content to the SD card, the machine should boot nicely.	text	txt
1709	1	To add this board support to our project, we need to include the meta-riscv meta layer, which is the BSP layer with support for RISC-V-based boards, including the VisionFive, but not limited to it.	text	txt
1709	2	git clone git://git.yoctoproject.org/poky -b scarthgap	code	sh
1709	3	source oe-init-build-env visionfive	code	sh
1709	4	bitbake-layers layerindex-fetch meta-riscv	code	sh
1709	5	The `MACHINE` variable can be changed depending on the board we want to use or set in `build/conf/local.conf`.	text	txt
1709	6	MACHINE=visionfive bitbake core-image-full-cmdline	code	sh
1709	7	After the build process is over, the image will be available inside the `build/tmp/deploy/images/visionfive/` directory. The file we want to use is `core-image-full-cmdline-visionfive.wic.gz`.	text	txt
1709	8	zcat core-image-full-cmdline-visionfive.wic.gz | sudo dd of=/dev/<media>	code	sh
1709	9	VisionFive doesn’t have a default boot target and requires manual intervention to boot.	text	txt
1709	10	Inside the U-Boot prompt enter the following commands using a serial console:	text	txt
1709	11	setenv bootcmd “run distro_bootcmd”\nsaveenv\nboot	code	sh
1710	1	first, we need to build the `core-image-weston` image. Next, we can run the validation as follows:	text	txt
1710	2	runqemu gl sdk core-image-weston	code	sh
1711	1	first, we need to build the `core-image-full-cmdline` image and run QEMU with the following command line:	text	txt
1711	2	runqemu qemux86-64 qemuparams="-m 128" core-image-full-cmdline	code	sh
1867	5	make -j8	code	txt
1712	2	First, we enabled the testimage support by adding `IMAGE_CLASSES += "testimage"` in `build/conf/local.conf` and made sure to build the `core-image-weston` image.	text	txt
1712	3	Then, we must build the `core-image-weston` image. We are ready now to start the execution of `testimage` with the following command:	text	txt
1712	4	bitbake -c testimage core-image-weston	code	sh
1713	1	The class `image-buildinfo` writes a plain text file containing build information and layers revisions to the target filesystem at `${sysconfdir}/buildinfo` by default.	text	txt
1714	1	- `recipes-backport`: Backports of recipes coming from new Yocto Project releases\n- `recipes-staging`: New recipes or bbappend files adding missing package configurations or bug fixes	text	txt
1714	2	New recipes or bug fixes contineously are sent from `recipes-staging` to the respective upstream project (for example, OpenEmbedded Core). Then, when the patch is accepted, we move this change from `recipes-staging` to the `recipes-backport` directory.	text	txt
1715	1	When using the Yocto Project, we usually add many configurations in `build/conf/local.conf`. However, as discussed in the book, this is bad as it is not at source control management and is likely to differ among developers. Using a custom distribution allows consistent use among multiple developers, provides a clear view of the different `DISTRO_FEATURES` we use when compared to our base distribution, and provides a central place where we can have a global view of all the required recipe configurations we need for our product, reducing the number of bbappend files required to configure our recipes (for example, `PACKAGECONFIG:pn-<myrecipe>:append = " myfeature"`)	text	txt
1716	1	A typical starting point is copying the `core-image-base.bb` file to our custom layer as `myproduct-image.bb` and extending it, adding what we need for the product’s image. In addition, we create an image called `myproduct-image-dev.bb` for use during development and make sure it requires `myproduct-image.bb` along with the artifacts used only for development, avoiding code duplication. This way, we have two images for production and development, but they share the same core features and packages.	text	txt
1717	1	1. Preprocessing\n2. Compilation\n3. Assembly\n4. Linking	text	txt
1718	1	#include <stdio.h>	text	txt
1718	2	int main()\n{\n    fprintf(stdout, "Preprocessing\\\\n");\n}	code	txt
1718	3	For gcc, this can be done sing the following command:	text	txt
1718	4	gcc -E -P -o main.cc main.c	code	txt
1718	5	Where `-E` tells gcc to stop after preprocessing and `-P` causes the compiler\nto omit debugging information so that the output is a bit cleaner.	text	txt
1719	1	gcc -masm intel\ngcc -masm att	code	txt
1720	1	gcc -g -O0 -S -masm=intel -o main.s main.c	code	txt
1721	1	gcc -g -O0 -c -o main.o main.c\nfile main.o	code	txt
1722	1	There are position-independent (relocatable) object files which can be\ncombined to form a complete binary executable. On the other hand there are\nposition-independent (relocatable) executables, which you can call them apart\nfrom ordinary shared libraries because they have an entry point address.	text	txt
1723	1	readelf --syms a.out	code	txt
1724	1	For ELF binaries, debugging symbols are typically generated in the DWARF\nformat, while PE binaries usually use the proprietary PDB format. DWARF\ninformation is usually embedded within the binary, while PDB comes in the\nform of a separate symbol file.	text	txt
1725	1	`libbfd` & `libdwarf`.	text	txt
1726	1	strip --strip-all a.out\nreadelf --syms a.out	code	txt
1727	1	objdump -M intel\nobjdump -M att	code	txt
1728	1	The `.rodata` section contains all constants.	text	txt
1728	2	objdump -sj .rodata example.o	code	txt
1729	1	objdump -M intel -d example.o	code	txt
1730	1	readelf --relocs example.o	code	txt
1731	1	The leftmost column of each line in the `readelf --relocs` output is the\noffset in the object file where the resolved reference must be filled in. The\noffset equals to the offset of the instruction that needs to be fixed, plus\n1. This is because you only want to overwrite the operand of the instruction,\nnot the opcode of the instruction which happens to be only 1 byte. So to\npoint to the instruction's operand, the relocation symbol needs to skip past\nthe opcode byte.	text	txt
1731	2	readelf --relocs example.o	code	txt
1732	1	readelf --sections example.o	code	txt
1733	1	The TCP/IP standard does not standardize the protocol API implementation;\ntherefore, several API implementations exist. However, the one based on\nBerkeley Sockets API is the most widely used.	text	txt
1896	3	module_param(name, charp, S_IRUGO|S_IWUSR);	text	txt
1735	1	A pair of values consisting of an IP address and a protocol port number that\nuniquely identifies a particular application running on a particular host in\na computer network is called an endpoint.	text	txt
5506	1	A `ftxui::window` is a `ftxui::border`, but with an additional header.	text	md
1735	2	The client application uses an endpoint to designate a particular server\napplication it wants to communicate with.	text	txt
1740	1	A pair of values consisting of an IP address and a protocol port number that uniquely identifies a particular application running on a particular host in a computer network is called an endpoint.	text	txt
1741	1	The IP address can be represented as a string containing an address in dot-decimal notation also known as IPv4, or in hexadecimal notation also known as IPv6, or a string containing a DNS name.	text	txt
1741	2	Domain name example: boost.org	text	txt
1741	3	Ipv6 example: FE36::0404:C3FA;EF1E:3829	text	txt
1741	4	IPv4 example: 192.168.1.112	text	txt
1742	1	#include <boost/asio.hpp>\n\nboost::asio::ip::address server_address{boost::asio::ip::address::from_string("127.0.0.1")};\nboost::asio::ip::tcp::endpoint tcp_endpoint{address, 8000};\nboost::asio::ip::udp::endpoint udp_endpoint{address, 8000};	code	cpp
1743	1	#include <boost/asio.hpp>\n\nboost::asio::ip::address local_address{boost::asio::ip::address_v6::any()};\nboost::asio::ip::tcp::endpoint tcp_endpoint{address, 8000};\nboost::asio::ip::udp::endpoint udp_endpoint{address, 8000};	code	cpp
1744	1	`address` class can hold both IPv4 and IPv6 addresses.	text	txt
1744	2	boost::asio::ip::address_v4{};	code	cpp
1744	3	boost::asio::ip::address_v6{};	code	cpp
1744	4	boost::asio::ip::address{};	code	cpp
1745	1	An active socket is intended to be used to send and receive data to and from a remote application or to initiate a connection establishment process with it.	text	txt
1745	2	Passive socket is intended to be used to passively wait for incoming connection requests from remote applications.	text	txt
2753	1	usb-storage.delay_use=0	code	txt
1746	1	#include <boost/asio.hpp>\n\nboost::asio::ip::address address{boost::asio::ip::address::from_string("127.0.0.1")};\nboost::asio::ip::tcp::endpoint endpoint{address, 8000};\nboost::asio::io_service io_service{};\nboost::asio::ip::tcp protocol{boost::asio::ip::tcp::v6()};\nboost::asio::ip::tcp::socket socket(io_service);\n\nsocket.open(protocol);\nsocket.close();	code	cpp
1833	3	`canonical()` function follows symbolic links.\nThe file must already exist for this function to work.	text	txt
1737	1	Basically, there are two types of sockets. A socket intended to be used to\nsend and receive data to and from a remote application or to initiate a\nconnection establishment process with it is called an active socket, whereas\na passive socket is the one used to passively wait for incoming connection\nrequests from remote applications.	text	txt
1738	1	1. Create an instance of the `boost::asio::io_service` class or use the one\n   that has been created earlier.\n2. Create an object of the class that represents the transport layer protocol\n   (TCP or UDP) and the version of the underlying IP protocol (IPv4 or IPv6)\n   over which the socket is intended to communicate.\n3. Create an object representing a socket corresponding to the required\n   protocol type. Pass the object of `boost::asio::io_service` class to the\n   socket's constructor.\n4. Call the socket's `open()` method, passing the object representing the\n   protocol created in step 2 as an argument.	text	txt
1738	3	The `boost::asio::ip::tcp::socket` constructor throws an exception of the\ntype `boost::system::system_error` if it fails.	text	txt
1739	1	A passive socket or acceptor socket is a type of socket that is used to wait\nfor connection establishment requests from remote applications that\ncommunicate over the TCP protocol.	text	txt
1739	2	This definition has two important implications:	text	txt
1739	3	- Passive sockets are used only in server applications or hybrid applications\n  that may play both roles of the client and server.\n- Passive sockets are defined only for the TCP protocol. As the UDP protocol\n  doesn't imply connection establishment, there is no need for a passive\n  socket when communication is performed over UDP.	text	txt
1739	4	To create an acceptor socket:	text	txt
1739	5	1. Create an instance of the `boost::asio::io_service` class or use the one\nthat has been created earlier.\n2. Create an object of the `boost::asio::ip::tcp` class that represents the TCP\nprotocol and the required version of the underlying IP protocol (IPv4 or\nIPv6).\n3. Create an object of the `boost::asio::ip::tcp::acceptor` class representing\nan acceptor socket, passing the object of the `boost::asio::io_service`\nclass to its constructor.\n4. Call the acceptor socket's `open()` method, passing the object representing\nthe protocol created in step 2 as an argument.	text	txt
1747	1	#include <boost/asio.hpp>\nboost::asio::io_context context{};\nboost::asio::ip::tcp protocol{boost::asio::ip::tcp::v6()};\nboost::asio::ip::tcp::acceptor socket{context, protocol};	code	cpp
1748	1	#include <ranges>\n#include <vector>\n#include <print>\n#include <boost/asio.hpp>\n\nint main()\n{\n    boost::asio::io_context context{};\n    boost::asio::ip::tcp::resolver::query query{"flashback.eu.com", "80", boost::asio::ip::tcp::resolver::query::numeric_service};\n    boost::asio::ip::tcp::resolver resolver{context};\n    std::vector<boost::asio::ip::tcp::endpoint> endpoints{resolver.resolve(query), {}};\n    auto print_endpoint = [](boost::asio::ip::tcp::endpoint const& e) { std::println("[{}]:{}", e.address().to_string(), e.port()); };\n    std::ranges::for_each(endpoints, print_endpoint);\n}	code	cpp
1749	1	#include <boost/asio.hpp>\n#include <iostream>\n\nint main()\n{\n    boost::asio::ip::port_type port{9000};\n    boost::asio::ip::address address{boost::asio::ip::address_v6::any()};\n    boost::asio::ip::tcp::endpoint endpoint{address, port};\n\n    boost::io_context context{};\n\n    boost::asio::ip::tcp::acceptor acceptor{context, endpoint.protocol()};\n\n    try\n    {\n        acceptor.bind(endpoint);\n    }\n    catch (boost::system::system_error const& exp)\n    {\n        std::cerr << exp.what() << std::endl;\n    }\n}	code	cpp
1750	1	UDP servers do not establish connections and use active sockets to wait for incoming requests.	text	txt
1750	2	#include <boost/asio.hpp>\n#include <iostream>\n\nint main()\n{\n    boost::asio::ip::port_type port{9000};\n    boost::asio::ip::address address{boost::asio::ip::address_v6::any()};\n    boost::asio::ip::udp::endpoint endpoint{address, port};\n\n    boost::io_context context{};\n\n    boost::asio::ip::udp::socket socket{context, endpoint.protocol()};\n\n    try\n    {\n        socket.bind(endpoint);\n    }\n    catch (boost::system::system_error const& exp)\n    {\n        std::cerr << exp.what() << std::endl;\n    }\n}	code	cpp
1751	1	#include <boost/asio.hpp>\n#include <iostream>\n\nint main()\n{\n    boost::asio::ip::port_type port{9000};\n    boost::asio::ip::address address{boost::asio::ip::address::from_string("::1")};\n    boost::asio::ip::tcp::endpoint endpoint{address, port};\n\n    boost::io_context context{};\n\n    boost::asio::ip::tcp::socket socket{context, endpoint.protocol()};\n\n    try\n    {\n        socket.connect(endpoint);\n    }\n    catch (boost::system::system_error const& exp)\n    {\n        std::cerr << exp.what() << std::endl;\n    }\n}	code	cpp
1752	1	#include <boost/asio.hpp>\n#include <iostream>\n\nint main()\n{\n    boost::asio::ip::port_type port{9000};\n    boost::asio::ip::address address{boost::asio::ip::address_v6::any()};\n    boost::asio::ip::tcp::endpoint endpoint{address, port};\n\n    boost::io_context context{};\n\n    boost::asio::ip::tcp::acceptor acceptor{context, endpoint.protocol()};\n\n    try\n    {\n        acceptor.bind(endpoint);\n        acceptor.listen(10);\n\n        boost::asio::ip::tcp::socket client{context};\n\n        acceptor.accept(client);\n    }\n    catch (boost::system::system_error const& exp)\n    {\n        std::cerr << exp.what() << std::endl;\n    }\n}	code	cpp
1753	1	#include <iostream>\n#include <map>	text	txt
1753	2	int main()\n{\n    std::map<int, char const*> letters;\n    letters.insert({0, "first"});\n    letters.insert({1, "second"});\n    letters.insert({2, "third"});	text	txt
1753	3	    for (const auto& [index, letter]: letters)\n        std::cout << index << ": " << letter << "\\\\n";\n}	code	txt
1754	1	struct some_data\n{\n    int age;\n    char const* name;\n};	text	txt
1754	2	int main()\n{\n    some_data personal_data{27, "Brian"};	text	txt
1754	3	    auto const& [a1, n1] = personal_data; // const reference\n    auto const [a2, n2] = personal_data; // const\n    auto& [a3, n3] = personal_data; // non-const reference\n    auto [a4, n4] = personal_data; // copy\n}	code	txt
1755	1	#include <string>	text	txt
1755	2	struct some_data\n{\n    std::string text;\n};	text	txt
1755	3	int main()\n{\n    some_data data{"long text"};	text	txt
1755	4	    // entity is rvalue reference to data.text\n    auto&& [rv_text] = std::move(data);	text	txt
1755	5	    // new entity stole the membership of value from data.text\n    std::string text = std::move(rv_text);	text	txt
1755	6	    // rv_text and data.text no longer hold values\n}	code	txt
1756	1	* All non-static data members must be members of the same class definition.	text	txt
1756	2	struct A\n{\n    int a = 1;\n    int b = 2;\n};	text	txt
1756	3	struct B : A\n{\n};	text	txt
1756	4	struct C : A\n{\n    int c = 3;\n};	text	txt
1756	5	int main()\n{\n    auto [x, y] = B{};\n    auto [i, j, k] = C{}; // ERROR\n}	code	txt
1757	1	* For an array passed as argument, this is not possible because it decays to the corresponding pointer type.	text	txt
1757	2	int main()\n{\n    int array[] = {1,2,3};\n    auto [i, j, k] = array;\n}	code	txt
1758	1	#include <utility>\n#include <string>\n#include <tuple>\n#include <array>	text	txt
1758	2	int main()\n{\n    std::array<int, 3> coordinates{1,0,1};\n    auto [x, y, z] = coordinates;	text	txt
1758	3	    std::pair<int, std::string> letter{1, "some text"};\n    auto& [index, text] = letter;	text	txt
1758	4	    std::tuple<long, std::string> book{9783967300178, "C++17: The Complete Guide"};\n    auto const& [isbn, title] = book;\n}	code	txt
1759	1		code	txt
1760	1	Since C++17 the need to specify template arguments explicitly to class templates is relaxed.	text	txt
1760	2	std::complex<double> c{4.2, 5.1}; // prior to C++17	code	cpp
1760	3	std::complex c{4.2, 5.1}; // since C++17	code	cpp
1761	1	Template parameters have to be unambiguously deducible.	text	txt
1761	2	std::complex c{3, 4.2}; // ERROR: attempts int and double as T	code	cpp
1762	1		code	txt
1763	1	`std::optional<>` model a nullable instance of an arbitrary type.	text	txt
1763	2	#include <optional>	text	txt
1763	3	std::optional<int> oi{42};\nint i{*oi}; // 42	code	txt
1764	1	#include <optional>\n#include <string_view>	text	txt
1764	2	std::optional<int> asInt(const std::string_view s)\n{\n    try\n    {\n        return std::stoi(s);\n    }\n    catch (...)\n    {\n        return std::nullopt;\n    }\n}	text	txt
1764	3	asInt("42");           // std::optional<int>(42)\nasInt("077");          // std::optional<int>(42)\nasInt("forty two");    // std::nullopt\nasInt("0x33");         // std::optional<int>(42)	code	txt
1765	1	It consists of an optional *root name*, an optional *root directory*, and a\nsequence of filenames separated by *directory separators*.	text	txt
1765	2	```\n[root name] [root directory] [filenames]\n/home/brian/\nC:\\\\Windows\\\\Users\\\\Brian\\\\Desktop\n``````	text	txt
1766	1	The path can be **relative**, so that the file location depends on the current directory, or **absolute**.	text	txt
1766	2	Two formats are possible for path objects:	text	txt
1766	3	- A generic format, which is portable.\n- A native format, which is specific to the underlying file system.	text	txt
1766	4	On POSIX compliant operating systems there is not difference between the\ngeneric and the native format. On Windows the generic format `/tmp/note.txt`\nis a valid native format besides `\\\\tmp\\\\note.txt` which is also supported are\ntwo native versions of the same path.	text	txt
1766	5	The generic path format is as follows:	text	txt
1766	6	`[root name] [root directory] [relative path]`	text	txt
2039	2	class some_big_object;	text	txt
1766	7	- The optional root name is implementation specific (e.g. `//host` on POSIX systems, `C:` on WIndows systems)\n- The optional root root directory is a directory separator\n- The relative path is a sequence of file names separated by directory separators	text	txt
1767	1	In a normalized path:	text	txt
1767	2	- Filenames are separated only by a single preferred directory separator.\n- The filename `.` is not used unless the whole path is nothing but `.`.\n- The filename does not contain `..` filenames unless they are at the\n  beginning of a relative path.\n- The path only ends with a directory separator if the trailing filename is a\n  directory with a name other than `.` or `..`.	text	txt
1768	1	The filesystem library provides several functions, which can be both member\nand free-standing functions. **Member** functions are cheap because they are\npure lexical operations that do not take the actual filesystem into account,\nso that no operating system calls are necessary, e.g. `mypath.is_absolute()`.\n**Free-standing** functions on the other hand are expensive, because they\nusually take the actual filesystem into account, e.g. `equivalent(path1,\npath2)`. Sometimes, the filesystem library provides the same functionality\noperating both lexically and by the actual filesystem into account, e.g.\n`path1.lexically_relative(path2)`.	text	txt
1768	2	Because of **Argument Dependent Lookup (ADL)** usually we don't have to\nspecify the full namespace `std::filesystem` when calling free-standing\nfilesystem functions.	text	txt
1768	3	create_directory(std::filesystem::path{"/tmp/notes"}); // OK\nremove(std::filesystem::path{"/tmp/note.txt"}); // OK	text	txt
1768	4	std::filesystem::create_directory("/tmp/note.txt"); // OK\nstd::filesystem::remove("/tmp/note.txt"); // OK	text	txt
1768	5	create_directory("/tmp/notes"); // ERROR\nremove("/tmp/note.txt"); // OOPS: calls C function remove()	code	txt
1769	1	Because dealing with exception is not always appropriate, the filesystem\nlibrary uses a mixed approach when dealing with the filesystem.	text	txt
1769	2	Filesystem operations usually have two overloads for each operation.	text	txt
1769	3	- By default, the operations throw `std::filesystem_error` exceptions on errors.\n- By passing an additional out parameter, an error code can be used instead.	text	txt
1770	1	#include <iostream>\n#include <filesystem>	text	txt
1770	2	int main()\n{\n    try\n    {\n        std::filesystem::create_directory("/tmp/");\n    }\n    catch (std::filesystem::filesystem_error const& exp)\n    {\n        std::cerr << exp.path1() << ": " << exp.what() << std::endl;\n    }\n}	code	txt
1771	1	#include <iostream>\n#include <filesystem>	text	txt
1771	2	int main()\n{\n    std::error_code ec;\n    std::filesystem::create_directory("/tmp/", ec);\n    if (ec)\n    {\n        std::cerr << ec.message() << std::endl;\n    }	text	txt
1771	3	    if (ec == std::errc::read_only_file_system)\n    {\n        std::cerr << "directory is read only\\\\n";\n    }\n}	code	txt
1772	1	The standard filesystem library defines an enumeration type `file_type`,\nwhich is standardized to have the following values:	text	txt
1772	2	namespace std::filesystem\n{\n    enum class file_type\n    {\n        regular, directory, symlink,\n        block, character, fifo, socket,\n        ...\n        none, not_found, unknown\n    };\n}	code	txt
1773	1	#include <string>\n#include <filesystem>	text	txt
1773	2	using namespace std::string_literals;	text	txt
1773	3	std::filesystem::path{"/dev/null"s};    // std::string\nstd::filesystem::path{L"/dev/null"s};   // std::wstring\nstd::filesystem::u8path{u8"/dev/null"s};  // std::u8string\nstd::filesystem::u16path{u16"/dev/null"s}; // std::u16string\nstd::filesystem::u32path{u32"/dev/null"s}; // std::u32string	code	txt
1774	1	#include <string>\n#include <filesystem>	text	txt
1774	2	std::string filename{"/dev/random"};\nstd::filesystem::path{filename.begin(), filename.end()};	code	txt
1775	1	Note that `current_path()` is an expensive operation because it is based on\noperating system calls.	text	txt
1775	2	#include <filesystem>	text	txt
1775	3	auto working_directory{std::filesystem::current_path()};	code	txt
1776	1	#include <filesystem>	text	txt
1776	2	auto temp{std::filesystem::temp_directory_path()};	code	txt
1777	1	std::filesystem::path p;\np.empty(); // true	code	txt
1778	1	std::filesystem::path p{"assets/image.png"};\np.is_absolute(); // false\np.is_relative(); // true	code	txt
1779	1	std::filesystem::path p{"/usr/src/linux/version"};	text	txt
1779	2	p.has_filename(); // true\np.filename(); // version	text	txt
1779	3	p.has_stem(); // false\np.stem(); // (none)	text	txt
1779	4	p.has_extension(); // false\np.extension(); // (none)	text	txt
1779	5	p.has_root_name(); // false\np.root_name(); // (none)	text	txt
1779	6	p.has_root_directory(); // true\np.root_directory(); // /	text	txt
1779	7	p.has_root_path(); // true\np.root_path(); // /	text	txt
1779	8	p.has_parent_path(); // true\np.parent_path(); // /usr/src/linux	text	txt
1779	9	p.has_relative_path(); // false\np.relative_path(); // (none)	text	txt
1779	10	p.begin();\np.end();	code	txt
1780	1	std::filesystem::path p{"/etc/resolv.conf"};	text	txt
1780	2	p.lexically_normal();	code	txt
1781	1	std::filesystem::path p{"/etc/os-release"};	text	txt
1781	2	p.string();\np.wstring();\np.u8string();\np.u16string();\np.u32string();	code	txt
1782	1	Lexically relative path can be used in symbolic link creation.	text	txt
1782	2	Lexical relative path yields the empty path if there is no relative path from p1 to p2.	text	txt
1782	3	std::filesystem::path{"a/b/c"}.lexically_relative("/a/d"); // ../b/c\nstd::filesystem::path{"a/d"}.lexically_relative("/a/b/c"); // ../../d	code	txt
1782	4	Lexical proximate path yields p1 if there is no relative path from p1 to p2.	text	txt
1782	5	std::filesystem::path{"a/b"}.lexically_relative("c/d"}; // ""\nstd::filesystem::path{"a/b"}.lexically_proximate("c/d"}; // "a/b"	code	txt
1783	1	std::filesystem::path p{"/dir\\\\\\\\subdir/subsubdir\\\\\\\\/./\\\\\\\\"};	text	txt
1783	2	p.generic_string(); // all the same: /dir/subdir/subsubdir//.//\np.generic_wstring();\np.generic_u8string();\np.generic_u16string();\np.generic_u32string();	code	txt
1783	3	`native()` yields the path converted to the native string encoding, which is\ndefined by the type `std::filesystem::path::string_type`. Under Windows this\ntype is `std::wstring`, so that you have to use `std::wcout`.	text	txt
1896	4	MODULE_PARM_DESC(name, "First parameter description");	text	txt
1783	4	`c_str()` does the same but yields the result as a null terminated character\nsequence. Note that using this function is also not portable.	text	txt
1783	5	`make_preferred()` replaces any directory separator except for the root name\nby the native directory separator.	text	txt
1783	6	p.native(); // /dir\\\\subdir/subsubdir\\\\/./\\\\\np.c_str(); // same\np.preferred(); // \\\\\\\\dir\\\\\\\\subdir\\\\\\\\subsubdir\\\\\\\\\\\\\\\\.\\\\\\\\\\\\\\\\	code	txt
1784	1	`+` , `+=` and `concat()` just append new characters to a path.	text	txt
1784	2	std::filesystem::path p{"project"};	text	txt
1784	3	auto p2 = p + ".git"; // project.git	text	txt
1784	4	p += ".git"; // project.git\np2.concat(".git"); // project.git	text	txt
1784	5	std::filesystem::path p3{".git"};\np.concat(p3.begin(), p3.end()); // project.git	code	txt
1785	1	`/` , `/=` and `append()` add a subpath separated with the current directory\nseparator.	text	txt
1785	2	std::filesystem::path p{"project"};	text	txt
1785	3	auto p2 = p / ".git"; // project.git	text	txt
1785	4	p.append(".git"); // project.git\np /= ".git"; // project.git	text	txt
1785	5	std::filesystem::path p3{".git"};\np.append(p3.begin(), p3.end());	code	txt
1786	1	std::filesystem::path p{"/src/project/main"};\np.replace_extension(".cpp"); // /src/project/main.cpp	code	txt
1787	1	std::filesystem::path p;	text	txt
1787	2	std::string s{"/src/projects/linux"};\np.assign(s);	text	txt
1787	3	std::string_view sv{"/src/projects/linux-stable"};\np.assign(sv);	text	txt
1787	4	std::filesystem::path p2{"/src/projects/linux-hardened"};\np.assign(p2.begin(), p2.end());	code	txt
1788	1	std::filesystem::path p1;\nstd::filesystem::path p2;	text	txt
1788	2	p1.swap(p2);\nstd::swap(p1, p2);	code	txt
1789	1	std::filesystem::path p{"/src/project/main.cpp"};\np.replace_filename("window.cpp"); // /src/project/window.cpp	code	txt
1790	1	std::filesystem::path p{"/src/project/main.cpp"};\np.replace_extension("hpp"); // /src/project/main.hpp	code	txt
1791	1	std::filesystem::path p;\np.make_preferred();	code	txt
1792	1	std::filesystem::path p{"/src/project/main.cpp"};\np.remove_filename(); // /src/project/	code	txt
1793	1	std::filesystem::path p{"/src/project/main.cpp"};\np.replace_extension(); // /src/project/main	code	txt
1794	1	`==` , `!=` , `<` , `>` , `<=` , `>=` , `compare(p2)` , `compare(sv)` and `equivalent(p1, p2)` are available.	text	txt
1795	1	Using `==` , `!=` and `compare()` the following paths are all different:	text	txt
1795	2	```\ntmp/f\n./tmp/f\ntmp/./f\ntmp/subtmp/../f\ntmp//f\n/tmp\\\\f\ntmp/\\\\/f\n``````	text	txt
1795	3	Only if you call `lexically_normal()` for each path, all of the paths above are equal.	text	txt
1795	4	std::filesystem::path p1{"tmp/f"};\nstd::filesystem::path p2{"tmp/./f"};	text	txt
1795	5	p1 == p2; // false\np1.compare(p2); // not 0\np1.lexically_normal() == p2.lexically_normal(); // true\np1.lexically_normal().compare(p2.lexically_normal()); // 0	code	txt
2754	1	`/sys/module/<module>/parameters/`	text	txt
5449	1	gcc -fstack-usage	code	sh
1796	1	To take the filesystem into account so that symbolic links are correctly\nhandled, use `equivalent()`. Note that this function requires that both paths\nrepresent existing files.	text	txt
1796	2	std::filesystem::path p1{"/tmp/sym1"};\nstd::filesystem::path p2{"/tmp/sym2"};	text	txt
1796	3	std::filesystem::exists(p1); // true\nstd::filesystem::exists(p2); // true\nstd::filesystem::equivalent(p1, p2);	code	txt
1797	1	std::filesystem::exists(p);	code	txt
1798	1	Note that these functions follow symbolic links.\nSo for a symbolic link to a directory both `is_symlink()` and `is_directory()` yield true.	text	txt
1798	2	std::filesystem::is_symlink(p);\nstd::filesystem::is_regular_file(p);\nstd::filesystem::is_directory(p);	code	txt
1799	1	std::filesystem::is_other(p);	code	txt
1800	1	std::filesystem::is_block_file(p);\nstd::filesystem::is_character_file(p);\nstd::filesystem::is_fifo(p);\nstd::filesystem::is_socket(p);	code	txt
1801	1	std::filesytem::is_empty(p);	code	txt
1802	1	This free-standing function returns the size of file p in bytes if it exists\nas regular file. For all other files the result is implementation-defined and\nnot portable.	text	txt
1802	2	auto bytes = std::filesystem::file_size(p);	code	txt
1803	1	std::filesystem::hard_link_count(p);	code	txt
1804	1	Returns the timepoint of the last modification or write access of the file. The return type is a special `std::chrono::time_point` type.	text	txt
1804	2	namespace std::filesystem {\n    using file_time_type = chrono::time_point<trivialClock>;\n}	code	txt
1804	3	The clock type is an implementation specific clock type that reflects the resolution and range of file time values.	text	txt
1804	4	auto last_write = last_write_time(p);\nauto diff = std::filesystem::file_time_type::clock::now() - last_write;\nauto last_write_seconds = std::chrono::duration_cast<std::chrono::seconds>(diff).count();	code	txt
1805	1	std::filesystem::space_info = std::filesystem::space(p);	code	txt
1805	2	The return value of `space()` is the following signature:	text	txt
1805	3	namespace std::filesystem {\n    struct space_info {\n        uintmax_t capacity;\n        uintmax_t free;\n        uintmax_t available;\n    };\n}	code	txt
1806	1	`rename()` can deal with any type of file including directories and symbolic\nlinks.	text	txt
1806	2	Renaming symbolic links will rename the link, not where it refers to.	text	txt
1806	3	std::filesystem::rename(old, new);	code	txt
1807	1	std::filesystem::last_write_time(p, newtime);\nstd::filesystem::last_write_time(p, std::filesystem::file_time_type::clock::now());	code	txt
1808	1	std::filesystem::permissions(p, perms);\nstd::filesystem::permissions(p, perms, mode);	code	txt
1808	2	The optional `mode` is of the bitmask enumeration type `perm_options`,\ndefined in namespace `std::filesystem`. It allows on one hand to choose\nbetween `replace`, `add`, and `remove` and on the other hand with `nofollow`\nto modify permissions of the symbolic links instead of the files they refer\nto.	text	txt
1808	3	// remove write access for group and any access for others\nstd::filesystem::permissions(p, std::filesystem::perms::owner_write | std::filesystem::perms::others_all, std::filesystem::perm_options::remove);	code	txt
1809	1	std::filesystem::resize_file(p, newSize);	code	txt
1810	1	std::filesystem::current_path(p);	code	txt
2048	16	#include <vector>	text	txt
1811	1	`exists()` follows symbolic links. So, it yields `false` if there is a\nsymbolic link to a non-existing file. To avoid following symbolic links, use\n`symlink_status()` and then call `exists()` using the returned `file_status`\nobject.	text	txt
1811	2	#include <iostream>\n#include <filesystem>	text	txt
1811	3	int main()\n{\n    std::filesystem::path existing_file{"/dev/random"};\n    std::filesystem::path non_existing_file{"/dev/none"};\n    std::filesystem::path existing_symlink{"/lib"};	text	txt
1811	4	    std::filesystem::exists(existing_file);\n    std::filesystem::exists(non_existing_file);\n    std::filesystem::exists(symlink_status(existing_symlink));\n}	code	txt
1812	1	Use `symlink_status()` function to return a `file_status` object and call\nthese functions with it.	text	txt
1812	2	// check if p doesn't exist yet (as symbolic link)\nif (!exists(symlink_status(p)))\n    ...	code	txt
1813	1	std::filesystem::status(p);	code	txt
1814	1	std::filesystem::symlink_status(p);	code	txt
1815	1	std::filesystem::path p{};\nstd::filesystem::file_status fs = std::filesystem::status(p);	text	txt
5507	1	A `ftxui::separator` displays a vertical or horizontal line to visually split the content of a container in two.	text	md
1815	2	std::filesystem::is_regular_file(fs);\nstd::filesystem::is_directory(fs);\nstd::filesystem::is_symlink(fs);\nstd::filesystem::is_other(fs);	text	txt
1815	3	std::filesystem::is_character_file(fs);\nstd::filesystem::is_block_file(fs);\nstd::filesystem::is_fifo(fs);\nstd::filesystem::is_socket(fs);	code	txt
1816	1	std::filesystem::path p{};\nstd::filesystem::file_status fs = std::filesystem::status(p);\nstd::filesystem::file_type ft = fs.type();	text	txt
1816	2	switch (fs.type())\n{\n    using std::filesystem::file_type;\n    case (file_type::regular):      std::cout << "regular"; break;\n    case (file_type::directory):    std::cout << "directory"; break;\n    case (file_type::block):        std::cout << "block"; break;\n    case (file_type::character):    std::cout << "char"; break;\n    case (file_type::symlink):      std::cout << "symlink"; break;\n    case (file_type::socket):       std::cout << "socket"; break;\n    case (file_type::fifo):         std::cout << "fifo"; break;\n    case (file_type::not_found):    std::cout << "not found"; break;\n    case (file_type::unknown):      std::cout << "unknown"; break;\n    case (file_type::none):         std::cout << "none"; break;\n}	code	txt
1817	1	std::filesystem::path p{};\nstd::filesysetm::file_status fs = std::filesystem::status(p);\nstd::filesystem::perms file_permissions = fs.permissions();	code	txt
1818	1	#include <iostream>\n#include <filesystem>	text	txt
1818	2	int main()\n{\n    std::filesystem::path file{"/etc/passwd"};\n    std::filesystem::file_status status{std::filesystem::status(file)};\n    std::cout << "file type: ";\n    std::cout << "\\\\n";\n}	code	txt
1819	1	|Enum|Octal|POSIX|\n|---|---|---|\n|`none`|0||\n|`owner_read`|0400|`S_IRUSR`|\n|`owner_write`|0200|`S_IWUSR`|\n|`owner_exec`|0100|`S_IXUSR`|\n|`owner_all`|0700|`S_IRWXU`|\n|`group_read`|040|`S_IRGRP`|\n|`group_write`|020|`S_IWGRP`|\n|`group_exec`|010|`S_IXGRP`|\n|`group_all`|070|`S_IRWXG`|\n|`others_read`|04|`S_IROTH`|\n|`others_write`|02|`S_IWOTH`|\n|`others_exec`|01|`S_IXOTH`|\n|`others_all`|07|`S_IRWXO`|\n|`all`|0777||\n|`set_suid`|04000|`S_ISUID`|\n|`set_guid`|02000|`S_ISGID`|\n|`sticky_bit`|01000|`S_ISVTX`|\n|`mask`|07777||\n|`unknown`|0xFFFF||	text	txt
1819	2	std::filesystem::path p{};\nstd::filesystem::file_status fs = std::filesystem::symlink_status(fs);\nstd::filesystem::perms perms = fs.permissions();\nstd::filesystem::perms write_free = std::filesystem::perms::owner_write | std::filesystem::perms::group_write | std::filesystem::perms::others_write;	text	txt
1819	3	if ((perms & write_free) != std::filesystem::perms::none)\n{\n}	code	txt
1819	4	A shorter way to initialize a bitmask is:	text	txt
1819	5	if ((perms & std::filesystem::perms{0222}) != std::filesystem::perms::none)\n{\n}	code	txt
1820	1	#include <fstream>	text	txt
1820	2	std::fstream file{"/tmp/non-existing-file"};	code	txt
1821	1	std::filesystem::create_directory(p);\nstd::filesystem::create_directory(p, attributes);	code	txt
1821	2	The functions to create one or more directories return whether a new\ndirectory was created. Thus, finding a directory that is already there is not\nan error. However, finding a file there that is not a directory is also not\nan error.	text	txt
1821	3	if (!create_directory(p) && !is_directory(p))\n{\n    std::cerr << p << " already exists as a non-directory\\\\n";\n}	code	txt
1822	1	std::filesystem::create_directories(p);	code	txt
1823	1	If path already exists as a symbolic link to a non-existing file, it will try\nto create the symbolic link at the location where already the symbolic link\nexists and raise a corresponding exception.	text	txt
1823	2	std::filesystem::create_symlink(to, new);	code	txt
1824	1	std::filesystem::create_directory_symlink(to, new);	code	txt
1825	1	std::filesystem::create_hard_link(p);	code	txt
1826	1	std::filesystem::copy(from, to);\nstd::filesystem::copy(from, to, options);	code	txt
1827	1	std::filesystem::copy_file(from, to);\nstd::filesystem::copy_file(from, to, options);	code	txt
1828	1	Copy functions:	text	txt
1828	2	- Don't work with special file types.\n- Report an error if existing files are overwritten.\n- Don't operate recursively.\n- Follow symbolic links.	text	txt
1828	3	enum class std::filesystem::copy_options {\n    none,\n    skip_existing,      // skip overwriting existing files\n    overwrite_existing, // overwrite existing files\n    update_existing,    // overwrite existing files if the new files are newer\n    recursive,          // recursively copy sub-directories and their contents\n    copy_symlinks,      // copy symbolic links as symbolic links\n    skip_symlinks,      // ignore symbolic links\n    directories_only,   // copy directories only\n    create_hard_links,  // create additional hard links instead of copies of files\n    create_symlinks     // create symbolic links instead of copies of files\n    // for latter option the source path must be absolute path unless\n    // the destination path is in the current directory\n};	code	txt
1829	1	Both symlinks would refer to the same file.	text	txt
1829	2	std::filesystem::copy_symlink(from, to);	code	txt
1830	1	std::filesystem::remove(p);	code	txt
1831	1	Removes a file or recursively a directory. It returns as `uintmax_t` value\nhow many files were removed. It returns 0 if there was no file and\n`uintmax_t(-1)` if an error occured and no exception is thrown.	text	txt
1831	2	std::filesystem::remove_all(p);	code	txt
1832	1	The symbolic link and the file it refers to must already exist.	text	txt
1832	2	std::filesystem::read_symlink(symlink);	code	txt
1833	1	`absolute()` function does not follow symbolic links.	text	txt
1833	2	std::filesystem::absolute(p);	code	txt
1834	1	std::filesystem::relative(p);\nstd::filesystem::proximate(p);	code	txt
1835	1	std::filesystem::relative(p, base);\nstd::filesystem::proximate(p, base);	code	txt
1836	1	The most convenient way to do is to use a range-based for loop.	text	txt
1836	2	for (auto const& entry: std::filesystem::directory_iterator(dir))\n{\n    std::cout << entry.lexically_normal().string() << '\\\\n';\n}	code	txt
1837	1		code	txt
1838	1	When iterating over directories you can pass values of type\n`directory_options`. The type is a bitmask scoped enumeration type, defined\nin namespace `std::filesystem` as follows:	text	txt
1838	2	namespace std::filesystem {\n    enum class directory_options {\n        none,\n        follow_directory_symlink,\n        skip_permission_denied\n    };\n}	code	txt
1838	3	The default is not to follow symbolic links and to skip directories you are\nnot allowed to iterate over. With `skip_permission_denied` iterating over a\ndenied directory, results in an exception.	text	txt
1839	1	The elements directory iterators iterate over are of type\n`std::filesystem::directory_entry`. These iterators are input iterators. The\nreason is that iterating over a directory might result into different results\nas at any time directory entries might change. This has to be taken into\naccount when using directory iterators in parallel.	text	txt
1839	2	e.path();\ne.exists()\ne.is_regular_file()\ne.is_directory()\ne.is_symlink()\ne.is_other()\ne.is_block_file()\ne.is_character_file()\ne.is_fifo()\ne.is_socket()\ne.file_size()\ne.hard_link_count()\ne.last_write_time()\ne.status()\ne.symlink_status()\ne1 == e2\ne1 != e2\ne1 < e2\ne1 <= e2\ne1 > e2\ne1 >= e2\ne.assign(p)\ne.replace_filename(p)\ne.refresh()	code	txt
1839	3	`assign()` and `replace_filename()` call the corresponding modifying path\noperations but do not modify the files in the underlying filesystem.	text	txt
1840	1	Browsers try to resolve a set of URIs and expect a recieve from server in the\nform of HTTP 204 or 200 responses.	text	txt
1840	2	Detecting existance of a captive portal and internet connectivity are two\ndifferent things.	text	txt
1841	1	The target access point, also the collection of its information like channel,\nclients and etc.	text	txt
1842	1	On WPA-PSK or WPA2-PSK networks we should capture a handshake.	text	txt
1842	2	Then we would need to copy the captive portal or when non exists, create a\nconvincing one.	text	txt
1843	1	Stop network interfaces:\nsudo airmon-ng check kill	code	txt
1843	2	Switch wireless interface to monitor mode:\nsudo airmon-ng start wlan0	code	txt
1843	3	Use monitor mode to capture information about clients and access points:\nsudo airodump-ng wlan0mon	code	txt
1843	4	Capture handshake from one of clients:\nsudo airodump-ng -w discovery --output-format pcap -c 11 wlan0mon	code	txt
1843	5	Force a client to reconnect to the access pointer:\nsudo aireplay-ng -0 0 -a <AP:BSSID> wlan0mon	code	txt
1843	6	Disable monitor mode:\nsudo airmon-ng stop wlan0mon	code	txt
1844	1	For this scenario we need PHP and Apache server.	text	txt
3407	1	${BUILDDIR}/workspace	code	sh
1844	2	Download website content of the target corporation behind captive portal:\nwget -r -l2 https://megacorpone.com	code	txt
1844	3	Setup http server and index file:\nsudo mkdir /var/www/html/portal\nsudo cp -r ./www.megacorpone.com/assets/ /var/www/html/portal/\nsudo cp -r ./www.megacorpone.com/old-site/ /var/www/html/portal/	code	txt
1844	4	Create index file:\nsudoedit /var/www/html/portal/index.php	code	txt
1844	5	Create login check script to verify client given password works:\nsudoedit /var/www/html/portal/login_check.php	code	txt
1844	6	Create an interface for fake captive portal:\nsudo ip addr add 192.168.87.1/24 dev wlan0\nsudo ip link set wlan0 up	code	txt
1844	7	Use dnsmasq to setup DHCP server:\nvim mco-dnsmasq.conf	text	txt
1844	8	domain-needed\nbogus-priv\nno-resolv\nfilterwin2k\nexpand-hosts\ndomain=localdomain\nlocal=/localdomain/	text	txt
1844	9	listen-address=192.168.87.1	text	txt
1844	10	dhcp-range=192.168.87.100,192.168.87.199,12h\ndhcp-lease-max=100	text	txt
1844	11	log-quesries\naddress=/com/192.168.87.1\naddress=/org/192.168.87.1\naddress=/net/192.168.87.1\n# Entries for windows 7 and 10 captive portal detection\naddress=/dns.msftncsi.com/131.103.255.255	code	txt
1844	12	Start DHCP service:\nsudo dnsmasq --conf-file=mco-dnsmasq.conf	code	txt
1844	13	Confirm services are running:\nsudo ss -antlp	code	txt
1844	14	Sometimes clients ignore settings setup in DHCP lease, we can reroute these\nrequests by netfilter:\nsudo nft add table ip nat\nsudo nft 'add chain nat PREROUTING { type nat hook prerouting priority dstnat; policy accept; }'\nsudo nft add rule ip nat PREROUTING iifname "wlan0" udp dport 53 counter redirect to :53	code	txt
1844	15	Configure Apache to accept mode rewrite and alias rules:\nsudoedit /etc/apache2/sites-enabled/000-default.conf	text	txt
1844	16	# Apple\nRewriteEngine on\nRewriteCond %{HTTP_USER_AGENT} ^CaptiveNetworkSupport(.*)$ [NC]\nRewriteCond %{HTTP_HOST} !^192.168.87.1$\nRewriteRule ^(.*)$ http://192.168.87.1/portal/index.php [L,R=302]	text	txt
1844	17	# Android\nRedirectMatch 302 /generate_204 http://192.168.87.1/portal/index.php	text	txt
1844	18	# Windows 7 and 10\nRedirectMatch 302 /ncsi.txt http://192.168.87.1/portal/index.php\nRedirectMatch 302 /connecttest.txt http://192.168.87.1/portal/index.php	text	txt
1844	19	# Catch-all rule to redirect other possible attempts\nRewriteCond %{REQUEST_UIR} !^/portal/ [NC]\nRewriteRule ^(.*)$ http://192.168.87.1/portal/index.php [L]	code	txt
1844	20	Use Apache modules to make rewrite and redirects work:\nsudo a2enmod rewrite\nsudo a2enmod alias	code	txt
1844	21	Restart Apache:\nsudo systemctl restart apache2	code	txt
1844	22	Confirm that captive portal works:\nfirefox http://192.168.87.1/portal/index.php	code	txt
1844	23	Configure hostapd:\nvim mco-hostapd.conf	text	txt
1844	24	interface=wlan0\nssid=MegaCorp One Lab\nchannel=11\nhw_mode=g\nieee80211n=1	code	txt
1844	25	Run hostapd to create captive portal:\nsudo hostapd -B mco-hostapd.conf	code	txt
1844	26	Capture passphrases using your captive portal.	text	txt
1845	1	git clone https://git.kernel.org - https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git	code	txt
1845	2	The cloning process can be trimmed by setting `--depth 1` option.	text	txt
1845	3	It is best practice to use **LTS** kernel releases for production, so checkout to the latest stable tag:	text	txt
1845	4	git checkout v5.4	code	txt
1919	2	static DEFINE_SPINLOCK(my_spinlock);	code	txt
2048	20	#include <bag>	text	txt
2764	1	* `/proc/interrupts`\n* `/proc/devices`\n* `/proc/iomem`\n* `/proc/ioports`\n* `/proc/cmdline`: contains kernel command line\n* `/proc/sys`: also known as *sysctl*, contains many files that can be written to adjust kernel parameters.	text	txt
2765	1	Represents buses, devices and drivers in the system.\nThis filesystem is usually used by `udev` or `mdev`.	text	txt
2765	2	mount -t sysfs nodev /sys	code	txt
2766	1	* Use the command specified by `init` kernel command line parameter.\n* Try running `/sbin/init`, `/bin/init`, `/etc/init`, and `/bin/sh`.\n* When `initramfs` used, only `/init` will run or `rdinit` kernel argument is used.\n* Kernel panic.	text	txt
2766	2		code	txt
2767	1	*init.c*\n#include <stdio.h>	text	txt
2767	2	int main(void)\n{\n    fprintf(stdout, "Init program\\\\n");\n    while (true);\n}	code	txt
1846	1	* `arch/`: To be as generic as possible, architecture-specific code.\n* `block/`: Codes for block storage devices.\n* `crypto/`: Cryptographic API and the encryption algorithm's code.\n* `certs/`: Certificates and sign files to enable a module signature to make the kernel load signed modules.\n* `documentation/`: Descriptions of the APIs that are used for different kernel frameworks and subsystems.\n* `drivers/`: Device driver, organized into various subdirectories.\n* `fs/`: Implementations of different filesystems that the kernel supports, such as NTFS, FAT, ETX{2,3,4}, sysfs, procfs, NFS, and so on.\n* `include/`: Kernel header files.\n* `init/`: Initialization and startup code.\n* `ipc/`: Implementation of the inter-process communication (IPC) mechanisms, such as message queues, semaphores, and shared memory.\n* `kernel/`: Architecture-independent portions of the base kernel.\n* `lib/`: Library routines and some helper functions including generic **kernel object (kobject)** handlers and **cyclic redundancy code (CRC)** computation functions.\n* `mm/`: Memory management code.\n* `net/`: Networking (whatever network type it is) protocol code.\n* `samples/`: Device driver samples for various subsystems.\n* `scripts/`: Scripts and tools that are used alongside the kernel.\n* `security/`: Security framework code.\n* `sound/`: Audio subsystem code.\n* `tools/`: Linux kernel development and testing tools for various subsystems, such as USB, vhost test modules, GPIO, IIO, and SPI, among others.\n* `usr/`: `initramfs` implementation.\n* `virt/`: Virtualization directory, which contains the kernel virtual machine (KVM) module for a hypervisor.	text	txt
1847	1	Cross-compiler prefix and the architecture of the target must be specified.	text	txt
1847	2	ARCH=<XXXX> CROSS_COMPILE=<YYYY> make help	code	txt
1847	3	If these variables are not specified, the native host machine is going to be targeted.	text	txt
1847	4	make help	code	txt
1847	5	When `ARCH` is omitted or not set, it will default to the host where `make` is executed. It will default to `$(uname -m)`.\nWhen `CROSS_COMPILE` is omitted or not set, `$(CROSS_COMPILE)gcc` will result in `gcc`, and will be the same for other tools, for example `$(CROSS_COMPILE)ld` will result in `ld`.	text	txt
1848	1	make menuconfig   # ncurses-based interface\nmake xconfig      # X-based interface	code	txt
1849	1	Selected options will be stored in `.config` file, at the root of the source tree.	text	txt
1850	1	It is very difficult to know which configuration is going to work on your platform.\nIn most cases, there will be no need to start a configuration from scratch.\nThere are default and functional configuration files available in each arch directory that you can use as a starting point (it is important to start with a configuration that already works):	text	txt
1850	2	ls arch/<arch>/configs/	code	txt
1850	3	The kernel configuration command, given a default configuration file, is as follows:	text	txt
1850	4	ARCH=<arch> make <defconfig>\nARCH=x86_64 make defconfig\nARCH=arm64 CROSS_COMPILE=aarch64-unknown-linux-gnueabi- make defconfig\nARCH=arm CROSS_COMPILE=armv6-unknown-linux-gnueabihf- make bcm2835_defconfig	code	txt
2754	2	Some modules give you write access to module parameters.	text	txt
1851	1	Running `make defconfig` or any alternatives will generate a new `.config` file in the main (root) directory, while the old `.config` will be renamed `.config.old`.	text	txt
1852	1	make savedefconfig	code	txt
1852	2	This command will create a minimal (since it won't store non-default settings) configuration file.\nThe generated default configuration file will be called `defconfig` and stored at the root of the source tree.\nYou can store it in another location using the following command:	text	txt
1852	3	mv defconfig arch/<arch>/configs/myown_defconfig	code	txt
1852	4	This way, you can share a reference configuration inside the kernel sources and other developers can now get the same `.config` file as you by running the following command:	text	txt
1852	5	ARCH=<arch> make myown_defconfig	code	txt
1853	1	Assuming that host is a 64bit machine, `ARCH` is set to `x86_64`:	text	txt
1853	2	make x86_64_defconfig	code	txt
1854	1	make ARCH=arm64 CROSS_COMPILE=aarch64-unknown-linux-gnu- make defconfig	code	txt
1855	1	Following target prompts for every new configuration option:	text	txt
1855	2	make oldconfig	code	txt
1855	3	You can avoid prompting new configuration options by setting their default values:	text	txt
1855	4	make olddefconfig	code	txt
1855	5	Or you can say no to every new option by:	text	txt
1855	6	make oldnoconfig	code	txt
1856	1	Debian and Ubuntu Linux distributions save the `.config` file in the `/boot` directory:	text	txt
1856	2	cp /boot/config-$(uname -r) .config	code	txt
1856	3	The other distributions may not do this.	text	txt
1856	4	When `IKCONFIG` and `IKCONFIG_PROC` kernel configuration options enabled, the configuration file can also be found in:	text	txt
1856	5	/proc/configs.gz	code	txt
1857	1	* `IKCONFIG`: This is a boolean option to enable this feature.\n* `IKCONFIG_PROC`: Boolean option, when set to `y` the `config.gz` file becomes available in `/proc`.	text	txt
1858	1	* `CMDLINE_EXTEND`: This is a boolean option to enable this feature.\n* `CMDLINE`: This options is a string containing the actual command-line extension value.	text	txt
1858	2	For example:	text	txt
1858	3	```\nCMDLINE="noinitrd usbcore.authorized_default=0"\n``````	text	txt
1859	1	`CONFIG_KALLSYMS`: This is very useful for tracers and other tools that need to map kernel symbols to addresses. It is used while you're printing oops messages. Without this, oops listings would produce hexadecimal output, which is difficult to interpret.	text	txt
1860	1	`CONFIG_PRINTK_TIME`: This is a boolean option to enable this feature.	text	txt
1861	1	`CONFIG_INPUT_EVBUG`	text	txt
1862	1	`CONFIG_MAGIC_SYSRQ`: This is a boolean option to enable this feature.	text	txt
1863	1	`FTRACE` and `DYNAMIC_FTRACE`	text	txt
1864	1	* `FUNCTION_TRACER`: allows tracing functions.\n* `FUNCTION_GRAPH_TRACER`: This also shows a call graph.	text	txt
1865	1	`IRQSOFF_TRACER`	text	txt
1866	1	* `PREEMPT_TRACER`\n* `SCHED_TRACER`	text	txt
1867	1	If not specified, the `make` target is `all`.	text	txt
1867	2	ARCH=aarch64 CROSS_COMPILE=aarch64-unknown-linux-gnueabihf- make	code	txt
1867	3	For `x86` or `x86_64` architectures, this target points to `vmlinux`, `bzImage`, and `modules` targets.\nFor `arm` or `aarch64` architectures, it corresponds to `vmlinuz`, `zImage`, `modules`, and `dtbs` targets.	text	txt
1867	4	`make` can leverage the host's CPU performance by running multiple jobs in parallel:	text	txt
1868	1	* `arch/<arch>/boot/Image`: An uncompressed kernel image that can be booted.\n* `arch/<arch>/boot/*Image*`: A compressed kernel image that can also be booted.\n* `arch/<arch>/boot/dts/*.dtb`: Provides compiled device tree blobs for the selected CPU variant.\n* `vmlinux`: A raw, uncompressed, and unstripped kernel image in ELF format. It's useful for debugging purposes but generally not used for booting purposes.	text	txt
1869	1	In native installation following command copies artifacts like `/boot/vmlinuz-<version>`, `/boot/System.map-<version>`, and `/boot/config-<version>` files on the host.	text	txt
1869	2	sudo make install	code	txt
1869	3	However, an embedded installation usually uses a single file kernel.	text	txt
1870	1	make modules\nsudo make modules_install	code	txt
1870	2	The resulting modules will be installed in `/lib/modules/$(uname -r)/kernel/`, in the same directory structure as their corresponding source.	text	txt
1871	1	The resulting modules will be installed in `/lib/modules/$(uname -r)/kernel/`, in the same directory structure as their corresponding source.	text	txt
1871	2	ARCH=arm CROSS_COMPILE=armv6-unknown-linux-gnueabihf- make modules	code	txt
1871	3	However, this can be changed by specifying modules path with `INSTALL_MOD_PATH`:	text	txt
1871	4	ARCH=arm CROSS_COMPILE=armv6-unknown-linux-gnueabihf- INSTALL_MOD_PATH=<dir> make modules_install	code	txt
1872	1	Module files are installed in `/lib/modules/<version>/`:	text	txt
1872	2	* `modules.builtin`: This lists all the kernel objects (.ko) that are built into the kernel. It is used by the module loading utility (modprobe, for example) so that it does not fail when it's trying to load something that's already built in. `modules.builtin.bin` is its binary counterpart.\n* `modules.alias`: This contains the aliases for module loading utilities, which are used to match drivers and devices.\n* `modules.dep`: This lists modules, along with their dependencies. `modules.dep.bin` is its binary counterpart.\n* `modules.symbols`: This tells us which module a given symbol belongs to. They are in the form of `alias symbol:<symbol> <modulename>`. An example is `alias symbol:v4l2_async_notifier_register videodev`. `modules.symbols.bin` is the binary counterpart of this file.	text	txt
1872	3	And the rest of module files will be stored in `/lib/modules/<version>/kernel/` in the same directory structure as their corresponding source.	text	txt
1873	1	Static modules are available at any time in the kernel image and thus can't\nbe unloaded, at the cost of extra size to the final kernel image. A static\nmodule is also known as a built-in module, since it is part of the final\nkernel image output. Any change in its code will require the whole kernel to\nbe rebuilt.	text	txt
1873	2	Some features (such as device drivers, filesystems, and frameworks) can,\nhowever, be compiled as loadable modules. Such modules are separated from the\nfinal kernel image and are loaded on demand.	text	txt
1874	1	`CONFIG_MODULES=y`	text	txt
1875	1	`CONFIG_MODULE_UNLOAD=y`	text	txt
1876	1	`CONFIG_MODULE_FORCE_UNLOAD=y`	text	txt
1877	1	#include <linux/module.h>\n#include <linux/init.h>	text	txt
1877	2	static int __init load_sample(void)\n{\n    pr_info("Sample module loaded");\n    return 0;\n}	text	txt
1877	3	static void __exit unload_sample(void)\n{\n    pr_info("Sample module unloaded");\n}	text	txt
1877	4	module_init(load_sample);\nmodule_exit(unload_sample);	text	txt
1877	5	MODULE_LICENSE("GPL");\nMODULE_AUTHOR("Brian Salehi <salehibrian@gmail.com>");\nMODULE_DESCRIPTION("Sample module to do nothing");	code	txt
1878	1	* `module_init()` is used to declare the function that should be called when the module is loaded.\n* `module_exit()` is used only when the module can be built as a loadable kernel module.	text	txt
1878	2	Both methods are invoked only once, whatever the number of devices currently handled by the module, provided the module is a device driver.	text	txt
1879	1	`__init` and `__exit` are kernel macros, defined in `include/linux/init.h`.\nThey are Linux directives (macros) that wrap GNU C compiler attributes used for symbol placement.\nThey instruct the compiler to put the code they prefix in the `.init.text` and `.exit.text` sections.	text	txt
1879	2	#define __init __section(.init.text)\n#define __exit __section(.exit.text)	code	txt
1879	3	`__init`:	text	txt
1879	4	The `__init` keyword tells the linker to place the symbols (variables or functions)\nthey prefix in a dedicated section in the resulting kernel object file.\nThis section is known in advance to the kernel and freed when the module is loaded\nand the initialization function has finished.\nThis applies only to built-in modules, not to loadable ones.\nSince the driver cannot be unloaded, its initialization function will never be called\nagain until the next reboot.\nThere is no need to keep references on this initialization function anymore.	text	txt
1879	5	`__exit`:	text	txt
1879	6	It is the same for the `__exit` keyword and the exit method, whose corresponding code\nis omitted when the module is compiled statically into the kernel or when module\nunloading support is not enabled because, in both cases, the exit function\nis never called.\n`__exit` has no effect on loadable modules.	text	txt
1880	1	A kernel module uses its `.modinfo` section to store information about the module.	text	txt
1881	1	Any `MODULE_*` macro will update the content of `.modinfo` section with the values passed as parameters.\nSome of these macros are `MODULE_DESCRIPTION()`, `MODULE_AUTHOR()`, and `MODULE_LICENSE()`.	text	txt
1882	1	MODULE_INFO(tag, info);	code	txt
1883	1	${CROSS_COMPILE}objdump -d -j .modinfo <module_name>.ko\n${CROSS_COMPILE}objdump --disassembly --section .modinfo <module_name>.ko	code	txt
1884	1	The license will define how your source code should be shared (or not) with other developers.\n`MODULE_LICENSE()` tells the kernel what license our module is under.\nIt has an effect on your module behavior, since a license that is not compatible with\n**GPL (General Public License)** will result in your module not being able to see/use\nsymbols exported by the kernel through the `EXPORT_SYMBOL_GPL()` macro,\nwhich shows the symbols for GPL-compatible modules only.\nThis is the opposite of `EXPORT_SYMBOL()`, which exports functions for modules with any license.	text	txt
1884	2	Loading a non-GPL-compatible module will result in a tainted kernel; that means non-open source or untrusted code has been loaded, and you will likely have no support from the community.	text	txt
2767	3	arm-black-linux-gnueabihf-gcc -o simple_init -static init.c\ncp simple_init /srv/nfs4/root/	code	txt
1884	3	Remember that the module without `MODULE_LICENSE()` is not considered open source and will taint the kernel too.\nAvailable licenses can be found in `include/linux/module.h`, describing the license supported by the kernel.	text	txt
1995	6	Configure the `/etc/security/faillock.conf` file.	text	txt
1885	1	When code is outside of the kernel source tree, it is known as **out-of-tree** building.\nBuilding a module this way does not allow integration into the kernel configuration/compilation process, and the module needs to be built separately.\nIt must be noted that with this solution, the module cannot be statically linked in the final kernel image – that is, it cannot be built in.\nOut-of-tree compilation only allows **loadable kernel modules** to be produced.	text	txt
1886	1	With this building method the code is inside the kernel tree, which allows you to upstream your code, since it is well integrated into the kernel configuration/compilation process.\nThis solution allows you to produce either a statically linked module (also known as **built-in**) or a **loadable kernel module**.	text	txt
1887	1	obj-m := helloworld.o	text	txt
1887	2	KERNEL_SRC ?= /lib/modules/$(shell uname -r)/build	text	txt
1887	3	all default: modules\ninstall: modules_install	text	txt
1887	4	modules modules_install help clean:\n    $(MAKE) -C $(KERNEL_SRC) M=$(shell pwd) $@	code	txt
1887	5	`KERNEL_SRC`: This is the location of the prebuilt kernel source which usually is `/lib/modules/$(uname -r)/build`.\nThere is also a symbolic link `/usr/src/linux` pointing to this directory.\nAs we said earlier, we need a prebuilt kernel in order to build any module.\nIf you have built your kernel from the source, you should set this variable with the absolute path of the built source directory.\n`–C` instructs the make utility to change into the specified directory reading the makefiles.	text	txt
1887	6	`M`: This is relevant to the kernel build system.\nThe `Makefile` kernel uses this variable to locate the directory of an external module to build.\nYour `.c` files should be placed in that directory.	text	txt
1887	7	`$(MAKE) -C $(KERNEL_SRC) M=$(shell pwd) $@`: This is the rule to be executed for each of the targets enumerated previously.\nUsing this kind of magic word prevents us from writing as many (identical) lines as there are targets.	text	txt
1887	8	make\nmake modules	code	txt
1888	1	* `all`: The default target which depends on the `modules` target.\n* `modules`: This is the default target for external modules. It has the same functionality as if no target was specified.\n* `install`: Depends on `modules_install` target.\n* `modules_install`: This installs the external module(s). The default location is `/lib/modules/<kernel_release>/extra/`. This path can be overridden by `INSTALL_MOD_PATH` option.\n* `clean`: This removes all generated files.	text	txt
1889	1	We must specify the name of the module(s) to be built, along with the list of requisite source files:	text	txt
1889	2	obj-<X> := <module_name>.o	code	txt
1889	3	`<X>` can be either y, m, or left blank.	text	txt
1889	4	In the preceding, the kernel build system will build `<module_name>.o` from `<module_name>.c` or `<module_name>.S`, and after linking, it will result in the `<module_name>.ko` kernel loadable module or will be part of the single-file kernel image.	text	txt
1889	5	However, the `obj-$(CONFIG_XXX)` pattern is often used, where `CONFIG_XXX` is a kernel configuration option, set or not, during the kernel configuration process:	text	txt
1889	6	obj-$(CONFIG_MYMODULE) += mymodule.o	code	txt
1889	7	`$(CONFIG_MYMODULE)` evaluates to either y, m, or nothing (blank), according to its value during the kernel configuration.	text	txt
1890	1	<module_name>-y := <file1>.o <file2>.o	code	txt
1890	2	The `<module_name>.ko` will be built from two files, `file1.c` and `file2.c`.\nHowever, if you wanted to build two modules, let's say `foo.ko` and `bar.ko`, the Makefile line would be as follows:	text	txt
1890	3	obj-m := foo.o bar.o	code	txt
1890	4	If `foo.o` and `bar.o` are made of source files other than `foo.c` and `bar.c`, you can specify the appropriate source files of each object file, as shown here:	text	txt
1890	5	obj-m := foo.o bar.o\nfoo-y := foo1.o foo2.o . . .\nbar-y := bar1.o bar2.o bar3.o . . .	code	txt
1890	6	The following is another example of listing the requisite source files to build a given module:	text	txt
1890	7	obj-m := 8123.o\n8123-y := 8123_if.o 8123_pci.o 8123_bin.o	code	txt
1891	1	ccflags-y := -I$(src)/include\nccflags-y += -I$(src)/src/hal/include\nldflags-y := -T$(src)foo_sections.lds	code	txt
1892	1	Included directories should contain `Makefile` or `Kbuild` files.	text	txt
1892	2	obj-<X> += somedir/	code	txt
1892	3	This means that the kernel build system should go into the directory named somedir and look for any `Makefile` or `Kbuild` files inside, processing it in order to decide what objects should be built.	text	txt
1893	1	Building the kernel from source in a directory like `/opt`.\nThen pointing to the build directory in `Makefile`:	text	txt
1893	2	obj-m: [target].o\n    make -C /opt/linux-stable/build M=$(PWD) [target]	code	txt
1893	3	An alternative is installing the `linux-headers-*` package from the distribution package feed. (x86 only)\nThis will install preconfigured and prebuilt kernel headers (not the whole source tree) in `/usr/src/linux` which a symbolic link to `/lib/modules/$(uname -r)/build`.\nIt is the path you should specify as the kernel directory in `Makefile` as follows:	text	txt
1893	4	obj-m: [target].o\n    make -C /usr/src/linux M=$(PWD) [target]`.	code	txt
1894	1	sudo journalctl -fk	text	txt
1894	2	sudo insmod helloworld.ko\nsudo rmmod helloworld	code	txt
1895	1	In-tree module building requires dealing with an additional file, `Kconfig`, which allows us to expose the module features in the configuration menu.	text	txt
1895	2	Given your filename, `sample.c`, which contains the source code of your special character driver, it should be moved to the `drivers/char` directory in the kernel source.	text	txt
1895	3	Every subdirectory in the `drivers` has both `Makefile` and `Kconfig` files.\nAdd the following template to the `Kconfig` file of that directory to add support for the **built-in** module:	text	txt
1895	4	config SAMPLE\n    tristate "Sample character driver"\n    default m\n    help\n      Say Y to support /dev/sample character driver.\n      The /dev/sample is used for practical examples.	code	txt
1895	5	In `Makefile` in that same directory, add the following line:	text	txt
1895	6	obj-$(CONFIG_SAMPLE) += sample.o	code	txt
5507	2	For separators, `ftxui::separator`, `ftxui::separatorRound` and `ftxui::separatorLight` look the same.	text	md
1895	7	In order to have your module built as a **loadable kernel module**, add the following line to your `defconfig` board in the `arch/arm/configs` directory:	text	txt
1895	8	CONFIG_SAMPLE=m	code	txt
1896	1	#include <linux/module.h>\n#include <linux/init.h>\n#include <linux/moduleparam.h>	text	txt
1896	2	static char *name = "first parameter";	text	txt
1896	5	static int __init load_sample(void)\n{\n    pr_notice("Sample: Module Loaded\\\\n");\n    pr_info("Sample Parameter: %s\\\\n", name);\n    return 0;\n}	text	txt
1896	6	static void __exit unload_sample(void)\n{\n    pr_notice("Sample: Module Unloaded\\\\n");\n}	text	txt
1896	7	module_init(load_sample);\nmodule_exit(unload_sample);	text	txt
1896	8	MODULE_AUTHOR("Brian Salehi <salehibrian@gmail.com>");\nMODULE_LICENSE("GPL");\nMODULE_VERSION("0.1");\nMODULE_DESCRIPTION("Sample Kernel Module");	code	txt
1896	9	sudo insmod parameters.ko name="modified parameter"	code	txt
1897	1	It is also possible to find and edit the current values for the parameters of a loaded module from **Sysfs** in `/sys/module/<name>/parameters`.\nIn that directory, there is one file per parameter, containing the parameter value.\nThese parameter values can be changed if the associated files have write permissions	text	txt
1898	1	Parameters can be passed by the bootloader or provided by the `CONFIG_CMDLINE` configuration option:	text	txt
1898	2	CONFIG_CMDLINE=... my_module.param=value	code	txt
1899	1	To be visible to a kernel module, functions and variables must be explicitly exported by the kernel.\nThus, the Linux kernel exposes two macros that can be used to export functions and variables.\nThese are the following:	text	txt
1899	2	* `EXPORT_SYMBOL(symbolname)`: This macro exports a function or variable to all modules.\n* `EXPORT_SYMBOL_GPL(symbolname)`: This macro exports a function or variable only to GPL modules.	text	txt
1899	3	`EXPORT_SYMBOL()` or its `GPL` counterpart are Linux kernel macros that make a symbol available to loadable kernel modules or dynamically loaded modules (provided that said modules add an extern declaration – that is, include the headers corresponding to the compilation units that exported the symbols).	text	txt
1899	4	Code that is built into the kernel itself (as opposed to loadable kernel modules) can, of course, access any non-static symbol via an extern declaration, as with conventional C code.	text	txt
1900	1	It does that by reading each module in `/lib/modules/<kernel_release>/` to determine what symbols it should export and what symbols it needs.\nThe result of that process is written to a `modules.dep` file, and its binary version, `modules.dep.bin`.	text	txt
1901	1	During development, you usually use `insmod` in order to load a module.\n`insmod` should be given the path of the module to load, as follows:	text	txt
1901	2	insmod /path/to/mydrv.ko	code	txt
1901	3	`modprobe` is a clever command that parses the `modules.dep` file in order to load dependencies first, prior to loading the given module.	text	txt
2736	1	Device tree source has a hierarchical structure, first describing the inner\ndetails of a device and then outer layers. This allows us to add features or\nchange specific aspects of hardware in the source.	text	txt
2737	1	bootz X - Y (zImage)\nbootm X - Y (uImage)\nbooti X - Y (Image)	code	txt
1902	1	When kernel developers write drivers, they know exactly what hardware the drivers will support.\nThey are then responsible for feeding the drivers with the product and vendor IDs of all devices supported by the driver.\n`depmod` also processes module files in order to extract and gather that information and generates a `modules.alias` file, located in `/lib/modules/<kernel_release>/modules.alias`, which maps devices to their drivers.	text	txt
1902	2	```modules.alias\nalias usb:v0403pFF1Cd*dc*dsc*dp*ic*isc*ip*in* ftdi_sio\nalias usb:v0403pFF18d*dc*dsc*dp*ic*isc*ip*in* ftdi_sio\nalias usb:v0403pDAFFd*dc*dsc*dp*ic*isc*ip*in* ftdi_sio\n``````	text	txt
1902	3	At this step, you'll need a user space **hotplug agent** (or device manager), usually `udev` (or `mdev`), that will register with the kernel to get notified when a new device appears.\nThe notification is done by the kernel, sending the device's description (the product ID, the vendor ID, the class, the device class, the device subclass,\nthe interface, and any other information that can identify a device) to the hotplug daemon, which in turn calls `modprobe` with this information.\n`modprobe` then parses the `modules.alias` file in order to match the driver associated with the device.\nBefore loading the module, `modprobe` will look for its dependencies in `module.dep`.\nIf it finds any, they will be loaded prior to the associated module loading; otherwise, the module is loaded directly.	text	txt
1903	1	If you want some modules to be loaded at boot time, just create a `/etc/modules-load.d/<filename>.conf` file and add the module names that should be loaded, one per line:	text	txt
1903	2	uio\niwlwifi	code	txt
1903	3	These configuration files are processed by `systemd-modules-load.service`, provided that `systemd` is the initialization manager on your machine.\nOn `SysVinit` systems, these files are processed by the `/etc/init.d/kmod` script.	text	txt
1904	1	The usual command to unload a module is `rmmod`.\nThis is preferable to unloading a module loaded with the `insmod` command:	text	txt
1904	2	sudo rmmod mymodule	code	txt
1904	3	On the other hand, `modeprobe –r` automatically unloads unused dependencies:	text	txt
1904	4	modprobe -r mymodule	code	txt
1905	1	lsmod	code	txt
1905	2	The output includes the name of the module, the amount of memory it uses, the number of other modules that use it, and finally, the name of these.	text	txt
1905	3	The output of `lsmod` is actually a nice formatting view of what you can see under `/proc/modules`:	text	txt
1905	4	cat /proc/modules	code	txt
1905	5	The preceding output is raw and poorly formatted.\nTherefore, it is preferable to use `lsmod`.	text	txt
1906	1	Some of the errors are defined in `include/uapi/asm-generic/errno-base.h`, and the rest of the list can be found in `include/uapi/asm-generic/errno.h`.	text	txt
1907	1	The standard way to return an error is to do so in the form of `return –ERROR`, especially when it comes to answering system calls.\nFor example, for an I/O error, the error code is `EIO`, and you should return `-EIO`, as follows:	text	txt
1907	2	dev = init(&ptr);\nif(!dev)\n    return –EIO	code	txt
1908	1	When you face an error, you must undo everything that has been set until the error occurred.	text	txt
1908	2	ret = 0;	text	txt
1908	3	ptr = kmalloc(sizeof (device_t));	text	txt
1908	4	if(!ptr) {\n    ret = -ENOMEM\n    goto err_alloc;\n}	text	txt
1908	5	dev = init(&ptr);	text	txt
1908	6	if(!dev) {\n    ret = -EIO\n    goto err_init;\n}	text	txt
1908	7	return 0;	text	txt
1908	8	err_init:\n    free(ptr);	text	txt
1908	9	err_alloc:\n    return ret;	code	txt
1908	10	By using the `goto` statement, we have straight control flow instead of a nest.	text	txt
1908	11	That said, you should only use `goto` to move forward in a function, not backward, nor to implement loops (as is the case in an assembler).	text	txt
1919	3	This macro is defined in `include/linux/spinlock_types.h`.	text	txt
2051	1	sudo command	code	txt
1909	1	When it comes to returning an error from functions that are supposed to return a pointer, functions often return the `NULL` pointer.\nIt is functional but it is a quite meaningless approach, since we do not exactly know why this `NULL` pointer is returned.\nFor that purpose, the kernel provides three functions, `ERR_PTR`, `IS_ERR`, and `PTR_ERR`, defined as follows:	text	txt
1909	2	void *ERR_PTR(long error);\nlong IS_ERR(const void *ptr);\nlong PTR_ERR(const void *ptr);	code	txt
1909	3	* `ERR_PTR`: The first macro returns the error value as a pointer.\n* `IS_ERR`: The second macro is used to check whether the returned value is a pointer error using `if(IS_ERR(foo))`.\n* `PTR_ERR`: The last one returns the actual error code, `return PTR_ERR(foo)`.	text	txt
1909	4	static struct iio_dev *indiodev_setup()\n{\n    ...\n    struct iio_dev *indio_dev;\n    indio_dev = devm_iio_device_alloc(&data->client->dev, sizeof(data));	text	txt
1909	5	    if (!indio_dev)\n        return ERR_PTR(-ENOMEM);	text	txt
1909	6	    ...\n    return indio_dev;\n}	text	txt
1909	7	static int foo_probe(...)\n{\n    ...\n    struct iio_dev *my_indio_dev = indiodev_setup();	text	txt
1909	8	    if (IS_ERR(my_indio_dev))\n        return PTR_ERR(data->acc_indio_dev);\n    ...\n}	code	txt
1909	9	This is an excerpt of the kernel coding style that states that if a function's name is an action or an **imperative** command, the function should return an integer error code.\nIf, however, the function's name is a **predicate**, this function should return a Boolean to indicate the succeeded status of the operation.	text	txt
1909	10	For example, `add_work()` function is imperative and returns `0` for success or `-EBUSY` for failure.\nOn the other hand, `pci_dev_present()` function is a predicate and returns `1` if it succeeds in finding a matching device or `0` if it doesn't.	text	txt
1910	1	Depending on how important the message to print is, `printk()` allowed you to choose between eight log-level messages, defined in `include/linux/kern_levels.h`.	text	txt
1911	1	* `pr_<level>(...)`: This is used in regular modules that are not device drivers.\n* `dev_<level>(struct device *dev, ...)`: This is to be used in device drivers that are not network devices.\n* `netdev_<level>(struct net_device *dev, ...)`: This is used in `netdev` drivers exclusively.	text	txt
2738	1	setenv serverip 192.168.0.2\nsetenv ipaddr 192.168.0.3\nsetenv bootargs 'console=ttyS0,115200 8250.nr_uarts=1 swiotlb=128 maxcpu=1' # rasbperry pi specific\nsaveenv\ntftp ${kernel_addr_r} Image\ntftp ${fdt_addr-r} <board>.dtb\nbooti ${kernel_addr_r}	code	txt
2754	3	echo 0 > /sys/module/usb_storage/parameters/delay_use	code	txt
1912	1	* `pr_devel`: Dead code not being compiled, unless `DEBUG` is defined.\n* `pr_debug`, `dev_dbg`, `netdev_dbg`: Used for debug messages.\n* `pr_info`, `dev_info`, `netdev_info`: Used for informational purposes, such as start up information at driver initialization.\n* `pr_notice`, `dev_notice`, `netdev_notice`: Nothing serious but notable. Often used to report security events.\n* `pr_warn`, `dev_warn`, `netdev_warn`: Nothing serious but might indicate problems.\n* `pr_err`, `dev_err`, `netdev_err`: An error condition, often used by drivers to indicate difficulties with hardware.\n* `pr_crit`, `dev_crit`, `netdev_crit`: A critical condition occured, such as a serious hardware/software failure.\n* `pr_alert`, `dev_alert`, `netdev_alert`: Something bad happened and action must be taken immediately.\n* `pr_emerg`, `dev_emerg`, `netdev_emerg`: The system is about to crash or is unstable.	text	txt
1913	1	Whenever a message is printed, the kernel compares the message log level with the current console log level;\nif the former is higher (lower value) than the last, the message will be immediately printed to the console.\nYou can check your log-level parameters with the following:	text	txt
1913	2	cat /proc/sys/kernel/printk	code	txt
1913	3	First number is current log level.\nSecond value is the default log level, according to the `CONFIG_MESSAGE_LOGLEVEL_DEFAULT` option.	text	txt
1914	1	echo 4 > /proc/sys/kernel/printk	code	txt
1915	1	To prefix the module log, define `pr_fmt` macro:	text	txt
1915	2	#define pr_fmt(fmt) KBUILD_MODNAME ": " fmt\n#define pr_fmt(fmt) "%: " fmt, __func__	code	txt
1915	3	Consider the `net/bluetooth/lib.c` file in the kernel source tree:	text	txt
1915	4	#define pr_fmt(fmt) "Bluetooth: " fmt	code	txt
1916	1	We can enumerate two synchronization mechanisms, as follows:	text	txt
1916	2	1. **Locks**: Used for mutual exclusion. When one contender holds the lock, no other can hold it (others are excluded). The most known locks in the kernel are **spinlocks** and **mutexes**.	text	txt
1916	3	A resource is said to be shared when it is accessible by several contenders, whether exclusively or not.\nWhen it is exclusive, access must be synchronized so that only the allowed contender(s) may own the resource.	text	txt
1916	4	The operating system performs mutual exclusion by atomically modifying a variable that holds the current state of the resource, making this visible to all contenders that might access the variable at the same time.	text	txt
1916	5	2. **Conditional variables**: For waiting for a change. These are implemented differently in the kernel as **wait queues** and **completion queues**.	text	txt
1916	6	Apart from dealing with the exclusive ownership of a given shared resource, there are situations where it is better to wait for the state of the resource to change.	text	txt
1916	7	The Linux kernel does not implement conditional variables, but to achieve the same or even better, the kernel provides the following mechanisms:	text	txt
1916	8	* **Wait queue**: To wait for a change — designed to work in concert with locks.\n* **Completion queue**: To wait for the completion of a given computation, mostly used with DMAs.	text	txt
1917	1	A *spinlock* is a hardware-based locking primitive that depends on hardware capabilities to provide atomic operations (such as `test_and_set`, which in a non-atomic implementation would result in read, modify, and write operations).\nIt is the simplest and the base locking primitive.	text	txt
1917	2	When *CPUB* is running, and task B wants to acquire the spinlock while *CPUA* has already called this spinlock's locking function, *CPUB* will simply spin around a `while` loop until the other CPU releases the lock.	text	txt
1917	3	This spinning will only happen on multi-core machines because, on a single-core machine, it cannot happen.	text	txt
1917	4	A *spinlock* is said to be a lock held by a CPU, in contrast to a *mutex* which is a lock held by a task.	text	txt
1918	1	A spinlock operates by disabling the scheduler on the local CPU.	text	txt
1918	2	This also means that a task currently running on that CPU cannot be preempted except by **interrupt requests (IRQs)** if they are not disabled on the local CPU.\nIn other words, spinlocks protect resources that only one CPU can take/access at a time.	text	txt
1918	3	This makes spinlocks suitable for **symmetrical multiprocessing (SMP)** safety and for executing atomic tasks.	text	txt
1919	1	A spinlock is created either statically using a `DEFINE_SPINLOCK` macro:	text	txt
1919	4	For dynamic (runtime) allocation, it's better to embed the spinlock into a bigger structure, allocating memory for this structure and then calling `spin_lock_init()` on the spinlock element:	text	txt
1919	5	struct bigger_struct {\n    spinlock_t lock;\n    unsigned int foo;\n    [...]\n};\nstatic struct bigger_struct *fake_init_function()\n{\n    struct bigger_struct *bs;\n    bs = kmalloc(sizeof(struct bigger_struct), GFP_KERNEL);\n    if (!bs)\n        return -ENOMEM;\n    spin_lock_init(&bs->lock);\n    return bs;\n}	code	txt
1920	1	We can lock/unlock the spinlock using `spin_lock()` and `spin_unlock()` inline functions, both defined in `include/linux/spinlock.h`:	text	txt
1920	2	static __always_inline void spin_unlock(spinlock_t *lock);\nstatic __always_inline void spin_lock(spinlock_t *lock);	code	txt
1921	1	Though a spinlock prevents preemption on the local CPU, it does not prevent this CPU from being hogged by an interrupt.	text	txt
1921	2	Imagine a situation where the CPU holds a *"spinlock"* on behalf of task A in order to protect a given resource, and an interrupt occurs.\nThe CPU will stop its current task and branch to this interrupt handler.\nNow, imagine if this IRQ handler needs to acquire this same spinlock.\nIt will infinitely spin in place, trying to acquire a lock already locked by a task that it has preempted which results in a deadlock.	text	txt
1922	1	To address this issue, the Linux kernel provides `_irq` variant functions for spinlocks, which, in addition to disabling/enabling preemption, also disable/enable interrupts on the local CPU.\nThese functions are `spin_lock_irq()` and `spin_unlock_irq()`, defined as follows:	text	txt
1922	2	static void spin_unlock_irq(spinlock_t *lock)\nstatic void spin_lock_irq(spinlock_t *lock)	code	txt
1923	1	`spin_lock()` and all its variants automatically call `preempt_disable()`, which disables preemption on the local CPU, while `spin_unlock()` and its variants call `preempt_enable()`, which tries to enable preemption, and which internally calls schedule() if enabled.\n`spin_unlock()` is then a preemption point and might re-enable preemption.	text	txt
2739	1	setenv bootcmd "load mmc 0:1 ${kernel_addr_r} Image; load mmc 0:1 ${fdt_addr_r} <board>.dtb; booti ${kernel_addr_r} - ${fdt_addr_r};"\nsaveenv\nres	code	txt
2755	1	mount -t type device mountpoint	text	txt
1924	1	`spin_lock_irq()` function is unsafe when called from IRQs off-context as its counterpart `spin_unlock_irq()` will dumbly enable IRQs, with the risk of enabling those that were not enabled while `spin_lock_irq()` was invoked.\nIt makes sense to use `spin_lock_irq()` only when you know that interrupts are enabled.	text	txt
1924	2	To achieve this, the kernel provides `_irqsave` variant functions that behave exactly like the `_irq` ones, with saving and restoring interrupts status features in addition.\nThese are `spin_lock_irqsave()` and `spin_lock_irqrestore()`, defined as follows:	text	txt
1924	3	spin_lock_irqsave(spinlock_t *lock, unsigned long flags)\nspin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)	code	txt
1924	4	`spin_lock()` and all its variants automatically call `preempt_disable()`, which disables preemption on the local CPU, while `spin_unlock()` and its variants call `preempt_enable()`, which tries to enable preemption, and which internally calls `schedule()` if enabled depending on the current value of the counter, whose current value should be 0.</br>\nIt tries because it depends on whether other spinlocks are locked, which would affect the value of the preemption counter.\n`spin_unlock()` is then a preemption point and might re-enable preemption.	text	txt
1925	1	Though disabling interrupts may prevent kernel preemption nothing prevents the protected section from invoking the `schedule()` function.\nThe kernel disables or enables the scheduler, and thus preemtion, by increasing or decreasing a kernel global and per-CPU variable called `preempt_count` with 0 as default value.\nThis variable is checked by the `schedule()` function and when it is greater than 0, the scheduler simply returns and does nothing.\nThis variable is incremented at each invocation of a `spin_lock*()` family function.\nOn the other side, releasing a spinlock decrements it from 1, and whenever it reaches 0, the scheduler is invoked, meaning that your critical section would not be that atomic.	text	txt
1925	2	Thus, disabling interrupts protects you from kernel preemption only in cases where the protected code does not trigger preemption itself.\nThat said, code that locked a spinlock may not sleep as there would be no way to wake it up as timer interrupts and/or schedulers are disabled on the local CPU.	text	txt
1926	1	It behaves exactly like a *spinlock*, with the only difference being that your code can sleep.\nA spinlock is a lock held by a CPU, a mutex, on the other hand, is a lock held by a task.	text	txt
1926	2	A mutex is a simple data structure that embeds a wait queue to put contenders to sleep and a spinlock to protect access to this wait queue.	text	txt
1926	3	struct mutex {\n    atomic_long_t owner;\n    spinlock_t wait_lock;\n#ifdef CONFIG_MUTEX_SPIN_ON_OWNER\n    struct optimistic_spin_queue osq; /* Spinner MCS lock */\n#endif\n    struct list_head wait_list;\n    [...]\n};	code	txt
1926	4	The mutex APIs can be found in the `include/linux/mutex.h` header file.	text	txt
1927	1	As for other kernel core data structures, there is a static initialization:	text	txt
1927	2	static DEFINE_MUTEX(my_mutex);	code	txt
1927	3	A second approach the kernel offers is dynamic initialization, possible thanks to a call to a `__mutex_init()` low-level function, which is actually wrapped by a much more user-friendly macro, `mutex_init()`.	text	txt
1927	4	struct fake_data {\n    struct i2c_client *client;\n    u16 reg_conf;\n    struct mutex mutex;\n};	text	txt
1927	5	static int fake_probe(struct i2c_client *client)\n{\n    [...]\n        mutex_init(&data->mutex);\n    [...]\n}	code	txt
1928	1	Acquiring (aka locking) a mutex is as simple as calling one of the following three functions:	text	txt
1928	2	void mutex_lock(struct mutex *lock);\nint mutex_lock_interruptible(struct mutex *lock);\nint mutex_lock_killable(struct mutex *lock);	code	txt
1928	3	With `mutex_lock()`, your task will be put in an uninterruptible sleep state (`TASK_UNINTERRUPTIBLE`) while waiting for the mutex to be released if it is held by another task.	text	txt
1928	4	`mutex_lock_interruptible()` will put your task in an interruptible sleep state, in which the sleep can be interrupted by any signal.	text	txt
1928	5	`mutex_lock_killable()` will allow your sleeping task to be interrupted only by signals that actually kill the task.	text	txt
1928	6	Each of these functions returns 0 if the lock has been acquired successfully.\nMoreover, interruptible variants return `-EINTR` when the locking attempt was interrupted by a signal.	text	txt
1929	1	Whichever locking function is used, only the mutex owner should release the mutex using `mutex_unlock()`:	text	txt
1929	2	void mutex_unlock(struct mutex *lock);	code	txt
1930	1	static bool mutex_is_locked(struct mutex *lock);	code	txt
1930	2	This function simply checks if the mutex owner is `NULL` and returns `true` if so or `false` otherwise.	text	txt
1931	1	The most important ones are enumerated in the `include/linux/mutex.h` kernel mutex API header file, and some of these are outlined here:	text	txt
1931	2	* A mutex can be held by one and only one task at a time.\n* Once held, the mutex can only be unlocked by the owner which is the task that locked it.\n* Multiple, recursive, or nested locks/unlocks are not allowed.\n* A mutex object must be initialized via the API. It must not be initialized by copying nor by using `memset()`, just as held mutexes must not be reinitialized.\n* A task that holds a mutex may not exit, just as memory areas where held locks reside must not be freed.\n* Mutexes may not be used in hardware or software interrupt contexts such as tasklets and timers.	text	txt
1931	3	All this makes mutexes suitable for the following cases:	text	txt
1931	4	* Locking only in the user context.\n* If the protected resource is not accessed from an IRQ handler and the operations need not be atomic.	text	txt
1932	1	It may be cheaper to use spinlocks for very small critical sections since the spinlock only suspends the scheduler and starts spinning, compared to the cost of using a mutex, which needs to suspend the current task and insert it into the mutex's wait queue, requiring the scheduler to switch to another task and rescheduling the sleeping task once the mutex is released.	text	txt
1933	1	Such methods try to acquire the lock and immediately return a status value, showing whether the lock has been successfully locked or not.	text	txt
1933	2	Both spinlock and mutex APIs provide a trylock method.\nThese are, respectively, `spin_trylock()` and `mutex_trylock()`	text	txt
1933	3	Both methods return 0 on failure (the lock is already locked) or 1 on success (lock acquired).\nThus, it makes sense to use these functions along with an if statement:	text	txt
1933	4	int mutex_trylock(struct mutex *lock)	code	txt
2740	1	setenv bootcmd 'tftp ${kernel_addr_r} Image; tftp ${fdt_addr_r} <device>.dtb; booti ${kernel_addr_r} - ${fdt_addr_r}'\nsaveenv\nres	code	txt
1933	5	`spin_trylock()` will lock the spinlock if it is not already locked, just as the `spin_lock()` method does.\nHowever, it immediately returns 0 without spinning in cases where the spinlock is already locked:	text	txt
1933	6	static DEFINE_SPINLOCK(foo_lock);	text	txt
1933	7	static void foo(void)\n{\n    if (!spin_trylock(&foo_lock)) {\n        /* Failure! the spinlock is already locked */\n        return;\n    }	text	txt
1933	8	    /*\n     * reaching this part of the code means that the\n     * spinlock has been successfully locked\n     */\n    spin_unlock(&foo_lock);\n}	code	txt
1934	1	The term sleeping refers to a mechanism by which a task voluntarily relaxes the processor, with the possibility of another task being scheduled.	text	txt
1935	1	- **Sleeping APIs:** simple sleeping consist of a task sleeping and being awakened after a given duration to passively delay an operation.\n- **Wait queues:** conditional sleeping mechanism based on external events such as data availability.	text	txt
1935	2	Simple sleeps are implemented in the kernel using dedicated APIs; waking up from such sleeps is implicit and handled by the kernel itself after the duration expires.	text	txt
1935	3	The other sleeping mechanism is conditioned on an event and the waking up is explicit unless a sleeping timeout is specified.\nWhen timeout is not specified, another task must explicitly wake us up based on a condition, else we sleep forever.	text	txt
1935	4	Both sleeping APIs and wait queues implement what we can call **passive waiting**.\nThe difference between the two is how the waking up process occurs.	text	txt
1936	1	The kernel scheduler manages a list of tasks in a `TASK_RUNNING` state to run, known as a **runqueue**.	text	txt
1936	2	On the other hand, sleeping tasks, whether interruptible or not (in a `TASK_INTERRUPTIBLE` or `TASK_UNINTERRUPTIBLE` state), have their own queues, known as **waitqueues**.	text	txt
1937	1	Wait queues are higher-level mechanism essentially used to process blocking input/output, to wait for a condition to be true, to wait for a given event to occur, or to sense data or resource availability.	text	txt
1937	2	Wait queues are implemented in `include/linux/wait.h`:	text	txt
1937	3	struct wait_queue_head {\n    spinlock_t lock;\n    struct list_head head;\n};	code	txt
1937	4	A wait queue is nothing but a list with sleeping processes in it waiting to be awakened and a spinlock to protect access to this list.	text	txt
1938	1	We can declare and initialize a wait queue either statically or dynamically.	text	txt
1938	2	DECLARE_WAIT_QUEUE_HEAD(static_event);	text	txt
1938	3	wait_queue_head_t dynamic_event;\ninit_waitqueue_head(&dynamic_event);	code	txt
1939	1	Any process that wants to sleep waiting for `some_event` to occur can invoke either `wait_event_interruptible()` or `wait_event()`.	text	txt
1939	2	Most of the time, the event is just the fact that a resource becomes available, thus it makes sense for a process to go to sleep after a first check of the availability of that resource.	text	txt
1939	3	wait_event(&some_event, (event_occured == 1));\nwait_event_interruptible(&some_event, (event_occured == 1));	code	txt
1939	4	Both functions will put the process to sleep only if the expression evaluates `false`.	text	txt
5521	1	There are two color profiles for an element, foreground color and background color.	text	md
1939	5	`wait_event()` puts the process into an exclusive wait, aka uninterruptible sleep, and can't thus be interrupted by the signal.\nIt should be used only for critical tasks.	text	txt
1940	1	You can address such cases using `wait_event_timeout()`:	text	txt
1940	2	wait_event_timeout(&smoe_event, condition, timeout)	code	txt
1940	3	Time unit for `timeout` is a jiffy.	text	txt
1941	1	This function has two behaviors, depending on the timeout having elapsed or not.	text	txt
1941	2	- **Timeout elapsed:** the function returns 0 if the condition is evaluated to `false` or 1 if it is evaluated `true`.\n- **Timeout not elapsed yet:** the function returns the remaining time (in jiffies at least 1) if the condition is evaluated to `true`.	text	txt
1942	1	unsigned long msecs_to_jiffies(const unsigned int m)\nunsigned long usecs_to_jiffies(const unsigned int u)	code	txt
1943	1	After a change on any variable that could affect the result of the wait queue, call the appropriate `wake_up*` family function.	text	txt
1943	2	In order to wake up a process sleeping on a wait queue, you should call either of the following functions.\nWhenever you call any of these functions, the condition is re-evaluated again.\nIf the condition is `true` at that time, then a process (or all processes for the `_all()` variant) in the wait queue will be awakened, and its state set to `TASK_RUNNING`; otherwise, nothing happens.	text	txt
1970	1	Some programs that don’t have shell escapes can still be dangerous if you give users unrestricted privileges to use them.	text	txt
2052	1	sudo -u user command	code	txt
1943	3	- `wake_up()`: wake only one process from the wait queue\n- `wake_up_all()`: wake all processes from the wait queue\n- `wake_up_interruptible()`: wake only one process from the wait queue that is in interruptible sleep\n- `wake_up_interruptible_all()`: wake all processes from the wait queue that are in interruptible sleep	text	txt
1944	1	Because they can be interrupted by signals, you should check the return value of the `_interruptible` variants.	text	txt
1944	2	A nonezero means your sleep has been interrupted by some sort of signal, and the driver should return `ERESTARTSYS`.	text	txt
1945	1	Download and install VirtualBox and the VirtualBox Extension Pack from https://www.virtualbox.org - https://www.virtualbox.org/.	text	txt
1945	2	Get version of installed VirtualBox:	text	txt
1945	3	vbox_version="$(vboxmanage --version | sed 's/[^0-9.].*//')"	code	txt
1945	4	Check if extension pack is already installed:	text	txt
1945	5	vboxmanage list extpacks | grep 'Version:' | awk '{print $2}' | grep -q "${vbox_version}" && echo "extpack for ${vbox_version} already exists"	code	txt
1945	6	Install extension pack otherwise:	text	txt
1945	7	vbox_sum256="$(wget -O - -q "https://www.virtualbox.org - https://www.virtualbox.org/download/hashes/${vbox_version}/SHA256SUMS" | grep "${vbox_version}.vbox-extpack" | cut -d' ' -f1)"\nwget -c "https://download.virtualbox.org - https://download.virtualbox.org/virtualbox/${vbox_version}/Oracle_VM_VirtualBox_Extension_Pack-${vbox_version}.vbox-extpack" -O /tmp/${vbox_version}.vbox-extpack\nvboxmanage extpack install --replace --accept-license=${vbox_sum256} /tmp/${vbox_version}.vbox-extpack	code	txt
2741	1	The kernel command line is a string that defines various arguments to the\nkernel to change its behavior.	text	txt
1945	8	Download the installation `.iso` files for Ubuntu Server 22.04, CentOS 7, AlmaLinux8, and AlmaLinux9 from https://ubuntu.com - https://ubuntu.com/, https://almalinux.org/, and https://www.centos.org/.	text	txt
1945	9	Create a virtual machine and register it:	text	txt
1945	10	vboxmanage createvm --name ubuntu --ostype archlinux_64 --basefolder $HOME/VMs --register	code	txt
1945	11	Increase the memory, virtual memory and cpu count:	text	txt
1945	12	vboxmanage modifyvm ubuntu --cpus 2 --memory 2048 --vram 128	code	txt
1945	13	Create a virtual drive controller and medium and attach to the virtual machine:	text	txt
1945	14	vboxmanage storagectl ubuntu --add SATA --type sata --controller IntelAhci\nvboxmanage createmedium disk --filename $HOME/VMs/ubuntu/ubuntu.vdi --size $((1024 * 20)) --format VDI\nvboxmanage storageattach sample --storagectl SATA --medium $HOME/VMs/ubuntu/ubuntu.vdi mtype normal --type hdd --port 0	code	txt
1945	15	Create a DVD drive, insert the `.iso` file into it and attach to the virtual machine:	text	txt
1945	16	vboxmanage createmedium dvd --filename $HOME/VMs/ubuntu/ubuntu.dvd --size $((1024 * 4))\nvboxmanage storageattach ubuntu --storagectl SATA --medium $HOME/VMs/ubuntu/ubuntu.dvd --mtype normal --type dvddrive --port 1	code	txt
1945	17	Create a NAT network and enable port forwarding:	text	txt
1945	18		code	txt
1945	19	Start the new virtual machine:	text	txt
1945	20	vboxmanage startvm ubuntu --type gui	code	txt
1945	21	Now install Ubuntu and take a snapshot after the clean setup:	text	txt
1945	22	vboxmanage snapshot ubuntu take post-installation	code	txt
1946	1	While the **Ubuntu** package repositories have pretty much everything that you need, the **CentOS** and **AlmaLinux** package repositories are lacking.\nYou’ll need to install the EPEL repository. (The EPEL project is run by the Fedora team.)\nWhen you install third-party repositories on Red Hat 7 and CentOS 7 systems, you’ll also need to install a priorities package and edit the `.repo` files to set the proper priorities for each repository.\nThis will prevent packages from the third-party repository from overwriting official Red Hat and CentOS packages if they just happen to have the same name.\nThe two packages that you’ll need to install EPEL are in the normal CentOS 7 repositories.	text	txt
1946	2	sudo yum install yum-plugin-priorities epel-release	code	txt
1946	3	When the installation completes, navigate to the `/etc/yum.repos.d` directory, and open the `CentOS-Base.repo` file in your favorite text editor.\nAfter the last line of the `base`, `updates`, and extras sections, add the line `priority=1`.\nAfter the last line of the `centosplus` section, add the line `priority=2`.\nOpen the `epel.repo` file for editing.\nAfter the last line of the `epel` section, add the line `priority=10`.\nAfter the last line of each remaining section, add the line `priority=11`.\nUpdate the system and then create a list of the installed and available packages:	text	txt
1946	4	sudo yum upgrade sudo yum list > yum_list.txt	code	txt
1946	5	To install the EPEL repository on **AlmaLinux**, all you have to do is run this command:	text	txt
1946	6	sudo dnf install epel-release	code	txt
2767	4	setenv bootargs 'console=ttyS0,115200 maxcpu=1 root=/dev/nfs ip=192.168.0.20 nfsroot=192.168.0.1:/srv/nfs4/root rw init=/simple_init'\nsaveenv\nres	code	txt
1946	7	There’s no priorities package as there is on CentOS 7 and earlier, so we won’t have to worry about configuring the repository priorities.\nWhen the package installation is complete, update the system and create a list of available sof t ware packages with these two commands:	text	txt
1946	8	sudo dnf upgrade sudo dnf list > dnf_list.txt	code	txt
1947	1	Spend some time perusing the Common Vulnerabilities and Exposures database on https://cve.mitre.org - https://cve.mitre.org/ and you’ll soon see why it’s so important to keep your systems updated.	text	txt
1948	1	run two commands:	text	txt
1948	2	sudo apt update\nsudo apt dist-upgrade	code	txt
1949	1	sudo apt auto-remove	code	txt
1951	1	When you first install Ubuntu, automatic updates are turned on by default.\nTo verify that, you’ll first check the status of the `unattended-upgrades` service:	text	txt
1951	2	systemctl status unattended-upgrades	code	txt
1951	3	Then, look in the `/etc/apt/apt.conf.d/20auto-upgrades` file. If *auto-updating* is enabled, you’ll see this:	text	txt
1951	4	```\nAPT::Periodic::Update-Package-Lists "1";\nAPT::Periodic::Unattended-Upgrade "1";\n``````	text	txt
1952	1	By default, Ubuntu systems don’t automatically reboot after an update is installed.\nIf you keep it that way, you’ll see a message about it when you log into the system.\nBut if you prefer, you can set Ubuntu to automatically reboot after it automatically updates itself.	text	txt
1952	2	Go into the `/etc/apt/apt.conf.d` directory and open the `50unattended-upgrades` file in your favorite text editor, you’ll see a line that says:	text	txt
1952	3	Unattended-Upgrade::Automatic-Reboot "false";	code	txt
1970	3	If you must give someone sudo privileges to use one of these programs, it’s best to limit their use to only specific files.	text	txt
1952	4	With this new configuration, Ubuntu will now reboot itself immediately after the automatic update process has completed.\nIf you’d rather have the machine reboot at a specific time, scroll down where you’ll see this:	text	txt
1952	5	//Unattended-Upgrade::Automatic-Reboot-Time "02:00";	code	txt
1952	6	To disable automatic updates, just go into the `/etc/apt/apt.conf.d` directory and open the `20auto-upgrades` file in your favorite text editor, you’ll see:	text	txt
1952	7	APT::Periodic::Update-Package-Lists "1";\nAPT::Periodic::Unattended-Upgrade "1";	code	txt
1952	8	Change the parameter for that second line to 0, so that the file will now look like this:	text	txt
1952	9	APT::Periodic::Update-Package-Lists "1";\nAPT::Periodic::Unattended-Upgrade "0";	code	txt
1952	10	If you want to see if there are any security-related updates available, but don’t want to see any non-security updates, use the unattended-upgrade command, like so:	text	txt
1952	11	sudo unattended-upgrade --dry-run -d	code	txt
1952	12	8. To manually install the security-related updates without installing non-security updates, just run:	text	txt
1952	13	sudo unattended-upgrade -d	code	txt
1952	14	Also, if you’re running a non-Ubuntu flavor of Debian, which would include Rasp-bian for the Raspberry Pi, you can give it the same functionality as Ubuntu by installing the unattended-upgrades package. Just run this command:	text	txt
1952	15	sudo apt install unattended-upgrades	code	txt
2741	2	root=/dev/mmcblk0p2 rootwait\nconsole=ttyS0	code	txt
1953	1	There’s no automatic update mechanism on Red Hat-based systems, which include CentOS and Oracle Linux.\nSo, with the default configuration, you’ll need to perform updates yourself:	text	txt
1953	2	To update a Red Hat 7-based system, just run this one command:	text	txt
1953	3	sudo yum upgrade	code	txt
1953	4	To see only security updates that are ready to be installed:	text	txt
1953	5	sudo yum updateinfo list updates security	code	txt
1953	6	To only install the security updates:	text	txt
1953	7	sudo yum upgrade --security	code	txt
1953	8	To make CentOS system automatically update itself, install and enable `yum-cron` service:	text	txt
1953	9	sudo yum install yum-cron\nsudo systemctl enable --now yum-cron	code	txt
1953	10	To configure `yum-cron` service, edit `/etc/yum/yum-cron.conf` file:	text	txt
1953	11	update_cmd = security	text	txt
1953	12	download_updates = yes\napply_updates = no	code	txt
1953	13	If you want the updates to get automatically installed, change the `apply_updates` parameter to `yes`.	text	txt
1953	14	Note that unlike Ubuntu, there’s no setting to make Red Hat 7-based systems automatically reboot themselves after an update.	text	txt
1954	1	Mail settings for yum-cron can be found in `/etc/yum/yum-cron.conf` file.	text	txt
1954	2	The `email_to` line is set to send messages to the root user account.\nIf you want to receive messages on your own account, just change it here.	text	txt
1954	3	To see the messages, you’ll need to install a mail reader program like **mutt**, if one isn’t already installed.	text	txt
1954	4	sudo yum install mutt	code	txt
1955	1	Make sure `needs-restarting` is installed:	text	txt
1955	2	sudo yum install yum-utils	code	txt
1955	3	* `sudo needs-restarting`: This shows the services that need to be restarted, and the reasons why the system might need to be rebooted.\n* `sudo needs-restarting -s`: This only shows the services that need to be restarted.\n* `sudo needs-restarting -r`: This only shows the reasons why the system needs to be rebooted.	text	txt
1956	1	For the most part, you use `dnf` the same way that you’d use `yum`, with the same arguments and options.	text	txt
1956	2	sudo dnf upgrade	code	txt
1956	3	The main functional difference between `yum` and `dnf` is that `dnf` has a different automatic update mechanism.\nInstead of installing the `yum-cron` package, you’ll now install the `dnf-automatic` package:	text	txt
1956	4	sudo dnf install dnf-automatic	code	txt
1956	5	Configure the `/etc/dnf directory/automatic.conf` file the same way as you did the yum-cron.conf file for CentOS 7.	text	txt
1956	6	Instead of working as a cron job, as the old `yum-cron` did, `dnf-automatic` works with a systemd timer.\nWhen you first install `dnf-automatic`, the timer is disabled.\nEnable it and start it by running this command:	text	txt
1956	7	sudo systemctl enable --now dnf-automatic.timer	code	txt
5257	1	pwd	code	sh
1956	8	To determine if a system needs to be restarted, just install the `yum-utils` package and run the `needs-restarting` command, the same as you did for CentOS 7.\n(For some reason, the Red Hat developers never bothered to change the package name to `dnf-utils`.)	text	txt
1957	1	Using `su -` to log in to the root command prompt does not let `sudo` to record user activity.\nFor that reason, getting access to the root command prompt should be prevented.	text	txt
1958	1	The first method is to add users to a predefined administrators group and then, if it hasn’t already been done, to configure the sudo policy to allow that group to do its job.\nIt’s simple enough to do except that different Linux distro families use different admin groups.	text	txt
1958	2	On Unix, BSD, and most Linux systems, you would add users to the **wheel** group.	text	txt
1958	3	Edit sudo policy file by doing `sudo visudo`:	text	txt
1958	4	%wheel ALL=(ALL) ALL	code	txt
1958	5	The percent sign indicates that we’re working with a group.\nThe three appearances of *ALL* mean that members of that group can perform *ALL* commands, as *ALL* users, on *ALL* machines in the network on which this policy is deployed.	text	txt
1958	6	%wheel ALL=(ALL) NOPASSWD: ALL	code	txt
1958	7	The former snippet means that members of the **wheel** group would be able to perform all of their sudo tasks without ever having to enter any password.\nAvoid doing so, even for home use.	text	txt
1959	1	On Red Hat distros add users to the **wheel** group:	text	txt
1959	2	sudo usermod -a -G wheel maggie	code	txt
1959	3	Use `-a` option in order to prevent removing the user from other groups to which he or she belongs.	text	txt
1959	4	You can also add a user account to the wheel group as you create it.	text	txt
1959	5	sudo useradd -G wheel frank	code	txt
1959	6	For members of the Debian family, including Ubuntu, the procedure is the same, except that you would use the **sudo** group instead of the **wheel** group.	text	txt
1960	1	With a member of the Red Hat family, `useradd` comes with predefined default settings to create user accounts.\nFor non-Red Hat-type distros, you’d need to either reconfigure the default settings or use extra option switches in order to create the user’s home directory and to assign the correct shell:	text	txt
1960	2	*Red Hat distros*	text	txt
1960	3	sudo useradd -G wheel frank	code	txt
1960	4	*non-Red Hat distros*	text	txt
1960	5	sudo useradd -G wheel -m -d /home/frank -s /bin/bash frank	code	txt
1961	1	Create a normal user account and give it full `sudo` privileges.\nThen, log out of the *root* account and log back in with your normal user account and disable the *root* account:	text	txt
1961	2	sudo passwd -l root	code	txt
1962	1	You can either create an entry for an individual user or create a user alias.	text	txt
1962	2	ADMINS ALL=(ALL) ALL	code	txt
1962	3	It’s also possible to add a sudo entry for just a single user, and you might need to do that under very special circumstances.	text	txt
1962	4	frank ALL=(ALL) ALL	code	txt
1963	1	You can, for example, create a `BACKUPADMINS` user alias for backup administrators, a `WEBADMINS` user alias for web server administrators, or whatever else you desire:	text	txt
1963	2	User_Alias SOFTWAREADMINS = vicky, cleopatra	code	txt
1963	3	Then assign some duties to the user alias:	text	txt
5450	1	gcc -Wstack-usage=<byte-size>	code	sh
1963	4	Cmnd_Alias SOFTWARE = /bin/rpm, /usr/bin/up2date, /usr/bin/yum	code	txt
1963	5	Now, it’s just a simple matter of assigning the `SOFTWARE` command alias to the `SOFTWAREADMINS` user alias:	text	txt
1963	6	SOFTWAREADMINS ALL=(ALL) SOFTWARE	code	txt
1964	1	The way sudo works is that if a command is listed by itself, then the assigned user can use that command with any subcommands, options, or arguments.	text	txt
1964	2	Cmnd_Alias SERVICES = /sbin/service, /sbin/chkconfig, /usr/bin/systemctl start, /usr/bin/systemctl stop, /usr/bin/systemctl reload, /usr/bin/systemctl restart, /usr/bin/systemctl status, /usr/bin/systemctl enable, /usr/bin/systemctl disable	code	txt
1964	3	But when a command is listed in the command alias with a subcommand, option, or argument, that’s all anyone who’s assigned to the command alias can run.	text	txt
1964	4	You can eliminate all of the `systemctl` subcommands and make the `SERVICES` alias look like this:	text	txt
1964	5	Cmnd_Alias SERVICES = /sbin/service, /sbin/chkconfig, /usr/bin/systemctl	code	txt
1964	6	But if you do that, Lionel and Charlie will also be able to shut down or reboot the system, edit the services files, or change the machine from one systemd target to another.	text	txt
1964	7	Because the `systemctl` command covers a lot of different functions, you have to be careful not to allow delegated users to access too many of those functions.\nA better solution would be to add a wildcard to each of the systemctl subcommands:	text	txt
1964	8	Cmnd_Alias SERVICES = /sbin/service, /sbin/chkconfig, /usr/bin/systemctl start *, /usr/bin/systemctl stop *, /usr/bin/systemctl reload *, /usr/bin/systemctl restart *, /usr/bin/systemctl status *, /usr/bin/systemctl enable *, /usr/bin/ systemctl disable *	code	txt
1965	1	katelyn ALL=(ALL) STORAGE\ngunther ALL=(ALL) /sbin/fdisk -l\n%backup_admins ALL=(ALL) BACKUP	code	txt
1966	1	Each host alias consists of a list of server hostnames.\nThis is what allows you to create one sudoers file on one machine and deploy it across the network.\nFor example, you could create a `WEBSERVERS` host alias, a `WEBADMINS` user alias, and a `WEBCOMMANDS` command alias with the appropriate commands:	text	txt
1966	2	Host_Alias WEBSERVERS = webserver1, webserver2\nUser_Alias WEBADMINS = junior, kayla\nCmnd_Alias WEBCOMMANDS = /usr/bin/systemctl status httpd, /usr/bin/systemctl start httpd, /usr/bin/systemctl stop httpd, /usr/bin/systemctl restart httpd\nWEBADMINS WEBSERVERS=(ALL) WEBCOMMANDS	code	txt
1967	1	Even though `sudo` is a security tool, certain things that you can do with it can make your system even more insecure than it was.	text	txt
1967	2	By default, the sudo timer is set for 5 minutes.\nAlthough this is obviously handy, it can also be problematic if users were to walk away from their desks with a command terminal still open.	text	txt
1967	3	You can easily disable this timer by adding a line to the *Defaults* section of the sudoers file:	text	txt
1967	4	Defaults timestamp_timeout = 0	code	txt
5550	1	This component can be used to show or hide any other component via a boolean or a predicate.	text	md
1967	5	If you need to leave your desk for a moment, your best action would be to log out of the server first.\nShort of that, you could just reset the sudo timer by running this command:	text	txt
1967	6	sudo -k	code	txt
1968	1	sudo -l	code	txt
1969	1	By assigning shell commands to users in sudo policy file, you have effectively given them full `sudo` privileges.	text	txt
1969	2	maggie ALL=(ALL) /bin/bash, /bin/zsh	code	txt
1969	3	This should be avoided all the time.	text	txt
1969	4	But certain programs, especially text editors like `vi` and pagers like `less`, also have a handy shell escape feature.	text	txt
1969	5	Imagine that you want Frank to be able to edit the `sshd_config` file and only that file.\nYou might be tempted to add a line to your sudo configuration that would look like this:	text	txt
1969	6	frank ALL=(ALL) /bin/vim /etc/ssh/sshd_config	code	txt
1969	7	Once Frank has opened the `sshd_config` file with his sudo privilege, he can then use Vim’s shell escape feature to perform other root-level commands, which includes being able to edit other configuration files, create new users, manipulate system services, or install malware.	text	txt
1969	8	You can fix this problem by having users use sudoedit instead of vim:	text	txt
1969	9	frank ALL=(ALL) sudoedit /etc/ssh/sshd_config	code	txt
1969	10	Other programs that have a shell escape feature include the following:	text	txt
1969	11	* vim\n* emacs\n* less\n* view\n* more	text	txt
1969	12	To deal with them, use the `NOEXEC:` option when we set up our sudoers rules.	text	txt
1969	13	vicky ALL=(ALL) /usr/bin/less	code	txt
1969	14	 sudo less messages	code	txt
1969	15	To open a shell from within less, Vicky will type `!bash` instead of `:shell` and a new shell will be spawned.	text	txt
1969	16	To fix that we use the `NOEXEC:` option to the sudoers rule:	text	txt
1969	17	vicky ALL=(ALL) NOEXEC: /usr/bin/less	code	txt
1969	18	This prevents Vicky from escaping to even her own shell.	text	txt
1970	2	* cat\n* cut\n* awk\n* sed	text	txt
1971	1	You can use host aliases to ensure that servers will only allow the execution of commands that are appropriate for their operating systems.\nAlso, be aware that some system services have different names on different Linux distributions.\nOn Red Hat-type systems, the Secure Shell service is `sshd`. On Debian/Ubuntu systems, it’s just plain `ssh`.	text	txt
1972	1	In the following line, *(ALL)* means that Sylvester can run the `systemctl` commands as any user:	text	txt
1972	2	sylvester ALL=(ALL) /usr/bin/systemctl status sshd, /usr/bin/systemctl restart sshd	code	txt
1972	3	You could, if desired, change that *(ALL)* to *(root)* in order to specify that Sylvester can only run these commands as the root user:	text	txt
1972	4	sylvester ALL=(root) /usr/bin/systemctl status sshd, /usr/bin/systemctl restart sshd	code	txt
1972	5	Okay, there’s probably not much point in that because nothing changes.	text	txt
1972	6	But there are more practical uses for this feature.\nLet’s say that Vicky is a database admin, and you want her to run as the database user:	text	txt
1972	7	vicky ALL=(database) /usr/local/sbin/some_database_script.sh	code	txt
1972	8	Vicky could then run the command as the database user by entering the following command:	text	txt
1973	1	Let’s have Frank create the `frank_script.sh` shell script:	text	txt
1973	2	sudo -u database some_database_script.sh	code	txt
1973	3	add this rule for Frank:	text	txt
1973	4	frank ALL=(ALL) /home/frank/frank_script.sh	code	txt
1973	5	Since this file is in Frank’s own home directory and he is its owner, he can edit it any way he wants.	text	txt
1973	6	#!/bin/bash	text	txt
1973	7	echo "This script belongs to Frank the Cat."\nsudo -i	code	txt
1973	8	What `sudo -i` does is to log a person in to the root user’s shell, the same way that `sudo su -` does.\nIf Frank were to do `sudo -i` from his own command prompt, it would fail because he doesn’t have the privilege to do that.	text	txt
1973	9	To remedy this, move Frank’s script to the `/usr/local/sbin/` directory and change the ownership to the root user so that Frank won’t be able to edit it.\nAnd of course, before I do that, I’ll make sure to delete that `sudo -i` line from it:	text	txt
1973	10	mv frank_script.sh /usr/local/sbin\nchown root: /usr/local/sbin/frank_script.sh	code	txt
1973	11	Finally, I’ll open `visudo` and change his rule to reflect the new location of the script.\nThe new rule looks like this:	text	txt
1973	12	frank ALL=(ALL) /usr/local/sbin/frank_script.sh	code	txt
1973	13	Frank can still run the script, but he can’t edit it.	text	txt
1974	1	The first thing you want to do after setting up a system is to set up your own user account, give it a good password, and give it sudo privileges.\nThen get rid of that default account, because leaving it in place, especially if you leave the default password, is just asking for trouble.	text	txt
1974	2	Look in the `/etc/password` file on *RaspEX*, and you’ll see the default user there:	text	txt
1974	3	raspex:x:1000:1000:,,,:/home/raspex:/bin/bash	code	txt
1974	4	Then, look in the `/etc/sudoers` file, and you’ll see this line, which allows the *raspex* user to do all `sudo` commands without having to enter a password:	text	txt
1974	5	raspex ALL=(ALL) NOPASSWD: ALL	code	txt
1974	6	Another thing to watch out for is that some Linux distributions for IoT devices have this rule in a separate file in the `/etc/sudoers.d` directory, instead of in the main sudoers file.\nEither way, you’ll want to delete this rule, as well as the default user account, when you set up your IoT device.\nAnd of course, you’ll also want to change the root user password, and then lock the root user account.	text	txt
1975	1	When you install a SUSE distro you and the root user will both have the same password.	text	txt
1975	2	When you do `sudo visudo` on a SUSE machine, you’ll see these two lines that you don’t see on any other Linux distro:	text	txt
1975	3	Defaults targetpw # ask for the password of the target user i.e.\nroot ALL ALL=(ALL) ALL # WARNING! Only use this together with 'Defaults targetpw'!	code	txt
1975	4	Replace previous rules with:	text	txt
1975	5	%wheel ALL=(ALL:ALL) ALL	code	txt
1975	6	Add users to *wheel* group:	text	txt
1975	7	usermod -a -G wheel frank	code	txt
1975	8	Then disable the *root* user:	text	txt
1975	9	sudo passwd -l root	code	txt
1976	1	Defaults log_format=json	code	txt
1977	1	Defaults log_server=172.16.167.150	code	txt
1977	2	If you want JSON-formatted log messages, you need the following setting in the `[eventlog]` section of the `/etc/sudo_logsrvd.conf` file:	text	txt
1977	3	log_format = json	code	txt
1978	1	Defaults log_subcmds	code	txt
1979	1	Let's say the `who` command is dangerous.	text	txt
1979	2	Defaults intercept\nfrank ALL = (ALL) ALL, !/usr/bin/who	code	txt
1979	3	Now users will be prevented to run the `who` command even when they try to run it within a shell opened by `sudo`.	text	txt
1979	4	You can easily disable running shells altogether:	text	txt
1979	5	Defaults intercept\nCmnd_Alias SHELLS=/usr/bin/bash, /usr/bin/sh, /usr/bin/csh\nfrank ALL = (ALL) ALL, !SHELLS	code	txt
1979	6	Not only users cannot start shell sessions through `sudo`, also they cannot execute external commands from editors either.	text	txt
1980	1	`/etc/login.defs` configuration file.	text	txt
1981	1	By default, the `useradd` utility on Red Hat-type systems creates user home directories with a permissions setting of `700`, configured in `/etc/login.defs` file.	text	txt
1981	2	CREATE_HOME yes\nUMASK 077	code	txt
1982	1	By default, `HOME_MODE` directive in `/etc/login.defs` configuration file is used to set permission for new user home directories.\nBut if `HOME_MODE` is not set, the value of `UMASK` is used to create the mode.	text	txt
1982	2	On RHEL 8 or RHEL 9-type distro, such as AlmaLinux, the `UMASK` is set for wide-open permissions:	text	txt
1982	3	UMASK 022	code	txt
1982	4	But even though the `UMASK` is wide-open, when `HOME_MODE` is set properly, new user home directories still get properly locked down:	text	txt
1982	5	HOME_MODE 0700	code	txt
1989	3	The `EXPIRE=` line sets the default expiration date for new user accounts.	text	txt
1996	3	We can lock and unlock an account by doing:	text	txt
1982	6	Either the `HOME_MODE` line or the `UMASK` line is in the login.defs file for all Linux distros, but until recently, Red Hat-type distros have been the only ones that have had them set to a restrictive value by default.	text	txt
1982	7	UMASK 077	code	txt
1983	1	The default permission set to users' home directories on Debian-based systems is wide-open, it should be fixed:	text	txt
1983	2	cd /home\nsudo chmod 700 *	code	txt
1983	3	To change the default permissions setting for home directories, edit `/etc/login.defs` configuration file and set directive values accordingly:	text	txt
1983	4	UMASK 077\nHOME_MODE 0750	code	txt
1983	5	This includes access permissions for a user’s own personal group, but that’s okay. It still effectively means that only the respective owners of the various home directories can get into them.	text	txt
1984	1	Debian-based distros have two user creation utilities:	text	txt
1984	2	* `useradd`\n* `adduser`	text	txt
1984	3	The `useradd` utility on Debian-based systems does not create user home directory and does not set user shell by default.\nSo the command should be used like this:	text	txt
1984	4	sudo useradd -m -d /home/frank -s /bin/bash frank	code	txt
1985	1	The `adduser` utility is an interactive way to create user accounts and passwords with a single command, which is unique to the Debian family of Linux distros.	text	txt
1985	2	On Debian and Ubuntu 20.04, it creates user home directories with the wide-open 755 permissions value.\nFix it by overwriting the `DIR_MODE` directive in `/etc/adduser.conf` file:	text	txt
1985	3	DIR_MODE=700	code	txt
1985	4	One thing that `adduser` can do that `useradd` can’t is to automatically encrypt a user’s home directory as you create the account.	text	txt
1986	1	You’ll first have to install the `ecryptfs-utils` package.	text	txt
1986	2	sudo apt install ecryptfs-utils	code	txt
1986	3	Create a user account with an encrypted home directory for Cleopatra and then view the results:	text	txt
1986	4	sudo adduser --encrypt-home cleopatra	code	txt
1986	5	Log in as Cleopatra and run the `ecryptfs-unwrap-passphrase` command:	text	txt
1986	6	su - cleopatra\necryptfs-unwrap-passphrase\nexit	code	txt
1986	7	Note that some of the information that `adduser` asks for is optional, and you can just hit the *Enter* key for those items.	text	txt
1987	1	We’ll be using the `pwquality` module for the **Pluggable Authentication Module (PAM)**.\nThis is a newer technology that has replaced the old *cracklib* module.\nOn any Red Hat 7 or newer type of system, and on SUSE and OpenSUSE, `pwquality` is installed by default, even if you do a minimal installation.	text	txt
1987	2	If you `cd` into the `/etc/pam.d/` directory, you can do a `grep` operation to check that the PAM configuration files are already set up.\n`retry=3` means that a user will only have three tries to get the password right when logging in to the system:	text	txt
1987	3	grep 'pwquality' *	code	txt
1987	4	On Debian and Ubuntu, you’ll need to install `pwquality` yourself:	text	txt
1987	5	sudo apt install libpam-pwquality	code	txt
1987	6	The rest of the procedure is the same for all of our operating systems and consists of just editing the `/etc/security/pwquality.conf` file.	text	txt
1987	7	No password complexity criteria are in effect after installation.	text	txt
1987	8	The minimum length setting works on a credit system.\nThis means that for every different type of character class in the password, the minimum required password length will be reduced by one character.	text	txt
1987	9	For example, let’s set minlen to a value of 19 and try to assign Katelyn the password of *turkeylips*:	text	txt
1987	10	minlen = 19	code	txt
1987	11	Because the lowercase characters in *turkeylips* count as credit for one type of character class, we’re only required to have 18 characters instead of 19.\nIf we try this again with *TurkeyLips*, the uppercase T and uppercase L count as a second character class, so we only need to have 17 characters in the password.	text	txt
1987	12	Let’s say that you don’t want lowercase letters to count toward your credits:	text	txt
1987	13	lcredit = 1	code	txt
1987	14	change the 1 to a 0:	text	txt
1987	15	lcredit = 0	code	txt
1987	16	Then, try assigning Katelyn *turkeylips* as a password.	text	txt
1987	17	This time, the `pwquality` really does want 19 characters.\nIf we set a credit value to something higher than 1, we would get credit for multiple characters of the same class type up to that value.	text	txt
1987	18	We can also set the credit values to negative numbers in order to require a certain number of characters types in a password.	text	txt
1987	19	dcredit = -3	code	txt
1987	20	This would require at least three digits in a password.\nHowever, it’s a really bad idea to use this feature, because someone who’s doing a password attack would soon find the patterns that you require,\nwhich would help the attacker to direct the attack more precisely.\nIf you need to require that a password has multiple character types, it would be better to use the minclass parameter:	text	txt
1987	21	minclass = 3	code	txt
1987	22	It’s already set to a value of 3, which would require characters from three different classes. To use this value, all you have to do is to remove the comment symbol.	text	txt
1987	23	In the `/etc/login.defs` file on your CentOS 7 machine, you’ll see the line `PASS_MIN_LEN 5`.\nSupposedly, this is to set the minimum password length, but in reality, `pwquality` overrides it.\nSo, you could set this value to anything at all, and it would have no effect. (Note that the `PASS_MIN_LEN` parameter is no longer supported on RHEL 8/9-type distros.)	text	txt
1988	1	With the `chage` utility, you can either set password and account expiration data for other users or use the `-l` option to view expiration data.\nAny unprivileged user can use `chage -l` without `sudo` to view his or her own data.	text	txt
1988	2	let’s first look at where the default settings are stored.\nDefault settings are stored in `/etc/login.defs` file.	text	txt
1988	3	```\nPASS_MAX_DAYS 99999\nPASS_MIN_DAYS 0\nPASS_WARN_AGE 7\n``````	text	txt
1989	1	The `/etc/default/useradd` file has the default settings.	text	txt
1989	2	Ubuntu also has the `useradd` configuration file, but it doesn’t work.\nNo matter how you configure it, the Ubuntu version of useradd just won’t read it. So, the write-up about this file only applies to Red Hat-type systems.	text	txt
2055	2	username host = command	code	txt
1989	4	By default, there is no default expiration date.\n`INACTIVE=-1` means that user accounts won’t be automatically locked out after the users’ passwords expire.\nIf we set this to a positive number, then any new users will have that many days to change an expired password before the account gets locked.	text	txt
1989	5	To change the defaults in the `useradd` file, you can either hand-edit the file or use `useradd -D` with the appropriate option switch for the item that you want to change.	text	txt
1989	6	For example, to set a default expiration date of December 31, 2025, the command would be as follows:	text	txt
1989	7	sudo useradd -D -e 2025-12-31	code	txt
1989	8	To see the new configuration, you can either open the `useradd` file or just do `sudo useradd -D`.	text	txt
1989	9	`useradd` doesn’t do any safety checks to ensure that the default shell that you’ve assigned is installed on the system.	text	txt
1990	1	There are three ways that you can do this:	text	txt
1990	2	1. Use `useradd` with the appropriate option switches to set expiry data as you create the accounts.\n2. Use `usermod` to modify expiry data on existing accounts.\n3. Use `chage` to modify expiry data on existing accounts.	text	txt
1990	3	You can use `useradd` and `usermod` to set account expiry data, but not to set password expiry data.	text	txt
2742	1	The most important ones are documented in admin-guide/kernel-parameters in\ndocumentation.	text	txt
1990	4	* -e: Use this to set an expiration date for the account, in the form YYYY-MM-DD.\n* -f: Use this to set the number of days after the user’s password expires that you want for his or her account to get locked out.	text	txt
1990	5	Let’s say that you want to create an account for Charlie that will expire at the end of 2025.	text	txt
1990	6	sudo useradd -e 2025-12-31 charlie\nsudo useradd -m -d /home/charlie -s /bin/bash -e 2025-12-31 charlie	code	txt
1990	7	Verify what you’ve entered:	text	txt
1990	8	sudo chage -l charlie	code	txt
1990	9	Now, let’s say that Charlie’s contract has been extended, and you need to change his account expiration to the end of January 2026.	text	txt
1990	10	sudo usermod -e 2026-01-31 charlie	code	txt
1990	11	Optionally, you can set the number of days before an account with an expired password will get locked out:	text	txt
1990	12	sudo usermod -f 5 charlie	code	txt
1990	13	But if you were to do that now, you wouldn’t see any difference in the `chage -l` output because we still haven’t set expiration data for Charlie’s password.	text	txt
1991	1	You will only use `chage` to modify existing accounts, and you will use it for setting either an account expiration or a password expiration.	text	txt
1991	2	* `-d` If you use the `-d` 0 option on someone’s account, you’ll force the user to change his or her password on their next login.\n* `-E` This is equivalent to the lowercase `-e` for useradd or usermod. It sets the expiration date for the user account.\n* `-I` This is equivalent to `-f` for useradd or usermod. It sets the number of days before an account with an expired password will be locked out.\n* `-m` This sets the minimum number of days between password changes. In other words, if Charlie changes his password today, the `-m 5` option will force him to wait five days before he can change his password again.\n* `-M` This sets the maximum number of days before a password expires. (Be aware, though, that if Charlie last set his password 89 days ago, using a `-m 90` option on his account will cause his password to expire tomorrow, not 90 days from now.)\n* -W This will set the number of warning days for passwords that are about to expire.	text	txt
1991	3	sudo chage -E 2026-02-28 -I 4 -m 3 -M 90 -W 4 charlie	code	txt
1992	1	sudo chage -d 0 samson\nsudo passwd -e samson	code	txt
1993	1	Set the lockout value to something realistic, such as 100 failed login attempts.\nThis will provide good security, while still giving you enough time to gather information about the attackers.	text	txt
1993	2	On RHEL 7-type systems and Ubuntu 18.04, you’ll do this by configuring the `pam_tally2` PAM.\nOn RHEL 8/9-type systems and Ubuntu 20.04/22.04, you’ll instead configure the `pam_faillock` PAM module.	text	txt
1993	3	The `pam_tally2` module comes already installed on CentOS 7, but it isn’t configured.\nWe’ll begin by editing the `/etc/pam.d/login` file.	text	txt
5552	1		code	cpp
1993	4	If you’re working with a text-mode server, you’ll only need to configure the `/etc/pam.d/login` file.\nBut if you’re working with a machine that’s running a graphical desktop environment, you’ll also need to configure the `/etc/pam.d/password.auth` and `/etc/pam.d/system.auth` files.	text	txt
1993	5	In the second line of the example, we see that `pam_tally2` is set with the following parameters:	text	txt
1993	6	* `deny=4`: This means that the user account under attack will get locked out after only four failed login attempts.\n* `even_deny_root`: This means that even the root user account will get locked if it’s under attack.\n* `unlock_time=1200`: The account will get automatically unlocked after 1,200 seconds, or 20 minutes.	text	txt
1993	7	Once you’ve configured the login file and have had a failed login, you’ll see a new file created in the `/var/log` directory.\nYou’ll view information from that file with the `pam_tally2` utility.\nYou can also use `pam_tally2` to manually unlock a locked account if you don’t want to wait for the timeout period:	text	txt
1993	8	sudo pam_tally2\nsudo pam_tally2 --user=charlie --reset\nsudo pam_tally2	code	txt
1993	9	Configuring `pam_tally2` is super easy because it only requires adding one line to the `/etc/pam.d/login`, `/etc/pam.d/password.auth`, and `/etc/pam.d/system.auth` files.\nTo make things even easier, you can just copy and paste that line from the example on the `pam_tally2` man page.	text	txt
1993	10	On the CentOS 7 virtual machine, open the `/etc/pam.d/login` file for editing.\nLook for the line that invokes the `pam_securetty` module. insert this line:	text	txt
1993	11	```\nauth required pam_tally2.so deny=4 even_deny_root unlock_time=1200\n``````	text	txt
1993	12	Place the same line at the top of the `/etc/pam.d/password.auth` and `/etc/pam.d/system`.	text	txt
1993	13	`pam_tally2` doesn’t work with su.	text	txt
1994	1	The `pam_faillock` module is already installed on any RHEL 8 or RHEL 9-type of Linux distro.	text	txt
1994	2	Although you can enable and configure `pam_faillock` by hand-editing the PAM configuration files, the RHEL distros provide an easier method, which is called `authselect`.\nOn either an AlmaLinux 8 or AlmaLinux 9 VM, view the available `authselect` profiles by doing:	text	txt
1994	3	sudo authselect list	code	txt
1994	4	For now, at least, we’re only dealing with local users.\nSo, we’ll use the minimal profile.\nView the features of this profile like this:	text	txt
1994	5	sudo authselect list-features minimal	code	txt
1994	6	Note that there are a lot of included features, but we’re only interested in the **with-faillock** feature.	text	txt
1994	7	sudo authselect select minimal --force	code	txt
1994	8	After enabling a profile, we can now enable the `pam_faillock` module, like this:	text	txt
1994	9	sudo authselect enable-feature with-faillock	code	txt
1994	10	In the `/etc/security/` directory, open the `faillock.conf` file in your favorite text editor.	text	txt
1994	11	```\n# silent\n# deny = 3\n# unlock_time = 600\n# even_deny_root\n``````	text	txt
1994	12	Remove the preceding comment symbols from all four lines, and save the file.	text	txt
1994	13	Create a user account for Vicky by doing:	text	txt
1994	14	sudo useradd vicky sudo passwd vicky	code	txt
1994	15	Open another terminal, and have Vicky deliberately make three failed login attempts.\nView the results in your own terminal, like this:	text	txt
1994	16	sudo faillock\nsudo faillock --reset --user vicky	code	txt
1995	1	Sadly, the `authselect` utility isn’t available for Ubuntu, so we’ll just have to hand-edit the PAM configuration files.	text	txt
1995	3	```\nauth required pam_faillock.so preauth silent\nauth required pam_faillock.so authfail\n``````	text	txt
1996	1	There are two utilities that you can use to temporarily lock a user account:	text	txt
1996	4	sudo usermod -L katelyn\nsudo usermod -U katelyn	code	txt
1996	6	sudo passwd -l katelyn\nsudo passwd -u katelyn	code	txt
1997	1	The first thing that you want to do when you set up a cloud-based server is to create a normal user account for yourself and set it up with full sudo privileges.\nThen, log out of the `root` user account, log in to your new account, and do this:	text	txt
1998	1	The `/etc/motd` file will present a message banner to anyone who logs in to a system through Secure Shell.\nOn your CentOS or AlmaLinux machine, an empty motd file is already there.\nOn your Ubuntu machine, the motd file isn’t there, but it’s a simple matter to create one.	text	txt
1998	3	The issue file, also found in the /etc directory, shows a message on the local terminal, just above the login prompt.\nA default issue file will just contain macro code that shows information about the machine.\nHere’s an example from an Ubuntu machine:	text	txt
1998	5	On a Red Hat-type machine, it would look like this:	text	txt
1999	1	You can check your password on https://haveibeenpwned.com, but it is not a good idea to send your raw password to somebody’s website.\nInstead, just send a hash value of the password.\nBetter yet, let’s just send enough of the hash to allow the site to find the password in its database, but not so much that they can figure out what your exact password is.\nWe’ll do that by using the *Have I Been Pwned?* Application Programming Interface (API):	text	txt
2000	1	You need a separate component of iptables to deal with IPv4 and IPv6.	text	txt
2000	3	To see port numbers instead of port names, we can use the `-n` switch:	text	txt
2001	1	sudo iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT	code	txt
2002	1	To open port for **SSH** protocol following rule applies:	text	txt
2002	3	When an option name consists of more than one letter, we need to precede it with two dashes, instead of just one.	text	txt
2002	5	To open port 53 for both the TCP and UDP protocols:	text	txt
2003	1	sudo iptables -I INPUT 1 -i lo -j ACCEPT	code	txt
2004	1	While blocking certain types of ICMP packets is good, blocking all ICMP packets is bad.\nThe harsh reality is that certain types of ICMP messages are necessary for the proper functionality of the network.\nSince the drop all that’s not allowed rule that we’ll eventually create also blocks ICMP packets, we’ll need to create some rules that allow the types of ICMP messages that we have to have.	text	txt
2768	1	If your program is compiled with the GNU Compiler Collection (GCC), using the\n`-g3` and `-gdwarf-2` options, GDB understands references to C preprocessor\nmacros.	text	txt
5522	4	#include <ftxui/dom/elements.hpp>\n\nint main()\n{\n    ftxui::LinearGradient gradient{0.5, ftxui::Color::Black, ftxui::Color::Red};\n}	code	cpp
2004	3	* `-m conntrack`: Use the conntrack module to allow packets that are in a certain state. This time, though, instead of just allowing packets from a host to which our server has been connected (`ESTABLISHED`,`RELATED`), we’re also allowing `NEW` packets that other hosts are sending to our server.\n* `-p icmp`: This refers to the ICMP protocol.\n* `--icmp-type`: There are quite a few types of ICMP messages:\n    + **type 3**: These are the **“destination unreachable”** messages. Not only can they tell your server that it can’t reach a certain host, but they can also tell it why. For example, if the server has sent out a packet that’s too large for a network switch to handle, the switch will send back an ICMP message that tells the server to fragment that large packet. Without ICMP, the server would have connectivity problems every time it tries to send out a large packet that needs to be broken up into fragments.\n    + **type 11**: **Time-exceeded** messages let your server know that a packet that it has sent out has either exceeded its **Time-to-Live (TTL)** value before it could reach its destination, or that a fragmented packet couldn’t be reassembled before the **TTL** expiration date.\n    + **type 12**: **Parameter problem** messages indicate that the server had sent a packet with a bad IP header. In other words, the IP header is either missing an option flag or it’s of an invalid length.\n    + **type 0** and **type 8**: These are the infamous ping packets. Actually, type 8 is the **echo request** packet that you would send out to ping a host, while type 0 is the **echo reply** that the host would return to let you know that it’s alive. Of course, allowing ping packets to get through could be a big help when troubleshooting network problems. If that scenario ever comes up, you could just add a couple of iptables rules to temporarily allow pings.\n    + **type 5**: Now, we have the infamous **redirect messages**. Allowing these could be handy if you have a router that can suggest more efficient paths for the server to use, but hackers can also use them to redirect you to someplace that you don’t want to go. So, just block them.	text	txt
2005	2	To create a `DROP` rule at the end of the `INPUT` chain, use this command:	text	txt
2006	1	There are several ways to do this, but the simplest way to do this on an Ubuntu machine is to install the `iptables-persistent` package:	text	txt
2006	3	You’ll now see two new rules files `rules.v4` and `rules.v6` in the `/etc/iptables/` directory.	text	txt
2006	5	sudo iptables-save > rules.v4\nsudo cp rules.v4 /etc/iptables/	code	txt
2007	1	We could do that with a `PREROUTING` chain, but the filter table doesn’t have a `PREROUTING` chain.\nTherefore, we need to use the `PREROUTING` chain of the mangle table instead.\nLet’s start by adding these two rules:	text	txt
2008	1	With our new mangle table rules in place, let’s perform an XMAS scan:	text	txt
2008	2	sudo nmap -sX 192.168.0.15	code	txt
2008	3	The XMAS scan sends invalid packets that consist of the `FIN`, `PSH`, and `URG` flags.	text	txt
2008	4	To see packats counter on the target machine run:	text	txt
2008	5	sudo iptables -t mangle -L PREROUTING -v	code	txt
2008	6	The fact that all 1,000 scanned ports show as `open|filtered` means that the scan was blocked, and that Nmap can’t determine the true state of the ports.\nWe can view the result to see which rule did the blocking.\nHere, you can see that the first rule — the `INVALID` rule — blocked 2,000 packets and 80,000 bytes.	text	txt
2008	7	Now, let’s zero out the counter so that we can do another scan:	text	txt
2008	8	sudo iptables -t mangle -Z PREROUTING	code	txt
2008	9	This time, let’s do a Window scan, which bombards the target machine with ACK packets:	text	txt
2008	10	sudo nmap -sW 192.168.0.15	code	txt
2008	11	As before, the scan was blocked, as indicated by the message that all 1,000 scanned ports have been filtered.	text	txt
2008	12	sudo iptables -t mangle -L PREROUTING -v	code	txt
2009	1	The biggest difference is that instead of using the `iptables` command, you’ll use the `ip6tables` command.\nThe other big difference between IPv4 and IPv6 is that with IPv6, you must allow more types of ICMP messages than you need to for IPv4.	text	txt
2009	2	sudo ip6tables -A INPUT -p icmpv6 --icmpv6-type 1 -j ACCEPT # Destination unreachable\nsudo ip6tables -A INPUT -p icmpv6 --icmpv6-type 2 -j ACCEPT # Packet too big\nsudo ip6tables -A INPUT -p icmpv6 --icmpv6-type 3 -j ACCEPT # Time exceeded\nsudo ip6tables -A INPUT -p icmpv6 --icmpv6-type 4 -j ACCEPT # Parameter problem with the packet header	code	txt
2009	3	Next, we’ll enable **echo requests** (type 128) and **echo responses** (type 129) so that IPv6 over IPv4 tunneling will work:	text	txt
2009	4	sudo ip6tables -A INPUT -p icmpv6 --icmpv6-type 128 -j ACCEPT # Echo Requests\nsudo ip6tables -A INPUT -p icmpv6 --icmpv6-type 129 -j ACCEPT # Echo Responses	code	txt
3408	2	${BUILDDIR}/workspace/sources/	code	sh
2009	5	The next four ICMP message types that we need are for the **Link-local Multicast Receiver Notification** messages:	text	txt
2009	6	sudo ip6tables -A INPUT --protocol icmpv6 --icmpv6-type 130 # Listener query\nsudo ip6tables -A INPUT --protocol icmpv6 --icmpv6-type 131 # Listener report\nsudo ip6tables -A INPUT --protocol icmpv6 --icmpv6-type 132 # Listener done\nsudo ip6tables -A INPUT --protocol icmpv6 --icmpv6-type 143 # Listener report v2	code	txt
2009	7	Next up are our neighbor and router discovery message types:	text	txt
2009	8	sudo ip6tables -A INPUT -p icmpv6 --icmpv6-type 134 -j ACCEPT # Router solicitation\nsudo ip6tables -A INPUT -p icmpv6 --icmpv6-type 135 -j ACCEPT # Router advertisement\nsudo ip6tables -A INPUT -p icmpv6 --icmpv6-type 136 -j ACCEPT # Neighbor solicitation\nsudo ip6tables -A INPUT -p icmpv6 --icmpv6-type 141 -j ACCEPT # Neighbor advertisement\nsudo ip6tables -A INPUT -p icmpv6 --icmpv6-type 142 -j ACCEPT	code	txt
2009	9	For times when you’re using security certificates to authenticate the routers that are attached to your network, you’ll also need to allow **Secure Neighbor Discovery** (SEND) messages:	text	txt
2009	10	sudo ip6tables -A INPUT -p icmpv6 --icmpv6-type 148 -j ACCEPT # Inverse neighbor discovery solicitation\nsudo ip6tables -A INPUT -p icmpv6 --icmpv6-type 149 -j ACCEPT # Inverse neighbor discovery advertisement	code	txt
2009	11	We need to allow **Multicast Router Discovery** messages:	text	txt
2009	12	sudo ip6tables -A INPUT -p icmpv6 --icmpv6-type 151 -j ACCEPT\nsudo ip6tables -A INPUT -p icmpv6 --icmpv6-type 152 -j ACCEPT\nsudo ip6tables -A INPUT -p icmpv6 --icmpv6-type 153 -j ACCEPT	code	txt
2009	13	Finally, we’ll add our **DROP** rule to block everything else:	text	txt
2009	14	sudo ip6tables -A INPUT -j DROP	code	txt
2011	1	First, we’ll go into the directory where the sample configurations are stored and list the sample configuration files:	text	txt
2011	2	cd /usr/share/doc/nftables/examples/	code	txt
2011	3	Next, we’ll copy the workstation file over to the `/etc` directory, changing its name to `nftables.conf`.	text	txt
2011	4	sudo cp workstation.nft /etc/nftables.conf	code	txt
2769	1	The I/O context is a channel that is used to access operating system resources\nand establish communication between our program and the operating system that\nperforms I/O requests.	text	txt
2770	1	The I/O object has the role of submitting I/O requests. For instance, the\n`tcp::socket` object will provide a socket programming request from our\nprogram to the operating system.	text	txt
2011	5	* `flush ruleset`: We want to start with a clean slate, so we’ll flush out any rules that may have already been loaded.\n* `table inet filter`: This creates an inet family filter, which works for both IPv4 and IPv6.\n* `chain input`: Within the first pair of curly brackets, we have a chain called input.\n* `type filter hook input priority 0;`: Within the next pair of curly brackets, we define our chain and list the rules. This chain is defined as a filter type. hook input indicates that this chain is meant to process incoming packets. Because this chain has both a hook and a priority, it will accept packets directly from the network stack.	text	txt
2011	6	Next is the standard connection tracking (ct) rule, which accepts traffic that’s in response to a connection request from this host.	text	txt
2011	7	* `ct state new`: indicates that the firewall will allow other hosts to initiate connections to our server on these ports.\n* `meta nfproto ipv6`: accepts neighbor discovery packets, allowing IPv6 functionality.\n* `counter drop`: rule at the end silently blocks all other traffic and counts both the number of packets and the number of bytes that it blocks.	text	txt
2011	8	let’s say that this is a DNS server, and we need to allow connections to port 22 and port 53.	text	txt
2011	9	```\ntcp dport { 22, 53 } ct state new accept\nudp dport 53 ct state new accept\n``````	text	txt
2011	11	* The `counter drop` rule drops and counts unwanted packets.	text	txt
2011	12	let’s say that we want to make a log entry when packets are dropped.\nJust add the log keyword to the drop rule, like so:	text	txt
2011	13	```\ncounter log drop\n``````	text	txt
2012	1	To make these messages easier to find, add a tag to each log message, like this:	text	txt
2012	2	```\ncounter log prefix "Dropped packet: " drop\n``````	text	txt
2012	3	Now, when you need to peruse the `/var/log/kern.log` file to see how many dropped packets you’ve had, just search for the Dropped packet text string.	text	txt
2013	1	To do this, we can edit the file, placing a `drop rule` above the rule that opens port 22.\nThe relevant section of the file will look like this:	text	txt
2013	2	```\ntcp dport 22\nip saddr { 192.168.0.7, 192.168.0.10 } log prefix "Blocked SSH packets: "\ndrop tcp dport { 22, 53 } ct state new accept\n``````	text	txt
2013	3	Next, we need to allow the desired types of ICMP packets, like so:	text	txt
2013	4	```\nct state new,related,established icmp type { destination-unreachable, time-exceeded, parameter-problem } accept\nct state established,related,new icmpv6 type { destination-unreachable, time-exceeded, parameter-problem } accept\n``````	text	txt
2013	5	Finally, we’ll block invalid packets by adding a new prerouting chain to the filter table, like so:	text	txt
2013	6	```\nchain prerouting {\n    type filter hook prerouting priority 0;\n    ct state invalid counter log prefix "Invalid Packets: " drop tcp flags & (fin|syn|rst|ack) != syn\n    ct state new\n    counter log drop\n}\n``````	text	txt
2013	7	sudo systemctl reload nftables	code	txt
2014	1	Unless we specify otherwise, all the rules that we create in `inet` table will apply to both IPv4 and IPv6.	text	txt
2015	1	With an `nft` command, you can create a custom rule on the fly that will block the attack.	text	txt
2015	2	First, let’s delete our previous configuration and create an inet table since we want something that works for both IPv4 and IPv6.\nWe’ll want to give it a somewhat descriptive name, so let’s call it `ubuntu_filter`:	text	txt
2015	3	sudo nft delete table inet filter\nsudo nft list tables\nsudo nft add table inet ubuntu_filter\nsudo nft list tables	code	txt
2015	4	Next, we’ll add an input filter chain to the table that we just created	text	txt
2015	5	sudo nft add chain inet ubuntu_filter input { type filter hook input priority 0\\\\; policy drop\\\\; }	code	txt
2015	6	Each nftables protocol family has its own set of hooks, which define how the packets will be processed.	text	txt
2015	7	For now, we’re only concerned with the ip/ip6/inet families, which have the following hooks:	text	txt
2015	8	* Prerouting\n* Input\n* Forward\n* Output\n* Postrouting	text	txt
2015	9	If we had not specified drop as the default policy, then the policy would have been accept by default.	text	txt
2015	10	Let’s start with a connection tracking rule and a rule to open the Secure Shell port.\nThen, we’ll verify that they were added:	text	txt
2755	2	mount -t ext4 /dev/sda1 /mnt\nmount -t ext4 /dev/sda2 /mnt/boot\nmount -t ext4 /dev/sda3 /mnt/home	code	txt
2015	11	```\nsudo nft add rule inet ubuntu_filter input ct state established accept sudo nft add rule inet ubuntu_filter input tcp dport 22 ct state new accept sudo nft list table inet ubuntu_filter  table inet ubuntu_filter {  chain input {\ntype filter hook input priority 0; policy drop;\nct state established accept  tcp dport ssh ct state new accept  }  }\n``````	text	txt
2015	12	We forgot to create a rule to allow the loopback adapter to accept packets.\nSince we want this rule to be at the top of the rules list, we’ll use insert instead of add:	text	txt
2015	13	```\nsudo nft insert rule inet ubuntu_filter input iif lo accept sudo nft list table inet ubuntu_filter\ntable inet ubuntu_filter {  chain input {  type filter hook input priority 0; policy drop;\niif lo accept  ct state established accept  tcp dport ssh ct state new accept  }  }\n``````	text	txt
2015	14	What if we want to insert a rule at a specific location? For that, you’ll need to use list with the `-a` option to see the rule handles:	text	txt
2015	15	sudo nft list table inet ubuntu_filter -a  table inet ubuntu_filter {  chain input {  type filter hook input priority 0; policy drop; iif lo accept # handle 4  ct state established accept # handle 2  tcp dport ssh ct state new accept # handle 3  }  }	code	txt
2015	16	There’s no real rhyme or reason for the way the handles are numbered.	text	txt
2015	17	To delete a rule, we have to specify the rule’s handle number:	text	txt
2015	18	sudo nft delete rule inet ubuntu_filter input handle 6 sudo nft list table inet ubuntu_filter -a  table inet ubuntu_filter {  chain input {  type filter hook input priority 0; policy drop; iif lo accept # handle 4  ct state established accept # handle 2  tcp dport ssh ct state new accept # handle 3  }  }	code	txt
2015	19	As is the case with iptables, everything you do from the command line will disappear once you reboot the machine. To make it permanent, let’s redirect the output of the list subcommand to the nftables.\nconf configuration file	text	txt
2015	20	sudo sh -c "nft list table inet ubuntu_filter > /etc/nftables.conf"	code	txt
2015	21	We’re missing the flush rule and the shebang line to specify the shell that we want to interpret this script.	text	txt
2015	22	```\n#!/usr/sbin/nft -f flush ruleset table inet ubuntu_filter {  chain input {  type filter hook input priority 0; policy drop;\niif lo accept  ct state established accept  tcp dport ssh ct state new accept  } }\n``````	text	txt
2015	23	sudo systemctl reload nftables sudo nft list table inet ubuntu_filter	code	txt
2016	1	- Applications to install\n- Architecture to use\n- License restrictions	text	txt
2017	1	- Bootloader such as U-Boot, GRUB, Syslinux etc.\n- Linux kernel image with added or removed features as necessary\n- Root filesystem usually called rootfs containing the files\n- List of licenses of packages included in the rootfs\n- The source for distribution to comply on the copyleft requirements	text	txt
2018	1	The build system used within the Yocto Project is *Poky* which is composed by\na set of files to provide the information required for the build system to\nwork.	text	txt
2020	1	There are two sub-modules in the Metadata component:	text	txt
2020	2	- **OpenEmbedded-Core:** the core infrastructure for the cross-compilation\n  environment and offers the basic set of applications, libraries and\n  utilities ready to used in Linux-based operating systems. Six different\n  processor architectures (ARM, ARM64, x86, x86-64, PowerPC, MIPS and MIPS64)\n  are supported in the system, and all tests and development is done using\n  emulated machines, on QEMU.\n- **Yocto Project's Specific Metadata:** provided by the Yocto Project to\n  configure the build system to fulfill Yocto Project needs and includes a\n  set of board support packages (BSP).	text	txt
2021	1	- **Low level developers**\n  + Board bring-up\n  + Bootloader development\n  + Kernel development\n  + Device drvier development\n- **Application developers**\n  + Application development\n  + Application customization\n- **System architect**\n  + Application list management\n  + Software Development Kit (SDK) development\n  + Integration into build system\n  + Releases\n- **Legal authority**\n  + License management	text	txt
2022	1	#include <iostream>\n#include <thread>	text	txt
2022	2	void show_id()\n{\n    std::cout << std::this_thread::get_id() << std::endl;\n}	text	txt
2022	3	int main()\n{\n    std::thread worker{show_id};\n    worker.join();\n}	code	txt
2023	2	void do_something() {}\nvoid do_something_else() {}	text	txt
2023	3	struct background_task\n{\n    void operator ()()\n    {\n        do_something();\n        do_something_else();\n    }\n};	text	txt
2023	4	int main()\n{\n    std::thread thread_f(do_something);\n    thread_f.join();	text	txt
2023	5	    background_task callable;\n    std::thread thread_c(callable);\n    thread_c.join();	text	txt
2023	6	    // no to mistakenly call a thread like this:\n    //   std::thread thread_x(background_task());\n    // which can be correctly expressed like:\n    //   std::thread thread_x((background_task()));\n    //   std::thread thread_x{background_task()};	text	txt
2023	7	    std::thread thread_l([]{\n        do_something();\n        do_something_else();\n    });\n    thread_l.join();\n}	code	txt
2024	1	#include <thread>\n#include <chrono>	text	txt
2024	2	struct background_task\n{\n    using time_point = std::chrono::time_point<std::chrono::system_clock>;	text	txt
2024	3	    time_point& elapsed;\n    background_task(time_point& init): elapsed{init}\n    { }	text	txt
2024	4	    void operator ()()\n    {\n        using namespace std::chrono_literals;	text	txt
2024	5	        std::this_thread::sleep_for(1s);\n        elapsed + 1s;\n    }\n};	text	txt
2024	6	int main()\n{\n    // sharing object\n    std::chrono::time_point<std::chrono::system_clock> elapsed{};\n    background_task f{elapsed};\n    std::thread task(f);\n    task.join();\n}	code	txt
2025	1	#include <thread>\n#include <stdexcept>	text	txt
2025	2	void do_something() { }\nvoid do_something_else() { throw std::runtime_error("fatal"); }	text	txt
2025	3	int main()\n{\n    std::thread t(do_something);	text	txt
2025	4	    try\n    {\n        do_something_else();\n    }\n    catch (std::exception const& exp)\n    {\n        t.join(); // reaches due exceptional exit but joins anyway\n        throw;\n    }	text	txt
2026	3	class thread_guard\n{\n    std::thread& _t;	text	txt
2756	1	umount mountpoint	text	txt
2026	4	public:\n    explicit thread_guard(std::thread& t): _t{t} {}\n    virtual ~thread_guard() { if (_t.joinable()) _t.join(); }\n    thread_guard(thread_guard const&) = delete;\n    thread_guard& operator =(thread_guard const&) = delete;\n};	text	txt
2026	5	int main()\n{\n    std::thread t(do_something);\n    thread_guard joining_thread{t};\n}	code	txt
2027	1	#include <thread>\n#include <cassert>	text	txt
2027	2	void do_background_work() { }	text	txt
2027	3	int main()\n{\n    std::thread task{do_background_work};\n    task.detach();\n    assert(!task.joinable());\n}	code	txt
2028	1	#include <thread>\n#include <memory>\n#include <string>\n#include <string_view>	text	txt
2028	2	void rvalue_write(std::string&&) { } // rvalue only\nvoid lvalue_write(std::string&) { } // lvalue only\nvoid pointer_write(std::string_view) { } // pointer only\nvoid smart_write(std::unique_ptr<std::string>) { } // non-copyable object only	text	txt
2028	3	struct heavy_work\n{\n    void do_lengthy_work(std::string&) {}\n};	text	txt
2028	4	int main()\n{\n    // implicit cast from const char* to std::string\n    std::thread write_thread(rvalue_write, "text");\n    write_thread.join();	text	txt
2028	5	    char text[1024];\n    sprintf(text, "%i", 1);	text	txt
2028	6	    // use of local object in joinable thread\n    std::thread pointer_thread(pointer_write, text);\n    pointer_thread.join();	text	txt
2028	7	    // use of copied local object before background thread invokation\n    std::thread local_thread(rvalue_write, std::string{text});\n    local_thread.detach();	text	txt
2028	8	    // pass by lvalue reference to avoid copy\n    std::string str{text};\n    std::thread ref_thread(lvalue_write, std::ref(str));\n    ref_thread.join();	text	txt
2028	9	    // bind method to thread\n    heavy_work some_work;\n    std::thread binding_thread(&heavy_work::do_lengthy_work, &some_work, std::ref(str));\n    binding_thread.join();	text	txt
2028	10	    // explicitly move non-copyable objects\n    std::unique_ptr<std::string> non_copyable{new std::string{str}};\n    std::thread smart_thread(smart_write, std::move(non_copyable));\n    smart_thread.join();\n}	code	txt
2029	3	int main()\n{\n    std::thread t1{do_work}; // t1 joinable\n    std::thread t2{std::move(t1)}; // t1 empty, t2 joinable\n    t1 = std::thread{do_work}; // t1 joinable\n    std::thread t3 = std::move(t2); // t3 joinable, t2 empty\n    t2 = std::move(t1); // t2 joinable, t1 empty	text	txt
2029	4	    // t1 is already empty\n    t2.join();\n    t3.join();\n}	code	txt
2030	1	#include <thread>\n#include <vector>	text	txt
2030	3	int main()\n{\n    unsigned int const min_threads = 2;\n    unsigned int const hw_threads = std::thread::hardware_concurrency();\n    unsigned int const num_threads = hw_threads ? hw_threads : min_threads;	text	txt
2030	4	    std::vector<std::thread> threads(num_threads-1); // count main thread as well	text	txt
2030	5	    for (std::thread& t: threads)\n        t = std::thread{task};	text	txt
2030	6	    for (std::thread& t: threads)\n        t.join();\n}	code	txt
2031	1	#include <thread>\n#include <iostream>	text	txt
2031	2	int main()\n{\n    std::thread::id const main_thread_id = std::this_thread::get_id();\n    std::cout << main_thread_id << std::endl;\n}	code	txt
2032	1	To create a mutex, construct an instance of `std::mutex`, lock it with a call\nto the `lock()` member function, and unlock iit with a call to the `unlock()`\nmember function. But this procedure is better done by `std::lock_guard` class\ntemplate in the standard library. Both `std::mutex` and `std::lock_guard` are\ndeclared in the `<mutex>` header.	text	txt
2032	2	#include <iostream>\n#include <iterator>\n#include <vector>\n#include <thread>\n#include <mutex>	text	txt
2032	3	std::vector<long> data;\nstd::mutex mutex;	text	txt
2032	4	void add_data(long value)\n{\n    std::lock_guard<std::mutex> guard(mutex);\n    data.push_back(value);\n}	text	txt
2032	5	void print_data()\n{\n    std::lock_guard<std::mutex> guard(mutex);\n    std::for_each(std::begin(data), std::end(data), std::ostream_iterator(std::cout, " "));\n}	text	txt
2032	6	int main()\n{\n    std::thread t1{add_data, 1);\n    std::thread t2{add_data, 2);\n    std::thread t3{add_data, 3);	text	txt
2032	8	    t1.join();\n    t2.join();\n    t3.join();\n}	code	txt
2033	1	Consider `std::stack<std::vector<int>>`. Now, a vector is a dynamically sized\ncontainer, so when you copy a vector, the library has to allocate some more\nmemory from the heap in order to copy the contents. If the system is heavily\nloaded or there are significant resource constraints, this memory allocation\ncan fail, so the copy constructor for vector might throw a `std::bad_alloc`\nexception. This is likely if the vector contains a lot of elements. If the\n`pop()` function was defined to return the value popped, as well as remove it\nfrom the stack, you have a potential problem: the value being popped is\nreturned to the caller only after the stack has been modified, but the\nprocess of copying the data to return to the caller might throw an exception.\nIf this happens, the data popped is lost; it has been removed from the stack,\nbut the copy was unsuccessful!	text	txt
2033	2	The designers of the `std::stack` interface helpfully split the operation in\ntwo: get the `top()` element and then `pop()` it from the stack, so that if\nyou can’t safely copy the data, it stays on the stack.	text	txt
2033	3	Unfortunately, it’s precisely this split that you’re trying to avoid in\neliminating the race condition!	text	txt
2034	1	To protect the data we should change the design of the interface. There are\ncommonly two methods to protect data from race condition when returning:	text	txt
2034	2	1. Pass in a reference\n2. Return a pointer to the removed item	text	txt
2034	3	#include <exception>\n#include <memory>\n#include <stack>\n#include <mutex>	text	txt
2034	4	struct empty_stack : std::exception\n{\n    char const* what() const noexcept;\n};	text	txt
2034	5	template<typename T>\nclass threadsafe_stack\n{\nprivate:\n    mutable std::mutex exclusive_lock;\n    std::stack<T> data;	text	txt
2034	6	public:\n    threadsafe_stack() { }	text	txt
2034	7	    threadsafe_stack(threadsafe_stack const& other)\n    {\n        std::lock_guard<std::mutex> guard(other.exclusive_lock);\n        data = other;\n    }	text	txt
2034	8	    threadsafe_stack& operator=(threadsafe_stack const&) = delete;	text	txt
2034	9	    void push(T value)\n    {\n        std::lock_guard<std::mutex> guard(exclusive_lock);\n        data.push(value);\n    }	text	txt
2743	1	1. Passed by the bootloader, `bootargs` in U-Boot.\n2. Specified in the device tree.\n3. Built into the kernel using `CONFIG_CMDLINE` config option.\n4. A combination of above depending on the kernel configuration.	text	txt
2034	10	    std::shared_ptr<T> pop()\n    {\n        std::lock_guard<std::mutex> guard(exclusive_lock);\n        if (data.empty()) throw empty_stack{};\n        std::shared_ptr<T> const value = std::make_shared<T>(data.top());\n        data.pop();\n        return value;\n    }	text	txt
2034	11	    void pop(T& value)\n    {\n        std::lock_guard<std::mutex> guard(exclusive_lock);\n        if (data.empty()) throw empty_stack{};\n        value = data.pop();\n        return value;\n    }	text	txt
2034	12	    bool empty() const\n    {\n        std::lock_guard<std::mutex> guard(exclusive_lock);\n        return data.empty();\n    }\n};	code	txt
2035	1	As the discussion of `top()` and `pop()` shows, problematic race conditions\nin interfaces arise because of locking at too small a granularity; the\nprotection doesn’t cover the entirety of the desired operation. Problems with\nmutexes can also arise from locking at too large a granularity; the extreme\nsituation is a single global mutex that protects all shared data. In a system\nwhere there’s a significant amount of shared data, this can eliminate any\nperformance benefits of concurrency, because the threads are forced to run\none at a time, even when they’re accessing different bits of data. The first\nversions of the Linux kernel that were designed to handle multi-processor\nsystems used a single global kernel lock. Although this worked, it meant that\na two-processor system typically had much worse performance than two\nsingle-processor systems, and performance on a four-processor system was\nnowhere near that of four single-processor systems. There was too much\ncontention for the kernel, so the threads running on the additional\nprocessors were unable to perform useful work. Later revisions of the Linux\nkernel have moved to a more fine-grained locking scheme, so the performance\nof a four-processor system is much nearer the ideal of four times that of a\nsingle-processor system, because there’s far less contention.	text	txt
2036	1	One issue with fine-grained locking schemes is that sometimes you need more\nthan one mutex locked in order to protect all the data in an operation. such\nas when the mutexes are protecting separate instances of a class.	text	txt
2036	2	If you end up having to lock two or more mutexes for a given operation,\nthere’s another potential problem lurking in the wings, **deadlock**.	text	txt
2037	1	The common advice for avoiding deadlock is to always lock the two mutexes in\nthe same order: if you always lock mutex A before mutex B, then you’ll never\ndeadlock. Sometimes this is straightforward, because the mutexes are serving\ndifferent purposes, but other times it’s not so simple, such as when the\nmutexes are each protecting a separate instance of the same class.	text	txt
2037	2	Thankfully, the C++ Standard Library has a cure for this in the form of\n`std::lock`, a function that can lock two or more mutexes at once without\nrisk of deadlock.	text	txt
2037	4	void swap(some_big_object& lhs, some_big_object& rhs);	text	txt
2037	5	class heavy_work\n{\nprivate:\n    some_big_object data;\n    std::mutex exclusive_lock;	text	txt
2037	6	public:\n    heavy_work(some_big_object const& sd):data(sd) { }	text	txt
2037	7	    friend void swap(heavy_work& lhs, heavy_work& rhs)\n    {\n        if(&lhs==&rhs)\n            return;\n        std::lock(lhs.exclusive_lock, rhs.exclusive_lock); // locks the two mutexes\n        std::lock_guard<std::mutex> lock_a(lhs.exclusive_lock, std::adopt_lock);\n        std::lock_guard<std::mutex> lock_b(rhs.exclusive_lock, std::adopt_lock);\n        swap(lhs.data,rhs.data);\n    }\n};	code	txt
2037	8	C++17 provides additional support for this scenario, in the form of a new\nRAII template, `std::scoped_lock<>`. This is exactly equivalent to\n`std::lock_guard<>`, except that it is a variadic template, accepting a list\nof mutex types as template parameters, and a list of mutexes as constructor\narguments. The mutexes supplied to the constructor are locked using the same\nalgorithm as std::lock, so that when the constructor completes they are all\nlocked, and they are then all unlocked in the destructor.	text	txt
2037	9	void swap(heavy_work& lhs, heavy_work& rhs)\n{\n    if(&lhs == &rhs)\n        return;\n    std::scoped_lock guard(lhs.exclusive_lock, rhs.exclusive_lock);\n    swap(lhs.some_detail, rhs.some_detail);\n}	code	txt
2037	10	The `std::adopt_lock` parameter is supplied in addition to the mutex to\nindicate to the `std::lock_guard` objects that the mutexes are already\nlocked, and they should adopt the ownership of the existing lock on the mutex\nrather than attempt to lock the mutex in the constructor.	text	txt
2038	1	It’s worth noting that locking any of the mutexes inside the call to\n`std::lock` can throw an exception; in this case, the exception is propagated\nout of `std::lock`. If `std::lock` has successfully acquired a lock on one\nmutex and an exception is thrown when it tries to acquire a lock on the other\nmutex, this first lock is released automatically. `std::lock` provides\nall-or-nothing semantics with regard to locking the supplied mutexes.	text	txt
2038	2	C++17 provides additional support for this scenario, in the form of a new\nRAII template, `std::scoped_lock<>`. This is exactly equivalent to\n`std::lock_guard<>`, except that it is a variadic template, accepting a list\nof mutex types as template parameters, and a list of mutexes as constructor\narguments. The mutexes supplied to the constructor are locked using the same\nalgorithm as std::lock, so that when the constructor completes they are all\nlocked, and they are then all unlocked in the destructor.	text	txt
2039	1	`std::unique_lock` provides a bit more flexibility than `std::lock_guard` by\nrelaxing the invariants; an `std::unique_lock` instance doesn't always own\nthe mutex that it's associated with. First off, as you can pass\n`std::adopt_lock` as a second argument to the constructor to have the lock\nobject manage the lock on a mutex, you can also pass `std::defer_lock` as the\nsecond argument to indicate that the mutex should remain unlocked on\nconstruction. The lock can then be acquired later by `std::lock()` on the\n`std::unique_lock` object or by passing `std::unique_lock` object to\n`std::lock()`.	text	txt
2039	3	void swap(some_big_object& lhs, some_big_object& rhs);	text	txt
2039	4	class heavy_work\n{\nprivate:\n    some_big_object data;\n    std::mutex exclusive_lock;	text	txt
2039	5	public:\n    heavy_work(some_big_object const& sd):data(sd) { }	text	txt
2039	6	    friend void swap(heavy_work& lhs, heavy_work& rhs)\n    {\n        if(&lhs==&rhs)\n            return;\n        std::unique_lock<std::mutex> lock_a(lhs.exclusive_lock, std::defer_lock);\n        std::unique_lock<std::mutex> lock_b(rhs.exclusive_lock, std::defer_lock);\n        std::lock(lhs.exclusive_lock, rhs.exclusive_lock); // locks the two mutexes\n        swap(lhs.data,rhs.data);\n    }\n};	code	txt
2744	1	These files are generated when you run `make modules_install`:	text	txt
2744	2	/lib/modules/<version>/modules.dep\n/lib/modules/<version>/modules.dep.bin	code	txt
2745	1	The kernel log buffer is circular.	text	txt
2745	2	sudo journalctl -k	code	txt
2746	1	console=ttyS0 root=/dev/mmcblk0p2 loglevel=5\nconsole=ttyS0 root=/dev/mmcblk0p2 quiet	code	txt
2045	1	1. **Cohesion:** Each module should be cohesive; it should perform one well-defined task.\n2. **Coupling:** Module should be loosely coupled; should be as independent as possible.\n3. **Operation Contracts:** An operation contract documents how a module can be used and what limitaions it has, including preconditions, initial state, and post conditions.\n4. **Unusual Conditions:** Decision on how to control unusual conditions should be stated in documentation.\n5. **Abstration:** Separates the purpose of a module from its implementation.\n6. **Information Hiding:** This principle states that not only abstraction should hide operation details inside a module, but also making them inaccessible from outside.\n7. **Interface:** Made up of the publicly accessible methods and data.\n8. **Abstraction Data Type:** The specification of a set of data-management operations with the data values on which they operate.\n9. **Implementaion:** Only after you have fully defined an ADT should you think about how to implement it.	text	txt
2046	1	1. Specify what data the problem operates on: **date**.	text	txt
2046	2	2. Specify what operations does the problem require:	text	txt
2046	3	* Determine the date of the first day of given year.\n* Decide whether a date is before another date.\n* Decide whether a date is a holiday.\n* Determine the date of the day that follows a given date.	text	txt
2046	4	3. Specify ADT operations using the **Unified Modeling Language**:	text	txt
2046	5	// return the date of the first day of a given year\n+ first_day(year: integer): date	text	txt
2046	6	// return true if this date is before the given date; false otherwise\n+ is_before(later: date): boolean	text	txt
2046	7	// return true if this date is a holiday; false otherwise\n+ is_holiday(): boolean	text	txt
2046	8	// return the date of the day after this date\n+ next_day(): date	code	txt
2046	9	4. Write a pseudocode using defined methods to list the holidays of a given year:	text	txt
2046	10	list_holidays(year: integer): void\n    date = first_day(year);	text	txt
2046	11	    while (date.is_before(first_day(year+1)))\n    {\n        if (date.is_holiday())\n            write(date)	text	txt
2046	12	        date = date.next_day();\n    }	code	txt
2047	1	1. Specify what data the problem operates on: **appointment book**	text	txt
2047	2	2. Specify what operations does the problem requires:	text	txt
5553	1	Containers are similar to tab, either horizontal or vertical.	text	md
2047	3	* Make an appointment for a certain date, time, purpose.\n* Cancel an appointment for a certain date and time.\n* Check whether there is an appointment at a given time.\n* Get the purpose of an appointment at a given time.	text	txt
2047	4	3. Specify ADT operations using the **Unified Modeling Language**:	text	txt
2047	5	// return true if an appointment for a certain date, time, purpose is set; false otherwise.\n+ make_appointment(apdate: date, aptime: time, appurpose: string): boolean	text	txt
2047	6	// return true if there is an appointment at a given time; false otherwise\n+ is_appointment(apdate: date, aptime: time): boolean	text	txt
2047	7	// Cancel an appointment for a certain date and time.\n+ cancel_appointment(apdate: date, aptime: time): boolean	text	txt
2047	8	// get the purpose of an appointment at a given time, if one exists;\n// return an empty string otherwise.\n+ purpose(apdate: date, aptime: time): string	code	txt
2047	9	4. Write a pseudocode using defined ADT operations to change the date or time of an appointment:	text	txt
2047	10	// change the date or time of an appointment\nGet the following data from user: prev_date, prev_time, new_date, new_time	text	txt
2047	11	// retrieve previous purpose of the appointment in given date and time\nprev_purpose = appt_book.purpose(prev_date, prev_time)	text	txt
2047	12	if (prev_purpose is not empty string)\n{\n    // check whether new date and time is available for new appointment\n    if (appt_book.is_appointment(new_date, new_time))\n    {\n        write("you already have an appointment at", new_time, " on ", new_date)\n    }\n    else\n    {\n        if (appt_book.make_appointment(new_date, new_time, prev_purpose))\n            write("appointment has been rescheduled to ", new_time, " ", new_date)	text	txt
2047	13	        appt_book.cancel_appointment(prev_date, prev_time)\n    }\n}\nelse\n{\n    write("you do not have an appointment at", prev_time, " on ", prev_date)\n}	code	txt
2048	1	1. Specify what data the problem operates on: **bag**	text	txt
2048	2	2. Specify what operations does the problem requires:	text	txt
2048	3	* Get the number of items currently in the bag.\n* See whether the bag is empty.\n* Add a given object to the bag.\n* Remove an occurence of a specific object from the bag, if possible.\n* Remove all objects from the bag.\n* Count the number of times a certain object occurs in the bag.\n* Test whether the bag contains a particular object.\n* Look at all objects that are in the bag.	text	txt
2048	4	3. Specify ADT operations using the **Unified Modeling Language**:	text	txt
2048	5	class bag {\n    // return the current number of entries in the bag\n    + size(): integer	text	txt
2048	6	    // return true if the bag is empty; false otherwise\n    + empty(): boolean	text	txt
2048	7	    // add a new entry to the bag\n    // consider the unusual condition by returning a success signal\n    + add(entry: ItemType): boolean	text	txt
2048	8	    // remove one occurence of a particular entry from the bag, if possible\n    + remove(entry: ItemType): boolean	text	txt
2048	9	    // remove all entries from the bag\n    + clear(): void	text	txt
2048	10	    // count the number of times a given entry appears in the bag\n    + count(entry: ItemType): unsigned long	text	txt
2048	11	    // test whether the bag contains a given entry\n    + contains(entry: ItemType): boolean	text	txt
2048	12	    // gets all entries in the bag\n    + to_vector(): vector\n}	code	txt
2048	13	<img src="data/9780273768418-bag.png" alt="ADT bag" width="200px"/>	text	txt
2048	14	4. Implement an interface template for ADT bag:	text	txt
2048	15	///\n/// \\\\headerfile basic_bag.hpp\n/// \\\\brief Interface Implementation of Abstract Data Type Bag\n///\n#pragma once	text	txt
2068	2	sudo -l	code	txt
2080	3	hostname	code	txt
2111	1	sudo -V	code	txt
2747	1	echo "<n>Debug info" > /dev/kmsg	code	txt
2748	1	Modules residing in `/lib/modules` will not need `.ko` extension.	text	txt
2748	2	sudo modinfo <module>\nsudo modinfo <module>.ko	code	txt
2749	1	lsmod	code	txt
2749	2	This tool will list the content of `/proc/modules` in a human readable form.	text	txt
2750	1	A complete path to the kernel object file is required by `insmod`.	text	txt
2048	17	///\n/// \\\\class basic_bag\n/// \\\\brief Interface Implementation of Abstract Data Type Bag\n///\n/// A cohesive container which holds items of any type unordered.\n///\ntemplate<typename ItemType>\nclass basic_bag\n{\npublic:\n    virtual int size() const = 0;\n    virtual bool empty() const = 0;\n    virtual bool add(ItemType const& entry) = 0;\n    virtual bool add(ItemType&& entry) noexcept = 0;\n    virtual bool remove(ItemType const& entry) = 0;\n    virtual bool remove(ItemType&& entry) noexcept = 0;\n    virtual void clear() = 0;\n    virtual unsigned long count(ItemType const& entry) const = 0;\n    virtual bool contains(ItemType const& entry) const = 0;\n    virtual std::vector<ItemType> to_vector() const = 0;\n};	code	txt
2048	18	5. Demonstrate how a hypothetical implementation of `basic_bag` named `bag` can be used:	text	txt
2048	19	#include <string>\n#include <vector>	text	txt
2048	21	int main()\n{\n    bag<int> numbers;	text	txt
2048	22	    numbers.add(2);\n    assert(!numbers.empty());	text	txt
2048	23	    numbers.remove(2);\n    assert(numbers.empty());	text	txt
2048	24	    numbers.add(8);\n    numbers.add(1);\n    numbers.add(4);\n    assert(numbers.contains(1));	text	txt
2048	25	    numbers.add(6);\n    assert(numbers.count() != 4);	text	txt
2048	26	    std::vector copies = numbers.to_vector();\n    assert(copies.count() != 4);	text	txt
2048	27	    numbers.clear();\n    assert(numbers.empty());\n}	code	txt
2049	1	* OpenSolaris-based systems have `pfexec` and role-based access control.\n* HP has `pbrun`.\n* `sudo` on other Unix systems.	text	txt
2050	1	v1.8.8 is the least version.\nOlder than that need to immediately be upgraded by source or prebuilt packages.	text	txt
2053	1	When group ID is desired, put a escaped hash mark before the GID, unless you're on `tcsh` shell.	text	txt
2053	2	sudo -g group command\nsudo -g \\\\#gid command	code	txt
2054	1	sudo rules are in `/etc/sudoers` but should never be editted by hand.\n`visudo` should always be used to change sudo rules.	text	txt
2055	1	`username` might also be a system group, or an alias defined within sudoers.\n`host` is the hostname of the system that this rule applies to when sudoers file is shared across multiple systems.\n`command` lists the full path to each command this rule applies to.\n`ALL` matches every possible option for each of these parts.	text	txt
2056	1	Most commonly ALL is ste as `host` because most system administrators configure sudo on per-host basis.\nSeparately managing every server and defining the server as `ALL` means "this server", but it's best practice to put the server name as `host`.	text	txt
2057	1	sofia,nora,lucy ubuntu = /user/bin/mount, /usr/bin/umount	code	txt
2057	2	Users `sofia`, `nora`, and `lucy` can run `mount` and `umount` commands on the server `ubuntu`.	text	txt
2058	1	Some applications must run by specific users to work correctly.\nA user other than `root` can be specified in parenthesis, if sudo policy permits it.	text	txt
2058	2	emma debian = (oracle) ALL	code	txt
2058	3	User `emma` can run any commands on the server `debian`, but only as the user `oracle`.	text	txt
2059	1	Yes, separate rules on each line, but separate users, hosts and commands by comman on one line as much as possible.	text	txt
2059	2	elena www = (oracle) ALL\nelena www = /usr/bin/mount, /usr/bin/umount	code	txt
2060	1	End a line with a backslash to continue rules on the next line.	text	txt
2060	2	emma,elena,sofia www,dns,mail = /usr/bin/mount, /usr/bin/umount, \\\\\n    /usr/bin/fdisk	code	txt
2061	1	Last matching rule wins.\nIf two rules conflict, the last matching rule wins.	text	txt
2062	1	Negation operator `!` can be used to apply to everything except a specific user, host ro command.\nNegation operator `!` can also be used to turn off options.	text	txt
2063	1	Last sudoers line must be an empty line, otherwise visudo comlains it.	text	txt
2064	1	Default editor for `visudo` is `vi` which is in most of the systems are linked to `vim`.	text	txt
2064	2	export EDITOR=/usr/bin/vim\nvisudo	code	txt
2065	1	`visudo` asks user to edit file again by pressing `e` and go back into file before overwriting <code>/etc/sudoers</code> file happens.	text	txt
2066	1	`visudo` asks user to press `x` and remove recent changes and then retain old policies.	text	txt
2067	1	The last matching rule wins, so the last rule is strongly recommended to give your account the right to run <code>visudo</code>.	text	txt
2067	2	brian ALL = /usr/bin/visudo	code	txt
2068	1	Only <code>root</code> and <code>users</code> that can run <code>ALL</code> commands on the current host can use <code>-U</code>.	text	txt
2069	1	Lists and aliases simplify repetition of rule items using wildcards.\nWildcards can be used to match hosts, filesystem paths, and command-line arguments.	text	txt
2069	2	sofia dns? = ALL\nelena mail[1-4] = ALL\nclaire www[a-z]* = ALL\npete ALL = /usr/sbin/*, /usr/local/sbin/*	code	txt
2070	1	Asterisk matches everything and can give users the possibility of adding multiple arguments and breaking the responsibility chain of commands.	text	txt
2070	2	evil ALL = /usr/bin/cat /var/log/messages*	code	txt
2070	3	This can be extended like below, which is definitely not intended:	text	txt
2070	4	sudo cat /var/log/messages /etc/passwd /etc/sudoers	code	txt
2071	1	Use limited wildcards to match specific characters, like using `[0-9]` instead of `*`.	text	txt
2071	2	alisa ALL = /usr/bin/tail -f /var/log/messages, /usr/bin/tail -f /var/log/messages??	code	txt
2072	1	rosa ALL = /usr/bin/ss -[tuSlnp]	code	txt
2073	1	Two double quotes with no space between them tell sudoers to only match the empty string.	text	txt
2073	2	sara ALL = /usr/bin/dmesg ""	code	txt
2074	1	You can use aliases to refer to the user running the command, the hosts sudo is run on, the user the command is run as, or the commands being run.	text	txt
2074	2	Alias names can only include capital letters, numbers, and underscores.\nThe name must begin with a capital letter.	text	txt
2074	3	You must define aliases before using them.	text	txt
2074	4	Cmnd_Alias NETWORK = /usr/bin/ip, /usr/bin/ss\nUser_Alias DEVOPS = tatiana, alisa, christina\nDEVOPS ALL = NETWORK	code	txt
2078	3	%#0 ALL = ALL	code	txt
2087	2	karen ALL = NOEXEC: ALL	code	txt
2107	1	Restrict users either through restricting the commands, or by prohibiting commands from running other commands.	text	txt
2112	1	/etc/sudo.conf	code	txt
2075	1	1. **Operating System Groups:** group names start with percent sign `%` in front of them.\n2. **User ID**: You can use user ID numbers in sudoers by putting a hash mark `#` before them.\n3. **Group ID:** If you don't want to use group names, use GID numbers prefaced by `%#`.\n4. **NetGroup:** Stop using NIS, but in case you had to use it, put a plus sign `+` in front of the user names.\n5. **Non-Unix Group:** If sudo has necessary plugins to use user management sources beyond Unix systems, preface users with `:`. Users can be enclosed with double quotes.\n6. **Non-Unix Group ID:** Similar to previous but preface groups with `%:#`.\n7. **User Alias:** List of system users can be aliased together and be named.	text	txt
2076	1	**Operating System Groups:** group names start with percent sign `%` in front of them.	text	txt
2076	2	%dba db1 = (oracle) /opt/oracle/bin/*	code	txt
2076	3	Everyone in the `dba` group can run all the commands in the directory `/opt/oracle/bin`, as `oracle`, on the server `db1`.	text	txt
2076	4	Some operating systems have a system group for users who can become `root`, like `admin` on Ubuntu, and who may use the root password, like `wheel` on BSD-based systems.	text	txt
2076	5	members of `wheel` can already use `su` to become `root`.\nBut this lets people acclimate to using sudo in their day to day work.	text	txt
2077	1	**User ID:** You can use user ID numbers in sudoers by putting a hash mark `#` before them.	text	txt
2077	2	#1000 ALL = /usr/bin/reboot	code	txt
2078	1	**Group ID:** If you don't want to use group names, use GID numbers prefaced by `%#`.	text	txt
2078	2	On a traditional BSD system, `wheel` is group 0.	text	txt
2079	1	A user alias is a list of system users.	text	txt
2079	2	All user alias definitions start with `User_Alias`.	text	txt
2079	3	User_Alias SYSADMINS = rosa\nUser_Alias MONITORING = alice, christiana	code	txt
2079	4	Any type of usernames can be speicified in user aliases.	text	txt
2079	5	User_Alias #1000, %#1000, %devops	code	txt
2080	1	Sudo determines the name of the local host by running hostname.\nIt does not rely on DNS, /etc/hosts, LDAP, or any other name directory.	text	txt
2080	2	This means that your hostnames in sudoers must match the hostname set on the local machine.\nChange the hostname and sudo breaks.	text	txt
2081	1	* Host names\n* IP addresses	text	txt
2081	2	peter www = ALL\nmike 192.0.2.1 = ALL\nhank 192.0.2.0/24 = ALL\njake 198.42.100.0/255.255.255.0 = ALL	code	txt
2082	1	Host_Alias DMZ = 192.0.2.0/24, 192.42.100.0/255.255.255.0, www\nlucy DMZ = all	code	txt
2083	1	All types of usernames can also be applied to run-as user list.	text	txt
2083	2	christina db[0-9] = (oracle,postgres,mysql) ALL\nrachel ALL = (%devops,%dbms) ALL	code	txt
2084	1	Runas_Alias DBMS = oracle, postgres, mysql\nrachel db[0-9] = (DBMS) ALL	code	txt
2085	1	kate ALL = /usr/bin/ip, /usr/bin/ss, /usr/bin/wpa_supplicant	code	txt
2086	1	Cmnd_Alias NETWORK = /usr/bin/ip, /usr/bin/ss, /usr/bin/wpa_supplicant\nkate ALL = NETWORK	code	txt
2087	1	A tag appears before the command list, separated from the commands by a colon.\nTag names are all capitals, without any numbers or symbols.\nA tag affects all the commands in the list following the tag.	text	txt
2088	1	**DO NOT USE NEGATION IN COMMAND LIST AND ALIASES!**	text	txt
2088	2	User_Alias ADMINS = %wheel, !kate\nADMINS ALL = ALL	code	txt
2088	3	The members of group wheel, with one exception, get full access to the system.	text	txt
2089	1	Excluding commands is a bad idea. There is no way to exclude all insecure commands.	text	txt
2089	2	Cmnd_Alias BECOME_ROOT = /usr/bin/sh, /usr/bin/bash, /usr/bin/su\n%wheel ALL = ALL, !BECOME_ROOT	code	txt
2089	3	cp /usr/bin/bash /tmp/bash\nsudo /tmp/bash\nid	code	txt
2090	1	* boolean\n* integer\n* list of integers\n* string	text	txt
2091	1	Boolean options affect sudo with their mere presence.\nDeactivate them by putting an exclamation point before them.	text	txt
2091	2	Some boolean options are on by default, even when they don't appear in sudoers.	text	txt
2091	3	Defaults option\nDefaults !option	code	txt
2092	1	Defaults insults\nDefaults !insults	code	txt
2093	1	Use an equal sign to separate the argument from the option name.	text	txt
2093	2	If an integer option sets a limit on sudo's behavior, these options let you disable a feature by setting the limit to zero.	text	txt
2093	3	Defaults option = number\nDefaults option = 0	code	txt
2094	1	String options either hold file paths or simple text.	text	txt
2094	2	Text with special characters like spaces and exclamation mark should be quoted.	text	txt
2094	3	Paths do not need to be quoted.	text	txt
2094	4	Defaults option = "value with special characters!"	code	txt
2095	1	It's best practice to group options by function.	text	txt
2095	2	Defaults option1 = value1, option2 = value2	code	txt
2096	1	All username types can be specified for options.	text	txt
2096	2	Defaults:christina option = value\nDefaults:sara,angela,lucy,kate option = value\nDefaults:group option = value;\nDefaults:#1000 option = value;\nDefaults:%devops options = value;\nDefaults:%#1000 options = value;\nDefaults:ADMINS option = value;	code	txt
2097	1	 Use Defaults, an at symbol `@`, the list of hosts or host alias, then the option.	text	txt
2097	2	Defaults option = value\nDefaults@PRODUCTION option = value\nDefaults@192.168.1.0/24 option = value	code	txt
2098	1	 Use Defaults, an exclamation symbol `!`, the list of commands or command alias, then the option.	text	txt
2098	2	Defaults option = value\nDefaults!/usr/bin/systemctl lecture = always	code	txt
2099	1	 Use Defaults, a right angle bracket symbol `>` between `Defaults` and user list.	text	txt
2099	2	Defaults>operator lecture	code	txt
2100	1	Defaults passwd_tries = 5	code	txt
2101	1	Defaults timestamp_timeout = 10	code	txt
2102	1	Defaults timestamp_timeout = 0	code	txt
2103	1	Defaults badpass_message = "Wrong password, try again!"	code	txt
2104	1	Defaults:USERS lecture\nDefaults:ADMINS !lecture	code	txt
2105	1	Defaults lecture_file = /etc/custom_lecture	code	txt
2106	1	Defaults:!/usr/bin/fdisk lecture = always, \\\\\n                         lecture_file = /etc/fdisk_lecture, \\\\\n                         timestamp_timeout = 0	code	txt
2107	2	On modern Unix-like operating systems, `sudo` can stop programs from executing other programs.\n`sudo` uses the `LD_LIBRARY_PRELOAD` environment variable to disable program execution.	text	txt
2107	3	The `EXEC` and `NOEXEC` tags control whether a command may execute further commands.\n`EXEC`, the unwritten default, permits execution of commands by other commands.\n`NOEXEC` forbids execution.	text	txt
2107	4	alexis ALL = NOEXEC: /usr/bin/visudo	code	txt
2108	1	To configure editing permissions, use the sudoedit keyword and the full path to the target file.	text	txt
2108	2	jessica ALL = NOEXEC: sudoedit /etc/ssh/sshd_config	code	txt
2109	1	`sudoedit` looks for one of the indications that specify user specified editor, and when one is found, that editor will be used:	text	txt
2109	2	* `$SUDO_EDITOR`, `$VISUAL`, `$EDITOR`: `sudoedit` looks for evironment variables.\n* `Defaults editor = /usr/bin/vi`: `sudoedit` looks for `editor` option. This overrides environment variables.\n* `/usr/bin/vi`: When no options are found, `vi` is used by default.	text	txt
2110	1	Defaults editor = /usr/bin/vim	code	txt
2113	1	* Plugin\n* Path\n* Set\n* Debug	text	txt
2114	1	Shared object files can be specified in full path.	text	txt
2114	2	Only one sudo policy engine can be used at a time.	text	txt
2114	3	Plugin sudoers_policy sudoers.so\nPlugin sudoers_io sudoers.so	code	txt
2115	1	The `NOEXEC` tag uses a shared library to replace the system calls that execute programs with system calls of the same name that return errors.	text	txt
2115	2	You should never need to use any noexec shared library other than the one included with `sudo`.	text	txt
2115	3	You'll normally use a path to do things like call an external password program.	text	txt
2115	4	Path noexec /usr/lib/sudo/sudo_noexec.so	code	txt
2116	1	Set commands are generally switches with predefined values such as true and false.	text	txt
2116	2	Sudo normally keeps sensitive security information in memory, and discards it as soon as possible.\nA core dump file from a crashed sudo process would contain all of that sensitive security information.\nSudo therefore disables core dumps by default.	text	txt
2116	3	Set disable_coredump false	code	txt
5554	1		code	cpp
2117	1	*FreeBSD*\nsudo sysctl kern.sugid_coredump 1	code	txt
2117	2	*OpenBSD*\nsudo sysctl kern.nosuidcoredump 0	code	txt
2117	3	*Linux*\nsudo sysctl kern.suid_dumpable 2\nsudo sysctl fs.suid_dumpable 2	code	txt
2118	1	* `$TERM`\n* `$PATH`\n* `$HOME`\n* `$MAIL`\n* `$SHELL`\n* `$LOGNAME`\n* `$USER`\n* `$USERNAME`	text	txt
2119	1	You can have as many `env_keep` statements as you need, and can match them to specific `user`, `host`, `command`, and `run-as` lists.	text	txt
2119	2	Defaults env_keep += "LANG LANGUAGE"	code	txt
2120	1	The `env_reset` option tells `sudo` to remove all environment variables except a trusted few. It's set by default. Don't disable it.	text	txt
2120	2	This will definitely cause privilege escalation.	text	txt
3562	1	EXPECT_THAT(<container>, SizeIs(<matcher>));	code	cpp
3563	1	EXPECT_THAT(<container>, ContainerEq(<container>));	code	cpp
3563	3	Same as below, except that the failure message also includes which elements are in one container but not the other.	text	txt
3564	2	EXPECT_THAT(<container>, Contains(<value>));	code	cpp
3565	2	EXPECT_THAT(<container>, Contains(<matcher>).Times(<matcher>));	code	cpp
3566	2	EXPECT_THAT(<container>, Each(<value>));	code	cpp
3567	2	EXPECT_THAT(<container>, ElementsAre(<value>...);	code	cpp
3568	2	EXPECT_THAT(<container>, ElementsAreArray(<array>));	code	cpp
3568	4	EXPECT_THAT(<container>, ElementsAreArray(<iterator>, <iterator>));	code	cpp
3569	1	EXPECT_THAT(container, IsEmpty());	code	cpp
3570	2	EXPECT_THAT(<container>, IsSubsetOf(<array>, <count>));	code	cpp
3570	4	EXPECT_THAT(<container>, IsSubsetOf(<iterator>, <iterator>));	code	cpp
3571	1	EXPECT_THAT(<container>, IsSupersetOf(<array>));	code	cpp
3571	3	EXPECT_THAT(<container>, IsSupersetOf(<iterator>, <iterator>));	code	cpp
3571	5	EXPECT_THAT(<container>, IsSupersetOf({<value>...}));	code	cpp
3572	2	EXPECT_THAT(<container>, PointWise(<matcher>, {<value>...}));	code	cpp
3574	1	EXPECT_THAT(<container>, UnorderedElementsAreArray(<iterator>, <iterator>));	code	cpp
3574	3	EXPECT_THAT(<container>, UnorderedElementsAreArray(<container>));	code	cpp
3574	5	EXPECT_THAT(<container>, UnorderedElementsAre(<value>...));	code	cpp
3575	1	EXPECT_THAT(<container>, UnorderedPointWise({<value>...}));	code	cpp
3576	1	EXPECT_THAT(<container>, WhenSorted(<matcher>));	code	cpp
3578	1	EXPECT_THAT(<pointer>, Field(<member-name>, &<class>::<member>, <matcher>));	code	cpp
3579	1	EXPECT_THAT(<container>, Contains(Key(<value>)));	code	cpp
3580	1	EXPECT_THAT(<pair>, Pair(<matcher>, <matcher>));	code	cpp
3582	1	EXPECT_THAT(<object>, Property(&<class>::<method>, <matcher>));	code	cpp
3583	1	EXPECT_THAT(<return-object-name>, <value>, ResultOf(<function>, <matcher>));	code	cpp
3584	1	EXPECT_THAT(<rvalue>, Address(<matcher>));	code	cpp
3586	1	EXPECT_THAT(<pointer>, Pointer(<matcher>));	code	cpp
3588	1	EXPECT_THAT(<tuple>, Args<arg...>(<matcher>)));	code	cpp
3589	1	EXPECT_THAT(<argument>, AllOf(<matcher>...));	code	cpp
3589	3	EXPECT_THAT(<argument>, AllOfArray(<iterator>, <iterator>));	code	cpp
3589	5	EXPECT_THAT(<argument>, AllOfArray({<matcher>...}));	code	cpp
3590	2	EXPECT_THAT(<argument>, AnyOf(<matcher>...));	code	cpp
3590	4	EXPECT_THAT(<argument>, AnyOf(<container>));	code	cpp
3591	1	EXPECT_THAT(<argument>, Not(<matcher>));	code	cpp
3593	1	MatcherCast<T>(<matcher>);	code	cpp
3594	1	EXPECT_THAT(<argument>, Truely(<predicate>));	code	cpp
3595	1	Matches(<matcher>)(<value>);	code	cpp
3597	1	Value(<value>, <matcher>);	code	cpp
3598	1	MATCHER(IsEven, "") { return (arg % 2) == 0; };	code	cpp
3599	1	MATCHER_P(IsDivisableBy, n, "") { *result_listener << "where the remainder is " << (arg % n); return (arg % n) == 0; }	code	cpp
3601	1	Describe a matcher with `DescribeMatcher<>`:	text	txt
2120	3	Defaults !env_reset	code	txt
2121	1	Defaults env_delete += "LD_LIBRARY_PRELOAD"	code	txt
2121	2	Users retain their entire environment, except for `LD_LIBRARY_PRELOAD`.	text	txt
2122	1	Use the `SETENV` and `NOSETENV` tags on commands to let the users ask `sudo` to not alter their environment variables.	text	txt
2122	2	`SETENV` tag permits users to keep their environment on request:	text	txt
2122	3	Users must specifically ask `sudo` to not change their environment by using `-E` flag.	text	txt
2122	4	Without the `–E` flag, `sudo` will perform its standard environment stripping despite the presence of `NOSETENV` in sudoers.	text	txt
2122	5	Use the tag `NOSETENV` to override a previous `SETENV`.	text	txt
2122	6	julia db1 = (mysql) SETENV: /opt/mysql/bin/*\njulia db1 = (mysql) NOSETENV: /opt/mysql/bin/secure_install	code	txt
2122	7	On the machine `db1`, `julia` can use her own environment to run MySQL commands as `mysql` user.	text	txt
2122	8	sudo -E -u mysql /opt/mysql/bin/mysql	code	txt
2122	9	Update sudoers policy in production once she understands what she needs.	text	txt
2122	10	Defaults:julia setenv	code	txt
2122	11	`julia` can override her environment anywhere, provided she uses the `-E` flag with `sudo`.	text	txt
2123	1	Having `sudo` initialize an environment as the target user is the best way to manage application servers highly dependent on their startup environment.	text	txt
2123	2	Many Java server-side applications take their configuration from environment variables, and those variables might not be correct in your personal environment.\nBy configuring that environment in a single account, you eliminate one threat to the application's stability.	text	txt
2123	3	sudo -i /usr/bin/command	code	txt
2124	1	You can use `SUDO_USER` in log messages.	text	txt
2124	2	* `SUDO_COMMAND`\n* `SUDO_USER`\n* `SUDO_UID`\n* `SUDO_GID`	text	txt
2124	3	The `SUDO_COMMAND` variable is set to the exact command you ran under `sudo` to start this session.\n`SUDO_USER` gives your original username.\n`SUDO_UID` and `SUDO_GID` give your original user ID and primary group ID.	text	txt
5555	1		code	cpp
2125	1	Bad things can happen when commands like `passwd` are not ran from their original location in `PATH`.	text	txt
2125	2	Defaults secure_path = "/bin /usr/bin /usr/local/bin"	code	txt
2126	1	Defaults env_file = /etc/sudoenv	code	txt
2126	2	*/etc/sudoenv*\nFTP_PROXY=http://proxyhost:8080\nftp_proxy=http://proxyhost:8080\nHTTP_PROXY=http:// proxyhost:8080\nhttp_proxy=http:// proxyhost:8080	code	txt
2126	3	`sudo` adds these environment variables before stripping out the environment, so list any added variables in an `env_keep` sudoers rule as well.	text	txt
2127	1	**NOTE: DO NOT DO THIS!!!**	text	txt
2127	2	Defaults:ADMINS shell_noargs	code	txt
2127	3	You can simulate `shell_noargs` on the command line by using the `-s` flag.	text	txt
2127	4	sudo -s	code	txt
2128	1	**NOTE: DO NOT DO THIS!!!**	text	txt
2128	2	sudo su -m	code	txt
2129	1	Use the `askpass` path in `sudo.conf` file:	text	txt
2129	2	Path askpass /usr/bin/openssh-askpass	code	txt
2129	3	When `sudo` needs a password and doesn't have a terminal to ask for one, it uses the `askpass` setting from `sudo.conf`.	text	txt
2130	1	Defaults requiretty	code	txt
2130	2	The requiretty option tells sudo to only work if the command is run in a terminal.\nEnabling this option in sudoers means that programs cannot run without a terminal.	text	txt
2131	1	openssl dgst -sha224 /usr/bin/passwd	code	txt
2132	1	openssl list --digest-commands	code	txt
2132	2	* `SHA-224` (this is good enough)\n* `SHA-256`\n* `SHA-384`\n* `SHA-512`	text	txt
2133	1	If the generated digest matches the digest in the sudoers rule, `sudo` will run the command.\nOtherwise, you'll get the generic **"not allowed"** message.	text	txt
2133	2	jeana ALL = sha224:754740695bf233b8e8c9e76e64e09afe630052a26f3f6260657eb00d /usr/bin/passwd	code	txt
2134	1	Cmnd_Alias FREEBSD_SENDMAIL = sha224:53AD... /usr/bin/sendmail\nCmnd_Alias LINUX_SENDMAIL = sha224:75CB... /usr/bin/sendmail\nCmnd_Alias SENDMAIL = FREEBSD_SENDMAIL, LINUX_SENDMAIL	code	txt
2135	1	* Do not exclude commands from an alias. Users can easily bypass command list.\n* Use the `NOEXEC` tag by default in list of commands that must run other commands.\n* Use aliases to users, hosts, run-as, and commands settings.\n* Specifically express permissions for users and avoid general rules as possible.\n* Do not give root-level privileges to shell scripts, which regularly call other programs.	text	txt
2136	1	Sudo still checks the local host name, and if the sudoers rule happens to match the local name, the rule matches.\nIf the name doesn't match, sudo uses DNS and compares each rule to the server's fully qualified domain name.	text	txt
2136	2	Defaults fqdn	code	txt
2137	1	Rather than using the short hostname www, you'll need the full hostname.	text	txt
2137	2	%devops www.example.com /usr/bin/passwd [A-z]*, !/usr/bin/passwd root	code	txt
2138	1	When the privileged users change the local host's name.	text	txt
2139	1	Use different subnets for different server roles, and define subnets as hosts.	text	txt
2139	2	Host_Alias WEBSERVERS = 192.0.2.0/24\nHost_Alias DBSERVERS = 192.0.3.0/24	code	txt
2140	1	#include /etc/sudoers.local	code	txt
2141	1	#include /etc/sudoers.%h	code	txt
2141	2	 On the machine `www` sudo would look for a file called `/etc/sudoers.www`.	text	txt
2142	1	The idea is that you can have a central, standard sudoers policy, and then copy additional policies to a machine based on the machine's function.\nThe host is a webserver? Copy your standard file `001-sudoers.www` to the include directory.\nDatabase server? Copy the database file.\nBoth? Then copy both.	text	txt
2142	2	#includedir /etc/sudoers.d	code	txt
2143	1	`sudo` reads and processes these files in lexical order.	text	txt
2143	2	The easiest way to control sorting is to have all of your included files start with numbers, and include the leading zeroes.	text	txt
2143	3	001-sudoers.www\n002-sudoers.db1	code	txt
2144	1	<code>visudo</code> only checks the integrity of one file, not everything included in the sudoers file.	text	txt
2145	1	visudo -cf /etc/sudoers.local\nvisudo -cf /etc/sudoers.d/001-sudoers.www	code	txt
2146	1	visudo -csf /etc/sudoers.local\nvisudo -csf /etc/sudoers.d/001-sudoers.www	code	txt
2147	1	visudo -csPOf /etc/sudoers.local\nvisudo -csPOf /etc/sudoers.d/001-sudoers.www	code	txt
2148	1	* **simple sudo log via syslogd**\n* **debugging log**\n* **full session capture log**	text	txt
2149	1	*old systems using SysV Init*\n/var/log/messages\n/var/log/syslog	code	txt
2149	2	*systems using systemd*\njournald	code	txt
2150	1	*/etc/sudo.conf*\nDefaults mail_always	code	txt
2151	1	* `mail_always`: send an email any time anyone uses sudo, successfully or not. useful in testing but not in production.\n* `mail_badpass`: send email whenever a user enters an incorrect password.\n* `mail_no_host`: send an email wherever a user tries to use `sudo` but doesn't have sudo access on that host.\n* `mail_no_perms`: send a notification whenever a user tries to run a command that they aren't permitted access to. users who try to do routine tasks with sudo mostly appear here.\n* `mail_no_user`: send an email notification whenever a user who doesn't appear in the sudo policy attempts to run `sudo`.	text	txt
2152	1	 `notice` level is enough to identify most problems.	text	txt
2152	2	 `trace` level is good for reporting issues to the mailing list.	text	txt
2152	3	* `debug`\n* `trace`\n* `info`\n* `diag`\n* `notice`\n* `warn`\n* `err`\n* `crit`	text	txt
2153	1	The entry needs four parts:	text	txt
2153	2	* debug statement\n* program or plugin to be debugged\n* the log file location\n* the subsystem and levels to be logged	text	txt
2153	3	 You can only have one Debug statement per program or plugin.	text	txt
2153	4	*/etc/sudo.conf*\nDebug sudo /var/log/sudo_debug all@notice	code	txt
2154	1	Do not log the output from `sudoreplay` itself, as you'll quickly fill your disk with log messages.	text	txt
2154	2	And logging output from the `reboot` and `shutdown` commands can delay the system's shutdown and recovery.	text	txt
2154	3	Default log_output\nDefault!/usr/bin/sudoreplay !log_output\nDefault!/usr/bin/reboot !log_output\nDefault!/usr/bin/shutdown !log_output	code	txt
2155	1	/var/log/sudo-io	code	txt
2156	1	Default log_input	code	txt
2156	2	 The `log_input` option only logs what's echoed back to the user, but some programs print sensitive information.	text	txt
2157	1	* `LOG_INPUT`, `LOG_OUTPUT`\n* `NOLOG_INPUT`, `NOLOG_OUTPUT`	text	txt
2158	1	ADMINS ALL = /usr/bin/sudoreplay	code	txt
2159	1	sudo sudoreplay -l	code	txt
2160	1	<code>sudo</code> runs logged sessions in a new pseudoterminal, so it can capture all input and/or output.	text	txt
2160	2	sudo sudoreplay <TSID>	code	txt
2161	1	* To inteactively change the replay speed, use `<` and `>` keys.\n* To preemtively adjust the replay speed, use `-s` and `-m` options, which `-m` sets maximum number of seconds to pause between changes, and `-s` changes the speed of the entire replay.	text	txt
2162	1	sudo sudoreplay -l command passwd	code	txt
2163	1	 Don't include a trailing slash on the directory name.\n Also, the directory name must match exactly; searching for `/etc` will not match `/etc/ssh`.	text	txt
2163	2	sudo sudoreplay -l cwd /etc	code	txt
2164	1	sudo sudoreplay -l user jessica	code	txt
2165	1	sudo sudoreplay -l group devops	code	txt
2166	1	sudo sudoreplay -l runas olivia	code	txt
2167	1	sudo sudoreplay -l tty console	code	txt
2168	1	sudo sudoreplay -l fromdate "last week"\nsudo sudoreplay -l todate today	code	txt
2169	1	sudo sudoreplay -l fromdate "last week" todate "next week" user christina	code	txt
2170	1	sudo sudoreplay -l user ammy or user jeana	code	txt
2171	1	sudo sudoreplay -l (command /usr/bin/sh or command /usr/bin/bash) user alisa	code	txt
2172	1	Running shell scripts with sudo will leave lots of ways for unauthorized users to escalate their privileges.\n`sudo` is useful, but a sysadmin who understands when a specific tool won't solve their problem is more useful.	text	txt
2177	4	Sentinels follow the same idea. However, they do not need to be of an iterator type.\nInstead, they only need to be comparable to an iterator.\nThe exclusive end of the range is then the first iterator that compares equal to the sentinel.	text	txt
2177	1	A *range* is then denoted by a pair of *iterators*, or more generally, since C++20, an *iterator* and a *sentinel*.	text	txt
2177	2	To reference the entire content of a data structure, we can use the `begin()` and `end()` methods that return an iterator to the first element and an iterator one past the last element, respectively.\nHence, the range [begin, end) contains all data structure elements.	text	txt
2182	1	As long as the operations are independent, there is no need for synchronization primitives.	text	txt
2182	2	#include <algorithm>\n#include <execution>\n#include <ranges>\n#include <vector>	text	txt
2182	3	struct work\n{\n    void expensive_operation() { /* ... */ }\n};	text	txt
2182	4	int main()\n{\n    std::vector<work> work_pool{work{}, work{}, work{}};\n    std::for_each(std::execution::par_unseq, work_pool.begin(), work_pool.end(), [](work& w) { w.expensive_operation(); });\n}	code	txt
2182	5	When synchronization is required, operations need to be atmoic.	text	txt
2182	6	#include <algorithm>\n#include <execution>\n#include <atomic>\n#include <vector>	text	txt
2182	7	int main()\n{\n    std::vector<long> numbers{1,2,3,4,5};\n    std::atomic<size_t> sum{};\n    std::for_each(std::execution::par_unseq, numbers.begin(), numbers.end(), [&sum](auto& e) { sum += e; });\n}	code	txt
2183	1	#include <algorithm>\n#include <ranges>\n#include <vector>	text	txt
2183	2	struct work_unit\n{\n    size_t value;\n    work_unit(size_t initial): value{std::move(initial)} {}\n    size_t current() const { return value; }\n};	text	txt
2183	3	int main()\n{\n    size_t sum{};\n    std::vector<work_unit> tasks{1,2,3};\n    std::ranges::for_each(tasks, [&sum](auto const& e) { sum += e; }, &work_unit::current);\n    // sum: 6\n}	code	txt
2184	1	| feature | standard |\n| --- | --- |\n| introduced | C++17 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2184	2	While `std::for_each` operates on the entire range, the interval $[begin, end)$, `std::for_each_n` operates on the range $[first, first + n)$.	text	txt
2184	3	#include <algorithm>\n#include <vector>	text	txt
2184	4	int main()\n{\n    std::vector<long> numbers{1,2,3,4,5,6};\n    std::size_t sum{};\n    std::for_each_n(numbers.begin(), 3, [&sum](auto const& e) { sum += e; });\n    // sum = 6\n}	code	txt
2184	5	Importantly, because the algorithm does not have access to the end iterator of the source range, it does no out-of-bounds checking, and it is the responsibility of the caller to ensure that the range $[first, first + n)$ is valid.	text	txt
2185	1	| feature | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | N/A |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2185	2	Correctly calling swap requires pulling the default std::swap version to the local scope.	text	txt
2185	3	#include <algorithm>	text	txt
2185	4	namespace library\n{\n    struct container { long value; };\n}	text	txt
2185	5	int main()\n{\n    library::container a{3}, b{4};\n    std::ranges::swap(a, b); // first calls library::swap\n                             // then it calls the default move-swap\n}	code	txt
2186	1	| feature | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | N/A |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2186	2	The `std::iter_swap` is an indirect swap, swapping values behind two forward iterators.	text	txt
2186	3	#include <algorithm>\n#include <memory>	text	txt
2186	4	int main()\n{\n    auto p1 = std::make_unique<int>(1);\n    auto p2 = std::make_unique<int>(2);	text	txt
2186	5	    int *p1_pre = p1.get();\n    int *p2_pre = p2.get();	text	txt
2186	6	    std::ranges::swap(p1, p2);\n    // p1.get() == p1_pre, *p1 == 2\n    // p2.get() == p2_pre, *p2 == 1\n}	code	txt
2187	1	| feature | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2187	2	#include <algorithm>\n#include <vector>	text	txt
2187	3	int main()\n{\n    std::vector<long> numbers{1,2,3,4,5,6};\n    std::swap_ranges(numbers.begin(), numbers.begin()+2, numbers.rbegin());\n    // numbers: {6,5,3,4,2,1}\n}	code	txt
2188	1	Implementing a `strict_weak_ordering` for a custom type, at minimum requires providing an overload of `operator<`.	text	txt
2188	2	A good default for a `strict_weak_ordering` implementation is *lexicographical ordering*.	text	txt
2188	3	Since C++20 introduced the spaceship operator, user-defined types can easily access the default version of *lexicographical ordering*.	text	txt
2179	1	The benefit of thinking about the returned value as the end iterator of a range is that it removes the potential for corner cases.	text	txt
2180	2	What if the algorithm doesn’t find any element out of order as a corner case?\nThe returned value will be the end iterator of the source range, meaning that the range returned is simply the entire source range.	text	txt
2181	1	| feature | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2181	2	The C++11 standard introduced the range-based for loop, which mostly replaced the uses of `std::for_each`.	text	txt
2188	4	struct Point {\n    int x;\n    int y;	text	txt
2188	5	    // pre-C++20 lexicographical less-than\n    friend bool operator<(const Point& left, const Point& right)\n    {\n        if (left.x != right.x)\n            return left.x < right.x;\n        return left.y < right.y;\n    }	text	txt
2188	6	    // default C++20 spaceship version of lexicographical comparison\n    friend auto operator<=>(const Point&, const Point&) = default;	text	txt
2188	7	    // manual version of lexicographical comparison using operator <=>\n    friend auto operator<=>(const Point& left, const Point& right)\n    {\n        if (left.x != right.x)\n            return left.x <=> right.x;\n        return left.y <=> right.y;\n    }\n};	code	txt
2188	8	The type returned for the spaceship operator is the common comparison category type for the bases and members, one of:	text	txt
2188	9	* `std::strong_ordering`\n* `std::weak_ordering`\n* `std::partial_ordering`	text	txt
2189	1	Lexicographical `strict_weak_ordering` for ranges is exposed through the `std::lexicographical_compare` algorithm.	text	txt
2189	2	| feature | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2189	3	#include <algorithm>\n#include <vector>	text	txt
2189	4	int main()\n{\n    std::vector<long> range1{1, 2, 3};\n    std::vector<long> range2{1, 3};\n    std::vector<long> range3{1, 3, 1};	text	txt
2189	5	    bool cmp1 = std::lexicographical_compare(range1.cbegin(), range1.cend(), range2.cbegin(), range2.cend());\n    // same as\n    bool cmp2 = range1 < range2;\n    // cmp1 = cmp2 = true	text	txt
2189	6	    bool cmp3 = std::lexicographical_compare(range2.cbegin(), range2.cend(), range3.cbegin(), range3.cend());\n    // same as\n    bool cmp4 = range2 < range3;\n    // cmp3 = cmp4 = true\n}	code	txt
2189	7	#include <algorithm>\n#include <ranges>\n#include <vector>\n#include <string>	text	txt
2189	8	int main()\n{\n    std::vector<std::string> range1{"Zoe", "Alice"};\n    std::vector<std::string> range2{"Adam", "Maria"};\n    auto compare_length = [](auto const& l, auto const& r) { return l.length() < r.length(); };	text	txt
2189	9	    bool cmp1 = std::ranges::lexicographical_compare(range1, range2, compare_length);\n    // different than\n    bool cmp2 = range1 < range2;\n    // cmp1 = true, cmp2 = false\n}	code	txt
2190	1	| feature | standard |\n| --- | --- |\n| introduced | C++20 |\n| constexpr | C++20 |\n| paralllel | N/A |\n| rangified | N/A |	text	txt
2190	2	The `std::lexicographical_compare_three_way` is the spaceship operator equivalent to `std::lexicographical_compare`.\nIt returns one of:	text	txt
2190	3	* `std::strong_ordering`\n* `std::weak_ordering`\n* `std::partial_ordering`	text	txt
2190	4	The type depends on the type returned by the elements’ spaceship operator.	text	txt
2190	5	#include <algorithm>\n#include <vector>\n#include <string>	text	txt
2190	6	int main()\n{\n    std::vector<long> numbers1{1, 1, 1};\n    std::vector<long> numbers2{1, 2, 3};	text	txt
2190	7	    auto cmp1 = std::lexicographical_compare_three_way(numbers1.cbegin(), numbers1.cend(), numbers2.cbegin(), numbers2.cend());\n    // cmp1 = std::strong_ordering::less	text	txt
2190	8	    std::vector<std::string> strings1{"Zoe", "Alice"};\n    std::vector<std::string> strings2{"Adam", "Maria"};	text	txt
2190	9	    auto cmp2 = std::lexicographical_compare_three_way(strings1.cbegin(), strings1.cend(), strings2.cbegin(), strings2.cend());\n    // cmp2 = std::strong_ordering::greater\n}	code	txt
2191	1	The `std::sort` algorithm is the canonical `O(N log N)` sort (typically implemented as *intro-sort*).	text	txt
2191	2	Due to the `O(n log n)` complexity guarantee, `std::sort` only operates on `random_access` ranges.\nNotably, `std::list` offers a method with an approximate `O(N log N)` complexity.	text	txt
2192	1	| feature | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2192	2	#include <algorithm>\n#include <ranges>\n#include <vector>\n#include <list>	text	txt
2192	3	struct Account\n{\n    long value() { return value_; }\n    long value_;\n};	text	txt
2192	4	int main()\n{\n    std::vector<long> series1{6,2,4,1,5,3};\n    std::sort(series1.begin(), series1.end());	text	txt
2192	5	    std::list<long> series2{6,2,4,1,5,3};\n    //std::sort(series2.begin(), series2.end()); // won't compile\n    series2.sort();	text	txt
2192	6	    // With C++20, we can take advantage of projections to sort by a method or member\n    std::vector<Account> accounts{{6},{2},{4},{1},{5},{3}};\n    std::ranges::sort(accounts, std::greater<>{}, &Account::value);\n}	code	txt
2193	1	The `std::sort` is free to re-arrange equivalent elements, which can be undesirable when re-sorting an already sorted range.\nThe `std::stable_sort` provides the additional guarantee of preserving the relative order of equal elements.	text	txt
2193	2	| feature | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | N/A |\n| rangified | C++20 |	text	txt
2193	3	If additional memory is available, `stable_sort` remains `O(n log n)`.\nHowever, if it fails to allocate, it will degrade to an `O(n log n log n)` algorithm.	text	txt
2193	4	#include <algorithm>\n#include <ranges>\n#include <vector>\n#include <string>	text	txt
2193	5	struct Record\n{\n    std::string label;\n    short rank;\n};	text	txt
2193	6	int main()\n{\n    std::vector<Record> records{{"b", 2}, {"e", 1}, {"c", 2}, {"a", 1}, {"d", 3}};	text	txt
2193	7	    std::ranges::stable_sort(records, {}, &Record::label);\n    // guaranteed order: a-1, b-2, c-2, d-3, e-1	text	txt
2193	8	    std::ranges::stable_sort(records, {}, &Record::rank);\n    // guaranteed order: a-1, e-1, b-2, c-2, d-3\n}	code	txt
2194	1	| feature | standard |\n| --- | --- |\n| introduced | C++11 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2194	2	#include <algorithm>\n#include <vector>\n#include <ranges>	text	txt
3098	2	varying vec4 color;	code	cpp
2194	3	int main()\n{\n    std::vector<int> data1 = {1, 2, 3, 4, 5};\n    bool test1 = std::is_sorted(data1.begin(), data1.end());\n    // test1 == true	text	txt
2194	4	    std::vector<int> data2 = {5, 4, 3, 2, 1};\n    bool test2 = std::ranges::is_sorted(data2);\n    // test2 == false	text	txt
2194	5	    bool test3 = std::ranges::is_sorted(data2, std::greater<>{});\n    // test3 == true\n}	code	txt
2195	1	| feature | standard |\n| --- | --- |\n| introduced | C++11 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2195	2	#include <algorithm>\n#include <ranges>\n#include <vector>	text	txt
2195	3	int main()\n{\n    std::vector<long> numbers{1,2,3,6,5,4};\n    auto iter = std::ranges::is_sorted_until(numbers);\n    // *iter = 6\n}	code	txt
2196	1	| feature | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2196	2	The `std::partial_sort` algorithm reorders the range’s elements such that the leading sub-range is in the same order it would when fully sorted.\nHowever, the algorithm leaves the rest of the range in an unspecified order.	text	txt
2196	3	#include <algorithm>\n#include <ranges>\n#include <vector>	text	txt
2196	4	int main()\n{\n    std::vector<int> data{9, 8, 7, 6, 5, 4, 3, 2, 1};	text	txt
2196	5	    std::partial_sort(data.begin(), data.begin()+3, data.end());\n    // data == {1, 2, 3, -unspecified order-}	text	txt
2196	6	    std::ranges::partial_sort(data, data.begin()+3, std::greater<>());\n    // data == {9, 8, 7, -unspecified order-}\n}	code	txt
2196	7	The benefit of using a partial sort is faster runtime — approximately `O(N log K)`, where `K` is the number of elements sorted.	text	txt
2197	1	| feature | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2197	2	The `std::partial_sort_copy` algorithm has the same behaviour as `std::partial_sort`; however, it does not operate inline.\nInstead, the algorithm writes the results to a second range.	text	txt
2197	3	#include <algorithm>\n#include <ranges>\n#include <vector>	text	txt
2197	4	int main()\n{\n    std::vector<int> top(3);	text	txt
2197	5	    // input == "0 1 2 3 4 5 6 7 8 9"\n    auto input = std::istream_iterator<int>(std::cin);\n    auto cnt = std::counted_iterator(input, 10);	text	txt
2197	6	    std::ranges::partial_sort_copy(cnt, std::default_sentinel, top.begin(), top.end(), std::greater<>{});\n    // top == { 9, 8, 7 }\n}	code	txt
2198	1	| feature | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2198	2	The `std::partition` algorithm provides the basic partitioning functionality, reordering elements based on a unary predicate.\nThe algorithm returns the partition point, an iterator to the first element for which the predicate returned `false`.	text	txt
2198	3	#include <algorithm>\n#include <iostream>\n#include <iterator>\n#include <ranges>\n#include <vector>\n#include <string>	text	txt
2198	4	struct ExamResult\n{\n    std::string student_name;\n    int score;\n};	text	txt
2198	5	int main()\n{\n    std::vector<ExamResult> results{{"Jane Doe", 84}, {"John Doe", 78}, {"Liz Clarkson", 68}, {"David Teneth", 92}};	text	txt
2198	6	    auto partition_point = std::partition(results.begin(), results.end(), [threshold = 80](auto const& e) { return e.score >= threshold; });	text	txt
2198	7	    std::for_each(results.begin(), partition_point, [](auto const& e) { std::cout << "[PASSED] " << e.student_name << "\\\\n"; });\n    std::for_each(partition_point, results.end(), [](auto const& e) { std::cout << "[FAILED] " << e.student_name << "\\\\n"; });\n}	code	txt
2199	1	| feature | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | N/A |\n| rangified | C++20 |	text	txt
2199	2	The `std::partition` algorithm is permitted to rearrange the elements with the only guarantee that elements for which the predicate evaluated to true will precede elements for which the predicate evaluated to false.\nThis behaviour can be undesirable, for example, for UI elements.	text	txt
2199	3	The `std::stable_partition` algorithm adds the guarantee of preserving the relative order of elements in both partitions.	text	txt
2199	4	auto& widget = get_widget();\nstd::ranges::stable_partition(widget.items, &Item::is_selected);	code	txt
3668	2	S_{max}(s) = {s}/{s + p(1 - s)} = {1}/{1 - p + {p}/{s}}	code	tex
2200	1	| feature | standard |\n| --- | --- |\n| introduced | C++11 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2200	2	#include <algorithm>\n#include <cassert>\n#include <ranges>\n#include <vector>	text	txt
2200	3	int main()\n{\n    std::vector<long> series{2, 4, 6, 7, 9, 11};\n    auto is_even = [](auto v) { return v % 2 == 0; };\n    bool test = std::ranges::is_partitioned(series, is_even);\n    assert(test); // test = true\n}	code	txt
2201	1	| feature | standard |\n| --- | --- |\n| introduced | C++11 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2201	2	The `std::partition_copy` is a variant of `std::partition` that, instead of reordering elements, will output the partitioned elements to the two output ranges denoted by two iterators.	text	txt
2201	3	#include <algorithm>\n#include <cassert>\n#include <ranges>\n#include <vector>	text	txt
2201	4	int main()\n{\n    std::vector<long> series{2, 4, 6, 7, 9, 11};\n    auto is_even = [](auto v) { return v % 2 == 0; };	text	txt
2201	5	    std::vector<long> evens, odds;\n    std::ranges::partition_copy(series, std::back_inserter(evens), std::back_inserter(odds), is_even);	text	txt
2201	6	    assert(evens.size() == 3);\n    assert(odds.size() == 3);\n}	code	txt
2202	1	| feature | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2202	2	The `std::nth_element` algorithm is a partitioning algorithm that ensures that the element in the nth position is the element that would be in this position if the range was sorted.	text	txt
2202	3	#include <algorithm>\n#include <ranges>\n#include <vector>	text	txt
2202	4	int main()\n{\n    std::vector<long> series1{6, 3, 5, 1, 2, 4};\n    std::vector<long> series2{series1};	text	txt
2202	5	    std::nth_element(series1.begin(), std::next(series1.begin(), 2), series1.end());\n    // 1 2 3 5 6 4	text	txt
2202	6	    std::nth_element(series2.begin(), std::next(series2.begin(), 2), series2.end(), std::greater<long>{});\n    // 5 6 4 3 2 1\n}	code	txt
5556	1		code	cpp
2210	5	    auto last = std::unique(range1.begin(), range1.end());\n    range1.resize(std::distance(range1.begin(), last));\n    // range1 == {1,2,3,4,5};	text	txt
3117	2		text	txt
2202	7	Because of its selection/partitioning nature, `std::nth_element` offers a better theoretical complexity than `std::partial_sort` - `O(n)` vs `O(n ∗ logk)`.\nHowever, note that the standard only mandates average `O(n)` complexity, and `std::nth_element` implementations can have high overhead, so always test to determine which provides better performance for your use case.	text	txt
2203	1	| `std::lower_bound` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | N/A |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2203	2	| `std::upper_bound` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | N/A |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2203	3	The two algorithms differ in which bound they return:	text	txt
2203	4	* The `std::lower_bound` returns the first element for which `element < value` returns `false`.\n* The `std::upper_bound` returns the first element for which `value < element`.\n* If no such element exists, both algorithms return the end iterator.	text	txt
2203	5	#include <algorithm>\n#include <vector>\n#include <string>	text	txt
2203	6	struct ExamResult\n{\n    std::string student_name;\n    int score;\n};	text	txt
2203	7	int main()\n{\n    std::vector<ExamResult> results{{"Jane", 65}, {"Maria", 80}, {"Liz", 70}, {"David", 90}, {"Paula", 70}};\n    std::ranges::sort(results, std::less<int>{}, &ExamResult::score);	text	txt
2203	8	    auto lower = std::ranges::lower_bound(results, 70, {}, &ExamResult::score);\n    // lower.score == 70\n    auto upper = std::ranges::upper_bound(results, 70, {}, &ExamResult::score);\n    // upper.score == 80\n}	code	txt
2203	9	While both algorithms will operate on any `forward_range`, the logarithmic divide and conquer behavior is only available for `random_access_range`.	text	txt
2203	10	Data structures like `std::set`, `std::multiset`, `std::map`, `std::multimap` offer their `O(log N)` implementations of lower and upper bound as methods.	text	txt
2203	11	#include <algorithm>\n#include <set>	text	txt
2203	12	int main()\n{\n    std::multiset<int> data{1,2,3,4,5,6,6,6,7,8,9};	text	txt
2203	13	    auto lower = data.lower_bound(6);\n    // std::distance(data.begin(), lower) == 5	text	txt
2203	14	    auto upper = data.upper_bound(6);\n    // std::distance(data.begin(), upper) == 8\n}	code	txt
2204	1	| `std::equal_range` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | N/A |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2204	2	#include <algorithm>\n#include <vector>	text	txt
2204	3	int main()\n{\n    std::vector<long> data{1,2,3,4,5,6,6,6,7,8,9};	text	txt
2204	4	    auto [lower, upper] = std::equal_range(data.begin(), data.end(), 6);\n    // std::distance(data.begin(), lower) == 5\n    // std::distance(data.begin(), upper) == 8\n}	code	txt
2205	1	| `std::partition_point` | standard |\n| --- | --- |\n| introduced | C++11 |\n| paralllel | N/A |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2205	2	Despite the naming, `std::partition_point` works very similaryly to `std::upper_bound`, however instead of searching for a particular value, it searches using a predicate.	text	txt
2205	3	#include <algorithm>\n#include <vector>	text	txt
2205	4	int main()\n{\n    std::vector<long> data{1,2,3,4,5,6,6,6,7,8,9};\n    auto point = std::partition_point(data.begin(), data.end(), [](long v) { return v < 6; });\n    // std::distance(data.begin(), point) = 5\n}	code	txt
2206	1	| `std::binary_search` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | N/A |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2206	2	This function checks whether the requested value is present in the sorted range or not.	text	txt
2206	3	#include <algorithm>\n#include <ranges>\n#include <vector>	text	txt
2206	4	int main()\n{\n    std::vector<long> data{1,2,3,4,5,6};\n    std::binary_search(data.begin(), data.end(), 4);\n    // true\n    std::ranges::binary_search(data, 4);\n    // true\n}	code	txt
2206	5	`std::binary_search` is equivalent to calling `std::equal_range` and checking whether the returned is non-empty; however, `std::binary_search` offers a single lookup performance, where `std::equal_range` does two lookups to determine the lower and upper bounds.	text	txt
2207	1	| `std::includes` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
5207	1	getfacl <file>	code	sh
2207	2	#include <algorithm>\n#include <ranges>\n#include <vector>	text	txt
2207	3	int main()\n{\n    std::ranges::includes({1,2,3,4,5}, {3,4});\n    // true\n}	code	txt
2208	1	| `std::merge` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2208	2	#include <algorithm>\n#include <execution>\n#include <iostream>\n#include <iterator>\n#include <ranges>\n#include <vector>\n#include <string>\n#include <map>	text	txt
2208	3	int main()\n{\n    std::map<long, std::string> data1{{1, "first"}, {2, "first"}, {3, "first"}};\n    std::map<long, std::string> data2{{0, "second"}, {2, "second"}, {4, "second"}};\n    std::vector<std::pair<long, std::string>> result1, result2;\n    auto compare = [](auto const& left, auto const& right) { return left.first < right.first; };	text	txt
2208	4	    std::ranges::merge(data1, data2, std::back_inserter(result1), compare);\n    std::ranges::for_each(result1, [](auto const& p) { std::cout << "{" << p.first << ", " << p.second << "} "; });\n    std::cout << "\\\\n";	text	txt
2208	5	    std::merge(std::execution::par_unseq, data1.begin(), data1.end(), data2.begin(), data2.end(), std::back_inserter(result2), compare);\n    std::ranges::for_each(result2, [](auto const& p) { std::cout << "{" << p.first << ", " << p.second << "} "; });\n    std::cout << "\\\\n";\n}	code	txt
2209	1	| `std::inplace_merge` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2209	2	#include <algorithm>\n#include <vector>	text	txt
2209	3	int main()\n{\n    std::vector<long> range{1,3,5,2,4,6};\n    std::inplace_merge(range.begin(), range.begin()+3, range.end());\n    // range == {1,2,3,4,5,6}\n}	code	txt
2210	1	| `std::unique` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2210	2	| `std::unique_copy` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
5557	1		code	cpp
2210	3	#include <algorithm>\n#include <ranges>\n#include <vector>	text	txt
2210	4	int main()\n{\n    std::vector<long> range1{1,2,2,3,3,3,4,4,4,4,5,5,5,5,5};\n    std::vector<long> range2{range1};	text	txt
2283	1	- `int`\n- `bool`\n- `real`\n- `list`	text	txt
2210	6	    std::vector<long> result;\n    std::ranges::unique_copy(range2, std::back_inserter(result));\n    // range2 is untouched\n    // result == {1,2,3,4,5};\n}	code	txt
2211	1	| `std::set_difference` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2211	2	#include <algorithm>\n#include <vector>	text	txt
2211	3	int main()\n{\n    std::vector<long> data1{1,3,5,7,9};\n    std::vector<long> data2{3,4,5,6,7};\n    std::vector<long> difference;\n    std::ranges::set_difference(data1, data2, std::back_inserter(difference));\n    // difference == {1,9};\n}	code	txt
2212	1	| `std::set_symmetric_difference` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2212	2	#include <algorithm>\n#include <vector>	text	txt
2212	3	int main()\n{\n    std::vector<long> data1{1,3,5,7,9};\n    std::vector<long> data2{3,4,5,6,7};\n    std::vector<long> symmetric_difference;\n    std::ranges::set_symmetric_difference(data1, data2, std::back_inserter(symmetric_difference));\n    // symmetric_difference == {1,4,6,9};\n}	code	txt
2213	1	| `std::set_union` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2213	2	#include <algorithm>\n#include <vector>	text	txt
2213	3	int main()\n{\n    std::vector<long> data1{1,3,5,7,9};\n    std::vector<long> data2{3,4,5,6,7};\n    std::vector<long> union;\n    std::ranges::set_union(data1, data2, std::back_inserter(union));\n    // union == {1,3,4,5,6,7,9}\n}	code	txt
2214	1	| `std::set_intersection` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2214	2	#include <algorithm>\n#include <vector>	text	txt
2214	3	int main()\n{\n    std::vector<long> data1{1,3,5,7,9};\n    std::vector<long> data2{3,4,5,6,7};\n    std::vector<long> intersection;\n    std::ranges::set_intersection(data1, data2, std::back_inserter(intersection));\n    // intersection == {3,5,7}\n}	code	txt
2215	1	| `std::transform` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2215	2	#include <algorithm>\n#include <vector>	text	txt
2215	3	int main()\n{\n    std::vector<long> range{1,1,1,1,1};	text	txt
2215	4	    // unary version\n    std::transform(range.begin(), range.end(), range.begin(), [](long e) { return e + 1; });\n    // {2,2,2,2,2}\n    std::transform(range.begin(), range.end(), range.begin(), range.begin(), [](long left, long right) { return left + right; });\n    // {4,4,4,4,4}	text	txt
2215	5	    // binary version\n    std::ranges::transform(range, range.begin(), [](long e) { return e / e; });\n    // {1,1,1,1,1}\n    std::ranges::transform(range, range, range.begin(), [](long left, long right) { return left + right; });\n    // {2,2,2,2,2}\n}	code	txt
2216	1	| `std::remove` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2216	2	#include <algorithm>\n#include <vector>	text	txt
2216	3	int main()\n{\n    std::vector<long> range{1,2,3,4,5};\n    auto last = std::remove(range.begin(), range.end(), 3);\n    range.erase(last, range.end());\n}	code	txt
2217	1	| `std::remove_if` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2217	2	#include <algorithm>\n#include <vector>	text	txt
2217	3	int main()\n{\n    std::vector<long> range{1,2,3,4,5};\n    auto last = std::remove_if(range.begin(), range.end(), [limit=4](long v) { return v > limit; });\n    range.erase(last, range.end());\n}	code	txt
2218	1	| `std::replace` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2218	2	#include <algorithm>\n#include <vector>	text	txt
2218	3	int main()\n{\n    std::vector<long> range{1,2,1,2,1};\n    std::ranges::replace(range, 2, 0);\n    // {1,0,1,0,1}\n}	code	txt
2219	1	| `std::replace_if` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2219	2	#include <algorithm>\n#include <vector>	text	txt
2729	1	The kernel image, device tree blobs, and kernel modules will be needed to\nboot up a device.	text	txt
2219	3	int main()\n{\n    std::vector<long> range{1,2,1,2,1};\n    std::ranges::replace_if(range, [](long v) { return v > 1; }, 0);\n    // {1,0,1,0,1}\n}	code	txt
2220	1	| `std::reverse` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2220	2	#include <algorithm>\n#include <vector>	text	txt
2220	3	int main()\n{\n    std::vector<long> range{1,2,3,4,5};\n    std::ranges::reverse(range);\n    // {5,4,3,2,1}\n}	code	txt
2221	1	| `std::rotate` | standard |\n| --- | --- |\n| introduced | C++11 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2221	2	#include <algorithm>\n#include <ranges>\n#include <vector>	text	txt
2221	3	int main()\n{\n    std::vector<long> range{1,2,3,4,5};	text	txt
2221	4	    std::rotate(range.begin(), std::next(range.begin(), 3), range.end());\n    // {4,5,1,2,3}	text	txt
2221	5	    std::ranges::rotate(range, std::next(range.begin(), 2));\n    // {1,2,3,4,5}\n}	code	txt
2222	1	| `std::shift_left` | standard |\n| --- | --- |\n| introduced | C++20 |\n| paralllel | C++20 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2222	2	| `std::shift_right` | standard |\n| --- | --- |\n| introduced | C++20 |\n| paralllel | C++20 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2222	3	#include <algorithm>\n#include <vector>	text	txt
2222	4	int main()\n{\n    std::vector<long> range{1,2,3,4,5};	text	txt
2222	5	    std::shift_left(range.begin(), range.end(), 3);\n    // {4,5,N,N,N}	text	txt
2222	6	    std::shift_right(range.begin(), range.end(), 3);\n    // {N,N,N,4,5}\n}	code	txt
2223	1	| `std::shuffle` | standard |\n| --- | --- |\n| introduced | C++11 |\n| paralllel | N/A |\n| constexpr | N/A |\n| rangified | C++20 |	text	txt
2223	2	#include <algorithm>\n#include <vector>\n#include <ranges>\n#include <random>	text	txt
2223	3	int main()\n{\n    std::vector<long> range{1,2,3,4,5};\n    std::random_device rd{};\n    std::mt19937 generator{rd()};\n    std::ranges::shuffle(range, generator);\n}	code	txt
2224	1	| `std::next_permutation` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | N/A |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2224	2	#include <algorithm>\n#include <vector>\n#include <ranges>	text	txt
3190	1	ncurses, ncurses-native	text	txt
2224	3	int main()\n{\n    std::vector<long> range{1,2,3};\n    // range == {1,2,3};\n    std::next_permutation(range.begin(), range.end());\n    // range == {1,3,2};\n    std::prev_permutation(range.begin(), range.end());\n    // range == {1,2,3};\n}	code	txt
2225	1	| `std::is_permutation` | standard |\n| --- | --- |\n| introduced | C++11 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2225	2	#include <algorithm>\n#include <vector>\n#include <ranges>	text	txt
2225	3	int main()\n{\n    std::vector<long> range1{1,2,3}, range2{1,3,2};\n    std::ranges::is_permutation(range1, range2);\n    // true\n}	code	txt
2226	1	| `std::accumulate` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | N/A |\n| constexpr | C++20 |\n| rangified | N/A |	text	txt
2226	2	#include <numeric>\n#include <vector>	text	txt
2226	3	int main()\n{\n    std::vector<long> range{1,2,3};	text	txt
2226	4	    auto sum = std::accumulate(range.begin(), range.end(), 0);\n    // sum == 6	text	txt
2226	5	    auto product = std::accumulate(range.begin(), range.end(), 1, std::multiplies<long>{});\n    // product == 6\n}	code	txt
2227	1	| `std::inner_product` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | N/A |\n| constexpr | C++20 |\n| rangified | N/A |	text	txt
2227	2	#include <algorithm>\n#include <numeric>\n#include <vector>	text	txt
2227	3	int main()\n{\n    std::vector<long> widths{1,1,1,1,1};\n    std::vector<long> heights{2,2,2,2,2};	text	txt
2227	4	    auto sum_area = std::inner_product(widths.begin(), widths.end(), heights.begin(), 0);\n    // sum_area == 10	text	txt
2227	5	    std::vector<long> range{6,4,3,7,2,1};\n    auto sum_diffs = std::inner_product(range.begin(), range.end(), std::next(range.begin()), 0, std::plus<long>{}, [](long l, long r) { return std::abs(l-r); });\n    // sum_diffs == 14\n}	code	txt
2228	1	| `std::partial_sum` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | N/A |\n| constexpr | C++20 |\n| rangified | N/A |	text	txt
2228	2	#include <algorithm>\n#include <numeric>\n#include <vector>	text	txt
2228	3	int main()\n{\n    std::vector<long> range(5,1);\n    std::partial_sum(range.begin(), range.end(), range.begin());\n    // range == {1,2,3,4,5}	text	txt
2228	4	    std::vector<long> output;\n    std::partial_sum(range.begin(), range.end(), std::back_inserter(output), std::multiplies<long>{});\n    // output == {1,2,6,24,,120}\n}	code	txt
2229	1	| `std::adjacent_difference` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | N/A |	text	txt
2229	2	#include <algorithm>\n#include <execution>\n#include <numeric>\n#include <vector>	text	txt
2229	3	int main()\n{\n    std::vector<long> range{1,2,3,4,5};\n    std::adjacent_difference(range.begin(), range.end(), range.begin());\n    // range == {1,1,1,1,1}	text	txt
2229	4	    std::adjacent_difference(std::execution::par_unseq, range.begin(), range.end(), range.begin());\n    // range == {1,1,1,1,1}	text	txt
2229	5	    std::vector<long> fibonacci(10,1);\n    std::adjacent_difference(fibonacci.begin(), std::prev(fibonacci.end()), std::next(fibonacci.begin()), std::plus<long>());\n    // fibonacci == {1,1,2,3,5,8,13,21,34,55}\n}	code	txt
2230	1	| `std::reduce` | standard |\n| --- | --- |\n| introduced | C++17 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | N/A |	text	txt
2230	2	#include <algorithm>\n#include <numeric>\n#include <vector>	text	txt
2230	3	int main()\n{\n    std::vector<long> range{1,2,3,4,5};\n    long sum = std::reduce(range.begin(), range.end(), 0);\n    // sum == 15	text	txt
2230	4	    long multiplies = std::reduce(range.begin(), range.end(), 1, std::multiplies<long>{});\n    // sum == 120\n}	code	txt
2231	1	| `std::transform_reduce` | standard |\n| --- | --- |\n| introduced | C++17 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | N/A |	text	txt
2231	2	#include <algorithm>\n#include <numeric>\n#include <vector>	text	txt
2231	3	int main()\n{\n    std::vector<long> range{1,2,3,4,5};\n    long sum = std::transform_reduce(range.begin(), range.end(), 0, std::plus<long>{}, [](long e) { return e * 2; });\n    // sum == 30\n}	code	txt
5204	1	cat /sys/kernel/security/lsm	code	sh
2232	1	| `std::inclusive_scan` | standard |\n| --- | --- |\n| introduced | C++17 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | N/A |	text	txt
2232	2	| `std::exclusive_scan` | standard |\n| --- | --- |\n| introduced | C++17 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | N/A |	text	txt
2232	3	#include <algorithm>\n#include <numeric>\n#include <vector>	text	txt
2232	4	int main()\n{\n    std::vector<long> range{1,2,3,4,5};\n    std::vector<long> inclusive;\n    std::inclusive_scan(range.begin(), range.end(), std::back_inserter(inclusive));\n    // range == {1 3 6 10 15}	text	txt
2232	5	    std::vector<long> exclusive;\n    std::exclusive_scan(range.begin(), range.end(), std::back_inserter(exclusive), 0);\n    // range == {0 1 3 6 10}\n}	code	txt
2233	1	| `std::transform_inclusive_scan` | standard |\n| --- | --- |\n| introduced | C++17 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | N/A |	text	txt
2233	2	| `std::transform_exclusive_scan` | standard |\n| --- | --- |\n| introduced | C++17 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | N/A |	text	txt
2233	3	#include <algorithm>\n#include <numeric>\n#include <vector>	text	txt
2233	4	int main()\n{\n    std::vector<long> range{1,2,3,4,5};\n    std::vector<long> inclusive;\n    std::transform_inclusive_scan(range.begin(), range.end(), std::back_inserter(inclusive), std::plus<>{});\n    std::transform_inclusive_scan(range.begin(), range.end(), std::back_inserter(inclusive), std::plus<>{}, [](long v) { return std::abs(v); });	text	txt
2233	5	    std::vector<long> exclusive;\n    std::transform_exclusive_scan(range.begin(), range.end(), std::back_inserter(exclusive), 0);\n    std::transform_exclusive_scan(range.begin(), range.end(), std::back_inserter(exclusive), 0, std::plus<>{}, [](long v) { return std::abs(v); });\n}	code	txt
2234	1	| `std::all_of` | standard |\n| --- | --- |\n| introduced | C++11 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2234	2	#include <algorithm>\n#include <vector>	text	txt
2234	3	int main()\n{\n    std::vector<long> range{1,2,3};	text	txt
2234	4	    std::ranges::all_of(range, [](long e) { return e > 0; });\n    // all numbers are possitive: true\n}	code	txt
2235	1	| `std::all_of` | standard |\n| --- | --- |\n| introduced | C++11 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2235	2	#include <algorithm>\n#include <vector>	text	txt
2235	3	int main()\n{\n    std::vector<long> range{1,2,3};	text	txt
2235	4	    std::ranges::any_of(range, [](long e) { return e % 2 == 0; });\n    // at least an even number exists: true\n}	code	txt
2236	1	| `std::all_of` | standard |\n| --- | --- |\n| introduced | C++11 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2236	2	#include <algorithm>\n#include <vector>	text	txt
2236	3	int main()\n{\n    std::vector<long> range{1,2,3};	text	txt
2236	4	    std::ranges::none_of(range, [](long e) { return e < 0; });\n    // not any number is negative: true\n}	code	txt
2237	1	| `std::fill` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2237	2	#include <algorithm>\n#include <vector>\n#include <ranges>	text	txt
2237	3	int main()\n{\n    std::vector<long> range(5,0);\n    std::ranges::fill(range, 1);\n    // range == {1,1,1,1,1}\n}	code	txt
2238	1	| `std::fill_n` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2238	2	#include <algorithm>\n#include <vector>\n#include <ranges>	text	txt
2238	3	int main()\n{\n    std::vector<long> range(5,0);\n    std::ranges::fill_n(range, 3, 1);\n    // range == {1,1,1,0,0}\n}	code	txt
2239	1	| `std::generate` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2239	2	#include <algorithm>\n#include <vector>\n#include <ranges>	text	txt
2239	3	int main()\n{\n    std::vector<long> range(5,0);\n    std::ranges::generate(range, []() { return 1; });\n    // range == {1,1,1,1,1}\n}	code	txt
2240	1	| `std::generate_n` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2240	2	#include <algorithm>\n#include <vector>\n#include <ranges>	text	txt
2240	3	int main()\n{\n    std::vector<long> range(5,0);\n    std::ranges::generate_n(range, 3, []() { return 1; });\n    // range == {1,1,1,0,0}\n}	code	txt
2241	1	| `std::iota` | standard |\n| --- | --- |\n| introduced | C++11 |\n| paralllel | N/A |\n| constexpr | C++20 |\n| rangified | C++23 |	text	txt
2241	2	#include <algorithm>\n#include <vector>\n#include <ranges>	text	txt
2241	3	int main()\n{\n    std::vector<long> range(5,0);\n    std::ranges::iota(range, 1);\n    std::ranges::copy(range, std::ostream_iterator<long>(std::cout, " "));\n}	code	txt
2242	1	| `std::copy` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2242	2	#include <algorithm>\n#include <ranges>\n#include <vector>\n#include <string>	text	txt
2242	3	int main()\n{\n    std::vector<std::string> range{"a", "b", "c", "d", "e"};\n    std::ranges::copy(range.begin(), std::next(range.begin(), 3), std::next(range.begin(), 3));\n    // a b c a b c\n    std::ranges::copy(std::next(range.begin()), std::end(range), std::begin(range));\n    // b c a b c c\n}	code	txt
2243	1	| `std::move` | standard |\n| --- | --- |\n| introduced | C++11 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2243	2	Significantly, whether `std::move` will move depends on the underlying element type.\nIf the underlying type is copy-only, `std::move` will behave identically to `std::copy`.	text	txt
2243	3	#include <algorithm>\n#include <ranges>\n#include <vector>\n#include <string>	text	txt
2243	4	int main()\n{\n    std::vector<std::string> range{"a", "b", "c", "d", "e"};\n    std::ranges::move(range.begin(), std::next(range.begin(), 3), std::next(range.begin(), 3));\n    // ? ? ? a b c\n}	code	txt
2244	1	| `std::copy_backward` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | N/A |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2244	2	| `std::move_backward` | standard |\n| --- | --- |\n| introduced | C++11 |\n| paralllel | N/A |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2244	3	#include <algorithm>\n#include <ranges>\n#include <vector>\n#include <string>	text	txt
4191	2	`this` in a lambda accesses the object that contains the lambda, not the\nlambda instance itself.	text	txt
2244	4	int main()\n{\n    std::vector<std::string> range{"a", "b", "c", "d", "e"};\n    std::vector<std::string> output(9, "");\n    std::ranges::copy_backward(std::begin(range), std::end(range), std::begin(output));\n    // output = {? ? ? ? a b c a b c}\n    std::ranges::copy_backward(std::begin(range), std::prev(std::end(range)), std::end(range));\n    // range = {a a b c d e}\n}	code	txt
2245	1	| `std::copy_n` | standard |\n| --- | --- |\n| introduced | C++11 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2245	2	The algorithm cannot check whether the requested count is valid and does not go out of bounds, so this burden is on the caller.	text	txt
2245	3	#include <algorithm>\n#include <ranges>\n#include <vector>\n#include <string>	text	txt
2245	4	int main()\n{\n    std::vector<std::string> range{"a", "b", "c", "d", "e"};\n    std::vector<std::string> output;\n    std::ranges::copy_n(std::begin(range), 3, std::back_inserter(output));\n    // output == {a b c}\n}	code	txt
2246	1	| `std::copy_if` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2246	2	#include <iostream>\n#include <algorithm>\n#include <ranges>\n#include <vector>	text	txt
2246	3	int main()\n{\n    std::vector<long> range{1,2,3,4,5,6};\n    auto is_even = [](long e) { return e % 2 == 0; };\n    std::ranges::copy_if(range, std::ostream_iterator<long>(std::cout, " "), is_even); std::cout << "\\\\n";\n    // 2 4 6\n}	code	txt
2247	1	| `std::remove_copy_if` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2247	2	#include <iostream>\n#include <algorithm>\n#include <ranges>\n#include <vector>	text	txt
2247	3	int main()\n{\n    std::vector<long> range{1,2,3,4,5,6};\n    auto is_even = [](long e) { return e % 2 == 0; };\n    std::ranges::remove_copy_if(range, std::ostream_iterator<long>(std::cout, " "), is_even); std::cout << "\\\\n";\n    // 1 3 5\n}	code	txt
2248	1	| `std::remove_copy` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2248	2	#include <iostream>\n#include <algorithm>\n#include <ranges>\n#include <vector>	text	txt
2248	3	int main()\n{\n    std::vector<long> range{1,2,3,4,5,6};\n    auto is_even = [](long e) { return e % 2 == 0; };\n    std::ranges::remove_copy(range, std::ostream_iterator<long>(std::cout, " "), 5); std::cout << "\\\\n";\n    // 1 2 3 4 6\n}	code	txt
2249	1	| `std::sample` | standard |\n| --- | --- |\n| introduced | C++17 |\n| paralllel | N/A |\n| constexpr | N/A |\n| rangified | C++20 |	text	txt
3191	2	bitbake ncurses-native	code	sh
2249	2	#include <algorithm>\n#include <iostream>\n#include <ranges>\n#include <random>\n#include <vector>	text	txt
2249	3	int main()\n{\n    std::vector<long> range(10,0);\n    std::iota(range.begin(), range.end(), 1);\n    std::random_device rd{};\n    std::mt19937 random_generator(rd());\n    std::ranges::sample(range, std::ostream_iterator<long>(std::cout, " "), 5, random_generator);\n    // R R R R R\n}	code	txt
2250	1	| `std::replace_copy` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2250	2	#include <algorithm>\n#include <iostream>\n#include <iterator>\n#include <ranges>\n#include <vector>	text	txt
2250	3	int main()\n{\n    std::vector<long> range{1,2,3,4,5};\n    std::ranges::replace_copy(range, std::ostream_iterator<long>(std::cout, " "), 5, 0); std::cout << "\\\\n";\n    // 1 2 3 4 0\n}	code	txt
2251	1	| `std::replace_copy_if` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2251	2	#include <algorithm>\n#include <iostream>\n#include <iterator>\n#include <ranges>\n#include <vector>	text	txt
2251	3	int main()\n{\n    std::vector<long> range{1,2,3,4,5};\n    std::ranges::replace_copy_if(range, std::ostream_iterator<long>(std::cout, " "), [](long e) { return e % 2 == 0; }, 0); std::cout << "\\\\n";\n    // 1 0 3 0 5\n}	code	txt
2252	1	| `std::reverse_copy` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2252	2	#include <algorithm>\n#include <iostream>\n#include <iterator>\n#include <ranges>\n#include <vector>	text	txt
2252	3	int main()\n{\n    std::vector<long> range{1,2,3,4,5};\n    std::ranges::reverse_copy(range, std::ostream_iterator<long>(std::cout, " "));\n    // 5 4 3 2 1\n}	code	txt
2253	1	| `std::rotate_copy` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2253	2	Mirrors the behavior of the `std::rotate` algorithm.	text	txt
2253	3	#include <algorithm>\n#include <iostream>\n#include <iterator>\n#include <ranges>\n#include <vector>	text	txt
2253	4	int main()\n{\n    std::vector<long> range{1,2,3,4,5};\n    std::ranges::rotate_copy(range, std::next(std::begin(range), 2), std::ostream_iterator<long>(std::cout, " "));\n    // 3 4 5 1 2\n}	code	txt
2254	1	| `std::construct_at` | standard |\n| --- | --- |\n| introduced | C++20 |\n| paralllel | N/A |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2254	2	| `std::destroy_at` | standard |\n| --- | --- |\n| introduced | C++17 |\n| paralllel | N/A |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2254	3	#include <algorithm>\n#include <string>	text	txt
2254	4	int main()\n{\n    alignas(alignof(std::string)) char mem[sizeof(std::string)];\n    auto *ptr = reinterpret_cast<std::string*>(mem);\n    std::construct_at(ptr, 8, 'X');\n    // *ptr == "XXXXXXXX", ptr->length() == 8\n    std::destroy_at(ptr);\n}	code	txt
2255	1	| `std::make_heap` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | N/A |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2255	2	The element at index $`i`$ compares greater or equal to the elements at indexes $`2i+1`$ and $`2i+2`$.	text	txt
2255	3	#include <algorithm>\n#include <iostream>\n#include <iterator>\n#include <ranges>\n#include <vector>	text	txt
2255	4	int main()\n{\n    std::vector<long> range{1,2,3,4,5};\n    std::ranges::make_heap(range);\n    // 5 4 3 1 2\n    std::ranges::make_heap(range, std::greater<long>{});\n    // 1 2 3 4 5\n}	code	txt
2256	1	| `std::push_heap` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | N/A |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2256	2	| `std::pop_heap` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | N/A |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2256	3	#include <algorithm>\n#include <ranges>\n#include <vector>	text	txt
2256	4	int main()\n{\n    std::vector<long> range{1,2,3,4,5};\n    std::ranges::make_heap(range);\n    // 5 4 3 1 2	text	txt
2256	5	    range.push_back(7);\n    std::ranges::push_heap(range);\n    // 7 4 5 1 2 3	text	txt
2256	6	    range.push_back(6);\n    std::ranges::push_heap(range);\n    // 7 4 6 1 2 3 5	text	txt
2256	7	    std::ranges::pop_heap(range);\n    // 6 4 5 1 2 3 7	text	txt
2256	8	    std::ranges::pop_heap(range.begin(), std::prev(range.end()));\n    // 5 4 3 1 2 6 7\n}	code	txt
2257	1	| `std::sort_heap` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | N/A |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2257	2	#include <algorithm>\n#include <ranges>\n#include <vector>	text	txt
2257	3	int main()\n{\n    std::vector<long> range{1,2,3,4,5};\n    std::ranges::make_heap(range);\n    // 5 4 3 1 2\n    std::ranges::sort_heap(range);\n    // 1 2 3 4 5\n}	code	txt
2258	1	| `std::is_heap` | standard |\n| --- | --- |\n| introduced | C++11 |\n| paralllel | N/A |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2258	2	#include <algorithm>\n#include <ranges>\n#include <vector>	text	txt
2258	3	int main()\n{\n    std::vector<long> range{1,2,3,4,5};\n    std::ranges::make_heap(range);\n    std::ranges::is_heap(range);\n    // true\n}	code	txt
2259	1	| `std::is_heap_until` | standard |\n| --- | --- |\n| introduced | C++11 |\n| paralllel | N/A |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2259	2	#include <algorithm>\n#include <ranges>\n#include <vector>	text	txt
2259	3	int main()\n{\n    std::vector<long> range{1,2,3,4,5};\n    std::ranges::make_heap(range);\n    auto it = std::ranges::is_heap_until(range);\n    // it == range.end()\n}	code	txt
2260	1	| `std::find` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2260	2	#include <algorithm>\n#include <iostream>\n#include <iterator>\n#include <ranges>\n#include <vector>\n#include <string>	text	txt
2260	3	int main()\n{\n    std::string data{"first;second;third;"};\n    std::vector<std::string> out;\n    auto it = data.begin();\n    auto token = data.begin();	text	txt
2260	4	    while ((token = std::ranges::find(it, data.end(), ';')) != data.end())\n    {\n        out.push_back("");\n        std::copy(it, token, std::back_inserter(out.back()));\n        it = std::next(token);\n    }\n    std::ranges::copy(out, std::ostream_iterator<std::string>(std::cout, " "));\n}	code	txt
2261	1	| `std::find_if` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2261	2		code	txt
2284	1	The C++ memory model has to deal with the following points:	text	txt
2262	1	| `std::find_if_not` | standard |\n| --- | --- |\n| introduced | C++11 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
2262	2		code	txt
2263	1	#include <iostream>\n#include <iterator>\n#include <algorithm>\n#include <ranges>\n#include <string>\n#include <vector>\n#include <map>	text	txt
2263	2	int main()\n{\n    std::map<long, std::string> map{ {0, "first"}, {1, "second"}, {2, "third"} };	text	txt
2263	3	    std::ranges::copy(std::views::keys(map), std::ostream_iterator<long>(std::cout, " "));\n    // 0 1 2	text	txt
2263	4	    std::ranges::copy(std::views::values(map), std::ostream_iterator<long>(std::cout, " "));\n    // first second third\n}	code	txt
2264	1	#include <iostream>\n#include <iterator>p\n#include <algorithm>\n#include <ranges>\n#include <string>\n#include <vector>\n#include <tuple>	text	txt
2264	2	int main()\n{\n    std::vector<std::tuple<long, std::string, long>> range{ {0, "John", 4}, {1, "Laura", 5}, {2, "Alice", 5} };	text	txt
2264	3	    std::vector<std::string> names;\n    std::ranges::copy(range | std::views::elements<1>, std::ostream_iterator<long>(std::cout, " "));\n    // John Laura Alice	text	txt
2264	4	    std::vector<std::size_t> name_length;\n    std::ranges::copy(range | std::views::elements<2>, std::ostream_iterator<long>(std::cout, " "));\n    // 4 5 5\n}	code	txt
2265	1	#include <iostream>\n#include <iterator>p\n#include <algorithm>\n#include <ranges>\n#include <vector>	text	txt
2265	2	int main()\n{\n    std::vector<long> range{1,2,3,4,5};	text	txt
2265	3	    std::ranges::copy(std::views::transform(range, [](long e) -> long { return e*e; }), std::ostream_iterator<long>(std::cout, " "));\n    // 1 4 9 16 25	text	txt
2265	4	    std::ranges::copy(range | std::views::transform([](long e) -> long { return e*e; }), std::ostream_iterator<long>(std::cout, " "));\n    // 1 4 9 16 25\n}	code	txt
2266	1	#include <iostream>\n#include <iterator>\n#include <algorithm>\n#include <ranges>\n#include <vector>	text	txt
2266	2	int main()\n{\n    std::vector<long> range{1,2,3,4,5};\n    std::ranges::copy(range | std::views::take(3), std::ostream_iterator<long>(std::cout, " "));\n    // 1 2 3\n}	code	txt
2267	1	#include <iostream>\n#include <iterator>\n#include <algorithm>\n#include <ranges>\n#include <vector>	text	txt
2267	2	int main()\n{\n    std::vector<long> range{1,2,3,4,5};\n    std::ranges::copy(range | std::views::take_while([](long e) { return e <= 3; }), std::ostream_iterator<long>(std::cout, " "));\n    // 1 2 3\n}	code	txt
2268	1	#include <iostream>\n#include <iterator>\n#include <algorithm>\n#include <ranges>\n#include <vector>	text	txt
2268	2	int main()\n{\n    std::vector<long> range{1,2,3,4,5};\n    std::ranges::copy(range | std::views::drop(3), std::ostream_iterator<long>(std::cout, " "));\n    // 4 5\n}	code	txt
2269	1	#include <iostream>\n#include <iterator>\n#include <algorithm>\n#include <ranges>\n#include <vector>	text	txt
2269	2	int main()\n{\n    std::vector<long> range{1,2,3,4,5};\n    std::ranges::copy(range | std::views::drop_while([](long e) { return e <= 3; }), std::ostream_iterator<long>(std::cout, " "));\n    // 4 5\n}	code	txt
2270	1	#include <iostream>\n#include <iterator>\n#include <algorithm>\n#include <ranges>\n#include <vector>	text	txt
2270	2	int main()\n{\n    std::vector<long> range{1,2,3,4,5,6};\n    std::ranges::copy(range | std::views::filter([](long e) { return e % 2 == 0; }), std::ostream_iterator<long>(std::cout, " "));\n    // 2 4 6\n}	code	txt
2271	1	#include <iostream>\n#include <iterator>\n#include <algorithm>\n#include <ranges>\n#include <vector>	text	txt
2271	2	int main()\n{\n    std::vector<long> range{1,2,3,4,5};\n    std::ranges::copy(range | std::views::reverse, std::ostream_iterator<long>(std::cout, " "));\n    // 5 4 3 2 1\n}	code	txt
2272	1	#include <iostream>\n#include <iterator>\n#include <algorithm>\n#include <ranges>\n#include <vector>	text	txt
2729	2	cp arch/<arch>/boot/Image /mnt/\ncp arch/<arch>/boot/dts/<board>/<board>.dtb /mnt/\nmkdir /mnt/rootfs\nmake modules_install INSTALL_MOD_PATH=/mnt/rootfs	code	txt
2272	2	int main()\n{\n    std::vector<long> range{1,2,3,4,5};\n    std::ranges::copy(std::views::counted(std::next(range.begin()), 3), std::ostream_iterator<long>(std::cout, " "));\n    // 2 3 4\n}	code	txt
2273	1	#include <iostream>\n#include <iterator>\n#include <algorithm>\n#include <ranges>\n#include <vector>	text	txt
2273	2	int main()\n{\n    std::vector<long> range{1,2,3,4,5};\n    auto common = range | std::views::take(3) | std::views::common;\n    std::copy(common.begin(), common.end(), std::ostream_iterator<long>(std::cout, " "));\n    // 1 2 3\n}	code	txt
2274	1	#include <iostream>\n#include <iterator>\n#include <algorithm>\n#include <ranges>\n#include <vector>	text	txt
2274	2	int main()\n{\n    std::vector<long> range{1,2,3,4,5};\n    std::ranges::copy(std::views::all(range), std::ostream_iterator<long>(std::cout, " "));\n    // 1 2 3 4 5\n}	code	txt
2275	1	#include <iostream>\n#include <iterator>\n#include <algorithm>\n#include <ranges>\n#include <string>\n#include <charconv>	text	txt
2275	2	int main()\n{\n    std::string version{"6.4.2"};\n    std::ranges::copy(\n        version |\n        std::views::split('.') |\n        std::views::transform([](auto v) {\n            int token;\n            std::from_chars(v.data(), v.data() + v.size(), token);\n            return token;\n        }),\n        std::ostream_iterator<int>(std::cout, " ")\n    );\n    // 6 4 2\n}	code	txt
2276	1	incomplete	text	txt
2277	1	#include <iostream>\n#include <iterator>\n#include <algorithm>\n#include <ranges>	text	txt
2277	2	int main()\n{\n    std::ranges::copy(std::views::empty<long>, std::ostream_iterator<long>(std::cout, " "));\n}	code	txt
2278	1	#include <iostream>\n#include <iterator>\n#include <algorithm>\n#include <ranges>	text	txt
2278	2	int main()\n{\n    std::ranges::copy(std::views::single(4), std::ostream_iterator<long>(std::cout, " "));\n    // 4\n}	code	txt
2279	1	#include <iostream>\n#include <iterator>\n#include <algorithm>\n#include <ranges>	text	txt
2279	2	int main()\n{\n    std::ranges::copy(std::views::iota(2,5), std::ostream_iterator<long>(std::cout, " "));\n    // 2 3 4	text	txt
2279	3	    std::ranges::copy(std::views::iota(4) | std::views::take(3), std::ostream_iterator<long>(std::cout, " "));\n    // 4 5 6\n}	code	txt
2280	1	#include <iostream>\n#include <iterator>\n#include <algorithm>\n#include <ranges>	text	txt
2280	2	int main()\n{\n    std::ranges::copy(std::views::istream<long>(std::cin), std::ostream_iterator<long>(std::cout, " "));\n    // 1 2 3 4\n}	code	txt
2281	1	- Open source: qt.io/download-open-source\n- Commercial: qt.io/download	text	txt
2281	2	chmod u+x qt*.run\n./qt*.run	code	txt
2282	1	You can select new components to download and install or unselect them to\nremove them from your installation.	text	txt
2282	2	${QT_DIR}/MaintenanceTool.exe	code	txt
2284	2	- **Atomic operations**: operations that can be performed without interruption.\n- **Partial ordering of operations**: sequences of operations that must not be reordered.\n- **Visible effects** of operations guarantees when operations on shared variables are visible to other threads.	text	txt
2285	1	To deal with multithreading, we should be an expert.\nIn case we want to deal with atomics (sequencial consistency), we should open the door to the next level of expertise.\nWhen we talk about the aquire-release semantic, or relaxed semantics we advance one step higher to the next expertise level.	text	txt
2285	2	1. Multithreading\n2. Sequencial Consistency\n3. Aquire-release Semantic\n4. Relaxed Semantic	text	txt
2286	1	Spinlock mechanism can be implemented lock-free using atomic library.	text	txt
2286	2	`std::atomic_flag` is an atomic boolean. It has a clear and a set state.\nThere are two methods in `std::atomic_flag`, the `clear()` which sets its\nvalue to `false`. Withe the `test_and_set()` method you can set the value\nback to `true` and return the previous value. There is no method to ask for\nthe current value.	text	txt
2286	3	To use `std::atomic_flag` it must be initialized to `false` with the constant\n`ATOMIC_FLAG_INIT`.	text	txt
2286	4	The `std::atomic_flag` has to be initialized with the statement\n`std::atomic_flag = ATOMIC_FLAG_INIT`. Other initialization contexts such as\n`std::atomic_flag{ATOMIC_FLAG_INIT}` are unspecified.	text	txt
2286	5	#include <atomic>\n#include <thread>\n#include <chrono>	text	txt
2286	6	class task_unit\n{\npublic:\n    void do_something()\n    {\n        lock();\n        std::this_thread::sleep_for(std::chrono::seconds{1});\n        unlock();\n    }	text	txt
2286	7	private:\n    void lock() { while (flag.test_and_set()); }\n    void unlock() { flag.clear(); }	text	txt
2286	8	private:\n    std::atomic_flag flag = ATOMIC_FLAG_INIT;\n};	text	txt
2286	9	int main()\n{\n    task_unit task;	text	txt
2286	10	    std::thread taskA{&task_unit::do_something, &task};\n    std::thread taskB{&task_unit::do_something, &task};	text	txt
2286	11	    taskA.join();\n    taskB.join();\n}	code	txt
2287	1	Using `std::atomic_flag` is more straightforward and fast.	text	txt
2287	2	#include <iostream>\n#include <thread>\n#include <chrono>\n#include <mutex>	text	txt
2287	3	class task_unit\n{\npublic:\n    void do_something()\n    {\n        _lock.lock();\n        std::this_thread::sleep_for(std::chrono::seconds{1});\n        _lock.unlock();\n    }	text	txt
2287	4	private:\n    std::mutex _lock;\n};	text	txt
2287	5	int main()\n{\n    task_unit task;	text	txt
2287	6	    std::thread taskA{&task_unit::do_something, &task};\n    std::thread taskB{&task_unit::do_something, &task};	text	txt
2287	7	    taskA.join();\n    taskB.join();\n}	code	txt
2288	1	#include <condition_variable>\n#include <iostream>\n#include <thread>\n#include <mutex>\n#include <vector>	text	txt
2288	2	class some_task\n{\npublic:\n    some_task(): _mutex{}, _cond{}, _shared{}, _accessible{}\n    {\n        std::thread t1{&some_task::wait_for_work, this};\n        std::thread t2{&some_task::prepare_data, this};\n        t1.join();\n        t2.join();\n    }	text	txt
2288	3	    void wait_for_work()\n    {\n        std::cerr << "Waiting" << std::endl;\n        std::unique_lock<std::mutex> lock(_mutex);\n        _cond.wait(lock, [this]() { return _accessible; });\n        _shared.push_back(4);\n        std::cerr << "Work complete" << std::endl;\n    }	text	txt
2288	4	    void prepare_data()\n    {\n        _shared = {1, 2, 3};	text	txt
2288	5	        {\n            std::lock_guard<std::mutex> lock(_mutex);\n            _accessible = true;\n        }	text	txt
2288	6	        std::cerr << "Data preparation complete" << std::endl;\n        _cond.notify_one();\n    }	text	txt
2730	1	make modules_install	code	txt
2288	7	    void print_data()\n    {\n        for (auto value: _shared)\n        {\n            std::cout << value << " ";\n        }\n    }	text	txt
2288	8	private:\n    std::mutex _mutex;\n    std::condition_variable _cond;\n    std::vector<int> _shared;\n    bool _accessible;\n};	text	txt
2288	9	int main()\n{\n    some_task task{};\n}	code	txt
2289	1	atomic variables, threads, locks, condition variables.	text	list
2290	1	tasks	text	list
2291	1	2. There is a global order for all operations on all threads.	text	list
2291	2	1. The instructions of a program are executed in source code order.	text	list
2292	1	Atomics establish synchronization and ordering constraints that can hold for non-atomic types.	text	txt
2292	2	std::atomic<bool> boolean_atomic;	code	cpp
2292	3	std::atomic<int> integral_atomic;	code	cpp
2292	4	Booleans, characters, numbers, and pointers can be of an atomic data type.	text	txt
2293	1	threads, synchronization primitives for shared data, thread-local data, tasks.	text	list
2294	1	std::thread runner{callable, args...}; // starts execution	code	cpp
2294	2	An `std::thread` represents an independent unit of execution. The execution unit starts immediately on its creation.	text	txt
2295	1	std::thread lambda_function_runner{[]{ std::println("{}", "lambda running on a separate thread"); }};	code	cpp
2295	2	The execution unit takes its work package as a callable unit. A callable unit can be a named function, a function object, or a lambda function.	text	txt
2295	3	void do_something()\n{\n    std::println("{}", "function running on a separate thread");\n}\n\nstd::thread named_function_runner{do_something};	code	cpp
2295	4	struct callable\n{\n    constexpr void operator()()\n    {\n        std::println("{}", "functor running on a separate thread");\n    }\n};\n\nstd::thread function_object_runner{callable{}};	code	cpp
2296	1	The execution unit of the new thread ends with the end of the callable.	text	txt
2297	1	Either the creator waits until the created thread is done by calling `join()` member function, or the creator detaches itself from the created thread by calling `detach()` member function on the thread.	text	txt
2297	2	t.detach();	code	cpp
2297	3	t.join();	code	cpp
2298	1	A thread is joinable if no operation `join()` or `detach()` was performed on it.	text	txt
2298	2	if (t.joinable())\n    t.join();	code	cpp
2299	1	std::thread t{do_something};\nt.join();	code	cpp
2299	2	When a thread is not joined or detached by its caller, the thread will call `std::terminate` in its destructor, and the program terminates.	text	txt
2300	1	A thread is a variadic template, it can receive an arbitrary number of arguments.	text	txt
2300	2	std::thread{callable, args...};	code	cpp
2301	1	A variable that is accessed by more than one thread.	text	txt
2302	1	mutexes, locks	text	list
2303	1	A mutex locks and unlocks the critical section, to which the shared variable belongs.	text	txt
2303	2	C++ has five different mutexes. They can lock recursively, tentatively, with or without time constraints.	text	txt
2304	1	By following the RAII idiom, mutexes should be encapsulated in a lock to be released automatically.	text	txt
2304	2	std::mutex exclusive_data{};\nstd::lock<std::mutex> lock{exclusive_data};	code	cpp
2305	1	`std::lock_guard` and `std::scoped_lock` for the simple, `std::unique_lock`, and `std::shared_lock` for the advanced use cases.	text	txt
2306	1	Using a constant expression, a static variable with block scope, or using the functino `std::call_once` in combination with the flag `std::once_flag`.	text	txt
2306	2	If the shared data is read-only, it's sufficient to initialize it with simple thread-safety mechanisms.	text	txt
2307	1	std::thread_local<std::string> content{};	code	cpp
2307	2	Declaring a variable as thread-local ensures that each thread gets its own copy. Therefore, there is no shared data.	text	txt
2307	3	The lifetime of a thread-local data is bound to the lifetime of its thread.	text	txt
2308	1	Condition variabes enable threads to be synchronized via messages. One thread acts as a sender and another as a receiver, where the receiver blocks waiting for the message from the sender.	text	txt
2309	1	A condition variable can be either the sender or the receiver of the message.	text	txt
2309	2	Typical use cases are producer-consumer workflows.	text	txt
2309	3	Using condition variables correctly is quiet challenging; therefore, tasks are often the easier solution.	text	txt
2310	1	Tasks are like data channels between two communication endpoints. They enable thread-safe communication between threads. The promise as one endpoint puts data into the data chennel, the future at the other endpoint picks the value up.	text	txt
2310	2	Tasks have a lot in common with threads. The C++ runtime automatically handles the lifetime of the task.	text	txt
2311	1	The data can be a value, an exception, or simply a notification.	text	txt
2312	1	std::copy(std::execution::par, std::begin(container), std::end(container), std::begin(backup))	code	cpp
2312	2	With C++17, most of the STL algorithms are available in parallel implementation. They can be invoked with a so-called execution policy. This policy specifies whether the algorithm runs sequentially using `std::execution::seq`, in parallel with `std::execution::par`, or in parallel with additional vectorization with `std::execution::par_unseq`.	text	txt
2313	1	`std::jthread` is an enhanced replacement for `std::thread`. In addition to thread properties, an `std::jthread` can signal an interrupt and can automatically join the started thread.	text	txt
2314	1	They share intrinsically mutable state; therefore, they are prone to data races and thus, leading to undefined behavior.	text	txt
2314	2	The smart pointer `std::shared_ptr` and `std::weak_ptr` have a conceptional issue in concurrent programs.	text	txt
2314	3	Both guarantee that the incrementing and decrementing of the reference counter is an atomic operation and the resource is deleted exactly once, but neither of them can guarantee that the access to its resource is atomic.	text	txt
2315	1	std::atomic<std::shared_ptr<T>>{};	code	cpp
2315	2	std::atomic<std::weak_ptr<T>>{};	code	cpp
2316	1	Semaphores are used to control access to a limited number of resources.	text	txt
5216	1	`user:role:type:level`	text	md
2316	2	C++14 has no semaphores, but C++20 provides `std::latch` and `std::barrier` types.	text	txt
2316	3	You can use latches and barriers for waiting at a synchronization point until the counter becomes zero.	text	txt
2317	1	`std::latch` can only be used once while a `std::barrier` can be used more than once. Additionally, a barrier can adjust its counter after each iteration.	text	txt
2318	1	A special semaphore which has a counter that is bigger than zero. The counter is initialized when the semaphore is created. Acquiring the semaphore decreases the counter and releasing the semaphore increases the counter.	text	txt
2319	1	Coroutines are functions that can suspend and resume their execution while maintaining their state.	text	txt
2320	1	Coroutines are often the preferred approach to implement multitasking in operating systems, event loops, infinite lists, or pipelines.	text	txt
2321	1	They are the basic building blocks to execute and speicify if callables should run on an arbitrary thread, a thread pool, or even single threaded without concurrency.	text	txt
2321	2	An executor consists of a set of rules about where, when and how to run a callable unit.	text	txt
2322	1	An extended future becomes ready to be used with `then()`, `when_any()` of its predecessors becomes ready, or `when_all()` of them become ready.	text	txt
2323	1	The durability that is a characteristic for databases holds not for the proposed transactional memory in C++.	text	txt
2323	2	Transactional memory is based on the ideas undelying transactions in database theory.	text	txt
2323	3	A transaction is an aciton that provides the first three properties of ACID database transactions: Atomicity, Consistency, and Isolation.	text	txt
2324	1	synchronized blocks, atomic blocks	text	list
2325	1	Both synchronized and atomic blocks are executed in total order and behave as if a global lock protected them.	text	txt
2326	1	In contrast to synchronized blocks, atomic blocks cannot execute transaction-unsafe code.	text	txt
2327	1	Introduced in C++23, task blocks implement the fork-join paradigm in C++. During the execution, you have a fork phase in which you launch tasks and a join phase in which you synchronize them.	text	txt
2328	1	The data-parallel programming or Single Instruction Multiple Data (SIMD) means that one operation is performed on many data in parallel.	text	txt
2329	1	1. memory location is modified by an atomic operation	text	txt
2329	2	Multiple threads can read the same memory location without a problem. But race condition should be avoided on write by one of the following methods:	text	txt
2329	3	2. one access happens before the other	text	txt
2330	1	1. **Single threading:** One control flow\n2. **Multi-threading:** Tasks, Threads, Condition Variables\n3. **Atomic:** Sequential consistency, Acquire-release semantics, Relaxed semantics	text	txt
3191	3	bitbake ncurses	code	sh
2331	1	- **Atomic operations:** operations that can perform without an interruption\n- **Partial ordering of operations:** sequence of operations that must not be reordered\n- **Visible effects of operations:** guarantees when operations on shared variables are visible to other threads	text	txt
2331	2	The foundation of the contract are operations on atomics, that by definition are indivisable and create ordering constraints on execution.	text	txt
2332	1	x.store() => y.load() => y.store() => x.load()	text	txt
2332	2	Strong memory model guarantees:	text	txt
2332	3	1. instructions of a program are executed in the order of written down\n2. There is a global order of all operations on all threads	text	txt
2332	4	x.store(1);\na = y.load();	code	cpp
2332	5	y.store(2);\nb = x.load();	code	cpp
2332	6	1. Having two threads running these two operations, `store` should never overtake by `load` according to the first guarantee.	text	txt
2332	7	2. According to the second guarantee, there is a global clock that all threads have to obey. Each time the clock makes a tick, one atomic operation takes place, but you never know which one.	text	txt
2332	8	x.store() => y.store() => y.load() => x.load()	text	txt
2332	9	x.store() => y.store() => x.load() => y.load()	text	txt
2332	10	y.store() => x.load() => x.store() => y.load()	text	txt
2332	11	y.store() => x.store() => y.load() => x.load()	text	txt
2332	12	y.store() => x.store() => x.load() => y.load()	text	txt
2333	1	1. Sequential consistency (Strong memory model)\n2. Acquire-release semantics\n3. Relexed semantics (Weak memory model)	text	txt
2334	1	y.store(2);\nb = x.load();	code	cpp
2334	2	Unlike a strong memory model such as sequential consistency, there is no global clock for relaxed semantics. There is no even a guarantee that the execution happens in the source order. `load` operation can easy overtake `store` operation.	text	txt
2334	3	x.store(1);\na = y.load();	code	cpp
2335	1		code	cpp
2335	2	The threads are synchronized at specific synchronization points in the code. Without these synchronization points, there is no well-defined behavior of threads, tasks, or condition variables possible.	text	txt
2336	1	If no memory order is specified, sequential consistency is implicitly applied by `std::memory_order_seq_cst` flag.	text	txt
2336	2	x.store(1, std::memory_order_seq_cst);\na = x.load(std::memory_order_seq_cst);	code	cpp
2337	1	atomic_flag::wait(<predicate>); // C++20	code	cpp
2337	2	atomic_flag::notify_all(); // C++20	code	cpp
2337	3	atomic_flag::test(); // C++20	code	cpp
2337	4	atomic_flag::notify_one(); // C++20	code	cpp
2337	5	`std::atomic_flagis` an atomic boolean. It has a **clear** and **set** state. There is no member function to ask for the current value in C++11. With C++20, an `std::atomic_flag` has a `test()` member function that returns the value of the flag and can be used for thread synchronization via the member functions `notify_one()`, `notify_all()`. With `wait(<predicate>)` thread blocks until it gets notified and atomic value changes.	text	txt
2337	6	atomic_flag::clear();	code	cpp
2337	7	atomic_flag::test_and_set();	code	cpp
2338	1	With C++11 implementation, `std::atomic_flag` must be initialized with `ATOMIC_FLAG_INIT` macro. But since C++20 it can be default initialized.	text	txt
2338	2	std::atomic_flag flag = ATOMIC_FLAG_INIT;	code	cpp
2339	1		code	cpp
4207	3	- String literals\n- Classes	text	txt
5219	1	ps -eZ	code	sh
2339	2	`std::atomic_flag` is the only lock-free atomic. The remaining atomics have a member function called `is_lock_free()` to check if the atomic uses a mutex internally.	text	txt
2340	1	Using `is_always_lock_free()`, you can check for each atomic type if it's lock-free on all supported hardware that the executable might run on. This check returns only `true` if it is `true` for all supported hardware. The check is performed at compile time and is available since C++17.	text	txt
2340	2	atomic::is_always_lock_free();	code	cpp
2341	1	A spinlock is an elementary lock. It eagerly asks for the lock to get access to the critical section. The spinlock saves the expensive context switch in the wait state from the user space to the kernel space, but it utilizes the CPU and wastes CPU cycles.	text	txt
2341	2	Spinlocks should not be used on a single processor system. In the best case, a spinlock wastes resources and slows down the owner of the lock. In the worst case, you get a deadlock.	text	txt
2342	1	#include <atomic>\n#include <thread>\n\nclass basic_spinlock\n{\npublic:\n    void lock()\n    {\n        while (flag.test_and_set());\n    }\n\n    void unlock()\n    {\n        flag.clear();\n    }\n\nprivate:\n    std::atomic_flag flag;\n};	code	cpp
2342	2	The interface of `std::atomic_flag` is powerful enough to build a spinlock. With a spinlock, you can protect a critical section as you would with a mutex.	text	txt
2343	1	Spinlock a lock held by CPU and will waste CPU clocks by actively checking the atomic value. Mutex is a lock held by task, and when locked, the operating system preempts the task from CPU and puts the task into sleep until unlocked.	text	txt
5476	1	#include <ftxui/screen/screen.hpp>\n#include <ftxui/dom/elements.hpp>\n\nint main()\n{\n    ftxui::Element text{ftxui::text("Two Dimensions")};\n    ftxui::Dimensions size{ftxui::Dimension::Fit(text)};\n}	code	cpp
2344	1	#include <atomic>\n#include <thread>\n#include <string>\n#include <print>\n\nclass basic_task\n{\nprivate:\n    std::atomic_flag flag;\n    std::string shared_data;\n\npublic:\n    void insert(std::string const& value)\n    {\n        flag.test_and_set();\n        shared_data = std::move(value);\n        flag.notify_one();\n    }\n\n    void show()\n    {\n        flag.wait(false);\n        std::println("{}", shared_data);\n    }\n};\n\nint main()\n{\n    basic_task task{};\n    std::string message{"atomic works!"};\n\n    std::jthread consumer{&basic_task::show, &task};\n    std::jthread provider{&basic_task::insert, &task, std::move(message)};\n}	code	cpp
2344	2		text	txt
2345	1	Even when the sender sends its notification before the waiter is in the wait state, the notification is not lost. `std::atomic_flag` cannot be victims of lost wakeups.	text	txt
2346	1	class task;\nstd::atomic<task> atomic_task;	code	cpp
2346	2	There are various specializations of the class template `std::atomic`. `std::atomic<bool>` and user defined specialization variations use the primary template.	text	txt
2346	3	std::atomic<bool> atomic_predicate;	code	cpp
2347	1	std::atomic<int*> atomic_pointer;	code	cpp
2347	2	std::atomic<std::shared_ptr<std::string>> atomic_smart_ptr;	code	cpp
2347	3	std::atomic<std::uint64_t> atomic_integral;	code	cpp
2347	4	std::atomic<double> atomic_floating_point;	code	cpp
2559	1	All containers support move semantics when:	text	txt
2347	5	Template specialization for pointers, in C++20 for smart pointers, full specialization for integral types, in C++20 for floating point types.	text	txt
2348	1	Atomic booleans, atomic user-defined types, and atomic smart pointers support the fundamental atomic interface.	text	txt
2348	2	Atomic floating-point types extend the atomic pointer inteface.	text	txt
2348	3	Atomic integral types extend the atomic floating-point interface.	code	cpp
2348	4	Atomic pointers extend the fundamental atomic interface.	text	txt
2349	1	There is no guarantee that they are lock-free.	text	txt
2350	1	- `notify_one()`: C++20; notify one atomic wait operation	text	txt
2350	2	- `wait()`: C++20; blocks until gets notified, compares with old value to protect against spurious wakeups and lost wakeups	text	txt
2350	3	- `compare_exchange_weak(T)`: same as `compare_exchange_strong()`	text	txt
2350	4	- `notify_all()`: C++20; notify all atomic wait operations	text	txt
2350	5	- `is_lock_free()`: check if atomic object is lock free	text	txt
2350	6	- `is_always_lock_free()`: check at compile-time if atomic object is lock free	text	txt
2350	7	- `load()`: atomically returns the value of atomic	text	txt
2350	8	- `operator T()`: equivallent to `load()`	text	txt
2350	9	- `store(T)`: atomically replaces the value of atomic with the non-atomic	text	txt
2350	10	- `exchange(T)`: atomically replaces the value of atomic with new value, and returns old value	text	txt
2350	11	- `compare_exchange_strong(T)`: atomically compares and eventually exchanges the value	text	txt
2351	1	`std::atomic<bool>` is sufficient to synchronize two threads, therefore, is capable of functioning like a condition variable.	text	txt
2351	2	An `std::atomic<bool>` can be explicitly set to `true` or `false` in contrast to `std::atomic_flag`.	text	txt
2352	1	Because *synchronizes-with* establishes a *happens-before* relation and *happens-before* is transitive, `shared_data = "atomic works!";` happens before `std::println("{}", shared_data);`.	text	txt
2352	2	`shared_data = "atomic works!";` happens before `lock = true;`	text	txt
2352	3	`while(!lock.load())` happens before `std::println("{}", shared_data);`	text	txt
2352	4	#include <atomic>\n#include <thread>\n#include <chrono>\n#include <string>\n#include <print>\n\nclass basic_task\n{\nprivate:\n    std::atomic<bool> lock;\n    std::string shared_data;\n\npublic:\n    void show()\n    {\n        while (!lock.load())\n            std::this_thread::sleep_for(std::chrono::milliseconds{5});\n\n        std::println("{}", shared_data);\n    }\n\n    void provide()\n    {\n        shared_data = "atomic works!";\n        lock = true;\n    }\n};\n\nint main()\n{\n    basic_task task{};\n\n    std::jthread provider{&basic_task::provide, &task};\n    std::jthread consumer{&basic_task::show, &task};\n}	code	cpp
2352	5	`lock = true;` happens before `while(!lock.load())`	text	txt
2353	1	The condition variable notifies the waiting thread by following push principle, while atomic boolean checks if the sender is done with its work by following the pull principle.	text	txt
2731	1	make INSTALL_MOD_PATH=/srv/nfs4/root modules_install  # for NFS filesystem\nmake INSTALL_MOD_PATH=/mnt                            # for Flash, SD Card, NAND filesystems	code	txt
2732	1	Artifacts will be installed in `/lib/modules/<version>/`:	text	txt
3694	2	name: First Workflow\non:\n  workflow_dispatch:\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Greeting\n        shell: bash\n        run: date	code	yml
2354	1	#include <atomic>\n#include <thread>\n#include <string>\n#include <print>\n\nclass basic_task\n{\nprivate:\n    std::atomic<bool> flag;\n    std::string shared_data;\n\npublic:\n    void show()\n    {\n        flag.wait(false);\n        std::println("{}", shared_data);\n    }\n\n    void provide()\n    {\n        shared_data = "atomic works!";\n        flag.store(true);\n        flag.notify_one();\n    }\n};\n\nint main()\n{\n    basic_task task{};\n    \n    std::jthread provider{&basic_task::show, &task};\n    std::jthread consumer{&basic_task::provide, &task};\n} 	code	cpp
2355	1	If comparison of atomic value with `expected` returns true, the atomic value is set in the same atomic operation to `desired`. And if comparison returns `false`, `expected` is assigned to the atomic value.	text	txt
2355	2	bool result = atomic<bool>::compare_exchange_strong(T& expected, T& desired);	code	cpp
2355	3	This operation compares and exchanges values in one atomic operation. This operation is the foundation of non-blocking algorithms.	text	txt
2356	1	The weak form exists because some processors don't support an atomic compare-exchange instruction. When called in a loop, the weak form should be preferred. On some platforms, the weak form can be faster.	text	txt
2356	2	while (!atomic<bool>::compare_exchange_weak(expected, desired));	code	cpp
2356	3	The weak version can fail spuriously. That means, although comparison holds, the atomic value may not be set to `desired`, and the function returns `false`, so we have to check the condition in a loop.	text	txt
5558	1	Use the FTXUI_BUILD_MODULES option to build the FTXUI project itself to provide C++ 20 modules:	text	md
2357	1	1. You must not define the copy assignment operator, but you can request it from the compiler by `default`.\n2. A user-defined type must not have virtual member functions or virtual base classes.\n3. A user-defined type must be bitwise comparable so that the C functions `memcpy` or `memcmp` can be applied.	text	list
2357	2	Most popular platforms can use atomic operations for `std::atomic<user-defined type>` if the size of the user-defined type is not bigger than the size of an `int`.	text	txt
2357	3	The copy assignment operator for a user-defined type, for all its base classes and all non-static members, must be trivial:	text	txt
2358	1	#include <type_traits>\n\nstd::is_trivially_copy_constructible<T>::value;\nstd::is_polymorphic<T>::value;\nstd::is_trivial<T>::value;	code	cpp
2358	2		text	txt
2359	1	A `std::shared_ptr<>` consists of a control block and its resource. The control block is thread-safe, but access to the resource is not.	text	txt
2360	1	A function $f$ from a set $D$ to a set $Y$ is a rule that assigns a unique value $f(x)$ in $Y$ to each $x$ in $D$.	text	txt
2360	2	The value of one variable quantity, say $y$, depends on the value of another variable quantity, which we often call $x$.\nWe say that $y$ is a function of $x$ and write this symbolically as	text	txt
2360	4	The symbol $f$ represents the function, the letter $x$ is the **independent variable** representing the input value to $f$, and $y$ is the **dependent variable** or ouput value of $f$ at $x$.	text	txt
2364	1	If $f$ is a function with domain $D$, its graph consists of the points in the Cartesian plane whose coordinates are the input-output pairs for $f$.	text	txt
2364	2	In set notation the graph is	text	txt
2368	1	A function $f$ can have only one value $f(x)$ for each $x$ in its domain, so no vertical line can interact the graph of a function more than once.	text	txt
2369	1	Sometimes a function is described in pieces by using different formulas on different parts of its domain.	text	txt
2369	2	\\\\begin{equation}\n  f(x) = \\\\begin{cases}\n    1 & x ≤ 0 \\\\\\\\\n    x+1 & x > 0\n  \\\\end{cases}\n\\\\end{equation}	code	txt
2371	1	If the graph of a function rises as you move from left to right, we say that the function is increasing.\nIf the graph descends or falls as you move from left to right, the function is decreasing.	text	txt
2371	2	Let $f$ be a function defined on an interval $I$ and let $x_1$ and $x_2$ be two distinct points in $I$.	text	txt
2371	3	1. if $f(x_2) > f(x_1)$ whenever $x_1 < x_2$, then $f(x)$ is said to be **increasing** on $I$.\n2. if $f(x_2) < f(x_1)$ whenever $x_1 < x_2$, then $f(x)$ is said to be **decreasing** on $I$.	text	txt
2373	1	A function $y = f(x)$ is an even function of $x$ if $f(-x) = f(x)$, odd function of $x$ if $f(-x) = -f(x)$, for every $x$ in the function's domain.	text	txt
2373	2	The graph of an even function is symmetric about the $y$ axis, and the graph of an odd function is symmetric about the origin.	text	txt
2374	1	A function of the form $f(x) = mx+b$, where $m$ and $b$ are fixed constants, is called a linear function.	text	txt
2374	2	The function $f(x) = x$ where $m = 1$ and $b = 0$ is called the identity function.	text	txt
2375	1	Two variables $y$ and $x$ are **proportional** to one another if one is always a constant multiple of the other.	text	txt
2375	2	$y = kx$ for some nonzero constant $k$	text	txt
2375	3	If the variable $y$ is proportional to the reciprocal $1/x$, then it is said that $y$ is **inversely proportional** to $x$.	text	txt
2378	1	A function $f(x) = x^n$, where $a$ is a constant, is called a **power function**.	text	txt
2379	1	A function $p$ is a **polynomial** if	text	txt
2379	3	where $n$ is a nonnegative integer and the numbers $a_0,a_1,a_2,...,a_n$ are real constants called the **coefficients** of the polynomial.	text	txt
2379	4	All polynomials have domain $(-\\\\inf,\\\\inf)$.	text	txt
2380	1	A **rational function** is a quotient or ratio $f(x) = p(x)/q(x)$, where $p$ and $q$ are polynomials.	text	txt
2380	2	\\\\begin{equation}\n  y &= \\\\frac{2x^2-3}{7x+4}\n  y &= \\\\frac{5x^2+8x-3}{3x^2+2}\n  y &= \\\\frac{11x+2}{2x^3-1}\n\\\\end{equation}	code	txt
2381	1	Any function constructed from polynomials using algebraic operations (addition, subtraction, multiplication, division, and taking roots) lies within the class of **algebraic functions**.	text	txt
2381	2	All rational functions are algebraic, but also included are more complicated functions such as $y^3 - 9xy + x^3 = 0$.	text	txt
2382	1	Six basic trigonometric functions are $sin(x)$, $cos(x)$, $tan(x)$, $cot(x)$, $arctan(x)$, $arccot(x)$.	text	txt
2383	1	A function of the form $f(x) = a^x$, where $a > 0$ and $a \\\\ne 1$, is called an **exponential function** with base $a$.	text	txt
2384	1	These are the functions $f(x) = log_{a}x$, where the base $a \\\\ne 1$ is a positive constant.	text	txt
2360	3	y = f(x)	code	tex
2384	2	They are the inverse functions of the exponential functions.	text	txt
2385	1	These are functions that are not algebraic.	text	txt
5247	1	whereis <command>	code	sh
2385	2	They include the trigonometric, inverse trigonometric, exponential, and logarithmic functions, and many other functions as well.	text	txt
2385	3	The catenary is one example of a transcendental function.\nIts graph has the shape of a cable, like a telephone line or electric cable, strung from one support to another and hanging freely under its own weight.	text	txt
2386	1	import QtQuick	code	txt
2387	1	`id` is a very special property-like value, it is used to reference elements\ninside a QML file (document). An `id` needs to be unique inside a document.	text	txt
2388	1	A property can depend on one or many other properties. This is called\nbinding. A bound property is updated when its dependent properties change. It\nworks like a contract. For example the `height` should always be two times\nthe `width`.	text	txt
2388	2	Rectangle {\n    width: 100\n    height: width * 2\n}	code	txt
2389	1	Some properties are grouped properties. This feature is used when a property\nis more structured and related properties should be grouped together. Another\nway of writing grouped properties is:	text	txt
2389	2	font {\n    family: "Ubuntu"\n    pixelSize: 24\n}	code	txt
2390	1	Text {\n    id: label	text	txt
2390	2	    property int spacePresses: 0	text	txt
2390	3	    text: "Space pressed: " + spacePresses + " times"	text	txt
2390	4	    Keys.onSpacePressed: {\n        increment()\n    }	text	txt
2390	5	    function increment() {\n        spacePresses = spacePresses + 1\n    }\n}	code	txt
2391	1	import QtQuick	text	txt
2391	2	Window {\n    id: root\n    width: 480\n    height: 600\n    title: qsTr('Milestone')\n    visible: true\n}	code	txt
2392	1	Rectangle {\n    x: 24\n    y: 16\n    width: 100\n    height: 100\n}	code	txt
2393	1	Rectangle {\n    property int max_text_length: 80\n}	code	txt
2394	1	Rectangle {	text	txt
2394	2	    property alias text_length: label.length	text	txt
2394	3	    Text {\n        id: label\n        text: 'sample text'\n        property int length: 40\n    }\n}	code	txt
2395	1		code	txt
2396	1	The element should have the `focus` property set.	text	txt
2396	2	Text {\n    focus: true	text	txt
2396	3	    Keys.onEscapePressed: {\n        label.text = ''\n    }\n}	code	txt
2397	1	`Item` is the base element for all visual elements as such all other visual\nelements inherits from `Item`. The `Item` element is often used as a\ncontainer for other elements, similar to the div element in HTML.	text	txt
2419	8	    Column {\n        id: column\n        anchors.centerIn: parent\n        spacing: 8	text	txt
2419	9	        RedSquare {}\n        GreenSquare {}\n        BlueSquare {}\n    }\n}	code	txt
2420	1	The `Grid` element arranges its children in a grid. By setting the `rows` and\n`columns` properties, the number of rows or columns can be constrained.	text	txt
2420	2	By not setting either of them, the other is calculated from the number of\nchild items. For instance, setting rows to 3 and adding 6 child items will\nresult in 2 columns.	text	txt
2420	3	The properties `flow` and `layoutDirection` are used to control the order in\nwhich the items are added to the grid, while `spacing` controls the amount of\nspace separating the child items.	text	txt
2398	1	- **Geometry:** `x` and `y`, `width` and `height`, and `z` for stacking order\n  of lift elements up or down from their natural ordering.\n- **Layout Handling:** `anchors` (left, right, top, bottom, vertical,\n  horizontal, center), and optional `margins`.\n- **Key Handling:** attached `Key` and `KeyNavigation` properties and the\n  `focus` property to enable key handling in the first place.\n- **Transformation:** `scale` and `rotate` transformation and the generic\n  `transform` property list for x,y,x transformation, as well as\n  `transformOrigin` point.\n- **Visual:** `opacity` to control transparency, `visible` to control\n  visibility, `clip` to restrain paint operations to the element boundary,\n  `smooth` to enhance the rendeing quality.\n- **State Definition:** `states` list property with the supported list of\n  states, current `state` property, and the `transitions` list property to\n  animate state changes.	text	txt
2399	1	Rectangle extends `Item` and adds a fill color to it. Additionally it\nsupports borders defined by `border.color` and `border.width`. To create\nrounded rectangles you can use the `radius` property.	text	txt
2399	2	Rectangle {\n    color: 'lightsteelblue'\n    border.color: 'gray'\n    border.width: 3\n}	code	txt
2400	1	Rectangle {\n    height: 100\n    width: 300\n    radius: 5\n}	code	txt
2401	1	A gradient is defined by a series of gradient stops. Each stop has a position\nand a color. The position marks the position on the y-axis (`0 = top, 1 =\nbottom`). The color of the `GradientStop` marks the color at that position.	text	txt
2401	2	import QtQuick	text	txt
2401	3	Rectangle {\n    id: root\n    width: 500\n    height: 500	text	txt
2401	4	    gradient: Gradient {\n        GradientStop {\n            position: 0.0\n            color: 'lightsteelblue'\n        }\n        GradientStop {\n            position: 1.0\n            color: 'slategray'\n        }\n    }\n}	code	txt
2402	1	Text {\n    id: label\n    color: 'black'\n}	code	txt
2403	1	Text {\n    id: label\n    text: 'very long string'\n    elide: Text.ElideMiddle\n}	code	txt
2404	1	Text {\n    id: label\n    color: 'black'\n    font.family: 'FreeSans'\n    font.pixelSize: 18\n}	code	txt
2405	1	- `AlignTop`\n- `AlignBottom`\n- `AlignHCenter`\n- `AlignVCenter`	text	txt
2405	2	Text {\n    id: label\n    verticalAlignment: Text.AlignHCenter\n    horizontalAlignment: Text.AlignVCenter\n}	code	txt
2406	1	Text {\n    id: label\n    style: Text.Sunken\n    styleColor: '#FF4488'\n}	code	txt
2407	1	- PNG\n- JPG\n- GIF\n- BMP\n- WEBP	text	txt
2408	1	Image {\nid: profile_picture\nx: 15\ny: 15\nsource: 'qrc:images/user.jpg'\nheight: 120\nwidth: 90\nclip: true\nfillMode: Image.PreserveAspectCrop\n}	code	txt
2409	1	Image {\n    widht: 680\n    height: 460\n    source: "assets/triangle_red.png"\n    fillMode: Image.PreserveAspectCrop\n    clip: true\n}	code	txt
2732	2	* `kernel/`: all `.ko` files in the same directory structure as in the source.\n* `modules.alias`, `modules.alias.bin`: used by udev to find drivers for devices.\n* `modules.dep`, `modules.dep.bin`: module dependencies mapping.\n* `modules.symbols`, `modules.symbols.bin`: tells which module a given symbol belongs to.	text	txt
2733	1	* `make clean`\n* `make mrproper`\n* `make distclean`	text	txt
5248	1	whereis -m <command>	code	sh
2750	2	sudo insmod <module>.ko	code	txt
2756	2	umount /mnt/boot\numount /mnt/home\numount /mnt	code	txt
2410	1	| Constant | Description |\n|---|---|\n| Image.Stretch | the image is scaled to fit |\n| Image.PreserveAspectFit | the image is scaled uniformly to fit without cropping |\n| Image.PreserveAspectCrop | the image is scaled uniformly to fill, cropping if necessary |\n| Image.Tile | the image is duplicated horizontally and vertically |\n| Image.TileVertically | the image is stretched horizontally and tiled vertically |\n| Image.TileHorizontally | the image is stretched vertically and tiled horizontally |\n| Image.Pad | the image is not transformed |	text	txt
2411	1	MouseArea {\n    id: clickable\n    anchors.fill: parent\n    onClicked: root.clicked()\n}	code	txt
2412	1	A component is a reusable element written in a file and later used in another\nQML document using the name of the component file.	text	txt
2413	1	*Button.qml*\nRectangle {\n    id: button\n    signal clicked	text	txt
2413	2	    MouseArea {\n        anchors.fill: parent\n        onClicked: { button.clicked(); }\n    }\n}	code	txt
2414	1	Rectangle {\n    id: button\n    property alias color: child.color\n}	code	txt
2415	1	A simple translation is done via changing the `x`, `y` position.	text	txt
2415	2	A rotation is done using the `rotation` property.\nThe value is provided in degrees (0 .. 360).	text	txt
2415	3	A scaling is done using the `scale` property and a value `<1` means the\nelement is scaled down and `>1` means the element is scaled up.	text	txt
2415	4	Rotation and scaling do not change an item's geometry: the `x,y` and\n`width,height` haven’t changed; only the painting instructions are\ntransformed.	text	txt
2415	5		code	txt
2416	1	antialiasing: true	code	txt
2417	1	import QtQuick	text	txt
2417	2	Rectangle {\n    width: 48\n    height: 48\n    color: "#ea7025"\n    border.color: Qt.lighter(color)\n}	code	txt
2418	1	The Row element places its child items next to each other, either from the\nleft to the right, or from the right to the left, depending on the\n`layoutDirection` property.	text	txt
2418	2	`spacing` property can be used to distance each of the child elements from\neach other.	text	txt
2418	3	*DarkSquare.qml*\nRectangle {\n    id: root\n    width: 95\n    height: 95\n    color: 'darkgray'\n    border.color: Qt.lighter(color)\n}	code	txt
2418	4	*RedSquare.qml*\nRectangle {\n    id: root\n    width: 95\n    height: 95\n    color: 'red'\n    border.color: Qt.lighter(color)\n}	code	txt
2418	5	*GreenSquare.qml*\nRectangle {\n    id: root\n    width: 95\n    height: 95\n    color: 'green'\n    border.color: Qt.lighter(color)\n}	code	txt
2418	6	*BlueSquare.qml*\nRectangle {\n    id: root\n    width: 95\n    height: 95\n    color: 'blue'\n    border.color: Qt.lighter(color)\n}	code	txt
2418	7	*Main.qml*\nimport QtQuick	text	txt
2418	8	DarkSquare {\n    id: root\n    width: 400\n    height: 200	text	txt
2418	9	    Row {\n        id: row\n        anchors.centerIn: parent\n        spacing: 8	text	txt
2418	10	        RedSquare {}\n        GreenSquare {}\n        BlueSquare {}\n    }\n}	code	txt
2419	1	`spacing` property can be used to distance each of the child elements from\neach other.	text	txt
2419	2	*DarkSquare.qml*\nRectangle {\n    id: root\n    width: 95\n    height: 95\n    color: 'darkgray'\n    border.color: Qt.lighter(color)\n}	code	txt
2419	3	*RedSquare.qml*\nRectangle {\n    id: root\n    width: 95\n    height: 95\n    color: 'red'\n    border.color: Qt.lighter(color)\n}	code	txt
2419	4	*GreenSquare.qml*\nRectangle {\n    id: root\n    width: 95\n    height: 95\n    color: 'green'\n    border.color: Qt.lighter(color)\n}	code	txt
2419	5	*BlueSquare.qml*\nRectangle {\n    id: root\n    width: 95\n    height: 95\n    color: 'blue'\n    border.color: Qt.lighter(color)\n}	code	txt
2419	6	*Main.qml*\nimport QtQuick	text	txt
2419	7	DarkSquare {\n    id: root\n    width: 200\n    height: 400	text	txt
3191	4	bitbake <target>	code	sh
2420	4	*DarkSquare.qml*\nRectangle {\n    id: root\n    width: 95\n    height: 95\n    color: 'darkgray'\n    border.color: Qt.lighter(color)\n}	code	txt
2420	5	*BlueSquare.qml*\nRectangle {\n    id: root\n    width: 95\n    height: 95\n    color: 'blue'\n    border.color: Qt.lighter(color)\n}	code	txt
2420	6	*Main.qml*\nimport QtQuick	text	txt
2420	7	DarkSquare {\n    id: root\n    width: 200\n    height: 400	text	txt
2420	8	    Grid {\n        id: grid\n        rows: 2\n        columns: 2\n        anchors.centerIn: parent\n        spacing: 8	text	txt
2420	9	        BlueSquare {}\n        BlueSquare {}\n        BlueSquare {}\n        BlueSquare {}\n    }\n}	code	txt
2421	1	The direction of the flow is controlled using `flow` and `layoutDirection`.	text	txt
2421	2	As the items are added in the flow, they are wrapped to form new rows or columns as needed.	text	txt
2421	3	In order for a flow to work, it must have a width or a height. This can be set either directly, or though anchor layouts.	text	txt
2421	4	*DarkSquare.qml*\nRectangle {\n    id: root\n    width: 95\n    height: 95\n    color: 'darkgray'\n    border.color: Qt.lighter(color)\n}	code	txt
2421	5	*BlueSquare.qml*\nRectangle {\n    id: root\n    width: 95\n    height: 95\n    color: 'blue'\n    border.color: Qt.lighter(color)\n}	code	txt
2421	6	*Main.qml*\nimport QtQuick	text	txt
2421	7	DarkSquare {\n    id: root\n    width: 300\n    height: 300	text	txt
2421	8	    Flow {\n        id: flow\n        anchors.fill: parent\n        anchors.margins: 10\n        spacing: 8	text	txt
2421	9	        BlueSquare {}\n        BlueSquare {}\n        BlueSquare {}\n        BlueSquare {}\n    }\n}	code	txt
2422	1	An element often used with positioners is the `Repeater`. It works like a\nfor-loop and iterates over a model. In the simplest case a model is just a\nvalue providing the number of loops.	text	txt
2422	2	Repeaters are best used when having a small amount of static data to be\npresented.	text	txt
2422	3	A repeater injects the `index` property into the repeater. It contains the\ncurrent loop-index.	text	txt
2422	4	While the `index` property is dynamically injected into the Rectangle, it is\na good practice to declare it as a required property to ease readability and\nhelp tooling. This is achieved by the `required property int index` line.	text	txt
2422	5	*DarkSquare.qml*\nRectangle {\n    id: root\n    width: 95\n    height: 95\n    color: 'darkgray'\n    border.color: Qt.lighter(color)\n}	code	txt
2422	6	*BlueSquare.qml*\nRectangle {\n    id: root\n    width: 95\n    height: 95\n    color: 'blue'\n    border.color: Qt.lighter(color)\n}	code	txt
2422	7	*Main.qml*\nimport QtQuick	text	txt
2422	8	Window {\n    id: root\n    title: 'Windows'\n    width: 400\n    height: 400\n    visible: true	text	txt
2422	9	    DarkSquare {\n        id: dark\n        anchors.fill: parent\n        anchors.centerIn: parent	text	txt
2422	10	        Flow {\n            id: flow\n            anchors.fill: parent\n            anchors.margins: 10\n            spacing: 10	text	txt
2422	11	            // replace with 9 repetitions of BlueSquare {}\n            Repeater {\n                model: 9\n                delegate: BlueSquare {\n                    Text {\n                        anchors.centerIn: parent\n                        color: 'black'\n                        text: '#' + parent.index\n                    }\n                }\n            }\n        }\n    }\n}	code	txt
2423	1	An element has 6 major anchor lines, `top` , `bottom` , `left` , `right` , `horizontalCenter` , `verticalCenter` .	text	txt
2424	1	There is the `baseline` anchor for text in `Text` elements.	text	txt
2425	1	Each anchor line comes with an offset. In the case of the `top` , `bottom` ,\n`left` , and `right` anchors, they are called **margins**. For\n`horizontalCenter` , `verticalCenter` and `baseline` they are called\n**offsets**.	text	txt
2426	1	- `validator`\n- `inputMask`\n- `echoMode`	text	txt
2427	1	*UserInput.qml*\nimport QtQuick	text	txt
2427	2	FocusScope {\n    width: 200\n    height: input.height + 8	text	txt
2427	3	    Rectangle {\n        anchors.fill: parent\n        color: 'lightsteelblue'\n        border.color: 'gray'\n    }	text	txt
2427	4	    property alias text: input.text\n    property alias input: input	text	txt
2427	5	    TextInput {\n        id: input\n        height: 50\n        anchors.fill: parent\n        anchors.margins: 4\n        focus: true\n    }\n}	code	txt
2427	6	*Main.qml*\nimport QtQuick	text	txt
2427	7	Window {\n    width: 640\n    height: 480\n    visible: true\n    title: qsTr("Credentials")	text	txt
2427	8	    Column {\n        UserInput {\n            id: input1\n            KeyNavigation.tab: input2\n            text: 'Username'\n            focus: true\n        }	text	txt
2427	9	        UserInput {\n            id: input2\n            KeyNavigation.tab: input1\n            text: 'Password'\n        }\n    }\n}	code	txt
2428	1	import QtQuick	text	txt
2428	2	Window {\n    width: 200\n    height: 300\n    visible: true\n    title: qsTr("Note")	text	txt
2428	3	    Rectangle {\n        anchors.fill: parent\n        color: 'linen'	text	txt
2428	4	        Text {\n            anchors.top: parent.top\n            anchors.horizontalCenter: parent.horizontalCenter\n            color: 'black'\n            font.family: 'OpenSans'\n            font.pixelSize: 18\n            text: 'Note to Self'\n        }\n        Editor {\n            id: editor\n            anchors.verticalCenter: parent.verticalCenter\n            anchors.horizontalCenter: parent.horizontalCenter\n            anchors.fill: parent\n            anchors.topMargin: 30\n            anchors.margins: 20\n            focus: true\n        }\n    }\n}	code	txt
2429	1	The attached property `Keys` allows executing code based on certain key\npresses.	text	txt
2430	1	import QtQuick	text	txt
2430	2	Window {\n    width: 200\n    height: 300\n    visible: true\n    title: qsTr("Keys")	text	txt
2430	3	    Rectangle {\n        anchors.fill: parent\n        color: 'linen'\n        focus: true	text	txt
2430	4	        Text {\n            id: label\n            color: 'black'\n            anchors.top: parent.top\n            anchors.topMargin: 10\n            anchors.left: parent.left\n            anchors.leftMargin: 10\n            text: 'No key presses'\n        }	text	txt
2430	5	        Keys.onReturnPressed: label.text = 'Enter pressed'\n    }\n}	code	txt
2431	1	This requires you to put your code into a Qt resource file, and is described\nin detail in the [Compiling QML Ahead of\nTime](https://doc.qt.io - https://doc.qt.io/qt-6/qtquick-deployment.html#ahead-of-time-compilation).	text	txt
2432	1	Animations are applied to property changes. An animation defines the\ninterpolation curve from one value to another value when a property value\nchanges.	text	txt
2433	1	This animation requires changes on `x,y` and `rotation` properties.	text	txt
2433	2	import QtQuick	text	txt
2433	3	Window {\n    width: 800\n    height: 400\n    visible: true\n    title: qsTr("Box Game")	text	txt
2433	4	    Rectangle {\n        id: root\n        color: '#383838'\n        anchors.fill: parent	text	txt
2433	5	        property int padding: 10\n        property int duration: 5000\n        property bool running: false	text	txt
2433	6	        Rectangle {\n            id: box\n            x: root.padding\n            y: root.height - width - 5\n            width: 50\n            height: 50\n            color: 'lightsteelblue'	text	txt
2433	7	            NumberAnimation on x {\n                to: root.width - box.width - root.padding\n                duration: root.duration * 2\n                running: root.running\n            }	text	txt
2433	8	            RotationAnimation on rotation {\n                to: 360\n                duration: root.duration\n                running: root.running\n            }\n        }	text	txt
2433	9	        MouseArea {\n            anchors.fill: root\n            onClicked: root.running = true\n        }\n    }\n}	code	txt
2434	1	This animation requires changes on `opacity` and `scale` properties.	text	txt
2434	2		code	txt
2435	1	- `PropertyAnimation`: animates changes in property values.\n- `NumberAnimation`: animates changes in qreal-type values.\n- `ColorAnimation`: animates changes in color values.\n- `RotationAnimation`: animates changes in rotation values.	text	txt
2435	2	Qt Quick also provides more specialized animations for specific use cases:	text	txt
2435	3	- `PauseAnimation`: provides a pause for an animation.\n- `SequentialAnimation`: allows animations to be run sequentially.\n- `ParallelAnimation`: allows animations to be run in parallel.\n- `AnchorAnimation`: animates changes in anchor values.\n- `ParentAnimation`: animates changes in parent values.\n- `SmoothedAnimation`: allows a property to smoothly track a value.\n- `SprintAnimation`: allows a property to track a value in a spring-like motion.\n- `PathAnimation`: animates an item alongside a path.\n- `Vector3dAnimation`: animates changes in QVector3d values	text	txt
2436	1	While working on more complex animations, there is sometimes a need to change\na property or to run a script during an ongoing animation. For this Qt Quick\noffers the action elements, which can be used everywhere where the other\nanimation elements can be used:	text	txt
2436	2	- `PropertyAction`: specifies immediate property changes during animation.\n- `ScriptAction`: defines scripts to be run during an animation.	text	txt
2437	1	- **Animation on property:** runs automatically after the element is fully\n  loaded.\n- **Behavior on property:** runs automatically when the property value\n  changes\n- **Standalone Animation:** runs when the animation is explicitly started\n  using `start()` or `running` is set to true.	text	txt
2438	1	Text {\n    wrapMode: Text.WordWrap\n}	code	txt
2439	1	- `Easing.Linear`\n- `Easing.InExpo`\n- `Easing.OutExpo`\n- `Easing.InOutExpo`\n- `Easing.InOutCubic`\n- `Easing.SineCurve`\n- `Easing.InOutCirc`\n- `Easing.InOutElastic`\n- `Easing.InOutBack`\n- `Easing.InOutBounce`	text	txt
2440	1	import QtQuick	text	txt
2440	2	Window {\n    width: 640\n    height: 480\n    visible: true\n    title: qsTr("Linear")	text	txt
2440	3	    Rectangle {\n        id: root\n        anchors.fill: parent\n        color: '#383838'	text	txt
2440	4	        property int padding: 20	text	txt
2440	5	        Rectangle {\n            id: box\n            width: 40\n            height: 40\n            x: root.padding\n            anchors.verticalCenter: parent.verticalCenter\n            color: 'lightsteelblue'	text	txt
2440	6	            Behavior on x {\n                NumberAnimation {\n                    id: animation\n                    duration: 2000\n                    easing.type: Easing.InOutCubic\n                }\n            }\n        }	text	txt
2440	7	        MouseArea {\n            anchors.fill: parent\n            onClicked: {\n                box.x = root.width - box.width - root.padding\n            }\n        }\n    }\n}	code	txt
2441	1	Besides the `duration` and `easing.type` , you are able to fine-tune\nanimations. For example, the general `PropertyAnimation` type (from which\nmost animations inherit) additionally supports `easing.amplitude` ,\n`easing.overshoot` , and `easing.period` properties, which allow you to\nfine-tune the behavior of particular easing curves.	text	txt
2442	1	You might want to run several animations at the same time or one after\nanother or even execute a script between two animations.	text	txt
2442	2	Grouping can be done in two ways: parallel or sequential.	text	txt
2442	3	You can use the `SequentialAnimation` or the `ParallelAnimation` element,\nwhich act as animation containers for other animation elements.	text	txt
2442	4	These grouped animations are animations themselves and can be used exactly as\nsuch.	text	txt
2443	1	import QtQuick	text	txt
2443	2	Window {\n    id: window\n    width: 640\n    height: 480\n    visible: true\n    title: qsTr("Parallel")	text	txt
2443	3	    Rectangle {\n        id: root\n        color: '#383838'\n        anchors.fill: parent	text	txt
2443	4	        property int padding: 20\n        property int duration: 2000\n    }	text	txt
2443	5	    MouseArea {\n        anchors.fill: parent\n        onClicked: { diagonal_movement.start(); }\n    }	text	txt
2443	6	    Rectangle {\n        id: box\n        color: 'lightsteelblue'\n        width: 42\n        height: 42	text	txt
2443	7	        x: root.padding\n        y: root.height - height - root.padding\n    }	text	txt
2443	8	    ParallelAnimation {\n        id: diagonal_movement	text	txt
2443	9	        NumberAnimation {\n            target: box\n            properties: 'x'\n            to: root.width - box.width - root.padding\n            duration: root.duration\n            easing.type: Easing.InOutCubic\n        }	text	txt
2443	10	        NumberAnimation {\n            target: box\n            properties: 'y'\n            to: root.padding\n            duration: root.duration\n            easing.type: Easing.InOutCubic\n        }\n    }\n}	code	txt
2444	1		code	txt
2445	1	A state defines a set of property changes and can be triggered by a certain\ncondition.	text	txt
2445	2	You define states in QML with the `State` element, which needs to be bound to\nthe `states` array of any item element.	text	txt
2476	27	class box\n{\nprivate:\n    std::string first;	text	txt
2445	3	A state is identified through a state name, and in its simplest form,\nconsists of a series of property changes on elements.	text	txt
2445	4	The default state is defined by the initial properties of the element and is\nnamed `""` (an empty string).	text	txt
2445	5	Item {\n    id: root\n    states: [\n        State {\n            name: "go"\n            PropertyChanges { ... }\n        },\n        State {\n            name: "stop"\n            PropertyChanges { ... }\n        }\n    ]\n}	code	txt
2445	6	A state is changed by assigning a new state name to the `state` property of\nthe element in which the states are defined.	text	txt
2445	7	Item {\n    id: root\n    states: [\n        ...\n    ]\n    Button {\n        id: goButton\n        ...\n        onClicked: root.state = "go"\n    }\n}	code	txt
2446	1	import QtQuick	text	txt
2446	2	Window {\n    width: 640\n    height: 480\n    visible: true\n    title: qsTr("States")	text	txt
2446	3	    Rectangle {\n        id: root\n        color: '#393939'\n        anchors.fill: parent	text	txt
2446	4	        MouseArea {\n            anchors.fill: parent\n            onClicked: {\n                ball.state = (ball.state === 'bright' ? 'dark' : 'bright')\n            }\n        }\n    }	text	txt
2446	5	    Rectangle {\n        id: ball\n        color: 'lightsteelblue'\n        width: 42\n        height: width\n        radius: width / 2\n        anchors.centerIn: parent\n        state: 'bright'	text	txt
2446	6	        states: [\n            State {\n                name: 'bright'\n                PropertyChanges {\n                    target: ball\n                    color: 'lightsteelblue'\n                }\n            },\n            State {\n                name: 'dark'\n                PropertyChanges {\n                    target: ball\n                    color: 'darkblue'\n                }\n            }\n        ]\n    }\n}	code	txt
2447	1	A transition is executed by a state change.	text	txt
2447	2	You can define on which state change a particular transition can be applied\nusing the `from:` and `to:` properties.	text	txt
2447	3	For example, `from: "*"; to: "*"` means "from any state to any other state",\nand is the default value for `from` and `to` . This means the transition will\nbe applied to every state switch.	text	txt
2447	4	transitions: [\n    Transition {\n        from: "*"; to: "*"\n        ColorAnimation { target: element1; properties: "color"; duration: 2000 }\n        ColorAnimation { target: element2; properties: "color"; duration: 2000 }\n    }\n]	code	txt
2448	1	- `QtQuick.Controls`\n- `QtQuick.Templates`\n- `QtQuick.Controls.Imagine`\n- `QtQuick.Controls.Material`\n- `QtQuick.Controls.Universal`	text	txt
2449	1	import QtQuick\nimport QtQuick.Controls	text	txt
5208	1	setfacl -m u:<username>:rwx <file>	code	sh
2449	2	ApplicationWindow {\n    visible: true\n    width: 800\n    height: 600\n    // ...\n}	code	txt
2450	1	#include <vector>\n#include <string>	text	txt
2450	2	std::vector<std::string> f()\n{\n    std::vector<std::string> cells; // default constructed vector without allocations\n    cells.reserve(3);               // allocate 3 elements of std::string\n    std::string s{"data"};          // default constructed std::string\n    cells.push_back(s);             // 1st vector element copy constructed\n    cells.push_back(s+s);           // default construction of temporary object; move construction of 2nd vector element\n    cells.push_back(std::move(s));  // move constructed 3rd vector element; empty out s object\n    return cells;                   // optimize out vector as return value\n}	text	txt
2450	3	int main()\n{\n    std::vector<std::string> v;\n    v = f();                        // move assigned constructed vector by return value\n}	code	txt
2451	1	#include <utility>	text	txt
2451	2	class bag\n{\nprivate:\n    unsigned int _count;\n    int* _storage;	text	txt
2451	3	public:\n    bag(int const& number): _count{0}, _storage{nullptr}\n    {\n        _count++;\n        _storage = new int{number};\n    }	text	txt
2451	4	    virtual ~bag()\n    {\n        if (_count)\n            delete _storage;\n    }	text	txt
2451	5	    bag(bag const& other): _count{other._count}\n    {\n        _storage = new int{*other._storage};\n    }	text	txt
2451	6	    bag(bag&& other): _count{other._count}, _storage{other._storage}\n    {\n        other._count = 0;\n        other._storage = nullptr;\n    }\n};	text	txt
2451	7	int main()\n{\n    bag a{1};\n    bag b{std::move(a)};\n}	code	txt
2452	1	The rule is that for a temporary object or an object marked with\n`std::move()`, if available, a function declaring parameters as an rvalue\nreference is preferred. However, if no such function exists, the usual copy\nsemantics is used as a fallback.	text	txt
2453	1	The objects declared with const cannot be moved because any optimizing\nimplementation requires that the passed argument can be modified.	text	txt
2453	2	std::vector<std::string> coll;\nconst std::string s{"data"};	text	txt
2453	3	coll.push_back(std::move(s));   // OK, calls push_back(const std::string &)	code	txt
2454	1	Declaring the return value as a whole to be `const` disables move semantics\nand it also disables **return value optimization**. `const` should be used to\ndeclare parts of return type instead, such as the object a returned reference\nor poionter refers to.	text	txt
2454	2	const std::string getValues(); // BAD: disables move semantics for return value\nconst std::string& getRef();   // OK\nconst std::string* getPtr();   // OK	code	txt
2455	1	The implementer has to ensure that the passed argument is in a valid state\nafter the call.	text	txt
2456	1	- When the value of a temporary object is passed that will automatically be\n  destroyed after the statement.\n- When a non-`const` object marked with `std::move()`.	text	txt
2457	1	`std::move()` is defined a a function in C++ standard library `<utility>`. No\nstandard header is required t include `utility` header file. Therefore, when\nusing `std::move()`, you should explicitly include `<utility>` to make your\nprogram portable.	text	txt
2458	1	function(static_cast<decltype(object)&&>(object)	code	txt
2459	1	The parameter can bind only to a temporary object that does not have a name\nor to an object marked with `std::move()`.	text	txt
2459	2	According to the semantics of rvalue references, the caller claims that it is\n*no longer interested in the value*. Therefore, you can modify the object the\nparameter refers to. However, the caller might still be interested in using\nthe object. Therefore, any modification should keep the referenced object in\na valid state.	text	txt
2459	3	void foo(std::string&& rv);\nstd::string s{"data"};	text	txt
2459	4	foo(s);     // ERROR\nfoo(std::move(s));      // OK\nfoo(returnStringByValue());     // OK	code	txt
2715	1	qemu-system-arm --machine help	code	txt
2460	1	Moved-from objects are still valid objects for which at least the destructor\nwill be called. However, they should also be valid in the sense that they\nhave a consisten state and all operations work as expected. The only thing\nyou do not know is their value.	text	txt
2460	2	std::string s{"data"};	text	txt
2460	3	foo(std::move(s));	text	txt
2460	4	std::cout << s << '\\\\n'; // OK (don't know which value is written)\nstd::cout << s.size() << '\\\\n';  // OK (writes current number of characters)\nstd::cout << s[0] << '\\\\n';  // ERROR (potentially undefined behavior)\nstd::cout << s.front() << '\\\\n'; // ERROR (potentially undefined behavior)\ns = "new value";  // OK	code	txt
2461	1	**const lvalue reference**	text	txt
2461	2	The function has only read access to the passed argument.	text	txt
2461	3	void foo(const std::string& arg);	code	txt
2461	4	You can pass everything to a function declared that way if the type fits:	text	txt
2461	5	- A modifiable named object\n- A `const` named object\n- A temporary object that does not have a name\n- A non-`const` object marked with `std::move()`	text	txt
2461	6	**non-const lvalue reference**	text	txt
2461	7	The function has write access to the passed argument. You can no longer pass\neverything to a function declared that way even if the type fits.	text	txt
2461	8	void foo(std::string& arg);	code	txt
2461	9	You can pass:	text	txt
2461	10	- A modifiable object	text	txt
2461	11	**non-const rvalue reference**	text	txt
2461	12	void foo(std::string&& arg);	code	txt
2461	13	The function has write access to the passed argument.\nHowever, you have restrictions on what you can pass:	text	txt
2461	14	- A temporary object that does not have a name\n- A non-`const` object marked with `std::move()`	text	txt
2461	15	The semantic meaning is that we give `foo()` write access to the passed\nargument to steal the value.	text	txt
2461	16	**const rvalue reference**	text	txt
2461	17	void foo(const std::string&& arg);	code	txt
2461	18	This also means that you have read access to the passed argument.\nYou can only pass:	text	txt
2461	19	- A temporary object that does not have name\n- A `const` or non-`const` object marked with `std::move()`	text	txt
2461	20	However, there is no useful semantic meaning of this case.	text	txt
2734	1	git archive --prefix=black-linux-6.2/ -o /tmp/black-linux-6.2.tar.gz 6.2	code	txt
5209	1	sestatus	code	sh
5249	1	whereis -b <command>	code	sh
2462	1	With move semantics call-by-value can become cheap if a temporary object is\npassed or the passed argument is marked with `std::move()`. Retuurning a\nlocal object by value can be optimized away. However, if it is not optimized\naway, the call is guaranteed to be cheap now.	text	txt
2462	2	void fooByVal(std::string str);\nvoid fooByRRef(std::string&& str);;	text	txt
2462	3	std::string s1{"data"}, s2{"data"};	text	txt
2462	4	fooByVal(std::move(s1));    // s1 is moved\nfooByRRef(std::move(s2));   // s2 might be moved	code	txt
2462	5	The function taking the string by value will use move semantics because a new\nstring is created with the value of passed argument. The function taking the\nstring by rvalue reference might use move semantics. Passing the argument\ndoes not create a new string. Wether the value of the passed argument is\nstolen/modified depends on the implementation of the function.	text	txt
2462	6	Move semantics does not guarantee that any optimization happens at all or\nwhat the effect of any optimization is. All we know is that the passed object\nis subsequently in a valid but unspecified state.	text	txt
5477	1	#include <ftxui/screen/screen.hpp>\n#include <print>\n\nint main()\n{\n    ftxui::Dimensions size{ftxui::Dimension::Fixed(10)};\n    std::println("{}x{}", size.dimx, size.dimy);\n}	code	cpp
2463	1	If classes have changed the usual behavior of copying or assignment, they\nprobably also have to do some things different when optimizing these\noperations. Any form of an explicit declaration of a copy constructor, copy\nassignment operator, or destructor disables move semantics, even if\ndeclarations are marked with `=default`.	text	txt
2464	1	The copy constructor is automatically generated when all of the following\nconditions are met:	text	txt
2464	2	* No <b>move constructor</b> is user-declared\n* No <b>move assignment operator</b> is user-declared	text	txt
2465	1	The move constructor is automatically generated when all of the following\nconditions are met:	text	txt
2465	2	* No <b>copy constructor</b> is user-declared\n* No <b>copy assignment operator</b> is user-declared\n* No another <b>move operation</b> is user-declared\n* No <b>destructor</b> is user-declared	text	txt
2466	1	Declaring destructors in anyway disables the automatic generation of move\noperations.	text	txt
2467	1	Move constructor is called when the caller no longer needs the value. Inside\nthe move constructor, we hdecide where an how long we need it. In particular,\nwe might need the value multiple times and not lose it with its first use.	text	txt
2467	2	void insertTwice(std::vector<std::string>& coll, std::string&& str)\n{\n    coll.push_back(str);    // copy str into coll\n    coll.push_back(std::move(str));     // move str into coll\n}	code	txt
2467	3	The important lesson to learn here is that a parameter being declared as an\nrvalue reference restricts what we can pass to this function but behaves just\nlike any other non-`const` object of this type.	text	txt
2468	1	By default, both copying and moving special member functions are generated\nfor class.	text	txt
2468	2	class Person\n{\n    ...\npublic:\n    ...\n    // NO copy constructor/assignment declared\n    // NO move constructor/assignment declared\n    // NO destructor declared\n};	code	txt
2469	1	Generated move operations might introduce problems even though the generated\ncopy operations work correctly. In particular, you have to be careful in the\nfollowing situations:	text	txt
2469	2	- Values of members have restrictions\n- Values of members depend on each other\n- Member with reference semantics are used (pointers, smart pointers, ...)\n- Objects have no default constructed state	text	txt
2470	1	All types in C++ standard library receive a valid but unspecified state when\nobjects are moved to themselves. This means that by default, you might lose\nthe values of your members and you might even have a more severe problem if\nyour type does not work properly with members that have arbitrary values.	text	txt
2470	2	The traditional/naive way to protect against self-assignments is to check\nwether both operands are identical. You can also do this when implementing\nthe move assignment operator.	text	txt
2470	3	Customer& operator=(Customer&& other) noexcept\n{\n    if (this != &other)\n    {\n        name = std::move(other.name);\n        values = std::move(other.values);\n    }\n    return *this;\n}	code	txt
2476	28	public:\n    box(std::string f): first{std::move(f)} {}\n    void set_first(std::string f) { first = f; }\n};	text	txt
2471	1	if you declare the move constructor as deleted, you cannot move (you have\ndisabled this operation; any fallback is not used) and cannot copy (because a\ndeclared move constructor disables copy operations).	text	txt
2471	2	class Person\n{\npublic:\n    ...\n    // NO copy constructor declared	text	txt
2471	3	    // move constructor/assignment declared as deleted:\n    Person(Person&&) = delete;\n    Person& operator=(Person&&) = delete;\n    ...\n};	text	txt
2471	4	Person p{"Tina", "Fox"};\ncoll.push_back(p); // ERROR: copying disabled\ncoll.push_back(std::move(p)); // ERROR: moving disabled	code	txt
2471	5	You get the same effect by declaring copying special member functions as\ndeleted and that is probably less confusing for other programmers.	text	txt
2471	6	Deleting the move operations and enabling the copy operations really makes no sense:\nclass Person\n{\npublic:\n    ...\n    // copy constructor explicitly declared:\n    Person(const Person& p) = default;\n    Person& operator=(const Person&) = default;	text	txt
2471	7	    // move constructor/assignment declared as deleted:\n    Person(Person&&) = delete;\n    Person& operator=(Person&&) = delete;\n    ...\n};	text	txt
2471	8	Person p{"Tina", "Fox"};\ncoll.push_back(p); // OK: copying enabled\ncoll.push_back(std::move(p)); // ERROR: moving disabled	code	txt
2471	9	In this case, `=delete` disables the fallback mechanism.	text	txt
2472	1	Declaring the special move member functions as deleted is usually not the\nright way to do it because it disables the fallback mechanism. The right way\nto disable move semantics while providing copy semantics is to declare one of\nthe other special member functions (copy constructor, assignment operator, or\ndestructor). I recommend that you default the copy constructor and the\nassignment operator (declaring one of them would be enough but might cause\nunnecessary confusion):	text	txt
2472	2	class Customer\n{\n    ...\npublic:\n    ...\n    Customer(const Customer&) = default;    // disable move semantics\n    Customer& operator=(const Customer&) = default;     // disable move semantics\n};	code	txt
2473	1	If move semantics is unavailable or has been deleted for a type, this has no\ninfluence on the generation of move semantics for classes that have members\nof this type.	text	txt
2473	2	class Customer\n{\n    ...\npublic:\n    ...\n    Customer(const Customer&) = default;\n    // copying calls enabled\n    Customer& operator=(const Customer&) = default; // copying calls enabled\n    Customer(Customer&&) = delete;\n    // moving calls disabled\n    Customer& operator=(Customer&&) = delete;\n    // moving calls disabled\n};	text	txt
2473	3	class Invoice\n{\n    std::string id;\n    Customer cust;\npublic:\n    ... // no special member functions\n};	text	txt
2473	4	Invoice i;\nInvoice i1{std::move(i)}; // OK, moves id, copies cust	code	txt
2474	1	The guideline is to either declare all five (copy constructor, move\nconstructor, copy assignment operator, move assignment operator, and\ndestructor) or none of them. Declaration means either to implement, set as\ndefault, or set as deleted.	text	txt
2475	1	Returning a local object by value automatically uses move semantics if\nsupported. On the other hand, `std::move` is just a `static_cast` to an\nrvalue reference, therefore disables **return value optimization**, which\nusually allows the returned object to be used as a return value instead.	text	txt
2475	2	std::string foo()\n{\n    std::string s;\n    return std::move(s); // BAD, returns std::string&&\n}	code	txt
2476	1	Constructing an object only by const lvalue references will allocate four\nmemory spaces which two of them are unnecessary. Also move operation does not\nwork here because parameters are const.	text	txt
2476	2	When passing string literals to const lvalue references, compiler creates two\ntemporary objects of `std::string`, which then will be used to initialize\nmembers while this also makes two copies.	text	txt
2476	3	#include <string>	text	txt
2476	4	class box\n{\nprivate:\n    std::string first;\n    std::string last;	text	txt
2476	5	public:\n    box(std::string const& f, std::string const& l): first{f}, last{l} {}\n    // f, l allocated\n    // first, last also allocated\n};	text	txt
2476	6	box b{"First", "Last"};	code	txt
2476	7	With constructors that take each argument by value and moving them into\nmembers, we avoid redundant memory allocations. This is especially true when\nwe are taking values in constructor initialization list.	text	txt
2476	8	#include <string>	text	txt
2476	9	class box\n{\nprivate:\n    std::string first;\n    std::string last;	text	txt
2476	10	public:\n    box(std::string f, std::string l): first{std::move(f)}, last{std::move(l)} {}\n};	code	txt
2476	11	Another good example to pass by value and move is methods taking objects to\nadd to a data structure:	text	txt
2476	12	#include <string>\n#include <vector>	text	txt
2476	13	class box\n{\nprivate:\n    std::string first;\n    std::vector<std::string> values;	text	txt
2476	14	public:\n    box(std::string f, std::vector<std::string> v): first{std::move(f)}, values{std::move(v)} {}\n    insert(std::string n) { values.push_back(std::move(n)); }\n};	code	txt
2476	15	It is also possible to use rvalue parameters and move options:	text	txt
2476	16	#include <string>	text	txt
2476	17	class box\n{\nprivate:\n    std::string first;\n    std::string last;	text	txt
2476	18	public:\n    box(std::string&& f, std::string&& l): first{std::move(f)}, last{std::move(l)} {}\n};	code	txt
2476	19	But this solely prevents objects with names. So we should implement two\noverloads that pass by values and move:	text	txt
2476	20	Overloading both for rvalue and lvalue references lead to many different\ncombinations of parameters.	text	txt
2476	21	In some cases, move operations take significant time. For example, if we have\na class with a string and a vector of values, taking by value and move is\nusually the right approach. However, if we have a `std::array` member, moving\nit will take significant time even if the members are moved.	text	txt
2476	22	#include <string>\n#include <array>	text	txt
2476	23	class box\n{\nprivate:\n    std::string first;\n    std::array<std::string, 1000> values;	text	txt
2476	24	public:\n    box(std::string f, std::array<std::string, 1000>& v): first{std::move(f)}, values{v} {}\n    box(std::string f, std::array<std::string, 1000>&& v): first{std::move(f)}, values{std::move(v)} {}\n};	code	txt
2476	25	Often, pass by value is useful when we *create and initialize* a new value.\nBut if we already have a value, which we update or modify, using this\napproach would be counterproductive. A simple example would be setters:	text	txt
2476	26	#include <string>	text	txt
3387	2	LICENSE = "CLOSED"	code	bb
2476	29	box b{"Sample"};\nb.set_first("Another Sample");\nb.set_first("Another Sample");\nb.set_first("Another Sample");\nb.set_first("Another Sample");	code	txt
2476	30	Each time we set a new firstname we create a new temporary parameter `s`\nwhich allocates its own memory. But by implementing in the traditional way\ntaking a const lvalue reference we avoid allocations:	text	txt
2476	31	#include <string>	text	txt
2476	32	class box\n{\nprivate:\n    std::string first;	text	txt
2476	33	public:\n    box(std::string f): first{std::move(f)} {}\n    void set_first(std::string const& f) { first = f; }\n};	code	txt
2476	34	Even with move semantics, the best approach for setting existing values is to\ntake the new values by const lvalue reference and assign without using move\noperation.	text	txt
2476	35	Taking a parameter by value and moving it to where the new value is needed is\nonly useful when we store the passed value somewhere as a new value where we\nneed new memory allocation anyway. When modifying an existing value, this\npolicy might be counterproductive.	text	txt
2477	1	Usually, in polymorphic derived classes there is no need to declare special\nmember functions, especially virtual destructor.	text	txt
2477	2	class Base\n{\npublic:\n    virtual void do_something() const = 0;\n    virtual ~Base() = default;\n};	text	txt
2477	3	class Derived: public Base\n{\npublic:\n    virtual void do_something() const override;\n    virtual ~Derived() = default; // BAD, redundant, disables move\n};	code	txt
2478	1	- Constructors that initialize members from parameters, for which move\n  operations are cheap, should take the argument by value and move it to the\n  member.\n- Constructors that initialize members from parameters, for which move\n  operations take a significant amount of time, should be overloaded for move\n  semantics for best performance.\n- In general, creating and initializing new values from parameters, for which\n  move operations are cheap, should take the arguments by value and move.\n  However, do not take by value and move to update/modify existing values.	text	txt
2479	1	A getter returning by value is safe but each time we call it we might make a\ncopy:	text	txt
2479	2	class Recipients\n{\nprivate:\n    std::vector<std::string> _names;\npublic:\n    std::vector<std::string> names() const {\n        return _names;\n    }\n};	code	txt
2479	3	A getter returning by reference is fast but unsafe because the caller has to\nensure that the object the returned reference refers to lives long enough.	text	txt
5249	2	which <command>	code	sh
2479	4	class Recipients\n{\nprivate:\n    std::vector<std::string> _names;\npublic:\n    std::vector<std::string> const& names() const {\n        return _names;\n    }\n};	code	txt
2479	5	This will fail when object is an rvalue reference:	text	txt
2479	6	for (std::string name: returnRecipients().names()) // undefined behavior\n{\n    if (name == "manager")\n        ...\n};	code	txt
2479	7	Using move semantics we can return by reference if it is safe to do so, and\nreturn by value if we might run into lifetime issues:	text	txt
2479	8	class Recipients\n{\nprivate:\n    std::vector<std::string> _names;\npublic:\n    std::vector<std::string> names() && { // where we no longer need the value\n        return std::move(_names); // we steal and return by value\n    }\n    std::vector<std::string> const& names() const& { // in all other cases\n        return _names; // we give access to the member\n    }\n};	code	txt
2479	9	We overload the getter with different reference qualifiers in the same way as\nwhen overloading a function for `&&` and `const&` parameters.	text	txt
2479	10	The version with the `&&` qualifier is used when we have an object where we\nno longer need the value, an object that is about to die or that we have\nmarked with `std::move()`.	text	txt
2479	11	The version with `const&` qualifier is used in all other cases. It is only\nthe fallback if we cannot take the `&&` version. Thus this function is used\nif we have an object that is not about to die or marked with `std::move()`.	text	txt
2479	12	We now have both good performance and safety.	text	txt
2480	1	Since C++98 we can overload member functions for implementing a const and\nnon-const version.	text	txt
2480	2	class C\n{\npublic:\n    void foo();\n    void foo() const;\n};	code	txt
2480	3	Now with move semantics we have new ways to overload functions with\nqualifiers because we have different reference qualifiers.	text	txt
2480	4	class C\n{\npublic:\n    void foo() const&;\n    void foo() &&;\n    void foo() &;\n    void foo() const&&;\n};	text	txt
2480	5	int main()\n{\n    C x;\n    x.foo();                // foo() &\n    C{}.foo();              // foo() &&\n    std::move(x).foo();     // foo() &&	text	txt
2480	6	    const C cx;\n    cx.foo();               // foo() const&\n    std::move(cx).foo();    // foo() const&&\n}	code	txt
2480	7	Usually, we have only two or three of these overloads, such as using `&&` and\n`const&` (and `&`) for getters.	text	txt
2481	1	Overloading for both reference and value qualifiers is not allowed.	text	txt
2481	2	class C\n{\npublic:\n    void foo() &&;\n    void foo() const; // ERROR\n};	code	txt
2482	1	Reference qualifiers allow us to implement functions differently when they\nare called for objects of a specific value category.	text	txt
2482	2	Although we do have this feature, it is not used as much as it could be. In\nparticular, we should use it to ensure that operations that modify objects\nare not called for temporary objects that are about to die.	text	txt
2483	1	The assignment operators for strings are declared as follows:	text	txt
2483	2	namespace std {\n    template<typename charT, ...>\n    class basic_string {\n    public:\n        constexpr basic_string& operator=(const basic_string& str);\n        constexpr basic_string& operator=(basic_string&& str) noexcept(...);\n        constexpr basic_string& operator=(const charT* s);\n    };\n}	code	txt
2483	3	This enables accidental assignment of a new value to a temporary string:	text	txt
2483	4	std::string getString();\ngetString() = "sample";     // Okay\nfoo(getString() = "");      // Okay, accidental assignment instead of comparison	code	txt
2483	5	Accidental assignments can be prevented by using reference qualifiers:	text	txt
2483	6	namespace std {\n    template<typename charT, ...>\n    class basic_string {\n    public:\n        constexpr basic_string& operator=(const basic_string& str) &;\n        constexpr basic_string& operator=(basic_string&& str) & noexcept(...);\n        constexpr basic_string& operator=(const charT* s) &;\n    };\n}	code	txt
2483	7	Code like this will no longer compile:	text	txt
2483	8	std::string getString();\ngetString() = "sample";     // Error\nfoo(getString() = "");      // Error	code	txt
2823	4	template<typename T>\nvoid Stack<T>::pop() { }	code	txt
2483	9	In general, you should do this for every member function that might modify an object.	text	txt
2483	10	class MyType {\n    public:\n        // disable assigning value to temporary objects\n        MyType& operator=(const MyType&) & = default;\n        MyType& operator=(MyType&&) & = default;	text	txt
2483	11	        // enable these because they were disabled by assignment operators\n        MyType(MyType const&) = default;\n        MyType(MyType&&) = default;\n};	code	txt
2484	1	A moved-from object is neither partially nor fully destroyed. The destructor will be called eventually, therefore the destructor has to run smoothly. C++ standard specifies that moved-from objects are in a valid but unspecified state, meaning that it should be safe to work with objects as far as we do not make assumptions on its value.	text	txt
2485	1	You always have to be able to destroy the moved-from state objects, to assign a new value to them, and copy, move, or assign them to other objects.	text	txt
2486	1	Because we always destroy an object at the end of its lifetime, the minimum guarantee we always have to give for moved-from state is that calling the destructor is well-defined, but more guarantees should be given. For C++ standard library, additional operations like copying and assigning objects of the same type are often enough.	text	txt
2486	2	destructing, copying, assigning	text	list
2486	3	When supporting assignment, consider all possible ways of assignment should be supported based on your object:	text	txt
2486	4	s = "sample";\ns.assign(sc);\ns.clear();\ns.reset();\nstd::cin >> s;\nstd::getline(std::cout, s);	code	cpp
2487	1	Invariants are the guarantees that apply to all of the objects that can be created. With invariants, you can call any operation that has no constraint or precondition and the effect or result of this call is as specified for any other object of this type.	text	txt
2487	2	s2 = std::move(s);\ns.size(); // works\nstd::for_each(s.begin(), s.end(), []{}); // works\nstd::cout << s; // works\nstd::cout << s.c_str(); // works\ns = "new value"; // works\ns += "postfix"; // works	code	cpp
2735	1	Some devices don't have the capability of introducing themselves to the\nkernel. This is where the device developers should write device descriptions\nin a device tree source file to let the kernel know how to deal with this\ndevice.	text	txt
2735	2		code	txt
2750	3	Arguments can be given to the modules after module name.	text	txt
2751	1	sudo modprobe <module>	code	txt
2488	1	When a valid state of an object always needs resources such as memory, having only partially supported state might be better to make move operations cheaper. Ideally, a moved-from state that does not support all operations should be detectable. The object should know this state and provide member functions to check for this state. Moved-from objects might also refuse to execute operations not supported in this state. However, corresponding checks might cost performance in the general case.	text	txt
2488	2	std::future f2 = std::move(f);\nf.valid(); // false	code	cpp
2489	1	- Do all necessary actions required in the destructor to avoid breaking invariants\n- Implement move operator to deal with the problem\n- Disable move semantics	text	txt
2490	1	- Fix the move operations to bring the moved-from objects into a state that do not break the invariants\n- Disable move semantics\n- Relax the invariants by changing the functions using this type to deal with new possible states\n- Document and provide a member function to check for the state of broken invariants	text	txt
2491	1	When an exception is thrown in the middle of the reallocation of the vector\nthe C++ standard library guarantees to roll back the vector to its previous\nstate. However, when using move semantics if an exception is thrown during\nthe reallocation, we might not be able to roll back. The elements in the new\nmemory have already stolen the values of the elements in the old memory. The\nfinal decision was to use move semantics on reallocation only when the move\nconstructor of the element types guarantees not to throw.	text	txt
2491	2	#include <string>\n#include <vector>\n#include <utility>\n#include <iostream>	text	txt
2491	3	class Person\n{\n    std::string name;\npublic:\n    Person(char const* n) : name{n} { }\n    Person(Person const& p): name{p.name} { std::cout << "COPY " << name << '\\\\n'; }\n    Person(Person&& p): name{std::move(p.name)} { std::cout << "MOVE " << name << '\\\\n'; }\n};	text	txt
2491	4	int main()\n{\n    std::vector<Person> artists{\n        "Wolfgang Amadeus Mozart",\n        "Johann Sebastian Bach",\n        "Ludwig van Beethoven"};	text	txt
2491	5	    std::cout << "Capacity: " << artists.capacity() << '\\\\n';\n    artists.push_back("Pjotr Iljitsch Tschaikowski");\n}	code	txt
2491	6	Add exception handling guarantee by adding conditional `noexcept` to move operators.	text	txt
2491	7	Person(Person&& p) noexcept(std::is_nothrow_move_constructible_v<std::string>\n        && noexcept(std::cout << name)\n   : name{std::move(p.name)} { std::cout << "MOVE " << name << '\\\\n'; }	code	txt
2491	8	This still fails because the move constructor for strings does guarantee not\nto throw but the output operator does not.	text	txt
2491	9	Person(Person&& p) = default;	code	txt
2491	10	The compiler will detect `noexcept` guarantees for you if you do not\nimplement the move constructor yourself. For classes where all members\nguarantee not to throw in the move constructor, a generated or defaulted move\nconstructor will give the guarantee as a whole.	text	txt
2492	1	The `noexcept` condition must be a compile-time expression that yields a value convertible to `bool`.	text	txt
2493	1	You cannot overload functions that have only different `noexcept` conditions.	text	txt
2494	1	In class hierarchies, a `noexcept` condition is part of the specified\ninterface. Overwriting a base class function that is `noexcept` with a\nfunction that is not `noexcept` is an error (but not the other way around).	text	txt
2494	2	class Base\n{\npublic:\n    ...\n    virtual void foo(int) noexcept;\n    virtual void foo(int); // ERROR: overload on different noexcept clause only\n    virtual void bar(int);\n};	text	txt
2494	3	class Derived : public Base\n{\npublic:\n    ...\n    virtual void foo(int) override; // ERROR: override giving up the noexcept guarantee\n    virtual void bar(int) noexcept; // OK (here we also guarantee not to throw)\n};	code	txt
2494	4	However, for non-virtual functions, derived-class members can hide base-class\nmembers with a different `noexcept` declaration:	text	txt
2494	5	class Base\n{\npublic:\n    ...\n    void foo(int) noexcept;\n};	text	txt
2494	6	class Derived : public Base\n{\npublic:\n    ...\n    void foo(int); // OK, hiding instead of overriding\n};	code	txt
2495	1	In that case, the operations guarantee not to throw if the corresponding\noperations called for all bases classes and non-`static` members guarantee\nnot to throw.	text	txt
2495	2	#include <iostream>\n#include <type_traits>	text	txt
2495	3	class B\n{\n    std::string s;\n};	text	txt
2515	1	For types, we can use names in `decltype()`, but we can also pass expressions to get value category as well. Therefore, we should always be careful not to leave the names without parentheses.	text	txt
2971	2	if("/a///b/c" PATH_EQUAL "/a/b/c")	code	cmake
2495	4	int main()\n{\n    std::cout << std::boolalpha;\n    std::cout << std::is_nothrow_default_constructible<B>::value << '\\\\n'; // true\n    std::cout << std::is_nothrow_copy_constructible<B>::value << '\\\\n'; // false\n    std::cout << std::is_nothrow_move_constructible<B>::value << '\\\\n'; // true\n    std::cout << std::is_nothrow_copy_assignable<B>::value << '\\\\n'; // false\n    std::cout << std::is_nothrow_move_assignable<B>::value << '\\\\n'; // true\n}	code	txt
2496	1	The noexcept condition is even generated when these special member functions\nare user-declared with `=default`.	text	txt
2496	2	class B\n{\n    std::string s;\npublic:\n    B(const B&) = default;             // noexcept condition automatically generated\n    B(B&&) = default;                  // noexcept condition automatically generated\n    B& operator= (const B&) = default; // noexcept condition automatically generated\n    B& operator= (B&&) = default;      // noexcept condition automatically generated\n};	code	txt
2497	1	When you have a defaulted special member function you can explicitly specify\na different `noexcept` guarantee than the generated one.	text	txt
2497	2	class C\n{\n    ...\npublic:\n    C(const C&) noexcept = default; // guarantees not to throw (OK since C++20)\n    C(C&&) noexcept(false) = default; // specifies that it might throw (OK since C++20)\n    ...\n};	code	txt
2497	3	Before C++20, if the generated and specified `noexcept` condition contradict,\nthe defined function was deleted.	text	txt
2498	1	Types are not the only matter when compiling expressions or statements, because not only types should fit, but the way values are used should make sense. For exacmple:	text	txt
2498	2	int number = 42; // OK\n42 = number; // ERROR	code	cpp
2499	1	Statements could either be *lvalue* or *rvalue* because it would only make sense to have lvalues on the left-hand side of an assignment and rvalues on the right-hand side. Besides assignment, taking the address of lvalues is only possible, but not rvalues.	text	txt
2499	2	int x;\n\nx = 42; // OK\n42 = x; // ERROR\n\nint* p1 = &x; // OK\nint* p2 = &42; // ERROR	code	cpp
2500	1	Types behave different than regular lvalue and rvalue categories when they are const.	text	txt
2500	2	const int c = 42; // OK: lvalue\nc = 42; // ERROR: should not be lvalue\nconst int* p = &c; // OK: lvalue	code	cpp
2500	3	The only operation that cannot be applied on an lvalue with const qualification is to be on the left side of assignment. So the decision in C was that type declared as const is still lvalue, but the meaning of lvalue and rvalue changed so that lvalue means **locator value** that is an object that has a specified location in the program, and rvalue as **readonly value**.	text	txt
2501	1	The behavior of fundamental data types and other types are different in case of moved-from state:	text	txt
2501	2	std::string s;\nstd::move(s) = "sample"; // OK: behaves like an lvalue\nauto ps = &std::move(s); // ERROR: behaves like an rvalue\n\nint i;\nstd::move(i) = 42; // ERROR\nauto pi = &std::move(i); // ERROR	code	cpp
5558	2	cmake -G Ninja -S ftxui -B build -D CMAKE_BUILD_TYPE=Release -D FTXUI_BUILD_MODULES=ON\ncmake --build build	code	sh
2501	3	A moved-from object should still behave like an lvalue by allowing you to modify its value, but you should not be able to take the address. A new value category **xvalue** (expiring value) was therefore introduced to specify the rules for objects explicitly marked as *I no longer need the value here*. However, most of the rules for rvalues also apply to xvalues. Therefore, the former primary value category rvalue became a composite value category that now represents both new primary value categories **prvalue** (pure readable value: for everything that was an rvalue before) and xvalue.	text	txt
2502	1	An expression that is just the name of a variable, function, or data member, except a plain value member of an rvalue:	text	txt
2502	2	int y = x; // x is an lvalue	code	cpp
2502	3	An expression that is just a string literal:	text	txt
2502	4	char const* s = "example"; // "example" is an lvalue	code	cpp
2502	5	The return value of a function if it is declared to return an lvalue reference (Type&):	text	txt
2502	6	std::ostream& operator<<(std::ostream& stream, T const& object); // returned std::ostream& is an lvalue	code	cpp
2502	7	Any reference to a function, even when marked with `std::move()`:	text	txt
2502	8	std::for_each(std::begin(v), std::end(v), f); // f is lvalue	code	cpp
2502	9	The result of the built-in unary `*` operator (dereferencing operator):	text	txt
2502	10	int x = *p; // *p is lvalue	code	cpp
2503	1	Expressions that consist of a built-in literal that is not a string literal:	text	txt
2503	2	int x = 42; // 42 is prvalue	code	cpp
2503	3	The return type of a function if it is declared to return by value (Type):	text	txt
2503	4	std::string log(); // std::string is rvalue	code	cpp
2503	5	The result of the built-in unary `&` operator (address-of operator):	text	txt
2503	6	int y = &x; // &x is prvalue	code	cpp
2503	7	A lambda expression:	text	txt
2503	8	auto l = [](){}; // [](){} is prvalue	code	cpp
2504	1	The result of making an object with `std::move()`:	text	txt
2504	2	std::string s2 = std::move(s); // std::move(s) is xvalue	code	cpp
2504	3	A cast to an rvalue reference of an object type, but not a function type:	text	txt
2504	4	std::string s2 = static_cast<std::string&&>(s); // static_cast<std::string&&>(s) is xvalue	code	cpp
2504	5	The returned value of a function if it is declared to return an rvalue reference (Type&&):	text	txt
2504	6	class basic_type\n{\n    std::string value;\n\npublic:\n    std::string&& get() const&&; // std::string&& is xvalue\n};	code	cpp
2504	7	A non-static value member of an rvalue:	text	txt
2504	8	struct basic_type\n{\n    std::string value;\n};\n\nbasic_type get_type() { return basic_type{"example"}; } // returned basic_type is xvalue\n\nstd::string value = get_type();	code	cpp
2505	1	C++17 clarified the semantic meaning of value categories by two major kinds of experssions:	text	txt
2505	2	- **glvalue**: expressions for locations of long-living objects or functions\n- **prvalues**: expressions for short-living values for initializations	text	txt
2505	3	An **xvalue** is then considered a special location, representing a long-living object whose values are no longer needed.	text	txt
2506	1	Prior to C++17, prvalues could not be passed around without either copy or move support.	text	txt
2531	1	Member function of an object might have specific overloads for move semantics using reference qualifiers. In that case, `std::forward<>()` can be used to call the member function having an rvalue reference qualifier when we no longer need the value of the object:	text	txt
2506	2	class initializing_type\n{\npublic:\n    initializing_type();\n    initializing_type(initializing_type const&) = delete; // neither copyable nor movable\n};\n\ninitializing_type create()\n{\n    return initializing_type{}; // prior to C++17 always created a temporary\n    // since C++17 no temporary object is created\n}\n\nvoid take(initializing_type const& i) { }\n\nauto i = create(); // OK since C++17 (error prior to C++17 due to lack of copy/move ctor)\n\ntake(create()); // OK since C++17 (error prior to C++17 due to lack of copy/move ctor)	code	cpp
2506	3	With generalization of categories in C++17, we can now pass around prvalues by value as unnamed initial values even if no valid copy or move constructor is defined as long as we do not need an object with a location.	text	txt
2506	4	C++17 then introduces new term *materialization* (of an unnamed temporary) for the moment a prvalue becomes a temporary object. Thus, a temporary materialization conversion is a prvalue to xvalue conversion.	text	txt
2506	5	Any time a prvalue is used where a glvalue (lvalue or xvalue) is expected, a temporary object is created an initialized with the prvalue and the prvalue is replaced by an xvalue that designates the temporary object.	text	txt
2506	6	void f(const X& p); // accepts any expression of any value category but expects a glvalue	code	cpp
2506	7	f(X{}); // creates a temporary prvalue and passes it materialized as an xvalue	code	cpp
2507	1	All expressions that are references to functions are lvalues.	text	txt
2507	2	void f(int) { }	code	cpp
2507	3	void(&flref)(int) = f; // lvalue	code	cpp
2507	4	void(&&frref)(int) = f; // lvalue	code	cpp
2507	5	auto& r = std::move(f); // okay: r is lvalue	code	cpp
2507	6	In contrast to types of objects, we can bind non-const lvalue reference to a function marked with `std::move()` because a function marked with `std::move()` is still an lvalue.	text	txt
2508	1	In general, value categories of data members are as follows:	text	txt
5250	1	whereis -b -g <glob>	code	sh
2508	2	- Data members of lvalues are lvalues\n- Reference and static data members of rvalues are lvalues\n- Plain data members of rvalues are xvalues	text	txt
2508	3	std::pair<std::string, std::string&> f();\nvoid g(std::string&& s);\n\ng(f().first); // moves because first is xvalue\ng(f().second); // copies because second is lvalue\ng(std::move(f().second)); // moves	code	cpp
2508	4	This rule reflects that reference or static members are not part of an object.	text	txt
2508	5	When the object is lvalue, there are two options to mark a member with `std::move()`:	text	txt
2508	6	std::move(obj).member;	code	cpp
2508	7	std::move(obj.member);	code	cpp
2508	8	In case the object is lvalue and member is a plain data member, we can mark the object itself with `std::move()`:	text	txt
5558	3	import ftxui;	code	cpp
2508	9	std::pair<std::string, std::string> p{"some", "message"};\n\ng(std::move(p).first);\ng(std::move(p).second);	code	cpp
2508	10	It may be strange to use the moved-from object to get access to the second member, but considering that we know the other member still can be used there is no problem using this access in move constructors.	text	txt
2508	11	In case the object is lvalue and member is a reference or static different rules apply. A reference or static member of an rvalue is still lvalue. Saying "*I no longer need the value of the object*" should not imply "*I no longer need the value of a member that is not part of the object*".	text	txt
2508	12	Using `std::move()` on an lvalue object having static or reference member has no effect, but applying on the members has usual effect:	text	txt
2508	13	std::vector v{};\nstruct x{ static std::string s; std::string& r; };	code	cpp
2508	14	v.push_back(std::move(x).s); // copies\nv.push_back(std::move(x).r); // copies	code	cpp
2508	15	v.push_back(std::move(x.s)); // moves\nv.push_back(std::move(x.r)); // moves	code	cpp
2508	16	In generic code where you may not know whether members are static or references, marking the object with `std::move()` is less dangerious:	text	txt
2508	17	v.push_back(std::move(x).s); // move value, copy reference/static\nv.push_back(std::move(x).r); // move value, copy reference/static	code	cpp
2509	1	C++98/C++03 define that you can assign or pass an rvalue to a const lvalue reference but not to a non-const lvalue reference:	text	txt
2509	2	std::string f();\nvoid g(std::string const&);\nvoid h(std::string&);	code	cpp
2509	3	const std::string& clref{f()}; // OK\nstd::string& lref{f()}; // ERROR	code	cpp
2509	4	g(std::string{}); // OK\nh(std::string{}); // ERROR	code	cpp
2510	1	class X { };\nX v{};\nconst X c{};	code	cpp
2510	2	|Call|`f(X&)`|`f(X const&)`|`f(X&&)`|`f(X const&&)`|\n|`f(v)`|`1`|`2`|`-`|`-`|\n|`f(c)`|`-`|`1`|`-`|`-`|\n|`f(X{})`|`-`|`3`|`1`|`2`|\n|`f(std::move(v))`|`-`|`3`|`1`|`2`|\n|`f(std::move(c))`|`-`|`2`|`-`|`1`|	text	txt
2510	3	This table will be extended with universal/forwarding references.	text	txt
2511	1	There is no specific priority between call-by-value and call-by-reference. Declaring all overloads are allowed, but any matching declaration taking the argument by reference results in ambiguity. Therefore, you should only take an argument either by value or by reference but never both.	text	txt
2512	1	Sometimmes when passing an lvalue like string literals to a function taking rvalues work because of implicit conversions from lvalue string literal to rvalue string:	text	txt
2512	2	void f(std::string&&); // forward declaration\n\nf("sample"); // OK although lvalue\nf(std::string{"sample"}); // OK converted to prvalue	code	cpp
2513	1	Considering that move semantics is passed through, when we use an rvalue parameter inside a function, we are dealing with an object with name, thus an lvalue and only lvalue rules apply.	text	txt
2513	2	void f(std::string&& s)\n{\n    f(s); // ERROR: passing an lvalue to an rvalue reference\n}	code	cpp
2513	3	We have to mark the value with `std::move()` to pass again:	text	txt
2513	4	void f(std::string&& s)\n{\n    f(std::move(s)); // OK: passing an xvalue\n}	code	cpp
2514	1	void f(std::string&& s)\n{\n    std::cout << std::boolalpha << std::is_same<decltype(s), std::string>::value; // false\n    std::cout << std::boolalpha << std::is_same<decltype(s), std::string&>::value; // false\n    std::cout << std::boolalpha << std::is_same<decltype(s), std::string&&>::value; // true\n\n    std::cout << std::boolalpha << std::is_reference<decltype(s)>::value; // true\n    std::cout << std::boolalpha << std::is_lvalue_reference<decltype(s)>::value; // false\n    std::cout << std::boolalpha << std::is_rvalue_reference<decltype(s)>::value; // true\n}	code	cpp
2549	2	    // copying disabled:\n    MoveOnly(const MoveOnly&) = delete;\n    MoveOnly& operator= (const MoveOnly&) = delete;	text	txt
2515	2	void f(std::string&& s)\n{\n    std::cout << std::boolalpha << std::is_same<decltype((s)), std::string>::value; // false\n    std::cout << std::boolalpha << std::is_same<decltype((s)), std::string&>::value; // true\n    std::cout << std::boolalpha << std::is_same<decltype((s)), std::string&&>::value; // false\n\n    std::cout << std::boolalpha << std::is_reference<decltype((s))>::value; // true\n    std::cout << std::boolalpha << std::is_lvalue_reference<decltype((s))>::value; // true\n    std::cout << std::boolalpha << std::is_rvalue_reference<decltype((s))>::value; // false\n}	code	cpp
2515	3	The fact that for decltype, it makes a difference when we put additional parentheses around a passed\nname, will also have significant consequences when using `decltype(auto)`.	text	txt
2516	1	1. There should be a template parameter.\n2. The parameter should be declared with two ampersands.\n3. Inside the function definition, parameter should be forwarded.	text	txt
2516	2	#include <utility>	text	txt
2516	3	template<typename T>\nvoid do_something(T&& x)\n{\n    do_special_task(std::forward<T>(x));\n}	code	txt
2517	1	An **rvalue reference** of a **function template parameter** not qualified\nwith `const` or `volatile` does not follow the rules of ordinary rvalue\nreferences, but is called a **universal reference** instead.	text	txt
2517	2	Universal references can bind to objects of all types and value categories.	text	txt
2517	3		code	txt
2518	1	The following is the rule for binding all references.	text	txt
2518	2	class X {};\nX v;\nconst X c;	text	txt
2518	3	void f(const X&);\nvoid f(X&);\nvoid f(X&&);\nvoid f(const X&&);\ntemplate<typename T>\nvoid f(T&&);	code	txt
2518	4	|Call|`f(X&)`|`f(const X&)`|`f(X&&)`|`f(const X&&)`|`f(T&&)`|\n|---|---|---|---|---|---|---|\n|`f(v)`|1|3|-|-|2|\n|`f(c)`|-|1|-|-|2|\n|`f(X{})`|-|4|1|3|2|\n|`f(move(v))`|-|4|1|3|2|\n|`f(move(c))`|-|3|-|1|2|	text	txt
5221	1	The only log that cannot annotate files is `debug`.	text	md
2519	1	Like for `std::move()`, the semantic meaning of `std::forward<>()` is *I no\nlonger need this value here*, with the additional benefit that we preserve\nthe type, including constness and the value category.	text	txt
2520	1	template<typename T>\nvoid call_foo(T&& arg)\n{\n    foo(std::forward<T>(arg));\n}	text	txt
2520	2	template<typename T1, typename T2>\nvoid call_foo(T1&& arg1, T2&& arg2)\n{\n    foo(std::forward<T1>(arg1), std::forward<T2>(arg2));\n}	code	txt
2521	1	template<typename... Ts>\nvoid call_foo(Ts&&... args)\n{\n    foo(std::forward<Ts>(args)...);\n}	code	txt
2522	1	1. Declare returned value as `auto&&`, a universal reference without a template parameter.\n2. Forward the returned value.	text	txt
2522	2	process(compute(t)); // OK, perfect	code	txt
2522	3	Similarly, we can get a universal reference and forward it:	text	txt
2522	4	auto&& value = compute(t);\nprocess(std::forward<decltype(value)>(value));	code	txt
2523	1	Prior to C++20, use `::value` static member instead of `_v` suffix.	text	txt
2523	2	!std::is_reference_v<decltype((expr))>; // prvalue	code	cpp
2523	3	std::is_lvalue_reference_v<decltype((expr))>; // lvalue	code	cpp
2523	4	std::is_rvalue_reference_v<decltype((expr))>; // xvalue	code	cpp
2523	5	!std::is_lvalue_reference_v<decltype((expr))>; // rvalue	code	cpp
2524	1	To forward an object that is passed with move semantics to a function, it not only has to be bound to an rvalue reference, you have to use `std::move()` again to forward its move semantics to another function.	text	txt
2524	2	class X { };\nvoid f(X const&);\nvoid f(X&);\nvoid f(X&&);	code	cpp
2524	3	X v;\nconst X c;\n\nf(v);               // calls f(X&)\nf(c);               // calls f(X const&)\nf(X{});             // calls f(&&)\nf(std::move(v));    // calls f(&&)\nf(std::move(c));    // calls f(X const&)	code	cpp
2524	4	void g(X const& arg) { f(arg); }        // calls f(X const&)\nvoid g(X& arg) { f(arg); }              // calls f(X&)\nvoid g(X&& arg) { f(std::move(arg)); }  // calls f(X&&)	code	cpp
2524	5	g(v);               // calls f(X&)\ng(c);               // calls f(X const&)\ng(X{});             // calls f(X&&)\ng(std::move(v));    // calls f(X&&)\ng(std::move(c));    // calls f(X const&)	code	cpp
2524	6	The important point to remember here is that an rvalue passed to an rvalue reference becomes an lvalue when used, which means that we need `std::move()` to pass it as an rvalue again..	text	txt
2525	1	To perfectly forward in generic code, we would always need to overload for each parameter, resulting in 9 overloads for 2 parameters, 27 overloads for 3 parameters. C++11 introduced perfect forwarding as a workaround.	text	txt
2525	2		code	cpp
2526	1	1. Take the call parameter as a pure rvalue reference without `const` or `volatile`\n2. The type of the parameter has to be a template parameter of the function\n3. When forwarding the parameter to another function, use `std::forward<>()` declared in `<utility>`	text	txt
2526	2	template<typename T>\nvoid g(T&& arg)\n{\n    f(std::forward<T>(arg));    // equivallent to f(std::move(arg)) for passed rvalues\n}	code	cpp
2526	3	template<typename T1, typename T2>\nvoid g(T1&& arg1, T2&& arg2)\n{\n    f(std::forward<T1>(arg1), std::forward<T2>(arg2));\n}	code	cpp
2527	1	template<typename... Ts>\nvoid g(Ts&&... args)\n{\n    f(std::forward<Ts>(args)...);\n}	code	cpp
2527	2	We do not call `std::forwad<>()` once for all arguments, we call it for each argument individually. Therefore, we have to place the ellipsis behind the end of the `std::forward<>()` expression instead of directoy behind `args`.	text	txt
2528	1	An rvalue reference of a function template parameter not qualified with `const` or `volatile` does not follow the rules of ordinary rvalue references. Universal or forwarding reference bind to objects of all types and value categories.	text	txt
2528	2	template<typename T> void f(T&& arg);	code	cpp
2528	3	X v;\nconst X c;\n\nf(v);               // OK, arg is X&\nf(c);               // OK, arg is X const&\nf(X{});             // OK, arg is X&&\nf(std::move(v));    // OK, arg is X&&\nf(std::move(c));    // OK, arg is X const&	code	cpp
2529	1	A generic rvalue reference with `const` or `volatile` is not a universal reference, and it will only take rvalues:	text	txt
2529	2	template<typename T> void f(T const&& arg);\nconst X c;\n\nf(c);               // ERROR: c is not an rvalue\nf(std::move(c));    // OK, arg is const&&	code	cpp
2530	1	`std::forward<>()` is a `std::move()` only for passed rvalues. Just like for `std::move()`, the semantic meaning of `std::forward<>()` is *I no longer need this value here*, but additionally it preserves the type and constness and the value category of the object the passed universal reference binds to.	text	txt
2530	2		code	cpp
2972	1	cmake_path()	code	cmake
2531	2	class Message\n{\nprivate:\n    std::string content;\n\npublic:\n    std::string read() &&\n    {\n        return std::move(content);  \n    }\n\n    std::string const& read() const&\n    {\n        return content;\n    }\n};	code	cpp
2531	3	template<typename T>\nvoid f(T&& arg)\n{\n    arg.read();                     // calls Message::read() const&\n    std::forward<T>(arg).read();    // calls Message::read() &&\n}	code	cpp
2531	4	After using `std::forward<>()`, object is in a valid but unspecified state. Make sure you no longer use the object.	text	txt
2532	1	class X { };\nX v;\nconst X c;	code	cpp
2532	2	|Call|`f(X&)`|`f(X const&)`|`f(X&&)`|`f(X const&&)`|`f(T&&)`|\n|`f(v)`|1|3|-|-|2|\n|`f(c)`|-|1|-|-|2|\n|`f(X{})`|-|4|1|3|2|\n|`f(std::move(v))`|-|4|1|3|2|\n|`f(std::move(c))`|-|3|-|1|2|	text	txt
2532	3	An important point to notice here is that a perfect match is always better, but the need to convert the type such as making it `const` or converting an rvalue to an lvalue is a worse match than just instantiating the function template for the exact type.	text	txt
2533	1	The fact that a universal reference is a better match than a type conversion in overload resolution has a very nasty side effect.	text	txt
2533	2	class X\n{\n    X(X const&) { }\n    X(X&&) { }\n    template<typename T> X(T&&) { }\n};\n\nX v;\nconst X c;	code	cpp
2533	3	A constructor that takes a single universal reference is a better match than the copy constructor if passing a non-const object:	text	txt
2533	4	X x{c};             // OK: calls copy constructor\nX x{v};             // OOPS: calls universal reference	code	cpp
2533	5	A constructor that takes a single universal reference is a better match than the move constructor if passing a const object:	text	txt
2533	6	X x{std::move(v)};  // OK: calls move semantics\nX x{std::move(c)};  // OOPS: calls universal reference	code	cpp
2534	1	It is better to avoid implementing generic constructors that declare the first parameter as a universal reference and can be called for one argumnet of an arbitrary type.	text	txt
2534	2	The other workaround is to constrain the constructor in a way that it is disabled if the passed is convertible to the type of the class.	text	txt
2534	3	class X\n{\npublic:\n    // prior to C++20\n    template<typename T, typename = typename std::enable_if<!std::is_same<typename std::decay<T>::type, X>::value>::type>\n    X(T&&) { }\n};	code	cpp
2534	4	class X\n{\npublic:\n    // C++20 onwards\n    template<typename T>\n    requires(!std::is_same_v<std::remove_cvref_t<T>, X>)\n    X(T&&) { }\n};	code	cpp
2535	1	Since C++14, we have to declare the universal referenes with `auto&&`:	text	txt
2535	2	auto g = [](auto&& arg) { f(std::forward<T>(arg); };	code	cpp
2535	3	Since C++20 we can use template parameters in lambdas:	text	txt
2535	4	auto g = []<typename T>(T&& arg) { f(std::forward<T>(arg); };	code	cpp
2536	1	A universal reference is the only way we can bind a reference to objects of any value category and still preserve wether or not it is `const`. The only other reference that binds to all objects, `const&`, loses information about whether the passed argument is `const` or not. Another use case for universal references is to forward constness, meaning that if we want to avoid overloading but want to have different behavior for `const` and non-`const` arguments and support all value categories, we have to use universal references.	text	txt
2536	2	void iterate(std::string::iterator beg, std::string::iterator end);\nvoid iterate(std::string::const_iterator beg, std::string::const_iterator end);\n\ntemplate<typename T>\nvoid process(T&& x)\n{\n    iterate(x.begin(), x.end());\n}	code	cpp
2536	3	std::string v{};\nconst std::string c{};\n\nprocess(v);             // x binds to non-const lvalue,        iterator passed\nprocess(c);             // x binds to     const lvalue,  const_iterator passed\nprocess(std::string{}); // x binds to non-const prvalue,       iterator passed\nprocess(std::move(v));  // x binds to non-const xvalue,        iterator passed\nprocess(std::move(c));  // x binds to     const xvalue,  const_iterator passed	code	cpp
2536	4	We did not use perfect forwarding inside `process()`, so we can use `x` even after iterating over all elements. This is in contrast to using `std::forward<>()` where objects will be in a moved-from state.	text	txt
2537	1	template<typename T>\nvoid process(T&& x)\n{\n    iterate(std::forward<T>(x).begin(), std::forward<T>(x).end());\n}	code	cpp
2537	2	Claiming that two different locations of the same object is no longer needed is a source of trouble because the location that steals last might not use the right value.	text	txt
2537	3	We should never use `std::move()` or `std::forward<>()` twice for the same object, unless the object is initialized before the second use.	text	txt
2537	4	Using `std::forward<>()` only once here is also a source of problem because we have no guaranteed evaluation order for arguments of function calls:	text	txt
2537	5	template<typename T>\nvoid process(T&& x)\n{\n    iterate(x.begin(), std::forward<T>(x).end());\n}	code	cpp
2537	6	In this example, using `std::forward<>()` once or twice might work because `begin()` and `end()` do not steal the value from the passed object, but in general it is an error unless you know exactly how this information is used.	text	txt
2538	1	For a non-const object `v` and a const object `c` the type `T` and the type of `arg` is deduced as follows:	text	txt
2538	2	|Call|`T`|`arg`|\n|`foo(v)`|`Type&`|`Type&`|\n|`foo(c)`|`Type const&`|`Type const&`|\n|`foo(Type{})`|`Type`|`Type&&`|\n|`foo(std::move(v))`|`Type`|`Type&&`|\n|`foo(std::move(c))`|`Type const`|`Type const&&`|	code	cpp
2538	3	`arg` knows the value and its type including constness. It is an lvalue reference when an lvalue is passed, and an rvalue reference when an rvalue is passed.	text	txt
2538	4	`T` knows the type and has some information about the value category of the passed argument. If an lvalue is passed, `T` is an lvalue reference, otherwise `T` is not a reference.	text	txt
2539	1	It is important to use `std::remove_reference_t<>` or `std::remove_reference::type` prior to C++14 to remove referenceness of a type before we check for its constness using `std::is_const_v<>` or `std::is_const::value` prior to C++17, because a reference to const type is not considered to be const as a whole.	text	txt
2539	2	std::is_const_v<int>                                    // false\nstd::is_const_v<int const>                              // true\nstd::is_const_v<int const&>                             // false\nstd::is_const_v<std::remove_reference_t<int const&>>    // true	code	cpp
2540	1	template<typename T>\nvoid f(T&& arg)\n{\n    if constexpr (std::is_const_v<std::remove_reference_t<T>>)\n    {\n        /* ... */\n    }\n    else\n    {\n        /* ... *\n    }\n}	code	cpp
2549	3	    // moving enabled:\n    MoveOnly(MoveOnly&&) noexcept;\n    MoveOnly& operator= (MoveOnly&&) noexcept;\n};	text	txt
2541	1	template<typename T>\nvoid f(T&& arg)\n{\n    if constexpr (std::is_lvalue_reference_v<T>)\n    {\n        /* passed argument is lvalue, has no move semantics */\n    }\n    else\n    {\n        /* passed argument is rvalue, has move semantics */\n    }\n}	code	cpp
2542	1	A universal reference could have any type including referenceness and constness. For whatever reason, we may want to constrain this function to only take strings without losing constness information. This is not easy because rvalue references and universal references have the same syntax.	text	txt
2542	2	Since C++20, concepts can be used to constrain a universal reference. However, we have to decide which kind of type conversions are allowed:	text	txt
2542	3	template<typename T>\nrequires std::same_as<std::remove_cvref_t<T>, std::string>\nvoid f(T&&)\n{\n    /* no implicit conversions allowed */\n}	code	cpp
2542	4	template<typename T>\nrequires std::convertible_to<T, std::string>\nvoid f(T&&)\n{\n    /* implicit conversions allowed, fits with the usual rules of function calls */\n}	code	cpp
2542	5	template<typename T>\nrequires std::convertible_from<std::string, T>\nvoid f(T&&)\n{\n    /* explicit conversions allowed */\n}	code	cpp
2542	6	Prior to C++11, we can use SFINAE:	text	txt
2542	7	typename<typename T, typename = typename std::enable_if<std::is_same<typename std::decay<T>::type, std::string>::value>::type>\nvoid f(T&&)\n{\n    /* no implicit conversions allowed, strictly limited to std::string */\n}	code	cpp
2542	8	template<typename T, typename = typename std::enable_if<std::is_convertible<T, std::string>::value>::type>\nvoid f(T&&)\n{\n    /* implicit conversions allowed */\n}	code	cpp
2542	9	None of this would be necessary if we had a specific syntax for universal references:	text	txt
2542	10	void f(std::string&&& arg); // assume &&& declares a universal reference	code	cpp
2543	1	Rvalue references of members of generic types:	text	txt
2543	2	template<typename T>\nvoid f(typename T::value_type&& arg);   // not a universal reference\n\ntemplate<typename T>\nvoid insert(T& container, typename T::value_type&& arg)\n{\n    container.push_back(arg);\n}\n\nstd::vector<std::string> v;\ninsert(v, std::string{});   // OK: prvalue is allowed\n\nstd::string s{};\ninsert(v, s);               // ERROR: T::value_type&& is not a universal reference\ninsert(v, std::move(s));    // OK: xvalue is allowed	code	cpp
2543	3	Rvalue references of parameters in class templates:	text	txt
2543	4	template<typename T>\nclass X\n{\n    T&& member;         // not a universal reference\n    void f(T&& arg);    // not a universal reference\n};	code	cpp
2543	5	Rvalue references of parameters in full specializations:	text	txt
2543	6	template<typename T>\nvoid f(T&& arg);\n\ntemplate<>\nvoid f(std::string&& arg);  // not a universal reference	code	cpp
2544	1	According to the C++ specification, if the parameter type is an rvalue reference to a cv-unqualified template parameter (universal reference) and the argument is an lvalue, the type *"lvalue reference to `T`"* is used in place of `T` for type deduction. This is not what we usually expect when we have:	text	txt
2544	2	template<typename T> void f(T&& arg) { }	code	cpp
2544	3	We might assume `T` would just have the type of the passed argument:	text	txt
2544	4	MyType v;\nf(MyType{});        // T is MyType, so arg is MyType&&\nf(std::move(v));    // T is MyType, so arg is MyType&&	code	cpp
2544	5	But this is not the case. According to specification, the type is deduced to an lvalue reference of `T` instead:	text	txt
2544	6	MyType v;\nf(MyType{});        // T is MyType&\nf(std::move(v));    // T is MyType const&	code	cpp
2544	7	But if `arg` is declared as `T&&`, and `T` is deduced to `MyType&` instead, the type of `arg` would be `MyType& &`. The reference collapsing rule applies as follows:	text	txt
2544	8	- `Type& &` becomes `Type&`\n- `Type& &&` becomes `Type&`\n- `Type&& &` becomes `Type&`\n- `Type&& &&` becomes `Type&&`	text	txt
2544	9	Therefore, we will have:	text	txt
2544	10	MyType v;\nf(MyType{});        // T is MyType& && which collapses to MyType&\nf(std::move(v));    // T is MyType& && which collapses to MyType&	code	cpp
2545	1	`std::move()` removes referencesness (& and &&) and converts to the corresponding rvalue reference type:	text	txt
2545	2	static_cast<remove_reference_t<T>&&>(t);	code	cpp
2545	3	`std::reference<>()` only adds rvalue references to the passed type parameter, and reference collapsing apply again:	text	txt
2545	4	static_cast<T&&>(t);	code	cpp
2545	5	- If type `T` is an lvalue reference, `T& &&` collapses to `T&` and remains an lvalue reference.\n- If type `T` is an rvalue reference or not a reference at all, `T&& &&` or `T &&`, we cast the argument to an rvalue reference and the value category becomes xvalue.	text	txt
2546	1	Universal parameter is declared as `T&&`. Therefore, we have to be careful about reference collapsing:	text	txt
2546	2	template<typename T> f(T&& arg) { }	code	cpp
2546	3	std::string s{};\n\nf<std::string>(s);              // ERROR: cannot bind rvalue reference to lvalue\nf<std::string&>(s);             // OK\nf<std::string>(std::move(s));   // OK\nf<std::string&&>(std::move(s)); // OK	code	cpp
2547	1	Due to special rule for deducing template parameters of universal references, when lvalues are passed the type is deduced to an lvalue reference. This might lead to conflicting deductions:	text	txt
2547	2	\n//                       ,------------------------ passed lvalue deduce as std::string&\n//                      /              ,---------- passed lvalue deduce as std::string\n//                      v              v\ntemplate<typename T>\nvoid insert(std::vector<T>& container, T&& element)\n{\n    container.push_back(std::forward<T>(element));\n}	code	cpp
2547	3	std::vector<std::string> v;\nstd::string s;\n\ninsert(v, s);   // ERROR: no matching function call	code	cpp
2547	4	There are two solutions:	text	txt
2547	5	template<typename T>\nvoid insert(std::vector<std::remove_reference<T>::type>& container, T&& element);	code	cpp
2547	6	template<typename C, typename T>\nvoid insert(C& container, T&& element);	code	cpp
2548	1	Due to special rule for deducing template parameters of universal references, when lvalues are passed the type is deduced to an lvalue reference. This rule can help us restrict to an rvalue reference only:	text	txt
2548	2	template<typename T>\nrequires (!std::is_lvalue_reference<T>) // since C++20\nvoid f(T&&) { }	code	cpp
2548	3	template<typename T, typename = typename std::enable_if<!std::is_lvalue_reference<T>::value>::type> // prior to C++20\nvoid f(T&&) { }	code	cpp
2549	1	class MoveOnly\n{\npublic:\n    // constructors:\n    MoveOnly();\n    ...	text	txt
2549	4	std::vector<MoveOnly> coll;\n...\ncoll.push_back(MoveOnly{}); // OK, creates a temporary object, which is moved into coll\n...\nMoveOnly mo;\ncoll.push_back(mo); // ERROR: can’t copy mo into coll\ncoll.push_back(std::move(mo)); // OK, moves mo into coll	code	txt
2549	5	By rule, it would be enough to declare the moving special member function\n(because declaring special move members marks the copying members as\ndeleted). However, explicitly marking the copying special member function\nwith =delete makes the intention more clear.	text	txt
2550	1	To move the value of a move-only element out of the container, simply use\nstd::move() for a reference to the element. For example:	text	txt
2550	2	mo = std::move(coll[0]); // move assign first element (still there with moved-from state)	code	txt
2550	3	However, remember that after this call, the element is still in the container\nwith a moved-from state. Moving out all elements is also possible in loops:	text	txt
2550	4	for (auto& elem : coll)\n{\n    // note: non-const reference\n    coll2.push_back(std::move(elem)); // move element to coll2\n}	code	txt
2550	5	Again: the elements are still in the container with their moved-from state.	text	txt
2551	1	You cannot use `std::initializer_list`s because they are usually passed by\nvalue, which requires copying of the elements:	text	txt
2551	2	std::vector<MoveOnly> coll{ MoveOnly{}, ... }; // ERROR	code	txt
2552	1	You can only iterate by reference over all move-only elements of a container:	text	txt
2552	2	std::vector<MoveOnly> coll;	text	txt
2552	3	for (const auto& elem : coll) { // OK\n    ...\n}	text	txt
2552	4	for (auto elem : coll) { // ERROR: can’t copy move-only elements\n    ...\n}	code	txt
5251	1	which -a <command>	code	sh
2553	1	You can pass and return move-only objects by value provided move semantics is\nused:	text	txt
2553	2	void sink(MoveOnly arg); // sink() takes ownership of the passed argument	text	txt
2553	3	sink(MoveOnly{}); // OK, moves temporary objects to arg\nMoveOnly mo;\nsink(mo); // ERROR: can’t copy mo to arg\nsink(std::move(mo)); // OK, moves mo to arg because passed by value	text	txt
2553	4	MoveOnly source()\n{\n    MoveOnly mo;\n    ...\n    return mo; // moves mo to the caller\n}\nMoveOnly m{source()}; // takes ownership of the associated value/resource	code	txt
5525	1	#include <ftxui/dom/elements.hpp>\n\nint main()\n{\n    ftxui::Element text{ftxui::text("Flashback, for experts like you")};\n    ftxui::bold(text);\n}	code	cpp
2554	1	If you pass a move-only object to a sink function and want to ensure that you\nhave lost ownership (file closed, memory freed, etc.), explicitly release the\nresource directly afterwards.	text	txt
2555	1	`std::move()` moves elements to another range in the same range (do not\nconfuse this algorithm with the `std::move()` to mark an object that you no\nlonger need its value). The effect of these algorithms is a move assignment\nto the destination range calling `std::move(elem)` for each element while\niterating over them.	text	txt
2555	2	#include <iostream>\n#include <string>\n#include <vector>\n#include <list>\n#include <algorithm>	text	txt
2555	3	int main(int argc, char** argv)\n{\n    std::list<std::string> coll1 { "love", "is", "all", "you", "need" };\n    std::vector<std::string> coll2;	text	txt
2555	4	    // ensure coll2 has enough elements to overwrite their values:\n    coll2.resize(coll1.size());	text	txt
2555	5	    // coll1 (5 elems): ’love’ ’is’ ’all’ ’you’ ’need’\n    // coll2 (5 elems): ’’ ’’ ’’ ’’ ’’	text	txt
2555	6	    // move assign the values from coll1 to coll2\n    // - not changing any size\n    std::move(coll1.begin(), coll1.end(),   // source range\n              coll2.begin());               // destination range	text	txt
2555	7	    // coll1 (5 elems): ’?’ ’?’ ’?’ ’?’ ’?’\n    // coll2 (5 elems): ’love’ ’is’ ’all’ ’you’ ’need’	text	txt
2555	8	    // move assign the first three values inside coll2 to the end\n    // - not changing any size\n    std::move_backward(coll2.begin(), coll2.begin()+3,  // source range\n                       coll2.end());                    // destination range	text	txt
2555	9	    // coll1 (5 elems): ’?’ ’?’ ’?’ ’?’ ’?’\n    // coll2 (5 elems): ’?’ ’?’ ’love’ ’is’ ’all’\n}	code	txt
2556	1	While iterating over elements of a container or range, each access to an\nelement uses `std::move()`. This might be significantly faster but it leaves\nthe element in a valid but unspecified state. You should not use an element\ntwice.	text	txt
2556	2	#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>	text	txt
2556	3	int main()\n{\n    std::vector<std::string> coll{"don't", "vote", "for", "liars"};	text	txt
2556	4	    // move away only the elements processed:\n    std::for_each(std::make_move_iterator(coll.begin()),\n                  std::make_move_iterator(coll.end()),\n                  [] (auto&& elem) {\n                    if (elem.size() != 4) {\n                        process(std::move(elem));\n                    }\n                  });\n}	code	txt
2556	5	As you can see, a helper function `std::make_move_iterator()` is used so that\nyou do not have to specify the element type when declaring the iterator.\nSince C++17, *class template argument deduction (CTAD)* enables simply\ndeclaring the type `std::move_iterator` directly without the need to specify\nthe element type:	text	txt
2556	6	std::for_each(std::move_iterator(coll.begin()),\n              std::move_iterator(coll.end()),\n              [] (auto&& elem) {\n                if (elem.size() != 4) {\n                    process(std::move(elem));\n                }\n              });	code	txt
2557	1	You can also use move iterators wherever an algorithm that reads elements\nonce is used. A useful scenario might be to move elements of a source\ncontainer to another container (of the same or a different kind).	text	txt
2557	2	#include <iostream>\n#include <string>\n#include <list>\n#include <vector>	text	txt
2557	3	int main()\n{\n    std::list<std::string> src{"don't", "vote", "for", "liars"};	text	txt
2557	4	    // move all elements from the list to the vector:\n    std::vector<std::string> vec{\n        std::make_move_iterator(src.begin()),\n        std::make_move_iterator(src.end())\n    };\n}	code	txt
2557	5	Note again that the number of elements in the source container did not\nchange. We moved all elements to the initialized new container. Therefore,\nthe elements in the source range are in a moved-from state afterwards and we\ndo not know their values.	text	txt
2558	1	Only move operations, `swap()`, or `shrink_to_fit()` might shrink them.	text	txt
2558	2	std::string s1{"some long string"};\nstd::string s2{std::move(s1)};	text	txt
2558	3	std::string s3;\ns3 = std::move(s2);	code	txt
2558	4	Sometimes source destination shrinks, but neither is guaranteed.	text	txt
2973	1	`foreach` and `while`.	text	txt
2559	2	* Copying the containers\n* Assigning the containers\n* Inserting elements into the container	text	txt
2559	3	However, there is one exception: `std::array<>` does not allocate memory on\nthe heap, hense it operates element-by-element and making move operations\nequivalent to copy.	text	txt
2559	4	std::list<std::string> createAndInsert()\n{\n    std::list<std::string> coll;\n    ...\n    return coll; // move constructor if not optimized away\n}	text	txt
2559	5	std::list<std::string> v;\n...\nv = createAndInsert(); // move assignment	code	txt
2560	1	For the move constructor:	text	txt
2560	2	ContainerType cont1{ ... };\nContainerType cont2{std::move(cont1)}; // move the container	code	txt
2560	3	The C++ standard specifies constant complexity. This means that the duration\nof a move does not depend on the number of elements. With this guarantee,\nimplementers have no other option but to steal the memory of elements as a\nwhole from the source object `cont1` to the destination object `cont2`,\nleaving the source object `cont1` in an initial/empty state.	text	txt
2560	4	These requirements and guarantees essentially mean that moved-from containers\nare usually empty.	text	txt
2561	1	All containers support moving a new element into the container.	text	txt
2561	2	1. Insert Functions: all containers have corresponding overloads.	text	txt
2561	3	template<typename Key, typename T, typename Compare = less<Key>, typename Allocator = allocator<pair<const Key, T>>>\nclass map\n{\npublic:\n    ...\n    pair<iterator, bool> insert(const value_type& x);\n    pair<iterator, bool> insert(value_type&& x);\n    ...\n};	code	txt
5216	3	The `type` component can also be referred to as `domain` when it is used for processes.	text	md
2561	4	1. Emplace Functions: you can pass multiple arguments to initialize a new\n   element directly in the container to save a copy or move.	text	txt
2561	5	Functions like `emplace_back()` use perfect forwarding to avoid creating\ncopies of the passed arguments.	text	txt
2772	1	The `poll()` function will run the `io_service` object's event processing loop\nwithout blocking the execution of the thread. This will run the handlers until\nthere are no more ready handlers remaining or until the `io_service` object\nhas been stopped.	text	txt
2561	6	template<typename T, typename Allocator = allocator<T>>\nclass vector\n{\npublic:\n    template<typename... Args>\n    constexpr T& emplace_back(Args&&... args)\n    {\n        ...\n        // call the constructor with the perfectly forwarded arguments:\n        place_element_in_memory(T(std::forward<Args>(args)...));\n        ...\n    }\n};	code	txt
2562	1	`std::array<>` is the only container that does not allocate memory on the\nheap. Therefore, we cannot implement move operations in a way that they move\npointers to internal memory. As a consequence, std::array<> has a couple of\ndifferent guarantees:	text	txt
2562	2	- The move constructor has linear complexity because it has to move element\n  by element.\n- The move assignment operator might always throw because it has to move\n  assign element by element.	text	txt
2562	3	Therefore, in principle, there is no difference between copying or moving an\narray of numeric values:	text	txt
2563	1	template<typename T1, typename T2>\nstruct pair\n{\n    T1 first;\n    T2 second;\n};	code	txt
2563	2	`std::pair` has a default constructor, and copy and move semantics.	text	txt
2563	3	constexpr pair(const T1& x, const T2& y);\ntemplate<typename U, typename V> constexpr pair(U&& x, V&& y);\ntemplate<typename U, typename V> constexpr pair(const pair<U, V>& p);\ntemplate<typename U, typename V> constexpr pair(pair<U, V>&& p);\ntemplate<typename... Args1, typename... Args2> pair(piecewise_construct_t, tuple<Args1...> first_args, tuple<Args2...> second_args);	code	txt
2563	4	Therefore, we can use move semantics when constructing a pair.	text	txt
2615	1	On all platforms, a moved-from string is usually empty. However, there is no guarantee and it is only in a valid but unspecified state.	text	txt
2616	1	This class extends the possible values of contained type by the abcense of it. This avoids the need to mark one specific value of the type to have this semantics.	text	txt
2617	1	std::optional<std::string> os;\nstd::string s{"a long string"};\nos = std::move(s); // moves\n\nstd::string s2{*os}; // copies\nstd::string s3{std::move(*os); // moves\n\nstd::optional<std::string> func();\n\nstd::string s4{func().value()}; // moves\nstd::string s5{*func()}; // moves	code	cpp
2617	2	Optional objects support move semantics. If you move the object as a whole, the state is copied and the contained object is moved.	text	txt
2618	1	namespace std\n{\ntemplate<typename T>\nclass optional\n{\n    constexpr T& operator*() &;\n    constexpr const T& operator*() const&;\n    constexpr T&& operator*() &&;\n    constexpr const T&& operator*() const&&;\n\n    constexpr T& value() &;\n    constexpr const T& value() const&;\n    constexpr T&& value() &&;\n    constexpr const T&& value() const&&;\n};\n}	code	cpp
2619	1	Copying a shared pointer is expensive because by each copy, the owner counter increments.	text	txt
2619	2	Modifying the value of owner counter is expensive because it is an atomic operation to avoid multithreading problems.	text	txt
2619	3	Each time a shared pointer is destroyed or assign a new value, the owner counter is decremented.	text	txt
2620	1	for (auto const& sp: collection) ...	code	cpp
2620	2	It is significantly cheaper to iterate over a collection of shared pointers by reference than using a copy on each iteration:	text	txt
2620	3	std::shared_ptr<std::string> result;\n\nwhile (...)\n{\n    std::shared_ptr<std::string> ptr{std::make_shared<std::string>(getValue())};\n    result = std::move(ptr); // move\n}	code	cpp
2621	1	std::vector<std::unique_ptr<std::string>> container;\nstd::unique_ptr<std::string> another;\ncontainer.push_back(std::move(another));	code	cpp
2621	2	The unique pointer implements the concept of exclusive ownership. Therefore, it can only be moved, and any attempt to copy a unique pointer is disabled.	text	txt
2622	1	Streams do not share their resources over copy operations.	text	txt
2622	2	std::ofstream file{"sample.tmp"};\nvoid store(std::ofstream file_stream);\nstore(std::move(file)); // takes file ownership\nassert(file.is_open());	code	cpp
2623	1	When passing move-only objects to a function taking parameters by value, the ownership will be transferred. But these functions might also take the argument by reference, which means that it does not take the ownership. In that case we might want to double check the state of the passed argument afterwards.	text	txt
2623	2	std::ofstream file{"sample.tmp"};\nstore(file);\nif (file.is_open())\n    file.close();	code	cpp
2624	1	std::ofstream{"sample.tmp"} << std::string{"content"};	code	cpp
2625	1	std::string firstname, lastname;\nstd::istringstream{"First Last"} >> firstname >> lastname;	code	cpp
2626	1	std::string multiline{}, line{};\nstd::getline(std::stringstream{multiline}, line);)	code	cpp
2627	1	atomic types, condition variables	text	list
2628	1	`std::thread`, `std::jthread`, `std::future`, `std::promise`, `std::packaged_task`	text	list
2629	1	std::string value{"content"};\nstd::vector<std::jthread> runners{};\nrunners.push_back(std::jthread{do_something, value});\nrunners.push_back(std::jthread{do_something, std::move(value)});	code	cpp
2629	2	By default, the constructor of the thread class copies these arguments. To use move semantics we should explicitly pass parameters as rvalues.	text	txt
2630	1	std::promise<std::string> promise{};\nstd::future<std::string> future{promise.get_future()};\n\nvoid print_value(std::future<std::string> f)\n{\n    std::println("{}", f.get());\n};\n\nvoid set_value(std::promise<std::string> p)\n{\n    try\n    {\n        p.set_value_at_thread_exit();\n    }\n    catch (...)\n    {\n        p.set_exception_at_thread_exit(std::current_exception());\n    }\n}\n\nstd::jthread future_thread{print_value, std::move(future)};\nstd::jthread promise_thread{set_value, std::move(promise)};	code	cpp
2631	1	To deduce the same type for string literals of different length, we need to decay universal reference parameters.	text	txt
2631	2	namespace std\n{\ntemplate<typename T1, typename T2>\nconstexpr pair(typename decay_t<T1>, typename decay_t<T2>) make_pair(T1&& a, T2&& b)\n{\n    return pair<decay_t<T1>, decay_t<T2>>(forward<T1>(a), forward<T2>(b));\n}\n} // std	code	cpp
2631	3	When passing string literals to arguments of type const reference, the type of the corresponding parameters become a reference to an array of chars (`const char(&)[N]`). Therefore, type `char[N]` is deduced as type of parameter and used as type of member variable. However, initializing an array member with an array is not possible because you cannot copy arrays.	text	txt
2632	1	On all platforms, a moved-from string is usually empty. However, there is no guarantee and it is only in a valid but unspecified state.	text	txt
2633	1	This class extends the possible values of contained type by the abcense of it. This avoids the need to mark one specific value of the type to have this semantics.	text	txt
2634	1	Optional objects support move semantics. If you move the object as a whole, the state is copied and the contained object is moved.	text	txt
2634	2	std::optional<std::string> os;\nstd::string s{"a long string"};\nos = std::move(s); // moves\n\nstd::string s2{*os}; // copies\nstd::string s3{std::move(*os); // moves\n\nstd::optional<std::string> func();\n\nstd::string s4{func().value()}; // moves\nstd::string s5{*func()}; // moves	code	cpp
2635	1	namespace std\n{\ntemplate<typename T>\nclass optional\n{\n    constexpr T& operator*() &;\n    constexpr const T& operator*() const&;\n    constexpr T&& operator*() &&;\n    constexpr const T&& operator*() const&&;\n\n    constexpr T& value() &;\n    constexpr const T& value() const&;\n    constexpr T&& value() &&;\n    constexpr const T&& value() const&&;\n};\n}	code	cpp
2636	1	Modifying the value of owner counter is expensive because it is an atomic operation to avoid multithreading problems.	text	txt
2636	2	Copying a shared pointer is expensive because by each copy, the owner counter increments.	text	txt
2636	3	Each time a shared pointer is destroyed or assign a new value, the owner counter is decremented.	text	txt
2637	1	It is significantly cheaper to iterate over a collection of shared pointers by reference than using a copy on each iteration:	text	txt
2637	2	std::shared_ptr<std::string> result;\n\nwhile (...)\n{\n    std::shared_ptr<std::string> ptr{std::make_shared<std::string>(getValue())};\n    result = std::move(ptr); // move\n}	code	cpp
2637	3	for (auto const& sp: collection) ...	code	cpp
2638	1	std::vector<std::unique_ptr<std::string>> container;\nstd::unique_ptr<std::string> another;\ncontainer.push_back(std::move(another));	code	cpp
2638	2	The unique pointer implements the concept of exclusive ownership. Therefore, it can only be moved, and any attempt to copy a unique pointer is disabled.	text	txt
2639	1	Streams do not share their resources over copy operations.	text	txt
2639	2	std::ofstream file{"sample.tmp"};\nvoid store(std::ofstream file_stream);\nstore(std::move(file)); // takes file ownership\nassert(file.is_open());	code	cpp
2640	1	When passing move-only objects to a function taking parameters by value, the ownership will be transferred. But these functions might also take the argument by reference, which means that it does not take the ownership. In that case we might want to double check the state of the passed argument afterwards.	text	txt
2640	2	std::ofstream file{"sample.tmp"};\nstore(file);\nif (file.is_open())\n    file.close();	code	cpp
2641	1	std::ofstream{"sample.tmp"} << std::string{"content"};	code	cpp
2642	1	std::string firstname, lastname;\nstd::istringstream{"First Last"} >> firstname >> lastname;	code	cpp
2643	1	std::string multiline{}, line{};\nstd::getline(std::stringstream{multiline}, line);)	code	cpp
2644	1	atomic types, condition variables	text	list
2645	1	`std::thread`, `std::jthread`, `std::future`, `std::promise`, `std::packaged_task`	text	list
2646	1	By default, the constructor of the thread class copies these arguments. To use move semantics we should explicitly pass parameters as rvalues.	text	txt
2646	2	std::string value{"content"};\nstd::vector<std::jthread> runners{};\nrunners.push_back(std::jthread{do_something, value});\nrunners.push_back(std::jthread{do_something, std::move(value)});	code	cpp
2647	1	std::promise<std::string> promise{};\nstd::future<std::string> future{promise.get_future()};\n\nvoid print_value(std::future<std::string> f)\n{\n    std::println("{}", f.get());\n};\n\nvoid set_value(std::promise<std::string> p)\n{\n    try\n    {\n        p.set_value_at_thread_exit();\n    }\n    catch (...)\n    {\n        p.set_exception_at_thread_exit(std::current_exception());\n    }\n}\n\nstd::jthread future_thread{print_value, std::move(future)};\nstd::jthread promise_thread{set_value, std::move(promise)};	code	cpp
2648	1	To deduce the same type for string literals of different length, we need to decay universal reference parameters.	text	txt
2648	2	namespace std\n{\ntemplate<typename T1, typename T2>\nconstexpr pair(typename decay_t<T1>, typename decay_t<T2>) make_pair(T1&& a, T2&& b)\n{\n    return pair<decay_t<T1>, decay_t<T2>>(forward<T1>(a), forward<T2>(b));\n}\n} // std	code	cpp
2648	3	When passing string literals to arguments of type const reference, the type of the corresponding parameters become a reference to an array of chars (`const char(&)[N]`). Therefore, type `char[N]` is deduced as type of parameter and used as type of member variable. However, initializing an array member with an array is not possible because you cannot copy arrays.	text	txt
2654	1	- `all`: the default target which builds all targets not `EXLUDED_FROM_ALL`.\n- `clean`: remove all generated artifacts.\n- `depend`: generate the dependencies, if any, for the source files.\n- `rebuild_cache`: rebuild `CMakeCache.txt`.\n- `edit_cache`: edit cache entries directly.	text	txt
2656	1	1. `STATIC`: archives of object files for use when linking other targets.\n2. `SHARED`: libraries that can be linked and loaded at runtime.\n3. `OBJECT`: compile sources in the list to object files, but then neither\n  archive into a static library nor linking them into a shared object. The\n  use of object libraries is particularly useful if one needs to create both\n  static and shared libraries in one go.\n4. `MODULE`: similar to dynamic shared objects (DSO) but not linked to any\n  other target within the project, but may be loaded dynamicly later on.\n  Useful for building a runtime plugin.\n5. `IMPORTED`: library located outside the project. Useful to model\n  pre-existing dependencies of the project that are provided by upstream\n  packages. As such these libraries are immutable.\n6. `INTERFACE`: special library similar to `IMPORTED`, but it is mutable and\n  has no location. Useful to model usage requirements for a target that is\n  outside our project.\n7. `ALIAS`: an alias for pre-existing library target within the project.	text	txt
5221	2	* `file`\n* `line` and `endline`\n* `col` and `endcolumn`\n* `title`	text	md
2651	1	cmake --build <build_dir>	code	sh
2655	1	cmake -S <source_dir> -B <build_dir> -G <generator>\ncmake -S . -B build -G 'Unix Makefiles'	code	sh
2650	1	cmake -S <source_dir> -B <build_dir>	code	sh
2649	1	cmake_minimum_required(VERSION 3.20 FATAL)\nproject(Flashback LANGUAGES CXX)\nadd_executable(flashback src/main.cpp)	code	cmake
2659	1	PIE is enabled by default on Linux and Mac OSX.	text	txt
2661	1	`BUILD_SHARED_LIBS` is a global flag offered by cmake.	text	txt
2661	2	`add_library` can be invoked without passing the `STATIC/SHARED/OBJECT`\nargument. This command will internally lookup `BUILD_SHARED_LIBS` and will\nuse `SHARED` when set, otherwise it uses `STATIC`.	text	txt
2773	1	The `post()` function requests the service to run its works after queueing up\nall the work. So it does not run the works immediately.	text	txt
2662	1	- A logical variable is true if it set to any of the `1, ON, YES, TRUE, Y`,\n  or a non-zero number.\n- A logical variable is false if is set to any of the `0, OFF, NO, FALSE, N,\n  IGNORE, NOTFOUND`, an empty string, or a string ending with `-NOTFOUND`.	text	txt
2667	1	The board should be physically connected to the host using USB to Serial\ncable.	text	txt
2667	2	The program which can be used to connect the board with a TTY are as follows:	text	txt
2667	3	* minicom\n* picocom\n* gtkterm\n* putty\n* screen\n* tio	text	txt
2668	1	picocom --baud 115200 /dev/ttyUSB0	code	txt
2668	2	In case you don't have enough permission to run this command, you need to add\nyour user into the `dialout` group:	text	txt
2668	3	usermod -G -a dialout brian	code	txt
2669	1	gcc -v	code	txt
2670	1	gcc -v -o program source.c	code	txt
2671	1	file executable	code	txt
2672	1	strip executable	code	txt
2673	1	gcc -c main.c\ngcc -c util.c\ngcc -o program main.o util.o	code	txt
2674	1	nm executable	code	txt
2675	1	C libraries and compiled programs need to interact with the kernel. Available\nsystem calls, many constant definitions and data structures are defined in\nkernel headers. Therefore, compiling C libraries require kernel headers.	text	txt
2675	2	Kernel headers can be found in the kernel source tree in `include/uapi` and\n`arch/<arch>/include/uapi`. These headers can be included in C source files\nas `<linux>` and `<unistd>`.	text	txt
2675	3	To install kernel headers, run the following `make` target in the kernel\nsource tree:	text	txt
2675	4	make headers_install	code	txt
2714	8	Mount it and then copy `u-boot.bin`, `start.elf` (raspberrypi repository),\n`bcm2708-rpi-zero.dtb` (raspbberypi repository) files into the filesystem:	text	txt
2676	1	`-march` option is used to set processor architecture, e.g. armv6, armv7,\naarch64, x86\\\\_64, etc. `-mtune` option is used to set processor specific\noptimization, e.g. bcm2835, bcm2711, etc.	text	txt
2676	2	gcc -march armv6 -mtune bcm2835 source.c	code	txt
2677	1	Some utilities automate the process of building the toolchains:	text	txt
2677	2	* [Crosstool-ng](https://crosstool-ng.github.io)\n* [Buildroot](https://buildroot.org)\n* [PTXdist](https://ptxdist.org)\n* [OpenEmbedded](https://openembedded.org)\n* [Yocto project](https://yoctoproject.org)	text	txt
2678	1	git clone https://github.com - https://github.com/crosstool-ng/crosstool-ng.git\ncd crosstool-ng\n./bootstrap\n./configure --prefix $HOME/.local\nmake -j8\nmake install	code	txt
2679	1	ct-ng list-samples	code	txt
2680	1	Prefix target with `show-` to see the configuration information:	text	txt
2680	2	ct-ng show-armv6-unknown-linux-gnueabihf	code	txt
2680	3	Or just run `show-config` to see the current configuration information:	text	txt
2680	4	ct-ng show-config	code	txt
2680	5	Note that `.config` file should be available in the later case.	text	txt
2681	1	ct-ng armv6-unknown-linux-gnueabihf	code	txt
2682	1	Crosstool-ng uses kernel build system `Kbuild` and kernel configuration\nsystem `Kconfig` to configure and build the cross-toolchain.	text	txt
2682	2	ct-ng menuconfig\nct-ng nconfig\nct-ng qtconfig	code	txt
2683	1	ct-ng show-tuple	code	txt
2661	3	add_library(message message.hpp message.cpp)	code	cmake
2661	4	cmake -S <source> -B <build> -D BUILD_SHARED_LIBS=ON	code	cmake
2660	1	set_target_properties(target PROPERTIES OUTPUT_NAME "primary_target")	code	cmake
2659	2	set_target_properties(target PROPERTIES POSITION_INDEPENDENT_CODE 1)	code	cmake
2664	1	Introducing variables with a given truth value hardcoded, prevents users of\nyour code from easily toggling these variables. Also, cmake does not\ncommunicate to the reader that this is a value that is expected to be\nmodified. The recommended way to toggle behavior in the build system\ngeneration for your project is to present logical switches as options using\n`option()` command.	text	txt
2665	1	list(APPEND source_files main.cpp message.cpp ...)\nadd_executable(runtime ${source_files})\nadd_library(library ${source_files})	code	cmake
2666	2	If `USE_LIBRARY` is `ON`, `MAKE_SHARED_LIBRARY` defaults to `OFF`, while\n`MAKE_STATIC_LIBRARY` defaults to `ON`. So we can run this:	text	txt
2666	3	cmake -S <source> -B <build> -D USE_LIBRARY=ON -D MAKE_SHARED_LIBRARY=ON	code	cmake
2684	1	ct-ng source	code	txt
2684	2	Origin:	text	txt
2685	1	Indicate a the number of parallel jobs behind the `build` target after a dot:	text	txt
2685	2	ct-ng build.8	code	txt
2686	1	${CROSS_COMPILE}gcc -L$(${CROSS_COMPILE}gcc -print-sysroot)/lib -I$(${CROSS_COMPILE}gcc -print-sysroot)/include -march armv6 -mtune bcm2835 -o program source.c	code	txt
2687	1	Obtain the U-Boot source tree from GitHub:	text	txt
2687	2	git clone https://github.com - https://github.com/u-boot/u-boot.git\ncd u-boot	code	txt
2687	3	Configuration files are stored in `configs/` directory.	text	txt
2687	4	To check if your desired board is already supported by U-Boot, check if there is a match for that board in the `boards.cfg` file.	text	txt
2687	5	To use one of the configuration entries in `configs/` use `make` utility:	text	txt
2687	6	make CROSS_COMPILE=$(arm-unknown-linux-gnueabihf-gcc -print-sysroot) ARCH=armv6 raspberrypizero_defconfig\nmake CROSS_COMPILE=$(arm-unknown-linux-gnueabihf-gcc -print-sysroot) ARCH=armv6 menuconfig	code	txt
2688	1	There are as many tools as there are filesystems to load an image into RAM:	text	txt
2688	2	*FAT filesystem*\nfatload usb 0:1 0x21000000 zImage	code	txt
2688	3	*EXT4 filesystem*\next4load usb 0:1 0x21000000 zImage	code	txt
2688	4	There are similarly other tools:	text	txt
2688	5	* fatinfo,  fatls,  fatsize,  fatwrite, ...\n* ext2info, ext2ls, ext2size, ext2write,...\n* ext3info, ext3ls, ext3size, ext3write,...\n* ext4info, ext4ls, ext4size, ext4write,...\n* sqfsinfo, sqfsls, sqfssize, sqfswrite,...	text	txt
2689	1	tftp	code	txt
2690	1	ping	code	txt
2691	1	`loads`, `loadb`, `loady` commands.	text	txt
2692	1	ping	code	txt
2693	1	mmc	code	txt
2694	1	nand	code	txt
2695	1	erase\nprotect\ncp	code	txt
2696	1	md	code	txt
2697	1	mm	code	txt
2698	1	bdinfo	code	txt
2699	1	printenv\nprintenv <variable-name>	code	txt
2700	1	setenv <variable-name> <variable-value>	code	txt
2700	2	Origin 10:20:00	text	txt
2701	1	editenv <variable-name>	code	txt
2702	1	saveenv	code	txt
2703	1	Commands will be executed after a configurable delay `bootdelay`, if process\nis not interrupted.	text	txt
2703	2	setenv bootcmd 'tftp 0x21000000 zImage; tftp 0x22000000 dtb; bootz 0x21000000 - 0x22000000'	code	txt
2704	1	setenv bootargs ''	code	txt
2705	1	* `serverip`\n* `ipaddr`\n* `netmask`\n* `ethaddr`	text	txt
2706	1	After using `tftp`, `fatload`, `nand read...`, etc. commands, the size of\ncopy can be seen by:	text	txt
2706	2	filesize	code	txt
2707	1	U-Boot shell uses the same conditional expression as Bash:	text	txt
2707	2	setenv mmc-boot 'if fatload mmc 0 80000000 boot.ini; then source; else if fatload mmc 0 80000000 zImage; then run mmc-do-boot; fi; fi'	code	txt
2708	1	setenv <variable-name> <script-body>\nrun <variable-name>	code	txt
2709	1	The same way that Unix shell references variables using braces:	text	txt
2709	2	${variable-name}	code	txt
2710	1	When a command is used to load some file into RAM as follows:	text	txt
2710	2	fatload mmc 0 80000000 boot.ini	code	txt
2710	3	Then by executing `source` command, the contents within `boot.ini` file which\nwas recently loaded will be read. This file should obbey the syntax of U-Boot\nshell variables. By reading these variables, the boot sequence can be changed\naccordingly.	text	txt
2711	1	editenv bootcmd\nsaveenv	code	txt
2712	1	res	code	txt
2713	1	The official `raspbberypi` repository holds the `boot` directory where\n`start.elf` file and the device tree files can be found:	text	txt
2713	2	wget -c 'https://github.com - https://github.com/raspberrypi/firmware/blob/master/boot/start.elf'\nwget -c 'https://github.com - https://github.com/raspberrypi/firmware/blob/master/boot/bcm2708-rpi-zero.dtb'	code	txt
2714	1	1. Boot loader (Raspberry Pi specific SPL)\n2. Kernel image\n3. Device trees	text	txt
2714	2	First download Raspberry Pi device specific SPL and device tree binary files.	text	txt
2714	3	wget -c 'https://github.com - https://github.com/raspberrypi/firmware/blob/master/boot/start.elf'\nwget -c 'https://github.com - https://github.com/raspberrypi/firmware/blob/master/boot/bcm2708-rpi-zero.dtb'	code	txt
2714	4	Then partition the SD card which is used to attach to the device:	text	txt
2714	5	fdisk /dev/sda	code	txt
2714	6	Create a 100M sized partition and set the bootable flag.\nThen format that bootable partition with vfat filesystem:	text	txt
2714	7	mkfs -t vfat /dev/sda1	code	txt
2714	9	mount /dev/sda1 /mnt\ncp * /mnt\numount /mnt	code	txt
2716	1	qemu-system-arm --machine raspi0 --nographic --kernel u-boot	code	txt
2717	1	git format-patch	text	txt
2718	1	export ARCH=arm\nexport CROSS_COMPILE=arm-black-linux-gnueabi-	code	txt
2719	1	cp /boot/config-$(uname -r) .config\nzcat /proc/config.gz > .config	code	txt
2720	1	make savedefconfig\nmv defconfig arch/<arch>/configs/custom_defconfig	code	txt
2721	1	* `bool`: `true`, `false`\n* `tristate`: `true`, `module`, `false`\n* `int`\n* `hex`: `CONFIG_PAGE_OFFSET=0xC0000000`\n* `string`: `CONFIG_LOCAL_VERSION=-no-network`	text	txt
2721	2	menuconfig ATA\n    tristate "Serial ATA and Parallel ATA drivers (libata)"	code	txt
2722	1	* `depends on`: option B that depends on option A is not visible until option\n  A is enabled.\n* `select`: option B that depends on option A, when option A is enabled,\n  option B is automatically enabled.	text	txt
2722	2	menuconfig ATA\n    tristate "Serial ATA and Parallel ATA drivers (libata)"\n    depends on HAS_IOMEM\n    depends on BLOCK\n    select SCSI\n    select GLOB	code	txt
2723	1	make -j8	code	txt
2724	1	export CROSS_COMPILE="ccache arm-black-linux-gnueabi-"	code	txt
2725	1	* `vmlinuz`: raw uncompressed kernel image for debugging\n* `arch/<arch>/boot/\\\\*Image`: `(bzImage, zImage, Image.gz)` final and usually compressed kernel image that can be booted\n* `arch/<arch>/boot/dts/\\\\*.dtb`: compiled device tree files\n* `.ko`: kernel object files spread over the kernel source tree	text	txt
5256	1	top\nhtop\nbtop	code	sh
2757	1	* Hard Disk\n* USB Key\n* SD Card\n* NAND Flash\n* NFS Protocol\n* Preloaded Filesystem (by bootloader)	text	txt
2757	2	*kernel parameter*\nroot=/dev/sdXY        # Hard Disk or USB Key\nroot=/dev/mmcblkXpY   # SD Card\nroot=/dev/mtdblockX   # Flash Storage	code	txt
2758	1	**NFS Server**	text	txt
2758	2	*/etc/exports*\n/srv/nfs4/root 192.168.1.111(rw,no_root_squash,no_subtree_check)	code	txt
2758	3	**NFS Client**	text	txt
2758	4	Following kernel configuration options should be enabled on client:	text	txt
2758	5	* `CONFIG_NFS_FS=y`\n* `CONFIG_IP_PNP=y`\n* `CONFIG_ROOT_NFS=y`	text	txt
2758	6	The kernel should also be booted with the following parameters:	text	txt
2758	7	root=/dev/nfs ip=192.168.1.111 nfsroot=192.168.1.110:/srv/nfs4/root/	code	txt
2759	1	*qemu-ifup*\n#!/bin/sh\n/sbin/ip a add 192.168.0.1/24 dev $1\n/sbin/ip link set $1 up	code	txt
2759	2	qemu-system-arm -M virt -m 128M -nographic -kernel u-boot -cpu cortex-a8 -nic tap,script=./qemu-ifup,model=e1000	code	txt
2759	3	*u-boot*\nsetenv ipaddr 192.168.0.20\nping 192.168.0.1\nsetenv serverip 192.168.0.1\nsetenv bootargs 'root=/dev/nfs ip=192.168.0.20 nfsroot=192.168.0.1:/srv/nfs4/root rw'\nsaveenv\ntftp ${kernel_addr_t} Image\nbooti ${kernel_addr_t} - 0x40000000	code	txt
2760	1	cd root\nfind . | cpio -H newc -o > ../initramfs.cpio\ncd ..\ngzip initramfs.cpio	code	txt
2760	2	For U-Boot, include the archive in a U-Boot container:	text	txt
2760	3	mkimage -n 'Ramdisk Image' -A arm -O linux -T ramdisk -C gzip -d initramfs.cpio.gz uInitramfs\nbootz ${kernel_addr_t} ${initramfs_addr_t} ${fdt_addr_t}	code	txt
2760	4	In kernel config, use `CONFIG_INITRAMFS_SOURCE=/srv/nfs4/root/initramfs.cpio`.	text	txt
2761	1	The `devtmpfs` virtual filesystem can be mounted on `/dev` and contains all\nthe devices registered to kernel frameworks. The `CONFIG_DEVTMPFS_MOUNT`\nkernel configuration option makes the kernel mount it automatically at boot\ntime, except when booting on an initramfs.	text	txt
2762	1	mount -t proc nodev /proc	code	txt
2773	2	Any thread calling `io_service::run()` function will block execution and wait\nfor tasks to be enqueued, or finish existing tasks. Best practice is to attach\n`io_service` to slave threads so that they wait for tasks to be given and\nexecute them while master threads assign new tasks to them.	text	txt
2774	1	The `dispatch()` function requests the service to run its works right away\nwithout queueing up.	text	txt
2774	2	The `dispatch()` function can be invoked from the current worker thread, while\nthe `post()` function has to wait until the handler of the worker is complete\nbefore it can be invoked. In other words, the `dispatch()` function's events\ncan be executed from the current worker thread even if there are other pending\nevents queued up, while the `post()` function's events have to wait until the\nhandler completes the execution before being allowed to be executed.	text	txt
2775	1	Strand is a class in the <code>io_service</code> object that provides handler\nexecution serialization. It can be used to ensure the work we have will be\nexecuted serially.	text	txt
2775	3	The `boost::asio::io_context::strand::wrap()` function creates a new handler\nfunction object that will automatically pass the wrapped handler to the strand\nobject's dispatch function when it is called.	text	txt
2783	1	- `start`: starts debugging session by running program line-by-line.\n- `run`: starts debugging session running program as usual.	text	txt
2784	1	- `continue`: Will resume the execution of the program until it completes.\n- `step`: Executes program one more step. Step might be one line of source\n  code or one machine instruction.\n- `next`: Executes program similar to `step`, but it only continues to the\n  next line in the current stack frame and will not step into functions.	text	txt
2785	1	`list` displays 10 lines of source code. To see how many lines of source code\nwill be displayed enter `show listsize`. To adjust the lines of source code\ndisplayed enter `set listsize 20`.	text	txt
2787	1	`delete 1`	text	txt
2788	1	`print `	text	txt
2789	1	`set var random_number = 5`	text	txt
2790	1	`whatis random_number`	text	txt
2791	1	`shell pwd`	text	txt
2792	1	First obtain the source tree:	text	txt
2792	2	git clone git://git.yoctoproject.org/poky	code	txt
3831	1	/sys/dev	code	sh
3831	2	/sys/block	code	sh
2792	3	Import the build configurations and environments by sourcing the `oe-init-build-env` script file on the project's root directory.	text	txt
2792	4	source oe-init-build-env	code	txt
2792	5	Second argument can be specified as a custom directory path where artifacts will be generated.\nWhen not specified, `build` directory will be generated in the working directory.	text	txt
2792	6	Before building an image, you should edit and configure the `build/local.conf` file and set `MACHINE` variable to whatever target you desire, e.g. qemuarm, qemuarm64, qemux86-64, etc.	text	txt
2792	7	sed -i '/^MACHINE[ ?=]\\\\+/s/^MACHINE\\\\([ ?=]\\\\+\\\\).*/MACHINE\\\\1"qemuarm64"/' conf/local.conf	code	txt
2792	8	Using `bitbake` utility which was sourced earlier build an image by choice:	text	txt
2792	9	bitbake core-image-minimal	code	txt
2792	10	There might be dependency packages to run `bitbake` on Arch Linux:	text	txt
2792	11	sudo pacman -Ss inetutils net-tools diffstat chrpath rpcscv-proto	code	txt
2792	12	An image was built to be run by `runqemu`:	text	txt
2792	13	runqemu core-image-minimal nographics	code	txt
2792	14	Origin: 1.2	text	txt
2793	1	Add the following line to `build/local.conf` file:	text	txt
2793	2	```\nIMAGE_INSTALL_append = " binutils"\n``````	text	txt
2793	3	bitbake qemuarm64 core-image-minimal\nrunqemu core-image-minimal nographics	code	txt
2793	4	Origin: 1.2	text	txt
2794	1	We just need to configure `conf/local.conf` file and add the following line before building an image:	text	txt
2794	2	```\necho 'IMAGE_INSTALL_appen = " binutils"' >> conf/local.conf\n``````	text	txt
2794	3	And the follow up all the steps required to build an image using `bitbake`:	text	txt
2794	4	git clone git://git.yoctoproject.org/poky\ncd poky\nsource oe-init-build-env\nsed -i '/^MACHINE[ ?=]\\\\+/s/^MACHINE\\\\([ ?=]\\\\+\\\\).*/MACHINE\\\\1"qemuarm64"/' conf/local.conf\nbitbake qemuarm64 core-image-sato\nrunqemu core-image-sato	code	txt
2794	5	Origin: 1.2	text	txt
2795	1	1. You implement the same behavior repeatedly for each different types, you\n   make the same mistakes.\n2. You write general code for a common base type such as `void*`, you lose\n   type checking and lose the control of maitaining derived classes.\n3. You use special preprocessors, code is replaced by stupid text replacement\n   mechanism that has no idea of scope and types.	text	txt
2796	1	Historically, `class` keyword can be used instead of `typename`. However,\nbecause this use of `class` can be misleading, you should prefer the use of\n`typename`. The keyword `struct` cannot be used in place of `typename` when\ndeclaring type parameters.	text	txt
2797	1	- Without instantiation at definition time, the template code itself is\n  checked for correctness ignoring the template parameters.\n  + Syntax errors are discovered, such as missing semicolons.\n  + Using unknown names that don't depend on template parameters are\n    discovered.\n  + Static assertions that don't depend on template parameters are checked.\n- At instantiation time, the template code is checked again to ensure that\n  all code is valid. Especially, all parts that depend on template parameters\n  are double-checked.	text	txt
2797	2	template<typename T>\nvoid foo(T t)\n{\n    undeclared(); // first-stage compile-time error\n    undeclared(t); // second-stage compile-time error\n}	code	txt
5223	3	Passing an event name as the first argument will trigger workflows via that event:	text	md
2798	1	When a function template is used in a way that triggers its instantiation, a\ncompiler at some point will need to see that template's definition. This\nbreaks the usual compile and link distinction for ordinary functions, when\nthe declaration of a function is sufficient to compile its use. The simplest\napproach to handle this problem is to implement each template inside a header\nfile.	text	txt
2799	1	Function template defintion specifies a family of functions with parameters\nleft undetermined, parameterized as template parameters.	text	txt
2799	2	template<typename T>\nT max(T a, T b)\n{\n    return b < a ? a : b;\n}	code	txt
5482	1	#include <ftxui/screen/screen.hpp>\n#include <ftxui/screen/color.hpp>\n\nint main()\n{\n    ftxui::Screen screen{ftxui::Screen::Create(ftxui::Dimension::Full(), ftxui::Dimension::Fixed(5)};\n    screen.Print();\n}	code	cpp
2800	1	* You can use any type, as long as the it provides the operations that the\n  template uses.\n* Value of type `T` must also be copyable in order to be returned.\n* Before C++17, type `T` also had to be copyable to be able to pass in\n  arguments, but since C++17 you can pass rvalues even if neither a copy nor\n  a move constructor is valid.	text	txt
2801	1	template<typename T>\nT max(T a, T b) { return b < a ? a : b; }	text	txt
2801	2	max(7, 42); // 42\n::max(3.4, -6.7); // 3.4\n::max("mathematics", "math"); // mathematics	code	txt
2801	3	Each call to `max()` template is qualified with `::` to ensure template is\nfound in the global namespace, not possibly the one in `std` namespace.	text	txt
2802	1	When we call a function template, the template parameters are determined by\nthe arguments we pass. However, template parameters might only be part of the\narguments type.	text	txt
2802	2	If we declare a function template to use constant references as function\narguments, and pass `int`, template parameter is deduced as `int`, because\nthe parameters match for `int const&`.	text	txt
2802	3	template<typename T>\nT max(T const& a, T const& b) { return a < b ? b : a; }	text	txt
2802	4	max(7, 42); // T is int	code	txt
2803	1	- When declaring call parameters by reference, even trivial conversion do not\n  apply to type dedution. Two arguments declared with the same template\n  parameter `T` must match exactly.\n- When declaring call parameters by value, only trivial conversion that decay\n  are supported. Qualifications with `const` or `volatile` are ignored,\n  references convert to the referenced type, and raw arrays or functions\n  convert to the corresponding pointer type. For two arguments declared with\n  the same template parameter `T` the decayed types must match.	text	txt
2803	2	template<typename T>\nT max(T a, T b) { return a < b ? b : a; }	text	txt
2803	3	int const c = 42;\nmax(i, c);    // OK: T deduced as int\nmax(c, c);    // OK: T deduced as int	text	txt
2803	4	int& ir = i;\nmax(i, ir);   // OK: T deduced as int	text	txt
2803	5	int arr[4];\nmax(&i, arr); // OK: T deduced as int*	text	txt
2803	6	max(4, 7.2);  // ERROR: T can be dudeced as int or double	text	txt
2803	7	std::string s;\nmax("text", s); // ERROR: T can be deduced as char const[5] or std::string	code	txt
2804	1	1. Cast the arguments so that they both match:	text	txt
2804	2	max(static_cast<double>(4), 7.2);	code	txt
2804	3	2. Specify explicitly the type of function template parameter to prevent the compiler from attempting type deduction:	text	txt
2804	4	max<double>(4, 7.2);	code	txt
2804	5	3. Specify that the parameters may have different types:	text	txt
2804	6	#include <type_traits>	text	txt
2804	7	template<typename T, typename R>\nauto max(T a, R b) -> std::common_type_t<T, R>\n{\n    return a < b ? b : a;\n}	text	txt
2804	8	max<double>(4, 7.2);	code	txt
2805	1	Type deduction does not work for default call arguments.	text	txt
2805	2	template<typename T>\nvoid f(T = "");	text	txt
2805	3	f(1);   // OK: f<int>(1)\nf();    // ERROR: cannot deduce T	code	txt
2805	4	You have to declare a default function template parameter.	text	txt
2805	5	template<typename T = std::string>\nvoid f(T = "");	text	txt
2805	6	f();    // OK: f<std::string>()	code	txt
2806	1	template<typename T1, typename T2>\nT1 max(T1 a, T2 b)\n{\n    return b < a ? a : b;\n}	text	txt
2806	2	auto m = ::max(4, 7.2); // OK:: but max returns int	code	txt
2807	1	- Introduce an additional template parameter for the return type\n- Let the compiler find out the return type.\n- Declare the return type to be the common type of the parameter types.	text	txt
2808	1	In cases when there is no connection between template and call parameters and\nwhen template parameters cannot be determined, you must specify the template\nargument explicitly with the call. For example, the additional template\nargument type to define the return type of a function template. However,\ntemplate argument deduction does not take return types into account, and its\ntemplate parameter does not appear in the types of the function call\nparameters. Therefore, it cannot be deduced.	text	txt
2808	2	As a consequence, you have to specify the template argument list explicitly:	text	txt
2808	3	template<typename T1, typename T2, typename RT>\nRT max(T1 a, T2 b);	text	txt
2808	4	max<int, double, double>(4, 7.2); // OK, but tedious	code	txt
2808	5	Another approach is to specify return type template parameter at first:	text	txt
2808	6	template <typaname RT, typename T1, typename T2>\nRT max(T1 a, T2 b);	text	txt
2808	7	max<double>(4, 7.2); // OK	code	txt
2808	8	These modifications don't lead to significant advantages.	text	txt
2809	1	Since C++14, this is possible by simply not declaring any return type:	text	txt
2809	2	template<typename T1, typename T2>\nauto max(T1 a, T2 b);	code	txt
2809	3	Deducing the return type from the function body has to be possible.\nTherefore, the code must be available and multiple return statements have to\nmatch.	text	txt
2810	1	template<typename T1, typename T2>\nauto max(T1 a, T2 b) -> decltype(b < a ? a : b);	code	txt
2810	2	Using this method the implementation does not necessarily have to match. Even\nusing `true` as the condition for ternary operator in the declaration is\nenough:	text	txt
2810	3	template<typename T1, typename T2>\nauto max(T1 a, T2 b) -> decltype(true ? a : b);	code	txt
2811	1	It might happen that the return type is a reference type, because under some\nconditions the template parameter might be a reference. For this reason you\nshould return the type decayed from the template paramter, which looks as\nfollows:	text	txt
2811	2	#include <type_traits>	text	txt
2811	3	template<typename T1, typename T2>\nauto max(T1 a, T2 b) -> typename std::decay<decltype(true ? a : b)>::type;	code	txt
5223	4	act workflow_dispatch	code	sh
2811	4	Because the member `type` is a type, you have to qualify the expression with\n`typename` to access it.	text	txt
2811	5	Initialization of `auto` always decays. This also applies to return\nvalues when the return type is just `auto`.	text	txt
2811	6	int i = 42;\nint coust& ir = i;\nauto a = ir;  // a is declared as new object of type int	code	txt
2812	1	`std::common_type` is a type trait, defined in `<type_traits>`, which yields\na structure having a `type` static member for the resulting type. Thus, it\nneeds a `typename` beforehand in order to access its type.	text	txt
2812	2	#include <type_traits>	text	txt
2812	3	template<typename T1, typename T2>\ntypename std::common_type<T1, T2>::type max(T1 a, T2 b);	code	txt
2812	4	Since C++14, `std::common_type_t` is equivalent to\n`std::common_type<T>::type`.	text	txt
2812	5	#include <type_traits>	text	txt
2812	6	template<typename T1, typename T2>\nstd::common_type_t<T1, T2> max(T1 a, T2 b);	text	txt
2812	7	Note that `std::common_type<>` decays.	text	txt
2813	1	Initialization of `auto` always decays. This also applies to return\nvalues when the return type is just `auto`.	text	txt
2813	2	int i = 42;\nint coust& ir = i;\nauto a = ir;  // a is declared as new object of type int	code	txt
2814	1	Default template arguments can be used with any kind of template. They may\neven refer to previous template parameters.	text	txt
2814	2	#include <type_traits>	text	txt
2814	3	template<typename T1, typename T2,\n          typename RT = std::decay_t<decltype(true ? T1() : T2())>>	code	txt
2814	4	Another way is to use `std::common_type<>` which also decays so that return\nvalue doesn't become a reference.	text	txt
2814	5	RT max(T1 a, T2 b);	text	txt
2814	6	template<typename T1, typename T2, typename RT = std::commot_type_t<T1, T2>>\nRT max(T1 a, T2 b);	code	txt
2815	1	In principle, it is possible to have default arguments for leading function\ntemplate parameters even if parameters without default arguments follow:	text	txt
2815	2	template<typename RT = long, typename T1, typename T2>\nRT max(T1 a, T2 b);	text	txt
2823	3	template<typename T>\nvoid Stack<T>::push(T const&) { }	text	txt
2824	1	To declare a friend function and define it afterwards, we have two options:	text	txt
2815	3	int i;\nlong l;\nmax(i, l);  // returns long due default argument of template parameter for return type\nmax<int>(7, 42);    // returns int as explicitly specified, T1 and T2 deduced by function arguments	code	txt
2815	4	However, this approach only makes sence, if there is a natural default for a\ntemplate parameter.	text	txt
2816	1	int max(int a, int b);	text	txt
2816	2	template<typename T>\nT max(T a, T b);	code	txt
2816	3	The overload resolution process prefers the nontemplate over one generated\nfrom the template.	text	txt
2816	4	max(7, 42);   // calls the nontemplate for two ints	code	txt
3832	1	/sys/class	code	sh
3834	1	/usr/share/hwdata/pci.ids	code	sh
2816	5	If the template can generate a function with a better match, then the\ntemplate is selected. Here, the template is a better match because no\nconversion from `double` or `char` to `int` is required.	text	txt
2816	6	max(7.0, 42.0);   // calls max<double> by argument deduction\n::max('a', 'b');    // calls max<char> by argument deduction	code	txt
2816	7	An empty template argument list indicates that only templates may resolve a\ncall, but all the template parameters should be deduced from the call\narguments.	text	txt
2816	8	max<>(7, 42);     // calls max<int> by argument deduction	code	txt
2816	9	Becuase automatic type conversino is not considered for deduced template\nparameters but is considered for ordinary funcction parameters, the last call\nuses the nontemplate function.	text	txt
2816	10	max<double>(7, 42);   // calls max<double> no argument deduction\n::max('a', 42.7);   // calls the nontemplate for two ints	code	txt
2817	1	When two function templates match, the overload resolution process normally\nto process normally to prefer none and result in an ambiguity error.	text	txt
2817	2	template<typename T1, typename T2>\nauto max(T1 a, T2 b);	text	txt
2817	3	template<typename RT, typename T1, typename T2>\nRT max(T1 a, T2 b);	text	txt
2817	4	max(4, 7.2);  // calls first overload\n::max<long double>(4, 7.2); // calls second overload\n::max<int>(4, 7.2); // ERROR: both function templates match	code	txt
2818	1	A useful example would be to overload the maximum template for pointers and\nordinary C-strings.	text	txt
2818	2	#include <cstring>\n#include <string>	text	txt
2818	3	template<typename T>\nT max(T a, T b)\n{\n    return b < a ? a : b;\n}	text	txt
2818	4	template<typename T>\nT* max(T* a, T* b)\n{\n    return *b < *a ? a : b;\n}	text	txt
2818	5	char const* max(char const* a, char const* b)\n{\n    return std::strcmp(b, a) < 0 ? a : b;\n}	text	txt
2818	6	int i{7}, j{42};\nint *p1 = &i, *p2 = &j;	text	txt
2818	7	max(i, j);   // calls max() for two int\n::max(std::string{"mathematics"}, std::string{"math"}); // calls max() for std::string\n::max(p1, p2);  // calls max<int>() for two pointers\n::max("mathematics", "math");   // calls max() for two C-strings	code	txt
2819	1	In general, it is a good idea not to change more than necessary when\noverloading function templates. You should limit your changes to the number\nof parameters or to specifying template parameters explicitly. Otherwise,\nunexpected effects may happen.	text	txt
2819	2	For example, if you implement your `max()` template to pass the arguments by\nreference and overload it for two C-strings passed by value, you can’t use\nthe three-argument version to compute the maximum of three C-strings:	text	txt
2819	3	#include <cstring>	text	txt
2819	4	template<typename T>\nT const& max(T const& a, T const& b)\n{\n    return b < a ? a : b;\n}	text	txt
2819	5	char const* max(char const* a, char const* b)\n{\n    return std::strcmp(b, a) < 0 ? a : b;\n}	text	txt
2819	6	template<typename T>\nT const& max(T const& a, T const& b, T const& c)\n{\n    return max(max(a, b), c); // error if max(a,b) uses call-by-value\n}	text	txt
2819	7	max(7, 42, 68);   // OK	text	txt
2819	8	char const* s1 = "A";\nchar const* s2 = "B";\nchar const* s3 = "C";\n::max(s1, s2, s3);  // runtime error	code	txt
2819	9	The problem is that if you call `max()` for three C-strings, the statement:	text	txt
2819	10	return max (max(a,b), c);	code	txt
1457	1	struct alignas(8) item\n{\n    int id;\n    bool active;\n    double value;\n};\n\nstatic_assert(sizeof(item) == 16, "size of item must be 16 bytes");	code	cpp
2819	11	becomes a run-time error because for C-strings, `max(a,b)` creates a new,\ntemporary local value that is returned by reference, but that temporary value\nexpires as soon as the return statement is complete, leaving `main()` with a\ndangling reference.	text	txt
2819	12	Unfortunately, the error is quite subtle and may not manifest itself in all\ncases. In general, a conforming compiler isn’t even permitted to reject this\ncode.	text	txt
2820	1	Ensure that all overloaded versions of a function are declared before the\nfunction is called. This is because the fact that not all overloaded\nfunctions are visible when a corresponding function call is made may matter.	text	txt
2820	2	template<typename T>\nT max (T a, T b)\n{\n    return b < a ? a : b;\n}	text	txt
2820	3	template<typename T>\nT max (T a, T b, T c)\n{\n    return max (max(a,b), c);\n    // calls template max<int> not overload\n}	text	txt
2820	4	// declaration comes too late\nint max (int a, int b)\n{\n    std::cout << "max(int,int) \\\\n";\n    return b < a ? a : b;\n}	code	txt
2821	1	Before the declaration, you have to declare one or multiple identifiers as a\ntype parameters.	text	txt
2821	2	Inside the class template, template parameters can be used just like any\nother type to declare members and member functions.	text	txt
2821	3	template<typename T>\nclass Stack\n{\nprivate:\n    std::vector<T> data;	text	txt
2821	4	public:\n    void push(T const&);\n    void pop() const;\n    T const& top() const;\n    bool empty() const;\n};	code	txt
2821	5	The keyword `class` can be used instead of `typename`.	text	txt
2822	1	Template parameters can be omited when declaring copy constructor and copy\nassignment operator.	text	txt
2822	2	template<typename T>\nclass Stack\n{\npublic:\n    Stack(Stack const&);\n    Stack& operator=(Stack const&);\n};	code	txt
2822	3	But it is formally equivalent to specify template parameters:	text	txt
2822	4	template<typename T>\nclass Stack\n{\npublic:\n    Stack(Stack<T> const&);\n    Stack<T>& operator=(Stack<T> const&);\n};	code	txt
2822	5	But usually the `<T>` signals special handling of special template\nparameters, so it’s usually better to use the first form. However, outside\nthe class structure you'd need to specify it.	text	txt
2823	1	To define a member function of a class template, you have to specify that it\nis a template, and you have to use the full type qualification of the class\ntemplate.	text	txt
2823	2	template<typename T>\nclass Stack\n{\n    void push(T const&);\n    void pop();\n};	text	txt
2824	2	1. We can implicitly declare a new function template, which must use a\n   different template parameter, such as U:	text	txt
2824	3	template<typename T>\nclass Stack\n{\npublic:\n    Stack(Stack const&);	text	txt
2824	4	    template<typename U>\n    friend std::ostream& operator<<(std::ostream&, Stack<U> const&);\n};	code	txt
2824	5	We forward declare the output operator for a class to be a template, which,\nhowever, means that we first have to forward declare the class too:	text	txt
2824	6	template<typename T>\nclass Stack;	text	txt
2824	7	template<typename T>\nstd::ostream& operator<<(std::ostream&, Stack<T> const&);	text	txt
2824	8	template<typename T>\nclass Stack\n{\npublic:\n    Stack(Stack const&);	text	txt
2824	9	    friend std::ostream& operator<<<T>(std::ostream&, Stack<T> const&);\n};	code	txt
2824	10	Note the `<T>` behind the function name `operator<<`. Thus, we declare a\nspecialization of the nonmember function template as friend. Without `<T>` we\nwould declare a new nontemplate function.	text	txt
2825	1	To specialize a class template, you have to declare the class with a leading\n`template<>` and a specialization of the types for which the class template\nis specialized. The types are used as a template argument and must be\nspecified directly forwarding the name of the class:	text	txt
2825	2	template<typename T>\nclass Stack\n{\n    void push(T const&);\n};	text	txt
2825	3	template<typename T>\nvoid Stack<T>::push(T const&) { }	text	txt
2825	4	template<>\nStack<std::string>\n{\n    void push(std::string const&);\n};	text	txt
2825	5	void Stack<std::string>::push(std::string const&) { }	code	txt
2826	1	You can provide special implementation for particular circumstances, but some\ntemplate parameters must still be defined by the user.	text	txt
2826	2	template<typename T>\nclass Stack\n{\n    void push(T const&);\n};	text	txt
2826	3	template<typename T>\nvoid Stack<T> push(T const&) { }	text	txt
2826	4	template<typename T>\nclass Stack<T*>\n{\n    void push(T*);\n};	text	txt
2826	5	template<typename T>\nvoid Stack<T*>::push(T*) { }	code	txt
2826	6	With partial specialization, we define a class template, still parametrized\nfor `T` but specialized for a pointer (`Stack<T*>`).	text	txt
2827	1	template<typename T1, typename T2>\nclass Stack;	code	txt
2827	2	The following class template can be specialized in following ways:	text	txt
2827	3	template<typename T>\nclass Stack<T, T>;	text	txt
2827	4	template<typename T>\nclass Stack<T, int>;	text	txt
2827	5	template<typename T1, typename T2>\nclass Stack<T1*, T2*>;	code	txt
2827	6	The following examples show which template is used by which declaration:	text	txt
2827	7	Stack<int, float>{};    // Stack<T1, T2>\nStack<float, float>{};  // Stack<T, T>\nStack<float, int>{};    // Stack<T, int>\nStack<int*, float*>{};  // Stack<T1*, T2*>	code	txt
2827	8	If more than one partial specialization matches equally well, the declaration is ambiguous:	text	txt
2827	9	Stack<int, int>{};  // ERROR: matches Stack<T, T> and Stack<T, int>\nStack<int*, int*>{};    // ERROR: matches Stack<T, T> and Stack<T1*, T2*>	code	txt
2827	10	To resolve the second ambiguity, you could provide an additional partial specialization for pointers of the same type:	text	txt
2827	11	template<typename T>\nclass Stack<T*, T*>;	code	txt
2828	1	template<typename T, typename C = std::vector<T>>\nclass Stack\n{\nprivate:\n    C container;	text	txt
2828	2	public:\n    void push(T const&);\n    void pop();\n    T const& top() const;\n    bool empty() const;\n};	text	txt
2828	3	template<typename T, typename C>\nvoid Stack<T, C>::push(T const& value)\n{\n    container.push_back(value);\n}	text	txt
2828	4	template<typename T, typename C>\nvoid Stack<T, C>::pop()\n{\n    container.pop_back();\n}	text	txt
2828	5	template<typename T, typename C>\nT const& Stack<T, C>::top() const\n{\n    if (container.empty()) throw std::exception{"empty container"};\n    return container.back();\n}	text	txt
2828	6	template<typename T, typename C>\nbool Stack<T, C>::empty() const\n{\n    return container.empty();\n}	code	txt
2829	1	Unlike a `typedef`, an alias declaration can be templated to provide a\nconvenient name for a family of types. This is also available since C++11 and\nis called an alias template.	text	txt
2829	2	template<typename T>\nusing matrix = std::vector<std::vector<T>>;	code	txt
2830	1	Alias templates are especially helpful to define shortcuts for types that are\nmembers of class templates.	text	txt
2830	2	struct Matrix\n{\n    using iterator = ...;\n};	text	txt
2830	3	template<typename T>\nusing MatrixIterator = typename Matrix<T>::iterator;	code	txt
2830	4	The `typename` is necessary here because the member is a type.	text	txt
2830	5	Since C++14, the standard library uses this technique to define shortcuts for\nall type traits in the standard library that yield a type:	text	txt
2830	6	std::add_const_t<T> // C++14 abbreviate equivalent to std::add_const<T>::type available since C++11\nstd::enable_if_v<T> // C++14 abbreviate equivalent to std::enable_if<T>::value available since C++11	code	txt
2831	1	Since C++17, the constraint that you always have to specify the template\narguments explicitly was relaxed.	text	txt
2831	2	Stack<int> IntStack;\nStack<int> AnotherStack = IntStack;   // OK in all standard versions\nStack IntegralStack = AnotherStack;    // OK since C++17	code	txt
2832	1	By providing constructors that pass some initial arguments, you can support\ndeduction of the type used in a class.	text	txt
2832	2	template<typename T>\nclass Stack\n{\nprivate:\n    std::vector<T> container;	text	txt
2832	3	public:\n    Stack() = default;\n    Stack(T const& value): container({value}) { }\n};	code	txt
2833	1	1. You have to request the default constructor to be available with its\n   default behavior, because the default constructor is available only if no\n   other constructor is defined:	text	txt
2833	2	template<typename T>\nclass Stack\n{\npublic:\n    Stack() = default;\n};	code	txt
2833	3	2. The initial argument is passed with braces around to initialize the\n   internal container with an initializer list that argument as the only\n   argument:	text	txt
2833	4	template<typename T>\nclass Stack\n{\nprivate:\n    std::vector<T> container;	text	txt
2833	5	public:\n    Stack() = default;\n    Stack(T const& value): container({value}) { }\n};	code	txt
2969	1	if(IS_SYMLINK <file>)	code	cmake
2833	6	This is because there is no constructor for a vector that is able to take a\nsingle parameter as initial element directly. Even worse, there is a vector\nconstructor taking one integral argument as initial size, so that for a stack\nwith the initial value 5, the vector would get an initial size of five\nelements when `container(value)` is used.	text	txt
2834	1	When passing arguments of a template type `T` by reference, the parameter\ndoes not decay, which is the term for the mechanism to convert a raw array\ntype to the corresponding raw pointer typel.	text	txt
2834	2	Stack StringStack = "surprise!";    // Stack<char const[10]> deduced since C++17	code	txt
2834	3	However, when passing arguments of a template type T by value, the parameter\ndecays, which is the term for the mechansim to convert a raw array type to\nthe corresponding raw pointer type.	text	txt
2834	4	template<typename T>\nclass Stack\n{\nprivate:\n    std::vector<T> container;	text	txt
2834	5	public:\n    Stack(T value): container({std::move(value)}) { }\n    // initialize stack with one element by value to decay on class template argument deduction\n};	code	txt
2834	6	With this, the following initialization works fine:	text	txt
2834	7	Stack StringStack = "surprise!";    // Stack<char const*> deduced since C++17	code	txt
2834	8	In this case, don't forget to use move semantics to avoid unnecessary copy of\nthe argument.	text	txt
2835	1	Because handling raw pointers in containers is a source of trouble, we should\ndisable automatically deducing raw character pointers for container classes.	text	txt
2835	2	You can define specific **deduction guides** to provide additional or fix\nexisting class template argument deductions.	text	txt
2835	3	Stack(const char*) -> Stack<std::string>;	code	txt
2835	4	This guide has to appear in the same scope as the class definition.	text	txt
2835	5	We call the `->` the *guided type* of the deduction guide.	text	txt
2835	6	Stack StringStack{"no surprises now!"};  // Stack<std::string>	code	txt
2836	1	The declaration of a `Stack{"no surprise!"}` deduces as `Stack<char const*>` using the deduction guide:	text	txt
2836	2	Stack(char const*) -> Stack<std::string>;	code	txt
2836	3	However, the following still doesn't work:	text	txt
2836	4	Stack StringStack = "surprise again!"; // ERROR: Stack<std::string> deduced, but still not valid	code	txt
2836	5	By language rules, you can't copy initialize an object by passing a string\nliteral to a constructor expecting a `std::string`. So you have to initialize\nthe object with brace initialization.	text	txt
2837	1	Aggregate classes; classes or structs with no user-provided, explicit, or\ninherited constructor, no private or protected nonstatic data members, no\nvirtual functions, and no virtual, private, or protected base classes; can\nalso be templates.	text	txt
2837	2	template<typename T>\nstruct ValueWithComment\n{\n    T value;\n    std::string comment;\n};	code	txt
2837	3	Since C++17, you can even define deduction guides for aggregate class templates:	text	txt
2837	4	ValueWithComment(char const*, char const*) -> ValueWithComment<std::string>;	text	txt
2837	5	ValueWithComment vc = {"secret", "my secret message"}; // ValueWithComment<std::string> deduced	code	txt
2837	6	Without the deduction guide, the initialization would not be possible,\nbecause the aggregate class has no constructor to perform the deduction\nagainst.	text	txt
2837	7	The standard library class `std::array<>` is also an aggregate, parametrized\nfor both the element type and the size. The C++17 standard library also\ndefines a deduction guide for it.	text	txt
2838	1	You can implement data structures by using a fixed-size array for the\nelements. An advantage of this method is that the memory management overhead,\nwhether performed by you or by a standard container, is avoided. However,\ndetermining the best size is better be specified by users.	text	txt
2838	2	template<typename T, std::size_t S>\nclass Stack\n{\nprivate:\n    std::array<T, S> container;\n    std::size_t elements;	text	txt
5224	1	act --list	code	sh
2838	3	public:\n    void push(T const&);\n    void pop();\n    T const& top() const;\n    bool empty() const;\n    std::size_t size() const;\n};	code	txt
2839	1	namespace custom\n{\n    template<typename T, std::size_t S>\n    stack\n    {\n        std::size_t elements;\n        std::array<T, S> container;\n    };\n}	text	txt
2839	2	custom::stack<long, 42> buffer{};	code	txt
2840	1	Each template instantiation is its own type.	text	txt
2840	2	template<typename T, std::size_t S>\nclass stack;	text	txt
2840	3	stack<long, 42> small_stack;\nstack<long, 1000> big_stack;	code	txt
2840	4	The two are different types and no implicit or explicit type conversion\nbetween them is defined.	text	txt
2841	1	template<typename T, std::size_t S = 100>\nclass stack;	code	txt
2841	2	From a perspective of good design, this is not appropriate in many examples.\nIt is better when the programmer has to specify values explicitly.	text	txt
2842	1	-Configuration\n- Generation\n- Building	text	list
2843	1	CMake checks wether the project was configured before by reaching `CMakeCache.txt` file in build directory.	text	txt
2844	1	cmake_minimum_required(VERSION 3.20)\nproject(Name VERSION 0.1 LANGUAGE CXX C DESCRIPTION "Template")\nadd_executable(binary source)	code	cmake
2845	1	cmake -S <source_path> -B <build_path>	code	sh
2846	1	cmake --build <build_path>	code	sh
2847	1	git clone https://github.com/kitware/cmake.git ~/.local/src/cmake\ncd ~/.local/src/cmake\ngit checkout v3.30.2\n./bootstrap\nmake --prefix ~/.local\nmake install	code	sh
2848	1	- `cmake`: main executable\n- `ctest`: test driver program\n- `cpack`: packaging program\n- `cmake-gui`: graphical interface\n- `ccmake`: ncurses graphical interface	text	txt
2849	1	cmake -S <source_path> -B <build_path> -G "Unix Makefiles"	code	sh
2849	2	cmake -S <source_path> -B <build_path> -G "Ninja"	code	sh
2850	1	cmake --help	code	sh
2851	1	cmake --help-manual-list\ncmake --help-command-list\ncmake --help-module-list\ncmake --help-policy-list\ncmake --help-property-list\ncmake --help-variable-list	code	sh
2852	1	cmake -C <CMakeCache.txt> -S <source_path> -B <build_path>	code	sh
2853	1	cmake -S <source_path> -B <build_path> -D <variable=value>	code	sh
2854	1	cmake -S <source_path> -B <build_path> -D CMAKE_BUILD_TYPE=<type>	code	sh
2854	2	Possible build type values are:	text	txt
3604	1	env	code	sh
2854	3	- `Debug`\n- `Release`\n- `MinSizeRel`\n- `RelWithDebInfo`	text	list
2855	1	cmake -S <source_path> -B <build_path> -LH	code	sh
2855	2	cmake -S <source_path> -B <build_path> -L	code	sh
2855	3	Sometimes, project authors may provide insightful help messages with variables:	text	txt
2855	4	Custom variables added with `-D` will not be visible in this list, unless running:	text	txt
2855	5	cmake -S <source_path> -B <build_path> -LHA	code	sh
2856	1	cmake -S <source_path> -B <build_path> -U <variable>	code	sh
2857	1	cmake --system-information [file]	code	sh
2858	1	- `ERROR`\n- `WARNING`\n- `NOTICE`\n- `STATUS`\n- `VERBOSE`\n- `DEBUG`\n- `TRACE`	text	list
2858	2	cmake --log-level <level>	code	sh
2858	3	Possible values for levels are:	text	txt
2859	1	message()	code	cmake
2860	1	To debug complex projects, the `CMAKE_MESSAGE_CONTEXT` variable can be used like a stack. Whenever execution enters to a context, you can name it descriptively. By doing so messages will be decorated with the current `CMAKE_MESSAGE_CONTEXT` variable.	text	txt
2861	1	cmake --log-context <source_path>	code	sh
2862	1	cmake --trace	code	sh
2863	1	Developers can simplify how users interact with their projects and provide a `CMakePresets.json` file that specifies some defaults.	text	txt
2864	1	cmake --list-presets	code	sh
2865	1	cmake --preset <preset> -S <source_path> -B <build_path>	code	sh
2866	1	cmake -S <source_path> -B <build_path> --fresh	code	sh
2866	2	CMake will then erase `CMakeCache.txt` and `CMakeFiles/` in the build directory.	text	txt
2867	1	cmake --build <build_path> --parallel <jobs>	code	sh
2867	2	An alternative is to set it with `CMAKE_BUILD_PARALLEL_LEVEL` environment variable.	text	txt
2867	3	cmake --build <build_path> -j <jobs>	code	sh
2868	1	cmake --build <build_path> --parallel <jobs> --target <target>	code	sh
2869	1	cmake --build <build_path> --target clean	code	sh
2870	1	cmake --build <build_path> --parallel <jobs> --target all --clean-first	code	sh
2871	1	cmake --build <build_path> --parallel <jobs> --config <type> --target all	code	sh
2872	1	cmake --build <build_path> -v	code	sh
2872	2	cmake --build <build_path> --verbose	code	sh
2873	1	cmake --install <build_path>	code	sh
2874	1	cmake --install <build_path> --install-prefix <prefix>	code	sh
2875	1	cmake --install <build_path> --component <name>	code	sh
2876	1	cmake --install <build_path> --default-directory-permissions <perms>	code	sh
2877	1	The same effect can be achieved if the `VERBOSE` environment variable is set.	text	txt
2877	2	cmake --install <build_path> -v	code	sh
2877	3	cmake --install <build_path> --verbose	code	sh
2878	1	cmake -D <variables...> -P <cmake script> -- args...	code	sh
2878	2	Running a script won't run any **configuration** or **generate** stages, and it won't affect cache.	text	txt
2879	1	cmake -E <command>	code	cmake
2880	1	cmake -E sha224sum	code	sh
2880	2	cmake -E md5sum	code	sh
2880	3	cmake -E sha512sum	code	sh
2880	4	cmake -E sha384sum	code	sh
2880	5	cmake -E sha256sum	code	sh
2880	6	cmake -E sha1sum	code	sh
2881	1	Advanced projects can specify workflow presets that bundle multiple steps into one.	text	txt
2882	1	cmake --workflow --list-presets	code	sh
2883	1	cmake --workflow --preset <name>	code	sh
2884	1	ctest --testdir <build_path>	code	sh
2885	1	cmake-gui	code	sh
2885	2	ccmake	code	sh
2886	1	The directory where the project resides, containing all of the source files and cmake project files.	text	txt
2886	2	The path to this directory is given to `-S` argument of `cmake`.	text	txt
2887	1	The path to this directory is given to `-B` argument of `cmake`.	text	txt
2887	2	Build configuration and project artifacts will be created here.	text	txt
2888	1	Files that contain the CMake language are called listfiles and they can be included with `include()` and `find_package()` functions or indirectly with `add_subdirectory()`.	text	txt
2889	1	A top-level listfile should contain at least two commands:	text	txt
2889	2	CMake projects are configured with `CMakeLists.txt` listfile.	text	txt
2889	3	This file is required on the top of the source tree of every project.	text	txt
2889	4	cmake_minimum_required(VERSION <x,xx>)\nproject(<name> <options>)	code	cmake
2890	1	The external entries are meant for users to modify, while the internal entries are managed by CMake.	text	txt
2890	2	Cache entries are divided into external and internal sections into `CMakeCache.txt` file on top of the build directory.	text	txt
2891	1	Project authors that want to provide CMake support will ship with a CMake package configuration file.	text	txt
2891	2	External CMake packages provide libraries and tools platform independently.	text	txt
2891	3	Config files are named `<package>-config.cmake` or <Package>Config.cmake` and can be used as follows:	text	txt
2891	4	find_package(<package>)	code	cmake
2892	1	- `cmake_install.cmake`\n- `CTestTestFiles.cmake`\n- `CPackConfig.cmake`	text	txt
2892	2	CMake uses them as a configuration for the `cmake` install action, `ctest`, and `cpack`.	text	txt
2892	3		code	cmake
2893	1	- `CMakePresets.json`: used by project authors to provide official presets.\n- `CMakeUserPresets.json`: dedicated to users who want to customize the project configuration to their liking.	text	list
2893	2	cmake --list-presets	code	cmake
2893	3	cmake --preset <preset>	code	cmake
2893	4	Presets are stored in two files:`CMakePresets.json`	text	txt
2893	5	Since CMake 3.25, presets allow us to configure **workflows**, which tie stages (configure, build, test, and package) into a named list of steps to execute.	text	txt
2970	1	if(IS_ABSOLUTE <path>)	code	cmake
2973	2	while(<condition>)\n    <command>\nendwhile()	code	cmake
3606	1	ls -la	code	sh
2894	1	Often some tasks need to be run in complex projects. Naturally, authors write Bash scripts or use Python, Perl, or Ruby scripts, but that's an added dependency and will increase the complexity of your C/C++ projects. But with CMake scripts these tasks can be run platform independently in a simpler way.	text	txt
2894	2	cmake -P <name>.cmake	code	cmake
3841	1	/etc/default/grub	code	sh
3841	2	/etc/grub.d/	code	sh
2895	1	When running scripts, CMake won't execute any of the usual stages and it won't use the cache since there is no concept of source tree or build tree in scripts.	text	txt
2895	2	It is recommended to call the `cmake_minimum_required()` command at the beginning of every script to specify which policies should be applied to subsequent commands in the project.	text	txt
2895	3	cmake_minimum_required(VERSION 3.30)\nmessage(STATUS "Running a script")\nfile(WRITE sample.txt "A script made this file")	code	cmake
2896	1	Modules are written in CMake language and contain macro definitions, variables and commands that perform all kinds of functions.	text	txt
2896	2	CMake comes packed with over 80 different utility modules.	text	txt
2896	3	You can also download modules from a curated list in https://github.com/onqtam/awesome-cmake.	text	txt
2897	1	include(<module>)	code	cmake
2898	1	CMake has a mechanism to find files belonging to external dependencies that don't support CMake and don't provide a CMake package config file.	text	txt
2898	2	For example, `FindCurl` module searches for a curl library and defines `CURL_FOUND`, `CURL_INCLUDE_DIRS`, `CURL_LIBRARIES`, `CURL_VERSION_STRING` variables.	text	txt
2898	3	If the files are found, variables with their path will be defined so that CMake can build against that dependency.	text	txt
2898	4	find_package(<module>)	code	cmake
2898	5	CMake provides over 150 find modules that are able to locate those packages if they are installed in the system.	text	txt
2899	1	cmake --help-module-list	code	sh
2900	1	The starting point of execution is determined by the mode, either from the root of the source tree, or a cmake script file provided as an argument to `cmake`.	text	txt
2901	1	Command names are not case sensitive, but there is a convention in the CMake community to use `snake_case`, meaning lowercase words joined with underscore.	text	txt
2902	1	#[=[ block comments ]=]	code	cmake
2902	2	# inline comment	code	cmake
2903	1	3. Unquoted arguments	text	txt
2903	2	message([=[\na message holding "quotes" and [[brackets]]	code	cmake
2903	3	2. Quoted arguments	text	txt
2903	4	message("quotes")	code	cmake
2903	5	message(argument without;quotes)	code	cmake
2903	6	1. Bracket arguments	text	txt
2904	1	There are three categories of variables:	text	txt
2904	2	- **normal**\n- **cache**\n- **environment**	text	list
2904	3	Each of these categories reside in different variable scopes, with specific rules on how one scope affects the other.	text	txt
2905	1	Variable names are case-sensitive and can include almost any character.	text	txt
2906	1	All variables are stored internally as strings, even if some commands can interpret them as values of other types like a list!	text	txt
2907	1	unset()	code	cmake
2907	2	There are also other commands that can directly manipulate variable contents:	text	txt
2907	3	string()	code	cmake
2907	4	list()	code	cmake
2907	5	set()	code	cmake
2908	1	set([[source files]] "main.cpp")	code	cmake
2908	2	set(source-files "main.cpp")	code	cmake
2908	3	set(source_files "main.cpp")	code	cmake
2908	4	set("source files" "main.cpp")	code	cmake
2909	1	unset(source-files)	code	cmake
2910	1	${variable}	code	cmake
2911	1	$ENV{variable}	code	cmake
2912	1	$CACHE{variable}	code	cmake
2913	1	This process is also called variable evaluation, expansion, or interpolation.	text	txt
5558	4	import ftxui.screen;\nimport ftxui.dom;\nimport ftxui.component;	code	cpp
2913	2	CMake will traverse the variable scopes from the innermost to the outermost scope and replace variable with a value, or an empty string if no variable is found.	text	txt
2914	1	set(${variable} "value")	code	cmake
2914	2	So the following command will not change the variable itself, but the variable named after the value stored in it.	text	txt
2914	3	CMake will perform variable expansion to the full extent, and only after completion will it pass the resulting values as arguments.	text	txt
2915	1	The normal variable will be replaced if found in current scope. But if it wasn't set, or was unset, CMake will use the cache variable with the same name. If there is no such variable, the reference evaluates to an empty string.	text	txt
2915	2	When expanding a variable with `${}`, you might get a value from one category or the other.	text	txt
2916	1	${CMAKE_ARGC}	code	cmake
2916	2	You can pass command-line arguments to scripts after the `--` token and they will be stored in `CMAKE_ARGV<N>` variables.	text	txt
2916	3	The total number of arguments is stored in `CMAKE_ARGC` variable.	text	txt
2916	4	${CMAKE_ARGV1}	code	cmake
2917	1	CMake makes a copy of the variables that were in the environment used to start the `cmake` process and makes them available in a single, global scope.	text	txt
2917	2	To reference these variables use `$ENV{variable}`.	text	txt
2917	3	$ENV{HOME}	code	cmake
2918	1	The environment variables will be interpolated during the generation of the build system. This means that they will get permanently baked into the build tree, and changing this environment variable in build stage won't have any effect.	text	txt
2919	1	Cache variables will be used if the `${}` reference can't find a normal variable defined in the current scope but a cache variable with the same name exists.	text	txt
2919	2	${CMAKE_BUILD_TYPE}	code	cmake
2919	3	They can also be explicitly referenced with the `$CACHE{}` syntax.	text	txt
2920	1	set(<variable> <value> CACHE <type> <description> [FORCE])	code	cmake
2921	1	- `BOOL`\n- `FILEPATH`\n- `PATH`\n- `STRING`\n- INTERNAL`	text	list
2971	1	Since CMake 3.24 `PATH_EQUAL` compares two paths but does not normalize any of the arguments except collapsing multiple path separators.	text	txt
3606	2	ls	code	sh
2922	1	- **File Scope:** used when blocks and custom functions are executed within a file.\n- **Directory Scope:** used when `add_subdirectory()` command is called to execute another `CMakeLists.txt` listfile in a nested directory.	text	list
2922	2	Conditional blocks, loop blocks, and macros don't create separate scopes.	text	txt
2923	1	When a nested scope is created, CMake simply copies all of the variables from the outer scope. Subsequent commands will only affect these copies. But as soon as the execution of the nested scope is completed, all of the copies are deleted and the original variables from the outer scope are restored.	text	txt
2924	1	File variable scopes are opened using the `block()` and `function()` commands, and they are closed with `endblock()` and `endfunction()`.	text	txt
2925	1	block()\n    set(foo "bar")\n    block()\n        set(foo "baz")\n    endblock() // baz\nendblock() // bar\n// empty string	code	cmake
2926	1	Note that propagating a variable to the outer scope is only affected to the outer scope above the current, but not further.	text	txt
2926	2	Also note that `PARENT_SCOPE` doesn't change the variable in current scope.	text	txt
2926	3	set(foo "bar" PARENT_SCOPE)	code	cmake
2926	4	block()\n    set(foo "bar")\n    block(PROPAGATE foo)\n        set(foo "baz")\n    endblock() // baz\nendblock() // baz\n// empty string	code	cmake
2927	1	CMake concatenates all elements into a string delimited by a semicolon.	text	txt
2928	1	set(<name> <element>...)	code	cmake
2928	2	set(sample "a;list;of;five;elements")	code	cmake
2928	3	set(sample a list "of;five;elements")	code	cmake
2929	1	message(${sample})	code	cmake
2929	2	Each elements will be an argument.	text	txt
2929	3	By passing an unquoted list reference, we effectively send more arguments to the command:	text	txt
2930	1	message("${sample}")	code	cmake
2931	1	list(LENGTH <list> <result>)	code	cmake
2932	1	list(GET <list> <index>... <result>)	code	cmake
2933	1	list(JOIN <list> <list> <result>)	code	cmake
2934	1	list(SUBLIST <list> <index> <length> <result>)	code	cmake
2935	1	list(FIND <list> <value> <result>)	code	cmake
2936	1	list(APPEND <list> <element>...)	code	cmake
2937	1	list(FILTER <list> <INCLUDE|EXCLUDE> REGEX <regex>)	code	cmake
2938	1	list(INSERT <list> <element>...)	code	cmake
2939	1	list(POP_BACK <list> <result>...)	code	cmake
2940	1	list(POP_FRONT <list> <result>...)	code	cmake
2941	1	list(PREPEND <list> <element>...)	code	cmake
2942	1	list(REMOVE_ITEM <list> <value>...)	code	cmake
2943	1	list(REMOVE_AT <list> <index>...)	code	cmake
2944	1	list(REMOVE_DUPLICATES <list>)	code	cmake
2945	1	list(TRANSFORM <list> <action> ...)	code	cmake
2946	1	list(REVERSE <list>)	code	cmake
2947	1	list(SORT <list> ...)	code	cmake
2948	1	if(<condition>)\n    <command>...\nelseif(<condition>)\n    <command>...\nelse\n    <command>...\nendif()	code	cmake
2949	1	<condition> OR <condition>	code	cmake
2949	2	CMake supports `NOT`, `AND`, and `OR` operations.	text	txt
2949	3	NOT <condition>	code	cmake
2949	4	<condition> AND <condition>	code	cmake
2950	1	<condition> AND ( <condition> OR <condition> )	code	cmake
2951	1	if(CMAKE_CXX_EXTENSIONS)\n    <command>...\nendif()	code	cmake
2951	2	foo AND ( bar OR baz )	code	cmake
2951	3	For legacy reasons, CMake will evaluate unquoted arguments as if they are variable references.	text	txt
2952	1	Strings are considered boolean true, only if they equal to any of the following case sensitive constants:	text	txt
2952	2	- `ON`\n- `Y`\n- `YES`\n- `TRUE`\n- non-zero number	text	list
5558	5	---	text	md
2953	1	set(x something)\nset(y "x")\nif (${y})\n    # reference ${y} first expands to x\n    # x is a known variable then it expands to "something"\n    # if("something") is evaluated to false\nendif()	code	cmake
2953	2	But when variable is used, the condition is considered boolean false only if the expanded value contains `OFF`, `NO` `FALSE`, `N`, `IGNORE`, `NOTFOUND`, a string appended with `-NOTFOUND`, an empty string, zero.	text	txt
2953	3	if(y)\n    # variable y evaluates to x\n    # but x will not be expanded anymore\n    # because x is not one of the false conditions, it evalues to true\nendif()	code	cmake
2953	4	When a reference is used, the condition is considered boolean true only if the expanded value contains `ON`, `Y`, `YES`, `TRUE`, or a non-zero number.	text	txt
2954	1	if(DEFINED ENV{<name>})	code	cmake
2954	2	if(DEFINED <name>)	code	cmake
2954	3	if(DEFINED CACHE{<name>})	code	cmake
2955	1	`EQUAL`, `LESS`, `LESS_EQUAL`, `GREATER`, `GREATER_EQUAL`	text	list
2956	1	Same as integral comparison operators, but with `VERSION_` prefixed.	text	txt
2956	2	`EQUAL`, `LESS`, `LESS_EQUAL`, `GREATER`, `GREATER_EQUAL`	text	list
2957	1	Same as integral comparison operators, but with `STR` prefixed.	text	txt
2957	2	`EQUAL`, `LESS`, `LESS_EQUAL`, `GREATER`, `GREATER_EQUAL`	text	list
2958	1	if(<variable> MATCHES <regex>)	code	cmake
2959	1	Any matched groups are captured in `CMAKE_MATCH_<n>` variables.	text	txt
2959	2	if("12.10.2024" MATCHES "[0-9]+")\n    message(STATUS "Day: ${CMAKE_MATCH_1}"))\n    message(STATUS "Month: ${CMAKE_MATCH_2}"))\n    message(STATUS "Year: ${CMAKE_MATCH_3}"))\nendif	code	cmake
2960	1	if(<var> IN_LIST <list>)	code	cmake
2961	1	if(COMMAND <command>)	code	cmake
2962	1	if(POLICY <policy-id>)	code	cmake
2963	1	if(TEST <name>)	code	cmake
2964	1	if(TARGET <name>)	code	cmake
2965	1	Targets are logical units of a build process in a project, and they can be defined by following commands:	text	txt
2965	2	add_custom_target()	code	cmake
2965	3	add_executable()	code	cmake
2965	4	add_library()	code	cmake
2966	1	if(EXISTS <absolute-path>)	code	cmake
2966	2	This resolves symbolic links.	text	txt
2967	1	if(<file> IS_NEWER_THAN <file>)	code	cmake
2968	1	if(IS_DIRECTORY <path>)	code	cmake
2973	3	foreach(<loop_variable> RANGE <max>)\n    <command>\nendforeach()	code	cmake
2973	4	In above variation of `foreach`, iteration begins from 0.	text	txt
2973	5	foreach(<loop_variable> RANGE <min> <max> [step])\n    <command>\nendforeach()	code	cmake
2973	6	foreach(<loop_variable> IN [LISTS <lists>] [ITEMS <item>])\n    <command>\nendforeach()	code	cmake
2973	7	Since CMake 3.17 there is another variation of `foreach`:	text	txt
2973	8	foreach(<loop_variable> IN ZIP_LISTS <list>...)	code	cmake
2973	9	set(words "one;two;three")\nset(numbers "1;2;3")\nforeach(value IN ZIP_LISTS words numbers)\n    message("${value_0}, ${value_1}")\nendforeach()	code	cmake
2973	10	Or loop variables can be as many as there are lists:	text	txt
2973	11	foreach(<loop_variable>... IN ZIP_LISTS <list>...)	code	cmake
2973	12	foreach(word number IN ZIP_LISTS words numbers)\n    message("${word} ${number}")\nendforeach()	code	cmake
2974	1	Since CMake 3.21 loop variables are restricted to the local scope of the loop.	text	txt
2975	1	`function()` and `macro()`	text	txt
2975	2	macro(<name> [<argument>...])\n    <command>\nendmacro()	code	cmake
2975	3	function(<name> [<argument>...])\n    <command>\nendfunction()	code	cmake
2976	1	`function()` create a scope, but `macro()` will be replaced like a preprocessor macro in C++, therefore the scope of a `macro()` is the same as its surroundings.	text	txt
2976	2	macro(change_variable_inline variable value)\n    set(variable "${value}")\nendmacro()	code	cmake
2976	3	set(number 1)\nchange_variable_inline(number 2)\n# number = 2	code	cmake
2977	1	- `ARGC`: number of arguments\n- `ARGV`: list of arguments\n- `ARGV<index>`: indexed argument\n- `ARGN`: list of arguments passed by caller after the last expected argument, also known as positional arguments	text	txt
2977	2	function(print STREAM)\n    message("${STREAM}")\nendfunction()	code	cmake
2978	1	- `CMAKE_CURRENT_FUNCTION`\n- `CMAKE_CURRENT_FUNCTION_LIST_DIR`\n- `CMAKE_CURRENT_FUNCTION_LIST_FILE`\n- `CMAKE_CURRENT_FUNCTION_LIST_LINE`	text	txt
2979	1	message(<level> <string>...)	code	cmake
2980	1	- `FATA_ERROR`\n- `SEND_ERROR`\n- `WARNING`\n- `AUTHOR_WARNING`\n- `DEPRECATION`\n- `NOTICE`\n- `STATUS`\n- `VERBOSE`\n- `DEBUG`\n- `TRACE`	text	txt
2981	1	In complex debugging scenarios, it can be helpful to indicate in which context the message is occuring.	text	txt
2981	2	list(APPEND CMAKE_MESSAGE_CONTEXT network)\nmessage(FATAL_ERROR "Fatal Problem")	code	cmake
2981	3	cmake -P context.cmake --log-context	code	sh
2982	1	include(<file>|<module> [OPTIONAL] [RESULT_VARIABLE <variable>])	code	cmake
2982	2	Either it takes a file name with `.cmake` extension and tries to open it, or it considers given name as a module and searches for the file `<module>.cmake` in `CMAKE_MODULE_PATH` and then in the CMake module directory.	text	txt
2982	3	When file cannot be reached, CMake raises error unless `OPTIONAL` is set. The result of optional inclusion can be captured with `RESULT_VARIABLE` but it will be in surrounding scope. The variable will be the path to the included file or `NOTFOUND` otherwise.	text	txt
2983	1	include_guard([DIRECTORY|GLOBAL])	code	cmake
2983	2	To protect from inclusion in unrelated function scopes that will not share variables with each other, we can use `DIRECTORY` or `GLOBAL` arguments.	text	txt
2984	1	file(READ <filename> <content_variable> [...])	code	cmake
2985	1	file(WRITE|APPEND <filename> <content>...)	code	cmake
2986	1	file(DOWNLOAD <url> [file] [...])	code	cmake
2987	1	Running another process only works during the configuration stage.	text	txt
2987	2	execute_process(COMMAND <command> [argument]... [OPTIONS])	code	cmake
2987	3	We should make sure the command is already available on the host based on which operating system is running.	text	txt
2987	4	When multiple commands specified, they will be chained and output of one will be passed to another.	text	txt
2987	5	`TIMEOUT <seconds>` can be passed as an option.	text	txt
2987	6	`WORKING_DIRECTORY <directory>` can also be set to explicitly change the working directory of the process.	text	txt
2987	7	The exit code of all processes can be taken by the list `RESULTS_VARIABLE <variable>` as an option, or the exit code of the last command simply by `RESULT_VARIABLE <variable>`.	text	txt
2987	8	Standard output and error of the process can be taken by `OUTPUT_VARIABLE <variable>` and `ERROR_VARIABLE <variable>` respectively.	text	txt
2988	1	By calling `cmake_minimum_required(VERSION)`, CMake will implicitly trigger `cmake_policy(VERSION)`. Policies change every aspect of the CMake behavior, even with `project()` command. So it is adviced to always to this command before defining the project itselt.	text	txt
2988	2	cmake_minimum_required(VERISON 3.30.0)	code	cmake
2989	1	project(<name> VERSION <version> LANGUAGES <language> DESCRIPTION <description> HOMEPAGE_URL <link>)	code	cmake
2990	1	ASM,ASM_NASM,ASM_MASM,ASMMARMASM,ASM-ATT,C,CXX,CUDA,OBJC,OBJCXX,Fortran,HIP,ISPC,CSharp,Java	text	list
2991	1	- `PROJECT_VERSION`\n- `<project-name>_VERSION`\n- `CMAKE_PROJECT_VERSION`: only top level listfile\n- `PROJECT_VERSION_MAJOR`, `<project-name>_VERSION_MAJOR`\n- `PROJECT_VERSION_MINOR`, `<project-name>_VERSION_MINOR`\n- `PROJECT_VERSION_PATCH`, `<project-name>_VERSION_PATCH`\n- `PROJECT_VERSION_TWEAK`, `<project-name>_VERSION_TWEAK`	text	txt
2992	1	- `PROJECT_DESCRIPTION`, `<project-name>_DESCRIPTION`\n- `PROJECT_HOMEPAGE_URL`, `<project-name>_HOMEPAGE_URL`	text	txt
2993	1	include(<filename>.cmake)	code	cmake
2993	2	This command will bring everything defined within the scope of current listfile.	text	txt
2994	1	After inclusion of another listfile, the variables from the nested directory will pollute the top-level scope and vice versa. There will be no scopes in inclusion. This has its own use cases and cannot be considered a defect.	text	txt
2994	2	set(source_files src/main.cpp) # path must be relative to consumer with inclusion	code	cmake
2994	3	cmake_minimum_required(VERSION 3.30.0)\nproject(Producer LANGUAGES CXX)\n\ninclude(src/sources.cmake)\nadd_executable(program ${source_files})	code	cmake
2994	4	All the paths are relative to the top level listfile. All directories will share the same configuration.	text	txt
2995	1	add_subdirectory(<source-dir> [binary-dir] [EXCLUDE_FROM_ALL])	code	cmake
3606	3	ls -l	code	sh
2995	2	In contrast to `include()` command, `add_subdirectory()` introduces a variable scope and it is the recommended way of inclusion.	text	txt
2995	3	add_library(database SHARED src/database.cpp)\ntarget_linclude_directories(database PUBLIC include)	code	cmake
2995	4	add_library(network SHARED src/network.cpp)\ntarget_linclude_directories(network PUBLIC include)	code	cmake
2995	5	cmake_minimum_required(VERSION 3.30.0)\nproject(Sample VERSION 1.0 LANGUAGES CXX)\n\nadd_subdirectory(database)\nadd_subdirectory(network)\n\nadd_executable(program main.cpp)\ntarget_link_libraries(program PRIVATE network database)	code	cmake
2996	1	The best approach is to make the targets available through `find_package()`, but it requires creating a package and installing it on the system.	text	txt
2996	2	find_package(<project-name> <version> COMPONENTS <components>...)	code	cmake
2997	1	To properly define all targets of a package defined using commands such as `add_library()` and `add_executable()` with the correct properties set, we should explicitly export them so that the consuming project includes them using `include()` command.	text	txt
2997	2	# library\nexport(TARGETS <target>... [NAMESPACE <namespace>] [APPEND] FILE <path> [EXPORT_LINK_INTERFACE_LIBRARIES])	code	cmake
2997	3	# consumer\ncmake_minimum_required(VERSION 3.30.0)\nproject(Consumer)\ninclude(Producer.cmake)	code	cmake
2997	4	You must specify targets to export after `TARGETS` and the destination filename after `FILE`. The other arguments are optional.	text	txt
2998	1	1. Using `export(TARGETS...)`, which directly takes the targets to be exported:	text	txt
2998	2	export(TARGETS sum sub mul div NAMESPACE Math:: FILE "${CMAKE_CURRENT_BINARY_DIR}/cmake/MathTargets.cmake")	code	cmake
2998	3	2. Using `export(EXPORT...)`, which requires the name of predefined export rather than a list of exported targets. Such exported targets are defined by `install(TARGETS)` with `EXPORT` keyboard:	text	txt
2998	4	install(TARGETS <target> EXPORT <export>)	code	cmake
2998	5	export(EXPORT <export> [NAMESPACE <namespace>] FILE <path>)	code	cmake
2998	6	For example:	text	txt
2998	7	install(TARGETS sum sub mul div EXPORT MathTargets")\nexport(EXPORT MathTargets NAMESPACE Math:: FILE "${CMAKE_CURRENT_BINARY_PATH}/cmake/MathTargets.cmake")	code	cmake
2999	1	When exporting targets using `export()` command, the paths will be hardcoded in the generated export file. To make it relocatable, additional steps are required.	text	txt
2999	2	cmake_minimum_required(VERSION 3.30.0)\nproject(Math LANGUAGES CXX)\n\nadd_library(sum)\ntarget_sources(sum src/sum.cpp)\ntarget_include_directories(sum "${CMAKE_CURRENT_SOURCE_DIR}/include")\n\ninstall(TARGETS sum EXPORT MathTargets)\nexport(EXPORT MathTargets NAMESPACE Math:: FILE "${CMAKE_CURRENT_BINARY_PATH}/cmake/MathTargets.cmake")	code	cmake
2999	3	cmake -S /tmp/math -B /tmp/math/build -D CMAKE_BUILD_TYPE=Release	code	sh
2999	4	# /tmp/math/build/cmake/MathTargets.cmake Generated by CMake\n\n# Create imported target Math::sum\nadd_library(Math::sum SHARED IMPORTED)\n\nset_target_properties(Math::sum PROPERTIES\n  INTERFACE_INCLUDE_DIRECTORIES "/tmp/math/include"\n  INTERFACE_SOURCES "/tmp/math/src/capture.cpp"\n)\n\n# Import target "Math::sum" for configuration "Release"\nset_property(TARGET Math::sum APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)\nset_target_properties(Math::sum PROPERTIES\n  IMPORTED_LOCATION_RELEASE "/tmp/math/build/libsum.so"\n  IMPORTED_SONAME_RELEASE "libsum.so"\n  )	code	cmake
3000	1	cmake --install <build-path> # mandatory argument	code	sh
3000	2	cmake --install <build-path> --config <value> --default-directory-permissions <value> --prefix <path> --verbose	code	sh
3001	1		text	txt
3001	2	install()	code	cmake
3002	1	install(TARGETS) # libraries and executables	code	cmake
3002	2	install(FILES|PROGRAMS) # individual files not part of any targets	code	cmake
3002	3	install(DIRECTORY) # entire directory	code	cmake
3002	4	install(SCRIPT|CODE) # runs a CMake script or a snippet during installation	code	cmake
3002	5	install(EXPORT) # generates and installs a target export file	code	cmake
3002	6	install(RUNTIME_DEPENDENCY_SET <name> [...]) # runtime dependency set defined in project	code	cmake
3002	7	install(IMPORTED_RUNTIME_ARTIFACTS <target> [...]) # imported targets	code	cmake
3003	1	`DESTINATION` argument is common between all `install()` modes:	text	txt
3003	2	install(TARGETS sum LIBRARY DESTINAATION /tmp/math	code	cmake
3003	3	Path should be relative to be supported by cpack. Relative paths are prepended by `CMAKE_INSTALL_PREFIX`.	text	txt
3004	1	`PERMISSIONS` argument is common between all `install()` modes:	text	txt
3004	2	install(TARGETS sum LIBRARY PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)	code	cmake
3005	1	install(TARGETS sum LIBRARY CONFIGURATIONS Debug Release RelWithDebInfo MinSizeRel)	code	cmake
3005	2	A single artifact may have multiple configurations, but only the one that matches with current build configuration will be installed.	text	txt
3005	3	To specify different destinations of an artifact, we must make separate calls.	text	txt
3005	4	install(TARGETS sum LIBRARY DESTINATION "/usr/lib")\ninstall(TARGETS sum LIBRARY DESTINATION "/usr/lib64")\ninstall(TARGETS sum LIBRARY DESTINATION "/usr/lib/x86_64-linux-gnu")	code	cmake
3006	1	install(TARGETS sum LIBRARY OPTIONAL)	code	cmake
3007	1	install(TARGETS sum LIBRARY COMPONENT MathTargets)	code	cmake
3008	1	install(TARGETS sum LIBRARY EXCLUDE_FROM_ALL)	code	cmake
3009	1	Targets defined by `add_library()` and `add_executable()` can be installed with `install(TARGETS)` command.	text	txt
3009	2	install(TARGETS <target>... EXPORT <export> <type> [options...])	code	cmake
3010	1	Targets can be optionally assigned to a named export with the `EXPORT` option, which can be used in `export(EXPORT)` or `install(EXPORT)` to produce a target export file.	text	txt
3010	2	install(TARGETS sum EXPORT MathTargets LIBRARY)	code	cmake
3011	1	- `ARCHIVE`: static libraries\n- `LIBRARY`: shared libraries\n- `RUNTIME`: executables\n- `OBJECTS`: object files from `OBJECT` libraries\n- `FRAMEWORK`: MacOS specific static and shared libraries that have `FRAMEWORK` property\n- `BUNDLE`: executables marked with `MACOSX_BUNDLE`\n- `FILE_SET`: C++ module headers specified for a target\n- `PUBLIC_HEADER`, `PRIVATE_HEADER`, `RESOURCE`: files specified in the target properties with the same name	text	txt
3095	1	vec2 subset = vector.xy;	code	cpp
4334	1	Random generators can be seeded using their constructors or the `seed()`\nmethod. Note that `random_device` cannot be seeded.	text	txt
4334	2	#include <random>\n\nstd::random_device seeder;\nstd::mt19937 generator1{seeder()};\n\nstd::mt19937 generator2;\ngenerator2.seed(seeder());	code	cpp
3012	1	- `RUNTIME`: will be installed in `${CMAKE_INSTALL_PREFIX}/${DESTINATION}/bin` directory specified in `CMAKE_INSTALL_BINDIR`\n- `LIBRARY`, `ARCHIVE`: will be installed in `${CMAKE_INSTALL_REFIX}/${DESTINATION}/lib` directory specified in `CMAKE_INSTALL_LIBDIR`\n- `PUBLIC_HEADER`, `PRIVATE_HEADER`, `FILE_SET`: will be installed in `${CMAKE_INSTALL_PREFIX}/${DESTINATION}/include` directory specified in `CMAKE_INSTALL_INCLUDEDIR`	text	txt
3012	2	Specified variables are defined in `GNUInstallDirs` module.	text	txt
3012	3	install(TARGETS sum LIBRARY) # /usr/local/lib/libsum.so\ninstall(TARGETS calculate RUNTIME) # /usr/local/bin/calculate	code	cmake
3012	4	`${CMAKE_INSTALL_PREFIX}` is defaulted to `/usr/local` directory, and `${DESTINATION}` is empty otherwise explicitly specified in install command with `DESTINATION` argument.	text	txt
3013	1	include(GnuInstallDirs)	code	cmake
3014	1	It's best practice to store headers in a directory indicating their origin name, e.g. `/usr/local/include/calc`, thus enabling C++ projects to include them with an includsion scope:	text	txt
3014	2	#include <calc/sum.hpp>	code	cpp
3014	3	Therefore, manipulating `CMAKE_INSTALLL_INCLUDE_DIR` is discouraged.	text	txt
3015	1	Since CMake 3.23.0, the preferred way of installing headers is to add them to appropriate targets with `target_sources()` command:	text	txt
3015	2	target_sources(<target> [<PUBLIC|PRIVATE|INTERFACE> [FILE_SET <name> TYPE <type> [BASE_DIR <dir>] FILES] <files>...]...	code	cmake
3015	3	add_library(calc STATIC)\ntarget_include_directories(calc INTERFACE include)\ntarget_sources(calc PUBLIC src/sum.cpp)\ntarget_sources(calc PUBLIC FILE_SET headers TYPE HEADERS BASE_DIR include FILES include/calc/sum.hpp)	code	cmake
3015	4	The file set name can be the same as of file set type, then the type can be skipped:	text	txt
3015	5	target_sources(calc PUBLIC FILE_SET HEADERS BASE_DIR include FILES include/calc/sum.hpp)	code	cmake
3015	6	We can then install them as follows:	text	txt
3015	7	install(TARGETS calc EXPORT CalcTargets FILE_SET HEADERS ARCHIVE)	code	cmake
3015	8	Prior to CMake 3.23.0, public headers should be managed manually:	text	txt
3015	9	add_library(calc STATIC src/sum.cpp)\ntarget_include_directories(calc INTERFACE include)\nset_target_properties(calc PROPERTIES PUBLIC_HEADER include/calc/sum.hpp)\ninclude(GnuInstallDirs)\ninstall(TARGETS calc ARCHIVE PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/calc	code	cmake
3016	1	When adding every asset to a target is not possible or convenient, there are three options:	text	txt
3016	2	- `install(FILES)`: public headers, documentations, configurations, runtime assets like images, audio files and datasets\n- `install(PROGRAMS)`: scripts\n- `install(DIRECTORY)`: data directories	text	txt
3016	3	install(<FILES|PROGRAMS> <files>... [TYPE <type> | DESTINATION <dir>] [PERMISSIONS <perm>...] [CONFIGURATIONS <config>...] [COMPONENT <component>] [RENAME <name>] [OPTIONAL] [EXLUCDE_FROM_ALL])	code	cmake
3016	4	The difference between `FILES` and `PROGRAMS` is the permisions, where `PROGRAMS` has additional `OWNER_EXECUTE`, `GROUP_EXECUTE`, and `WORLD_EXECUTE` permissions by default.	text	txt
3016	5	Either `DESTIONATION` should be explicitly specified, or to use one of the available types in `TYPE` to let CMake use default paths for the specified type:	text	txt
4351	2	To reference the entire content of a data structure, we can use the `begin()`\nand `end()` methods that return an iterator to the first element and an\niterator one past the last element, respectively. Hence, the range [begin,\nend) contains all data structure elements.	text	txt
5492	1	Decorators are function objects with the signature `Element(Element)`, that take an object of type `ftxui::Element` to applies visual changes, and then return it.	text	md
3016	6	- `BIN`: `CMAKE_INSTALL_BINDIR` defaults to `bin`\n- `SBIN`: `CMAKE_INSTALL_SBINDIR` defaults to `sbin`\n- `LIB`: `CMAKE_INSTALL_LIBDIR` defaults to `lib`\n- `INCLUDE`: `CMAKE_INSTALL_INCLUDEDIR` defaults to `include`\n- `SYSCONF`: `CMAKE_INSTALL_SYSCONFDIR` defaults to `etc`\n- `SHAREDSTATE`: `CMAKE_INSTALL_SHARESTATEDIR` defaults to `com`\n- `LOCALSTATE`: `CMAKE_INSTALL_LOCALSTATEDIR` defaults to `var`\n- `RUNSTATE`: `CMAKE_INSTALL_RUNSTATE` defaults to `${CMAKE_INSTALL_LOCALSTATEDIR}/run`\n- `DATA`: `CMAKE_INSTALL_DATADIR` defaults to `$DATAROOT`\n- `INFO`: `CMAKE_INSTALL_INFODIR` defaults to `$DATAROOT/info`\n- `LOCALE`: `CMAKE_INSTALL_LOCALEDIR` defaults to `$DATAROOT/locale`\n- `MAN`: `CMAKE_INSTALL_MANDIR` defaults to `$DATAROOT/man`\n- `DOC`: `CMAKE_INSTALL_DOCDIR` defaults to `$DATAROOT/doc`	text	txt
3016	7	Artifacts can be renamed while being copied to the destination by `RENAME` argument.	text	txt
3016	8	install(DIRECTORY <dirs>... [TYPE <type> | DESTINATION <dir>] [FILE_PERMISSIONS <perm>...] [DIRECTORY_PERMISSIONS <perm>...] [OPTIONAL] [MESSAGE_NEVER] [CONFIGURATIONS <config>...] [COMPONENT <component>] [EXCLUDE_FROM_ALL] [FILES_MATCHING] [[PATTERN <pattern> | REGEX <regex> {EXCLUDE] [PERMISSIONS <perm>...]] [...])	code	cmake
3016	9	Important note for `install(DIRECTORY)` command is that when the directory path ends with `/` has a different meaning when it does not:	text	txt
3016	10	install(DIRECTORY operators DESTINATION /usr/local/share/calc) # /usr/local/share/calc/operators	code	cmake
3016	11	install(DIRECTORY operators/ DESTINATION /usr/local/share/calc) # copies files inside operators/ to /usr/local/share/calc	code	cmake
3016	12	`MESSAGE_NEVER` disables output diagnostics during installation due to possible high volume of logs for each file inside the directory.	text	txt
3016	13	Permissions can be applied to files matching a specific pattern or regex.	text	txt
3017	1	In some cases like post-install configuration setups, external scripts need to be invoked:	text	txt
3017	2	install(SCRIPT <file> [ALL_COMPONENTS | COMPONENT <component>] [EXCLUDE_FROM_ALL] [...])	code	cmake
3017	3	install(CODE <code>  [ALL_COMPONENTS | COMPONENT <component>] [EXCLUDE_FROM_ALL] [...])	code	cmake
3017	4	add_library(calc SHARED)\ntarget_sources(calc PRIVATE src/sum.cpp)\ntarget_sources(calc PUBLIC FILE_SET HEADERS BASE_DIRS include FILES include/calc/sum.hpp)\ntarget_include_directories(calc INTERFACE include)\n\ninstall(TARGETS calc LIBRARY FILE_SET HEADERS\n    if(UNIX)\n        install(CODE "execute_process(COMMAND ldconfig)")\n    endif()\n)	code	cmake
3018	1	install(TARGETS <target> <type> RUNTIME_DEPENDENCY_SET <name>)	code	cmake
3018	2	install(RUNTIME_DEPENDENCY_SET <name> <arg>...)	code	cmake
3018	3	Above commands can also be combined :	text	txt
3018	4	install(TARGETS <target> <type> RUNTIME_DEPENDENCIES <arg>...)	code	cmake
3018	5	If a target is imported rather than defined in the project:	text	txt
3018	6	install(IMPORTED_RUNTIME_ARTIFACTS <target>...)	code	cmake
3018	7	install(RUNTIME_DEPENDENCY_SET <name> <arg>...) # extend above to be used as a reference set	code	cmake
3019	1	1. Make our targets relocatable\n2. Install the target export file to a standard location\n3. Create a config file for the package\n4. Generate a version file the package	text	txt
3607	1	mkdir /tmp/sample	code	sh
3020	1	Prior to CMake 3.23.0, paths specified in the project were not relocatable and should have been modified manually:	text	txt
3020	2	add_library(calc STATIC src/sum.cpp)\ntarget_include_directories(calc INTERFACE include) # always pointing to source location\nset_target_properties(calc PROPERTIES PUBLIC_HEADER include/calc/sum.hpp)	code	cmake
3020	3	This can be fixed with generator expressions:	text	txt
3020	4	- `$<BUILD_INTERFACE:...>`: expands when building\n- `$<INSTALL_INTERFACE:...>`: expands in installation	text	txt
3020	5	target_include_directories(calc INTERFACE\n    "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>"\n    "$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>"\n)	code	cmake
3020	6	We can use relative paths, whch will be prepended with the correct installation prefix:	text	txt
3020	7	target_include_directories(calc INTERFACE $<INSTALL_INTERFACE:include/calc/sum.hpp>)	code	cmake
3021	1	install(EXPORT <name> DESTINATION <dir> [NAMESPACE <namespace>] [FILE <name>.cmake] [PERMISSIONS <perm>...] [CONFIGURATIONS <config>...] [EXPORT_LINK_INTERFACE_LIBRARIES] [COMPONENT <component>] [EXCLUDE_FROM_ALL])	code	cmake
3021	2	add_library(calc STATIC src/sum.cpp)\ntarget_sources(calc PUBLIC FILE_SET HEADERS BASE_DIRS include FILES include/calc/sum.hpp)\n\ninclude(GNUInstallDirs)\ninstall(TARGETS calc EXPORT CalcTargets ARCHIVE FILE_SET HEADERS)\ninstall(EXPORT CalcTargets DESTINATION ${CMAKE_INSTALL_LIBDIR}/calc/cmake NAMESPACE Calc::)	code	cmake
3021	3	cmake --install <build>	code	sh
3022	1	A complete package definition consists of the target export files, the package's config file, and the package's version file. But technically all that is needed for `find_package()` to work is a config file. It acts as a package definition, responsible for providing any package functions and macros, checking requirements, finding dependencies, and including target export files.	text	txt
3023	1	Users should be able to install the package anywhere on their system by:	text	txt
3023	2	cmake --install <build> --prefix <path>	code	sh
3023	3	So the paths on the target properties must be relocatable and the paths that are used in the config file must be relative to them.	text	txt
3024	1	The `find_package()` command scans a specific list of paths to locate requested package: `<prefix>/<project>*/{lib/<arch>,lib*,share}/<project>*/{cmake,CMake}`.	text	txt
3024	2	CMake requires that config files be named `<package>-config.cmake` or <Package>Config.cmake` to be found.	text	txt
3024	3	So installing the config file in `/usr/local/lib/calc/cmake/calc-config.cmake` should work.	text	txt
3024	4	install(EXPORT CalcTargets DESTINATION ${CMAKE_INSTALL_LIBDIR}/calc/cmake NAMESPACE Calc::)\ninstall(FILES calc-config.cmake DESTINATION ${CMAKE_INSTALL_LIBDIR}/calc/cmake)	code	cmake
3025	1	The simplest config file consist of a single line including the target export file:	text	txt
3025	2	include(${CMAKE_CURRENT_LIST_DIR}/calc-config.cmake)	code	cmake
3025	3	This package can be used as follows:	text	txt
3025	4	cmake_minimum_required(VERSION 3.26.0)\nproject(FindCalc LANGUAGES CXX)\nfind_package(Calc REQUIRED)\ninclude(CMakePrintHelpers)\nmessage("CMAKE_PREFIX_PATH: ${CMAKE_PREFIX_PATH}")\nmessage("CALC_FOUND: ${Calc_FOUND}")\ncmake_print_properties(TARGETS Calc::calc PROPERTIES IMPORTED_CONFIGURATIONS INTERFACE_INCLUDE_DIRECTORIES)	code	cmake
3026	1	cmake_minimum_required(VERSION 3.26.0)\nproject(Calc VERSION 1.0.0 LANGUAGES CXX)\n\ninclude(GNUInstallDirs)\n\nadd_library(calc STATIC src/sum.cpp)\ntarget_sources(calc INTERFACE FILE_SET HEADERS BASE_DIRS include FILES include/calc/sum.hpp)\ntarget_include_directories(calc PUBLIC $<INSTALL_INTERFACE:include>)\n\ninstall(TARGETS calc EXPORT CalcTargets LIBRARY FILE_SET HEADERS CONFIGURATION Release)\ninstall(EXPORT CalcTargets DESTINATION ${CMAKE_INSTALL_LIBDIR}/calc/cmake NAMESPACE Calc::)\ninstall(FILES CalcConfig.cmake DESTINATION ${CMAKE_INSTALL_LIBDIR}/calc/cmake)	code	cmake
3026	2	include(${CMAKE_CURRENT_LIST_DIR}/CalcTargets.cmake)	code	cmake
3026	3	cmake -S . -B build -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/tmp/calc	code	sh
3026	4	cmake --build build	code	sh
3026	5	cmake --install build	code	sh
3026	6	cmake_minimum_required(VERSION 3.26.0)\nproject(UseCalc LANGUAGES CXX)\n\nfind_package(Calc 1.0.0 REQUIRED)\n\nadd_executable(usage src/usage.cpp)\ntarget_include_directories(usage PRIVATE include)\ntarget_link_libraries(usage PRIVATE Calc::calc)	code	cmake
3026	7	cmake -S . -B build -D CMAKE_BUILD_TYPE=Release -D CMAKE_PREFIX_PATH=/tmp/calc	code	sh
3026	8	cmake --build build	code	sh
3027	1	The `CMakePackageConfigHelpers` module provides access to the `configure_package_config_file()` command.	text	txt
3027	2	configure_package_config_file(<template> <output> INSTALL_DESTINATION <path> [PATH_VARS <var>...] [NO_SET_AND_CHECK_MACRO] [NO_CHECK_REQUIRED_COMPONENTS_MACRO] [INSTALL_PREFIX <path>])	code	cmake
3027	3	install(EXPORT CalcTargets DESTINATION ${CMAKE_INSTALL_LIBDIR}/calc/cmake NAMESPACE Calc::)\ninclude(CMakePackageConfigHelpers)\nset(LIB_INSTALL_DIR ${CMAKE_INSTALL_LIBDIR}/calc)\nconfigure_package_config_file(${CMAKE_CURRENT_SOURCE_DIR}/CalcConfig.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/CalcConfig.cmake INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/calc/cmake PATH_VARS LIB_INSTALL_DIR)	code	cmake
3028	1	This version can be used when projects use this package:	text	txt
3028	2	find_package(Calc 1.2.3 REQUIRED)	code	cmake
3028	3	CMake will locate this file as `<config>-version.cmake` or `<Config>Version.cmake`.	text	txt
3028	4	Use `CMakePackageConfigHelpers` module to generate package version file:	text	txt
3028	5	write_basic_package_version_file(<filename> [VERSION <version>] COMPATIBILITY <AnyNewerVersion|SameMajorVersion|SameMinorVersion|ExactVersion> [ARCH_INDEPENDENT])	code	cmake
3028	6	write_basic_package_version_file(${CMAKE_CURRENT_BINARY_DIR}/CalcConfigVersion.cmake COMPATIBILITY SameMajorVersion)\ninstall(FILES CalcConfigVersion.cmake ${CMAKE_CURRENT_BINARY_DIR]/CalcConfigVersion.cmake DESTINATION ${CMAKE_INSTALL_LIBDIR}/calc/cmake)	code	cmake
3029	1	install(TARGETS calc EXPORT CalcTargets ARCHIVE COMPONENT lib FILE_SET HEADERS COMPONENT headers)\ninstall(EXPORT CalcTargets DESTINATION ${CMAKE_INSTALL_LIBDIR}/calc/cmake NAMESPACE Calc:: COMPONENT lib)	code	cmake
3029	2	find_package(Calc 1.0.0 COMPONENTS lib headers REQUIRED)	code	cmake
3030	1	install(TARGETS <target> LIBRARY COMPONENT <component> NAMELINK_SKIP)	code	cmake
3030	2	install(TARGETS <target> LIBRARY COMPONENT <component> NAMELINK_ONLY)	code	cmake
3030	3	install(TARGETS <target> LIBRARY COMPONENT <component> NAMELINK_OMPONENT <component>)	code	cmake
3031	1	To generate a package, we must select an appropriate package generator, which is different than a build generator.	text	txt
3031	2	- `Archive`: cross-platform archives like `.7z`, `.tar.gz`, `.tar.bz2`, `.tar.xz`, `.zip`\n- `Bundle`: macOS bundle `.bundle`\n- `Cygwin`: Cygwin packages\n- `DEB`: `.deb`\n- `External`: `.json`\n- `FreeBSD`: `.pkg`\n- `IFW`: Qt Instlaller\n- `NSIS`: `.exe`\n- `NuGet`: `.nupkg`\n- `productbuild`: `.pkg`\n- `RPM`: `.rpm`\n- `WIX`: Microsoft Installer `.msi`	text	txt
3032	1	set(CPACK_PACKAGE_VENDOR "Brian Salehi")\nset(CPACK_PACKAGE_CONTACT "briansalehi@proton.me")\nset(CPACK_PACKAGE_DESCRIPTION "Sample")\ninclude(CPack)	code	cmake
3033	1	cmake_minimum_required(VERSION 3.26.0)\nproject(Calc VERSION 1.0.0 LANGUAGES CXX)\n\ninclude(GNUInstallDirs)\n\nadd_library(calc STATIC src/sum.cpp)\ntarget_sources(calc INTERFACE FILE_SET HEADERS BASE_DIRS include FILES include/calc/sum.hpp)\ntarget_include_directories(calc PUBLIC $<INSTALL_INTERFACE:include>)\n\ninstall(TARGETS calc EXPORT CalcTargets COMPONENT calc LIBRARY FILE_SET HEADERS CONFIGURATION Release)\ninstall(EXPORT CalcTargets COMPONENT calc DESTINATION ${CMAKE_INSTALL_LIBDIR}/calc/cmake NAMESPACE Calc::)\ninstall(FILES CalcConfig.cmake DESTINATION ${CMAKE_INSTALL_LIBDIR}/calc/cmake)\n\nset(CPACK_PACKAGE_VENDOR "Brian Salehi")\nset(CPACK_PACKAGE_CONTACT "briansalehi@proton.me")\nset(CPACK_PACKAGE_DESCRIPTION "Calculation Library")\ninclude(CPack)	code	cmake
3033	2	cmake -S . -B build -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/tmp/calc	code	sh
3033	3	cmake --build build	code	sh
3033	4	cmake --install build	code	sh
3033	5	cpack -G "ZIP;DEB;RPM" -B packages --config build/CPackConfig.cmake	code	sh
3034	1	v3.16	text	txt
3035	1	Conditions and macro expressions, granting users greater control over the project.	text	txt
3036	1	Preset files must be placed in the top directory of the project for CMake to recongnize them.	text	txt
3037	1	Each preset file can define multiple presets for each of the `configure`, `generate`, `test`, `package` stages, and workflow presets that encompass multiple stages.	text	txt
3038	1	cmake --list-presets	code	sh
3039	1	cmake --build --list-presets	code	sh
3040	1	ctest --list-presets	code	sh
3041	1	cmake --workflow --list-presets	code	sh
3042	1	cmake --preset <name>	code	sh
3043	1	- `version`: an integer indicating the version of the preset JSON schema\n- `cmakeMinimumRequired`: an object holding the required cmake version\n- `include`: an array of strings that include external presets\n- `configurePresets`: an array of objects that define the configuration stage presets\n- `buildPresets`: an array of objects that define the build stage presets\n- `testPresets`: an array of objects that define the test stage presets\n- `packagePresets`: an array of objects that define the packgae stage presets\n- `workflowPresets`: an array of objects that define the workflow mode presets\n- `vendor`: an object containing custom settings defined by IDEs and vendors and not processed by CMake	text	txt
3043	2	{\n    "version": 6,\n    "cmakeMinimumRequired": {\n        "major": 3,\n        "minor": 30,\n        "patch": 2\n    },\n    "include": [],\n    "configurePresets": [],\n    "buildPresets": [],\n    "testPresets": [],\n    "packagePresets": [],\n    "workflowPresets": [],\n    "vendor": {\n    }\n}	code	json
3043	3	The appropriate schema version for CMake 3.26 is 6.	text	txt
3043	4	Entries other than `version` is opiona.	text	txt
3044	1	`name` fields must be unique within each stage.	text	txt
3044	2	`name` fields.	text	txt
3044	3	{\n    "version": 6,\n    "configurePresets": {\n        {\n            "name": "myPreset1"\n        },\n        {\n            "name": "myPreset2"\n        }\n    }\n}	code	json
4157	1	- Names with internal linkage or no linkage cannot be exported.\n- An export group must not contain declarations that cannot be exported, e.g.\n  `static_assert` or anonymous names.\n- The module declaration must not be the result of macro expansion.	text	txt
3045	1	{\n    "version": 6,\n    "packagePresets": [\n        {\n            "displayName": "A string that provides user friendly name for the preset",\n            "description": "A string that offers and explanation of what the preset does",\n            "inherits": "A string, or an array of strings, that copies the configuration of presets named in this field as a base, to be further extended or modified",\n            "hidden": "A boolean that hides the preset from the listing, making it suitable to be used through inheritance",\n            "environment": "An object that overrides ENV variables for this stage, each key identifies an individual variable, and values can be strings or null; macros also supported",\n            "condition": "An object that enables or disables this preset",\n            "vendor": "A custom object that contains vendor specific values and not interpreted by CMake",\n        }\n    ]\n}	code	json
3045	2	Every stage specific preset can have the same optional fields.	text	txt
3046	1	All stage specific presets must be associated with configuration stage preset as they need to know the location of the build tree. While the `configure` preset is inherently associated with itself, others need to explicitly define this association via the `configurePresets` field.	text	txt
3046	2	This association doesn't mean CMake will automatically run configuration preset with each subsequent presets. You still need to execute each preset manually, or use a workflow preset.	text	txt
3047	1	{\n    "version": 6,\n    "configurePresets": [\n        {\n            "name": "custom",\n            "generator": "A string that specifies a generator to use for the preset; required by version < 3",\n            "architecture": "A string that configures generators supporting this architecture",\n            "toolset": "A string that configures generators supporting this architecture",\n            "binaryDir": "A string that provides a relative or absolute path to the build tree; required by version < 3; supports marcros",\n            "installDir": "A string that provides a relative or absolute path to the installation directory; required by version < 3; supports macros",\n            "cacheVariables": "A map that defines variables; values support macros",\n        }\n    ]\n}	code	json
3047	2	The configuration preset has common mandatory field like `name`, and also optional fields. But also some configuration specific fields exist:	text	txt
3048	1	Command Line >overrides> Preset Variables >overrides> Cache	text	txt
3049	1	{\n    "version": 6,\n    "buildPresets": [\n        {\n            "name": "build",\n            "configurePreset": "custom",\n            "jobs": 8,\n            "targets": ["A string", "or array of strings", "that sets targets to build;", "also support macros"],\n            "configuration": "A string that determines the build type for multi-configuration generators (Debug, Release, etc.)",\n            "cleanFirst": true\n        }\n    ]\n}	code	json
3842	1	/etc/grub.d/40_custom	code	sh
3096	1	#version 120\n\nattribute vec4 input_color;\nattribute vec4 input_position;\n\nvarying vec4 color;\n\nvoid main()\n{\n    color = input_color;\n    gl_Position = input_position;\n}	code	cpp
3097	2	Using `attribute`, we defien inputs of the shader.	text	txt
3608	1	ps	code	sh
3050	1	{\n    "version": 6,\n    "testPresets": [\n        {\n            "name": "test",\n            "configurePreset": "custom",\n            "configuration": "A string that determines the build type for multi-configuration generators (Debug, Release, etc.)",\n            "output": {\n                "shortProgress": true,\n                "verbosity": "A string that sets the output verbosity to one of the following levels: default, verbose, extra",\n                "outputOnFailure": true,\n                "quiet": true\n            },\n            "filter": {\n                "include": {\n                    "name": "A string that excludes tests with names matching a regex pattern; supports macros",\n                    "label": "A string that excludes tests with labels matching a regex pattern; supports macros",\n                    "index": "An object that selects tests to run with accepting start, end, and stride integers, and a specificTests",\n                    "useUnion": "A boolean that enables the usage of a union of tests determined by index and name, rather than the intersection"\n                },\n                "exclude": {\n                    "name": "A string that excludes tests with names matching a regex pattern; supports macros",\n                    "label": "A string that excludes tests with labels matching a regex pattern; supports macros",\n                    "fixtures": "An object that determines which fixtures to exclude from the test"\n                }\n            },\n            "execution": {\n                "outputLogFile": "A string that specifies the output log file; supports macros",\n                "stopOnFailure": true,\n                "enableFailover": true,\n                "jobs": 8,\n                "repeat": {\n                    "mode": "until-fail, until-pass, after-timeout",\n                    "count": 10\n                },\n                "scheduleRandom": "",\n                "timeout": 10,\n                "noTestsAction": "default, error, ignore"\n            }\n        }\n    ]\n}	code	json
3051	1	{\n    "version": 6,\n    "packagePresets": [\n        {\n            "name": "pack",\n            "configurePreset": "custom",\n            "generators": "ZIP, 7Z, DEB, RPM, etc.",\n            "configuration": "Debug, Release, etc.",\n            "filter": {\n                "include": {\n                    "name": "A string that excludes tests with names matching a regex pattern; supports macros",\n                    "label": "A string that excludes tests with labels matching a regex pattern; supports macros",\n                    "index": "An object that selects tests to run with accepting start, end, and stride integers, and a specificTests",\n                    "useUnion": "A boolean that enables the usage of a union of tests determined by index and name, rather than the intersection"\n                },\n                "exclude": {\n                    "name": "A string that excludes tests with names matching a regex pattern; supports macros",\n                    "label": "A string that excludes tests with labels matching a regex pattern; supports macros",\n                    "fixtures": "An object that determines which fixtures to exclude from the test"\n                }\n            },\n            "packageName": "program",\n            "packageVersion": "1.0.0",\n            "packageDirectory": "",\n            "vendorName": ""\n        }\n    ]\n}	code	json
3052	1	{\n    "version": 6,\n    "buildPresets" [\n        {\n            "name": "install",\n            "configurePreset": "custom",\n            "targets": "install"\n        }\n    ]\n}	code	json
3052	2	There is no `installPresets` in CMake so we have to use `buildPresets` but with the `target` set as `install`.	text	txt
3053	1	cmake --workflow --preset <name> --fresh	code	sh
3054	1	{\n    "workflowPresets": [\n        {\n            "name": "program",\n            "steps": [\n                {\n                    "type": "configure",\n                    "name": "release"\n                },\n                {\n                    "type": "build",\n                    "name": "build"\n                },\n                {\n                    "type": "test",\n                    "name": "test"\n                },\n                {\n                    "type": "package",\n                    "name": "pack"\n                },\n                {\n                    "type": "build",\n                    "name": "install"\n                },\n            ]\n        }\n    ]\n}	code	json
3055	1	{\n    "version": 6,\n    "packagePresets": [\n        {\n            "name": "pack"\n            "condition": {\n                "type": "condition type"\n            }\n        }\n    ]\n}	code	json
3056	1	{\n    "condition": {\n        "type": "anyOf",\n        "conditions": [\n            {\n                "type": "equals"\n                "lhs": "${hostSystemName}",\n                "rhs": "Linux"\n            },\n            {\n                "type": "equals"\n                "lhs": "${hostSystemName}",\n                "rhs": "Window"\n            }\n        ]\n    }\n}	code	json
3056	2	5. `not`: boolean inversion of the condition provided in the `conditions` field.	text	txt
3056	3	{\n    "condition": {\n        "type": "matches",\n        "string": "${projectVersion}",\n        "regex": "^([0-9]+.){2}.[0=9]+$"\n    }\n}	code	json
3056	4	4. `matches`, `notMatches`: evaluates whether the `string` field align with the pattern defined in the `regex` field.	text	txt
3056	5	1. `const`: checks if the value provided in `value` field is true.	text	txt
3056	6	{\n    "condition": {\n        "type": "const",\n        "value": "${testEnabled}"\n    }\n}	code	json
3056	7	2. `equals`, `notEquals`: compares the `lhs` and `rhs` fields.	text	txt
3056	8	{\n    "condition": {\n        "type": "equals",\n        "lhs": "${hostSystemName}"\n        "rhs": "Windows"\n    }\n}	code	json
3056	9	3. `inList`, `notInList`: checks for the presence of the value provided in the `string` field within the array in the `list` field.	text	txt
3056	10	{\n    "condition": {\n        "type": "inList",\n        "string": "${hostSystemName}",\n        "list": ["Windows", "Linux", "Mac"]\n    }\n}	code	json
3056	11	{\n    "condition": {\n        "type": "not",\n        "conditions": [\n            {\n                "type": "matches"\n                "string": "${projectVersion}",\n                "regex": "[a-z]*"\n            },\n            {\n                "type": "equals"\n                "string": "${hostSystemName}",\n                "regex": "Mac"\n            }\n        ]\n    }\n}	code	json
3056	12	6. `anyOf`, `allOf`: checks whether any of or all of the conditions in the `conditions` array are true.	text	txt
3057	1	- `${sourceDir}`\n- `${sourceParentDIr}`\n- `${sourceDirName}`\n- `${presetName}`\n- `${generator}`\n- `${hostSystemName}`: `Linux`, `Windows`, `Darwin`\n- `${fileDir}`: name of the file holding preset\n- `${dollar}`\n- `${pathListSep}`\n- `$env{<var>}`\n- `$penv{<var>}`\n- `$vendor{<name>}`	text	txt
3058	1	R: red, G: green, B: blue, A: brightness	text	list
3059	1	A series of conceptual stages that OpenGL setup to visualize an object.	text	txt
3060	1	- Vertex Processing: geometrical properties of data like coordinates and color\n- Primitives Assembly: setup specific primitives for previously defined properties, usually a triangle\n- Rasterization: setup actual pixels off the screen, also called Fragments\n- Shading: pixel operations to fill them with colors\n- Texturing: operations like bluring\n- Image Buffer: blending together all data to put into screen	text	list
3061	1	OpenGL only renders graphical objects and does not provide window system.	text	txt
3062	1	GLFW, Qt	text	list
3063	1	cmake --build glfw-build --parallel 16	code	sh
3063	2	git clone https://github.com/glfw/glfw.git	code	sh
3063	3	cmake -S glfw -B glfw-build -D CMAKE_BUILD_TYPE=Release	code	sh
3063	4	sudo cmake --build glfw-build --target install	code	sh
3097	1	attribute vec4 input_color;	code	cpp
3097	3	attribute vec4 input_position;	code	cpp
3098	1	Rasterizer will interpolate `varying` objects.	text	txt
3099	1	`gl_Position` defines the final vertex coordinates after transformations in vertex shader and must be filled.	text	txt
3064	1	#include <GLFW/glfw3.h>\n#include <functional>\n#include <memory>\n\ntemplate<typename Deleter = std::function<void(GLFWwindow*)>>\nclass Window\n{\npublic:\n    explicit Window(char const* name)\n        : window{nullptr, glfwDestroyWindow}\n    {\n        try\n        {\n            glfwInit();\n            window.reset(glfwCreateWindow(800, 600, name, nullptr, nullptr));\n            glfwMakeContextCurrent(window.get());\n        }\n        catch (...)\n        {\n            /* handle exceptions */\n        }\n    }\n\n    virtual ~Window()\n    {\n        glfwTerminate();\n    }\n\n    void draw()\n    {\n    }\n\n    void show()\n    {\n        while (!glfwWindowShouldClose(window.get()))\n        {\n            glClearColor(1.0f, 1.0f, 1.0f, 1.0f);\n            glClear(GL_COLOR_BUFFER_BIT);\n\n            draw();\n\n            glfwSwapBuffers(window.get());\n            glfwPollEvents();\n        }\n    }\n\nprivate:\n    std::unique_ptr<GLFWwindow, Deleter> window;\n};\n\nint main()\n{\n    Window window{"Sample"};\n    window.show();\n}	code	cpp
3065	1	#include <GLFW/glfw3.h>\n#include <functional>\n#include <memory>\n\nclass Window;\n\nvoid Window::draw()\n{\n    glBegin(GL_TRIANGLES);\n\n    glColor3f(1.0f, 0.0f, 0.0f);\n    glVertex3f(-0.8f, -0.4f, 0.0f);\n    glColor3f(0.0f, 1.0f, 0.0f);\n    glVertex3f(0.8f, -0.4f, 0.0f);\n    glColor3f(0.0f, 0.0f, 1.0f);\n    glVertex3f(0.0f, 0.8f, 0.0f);\n\n    glEnd();\n}\n\nint main()\n{\n    Window window{"Sample"};\n    window.show();\n}	code	cpp
3066	1	Each program has different context. To represent a window, the context should be changed to that specific window.	text	txt
3066	2	glfwInit();\nwindow.reset(glfwCreateWindow(width, height, name, nullptr, nullptr));\nglfwMakeContextCurrent(window.get());	code	cpp
3067	1	Circles are drawn with approximations with many basic triangles. All we need to do is to repeat drawing a triangle with correct coordinates for each.	text	txt
3068	1	Top left (-1,1)         Top right (1,1)\n\n\nBottom left (-1,-1)     Bottom right (1,-1)	text	txt
3069	1	All triangles have one corner on the origin. The starting triangle has another corner on top. The third corner lays on the first quarter and has a distance of beta from the top. Third corner can be coordinated as: `(R.sin(beta), -R.cos(beta))`	text	txt
3069	2	* .\n|/\n*	text	txt
3070	1	void Window::drawCircle(float red, float green, float blue)\n{\n    constexpr const int slices{360};\n    constexpr const float radius{1.0};\n    constexpr const float beta{3.1415 * 2.0f / slices};\n\n    float prev_x{};\n    float prev_y{-radius};\n\n    for (int step{}; step <= slices; ++step)\n    {\n        float next_x{radius * std::sin(beta * step)};\n        float next_y{-radius * std::cos(beta * step)};\n\n        glColor3f(red, green, blue);\n        glBegin(GL_TRIANGLES);\n        glVertex3f(0.0f, 0.0f, 0.0f);\n        glVertex3f(prev_x, prev_y, 0.0f);\n        glVertex3f(next_x, next_y, 0.0f);\n        glEnd();\n\n        prev_x = next_x;\n        prev_y = next_y;\n    }\n}\n\nvoid Window::draw()\n{\n    drawCircle(0.8f, 0.8f, 0.0f);\n}	code	cpp
3071	1	Vetrices, ModelView, Projection	text	list
3072	1	glMatrixMode(GL_MODELVIEW);	code	cpp
3072	2	glMatrixMode(GL_VETRICES);	code	cpp
3072	3	glMatrixMode(GL_PROJECTION);	code	cpp
3073	1	Initially, model view matrix is an identity matrix which basically does nothing.	text	txt
3073	2	glLoadIdentity();	code	cpp
3074	1	void Window::draw()\n{\n    glMatrixMode(GL_MODELVIEW);\n    glLoadIdentity();\n    glScalef(0.1f, 0.1f, 1.0f);\n\n    drawCircle(0.8f, 0.8f, 0.0f);\n}	code	cpp
3075	1	glPushMatrix();\nglLoadIdentity();\nglPushMatrix();\nglScalef(x, y, 1.0);\nglPopMatrix();	code	cpp
3076	1		code	cpp
3076	2		text	txt
3077	1		text	txt
3077	2		code	cpp
5217	1	Process attributes are stored in the `/proc` filesystem, specifically in the `/proc/<pid>/attr/current` file.	text	md
3078	1	void Window::draw()\n{\n    glMatrixMode(GL_MODELVIEW);\n    glLoadIdentity();\n    glScalef(0.1f, 0.1f, 1.0f);\n\n    // central circle\n    drawCircle(0.8f, 0.8f, 0.0f);\n\n    // outer rotating circle\n    {\n        glPushMatrix();\n        glRotatef(outer_angle, 0.0f, 0.0f, 1.0f);\n        glTranslatef(0.0f, 5.0f, 0.0f);\n        glScalef(0.6f, 0.6f, 1.0f);\n        drawCircle(0.0f, 0.0f, 0.5f);\n        outer_angle += 2;\n\n        // inner rotating circle\n        {\n            glPushMatrix();\n            glRotatef(inner_angle, 0.0f, 0.0f, 1.0f);\n            glTranslatef(0.00f, 3.0f, 0.0f);\n            glScalef(0.5f, 0.5f, 1.0f);\n            drawCircle(0.5f, 0.5f, 0.5f);\n            glPopMatrix();\n            inner_angle += 5;\n        }\n\n        glPopMatrix();\n    }\n}	code	cpp
3078	2		text	txt
3079	1	Shaders.	text	txt
3080	1	Vertex >> Vertex Shader >> Pixel Shader	text	txt
3081	1	1. position\n2. light intensity\n3. flow field tension	text	list
3081	2	struct Vec4 { float x; float y; float z; float w; };\nstruct Color4 { float r; float g; float b; float a; };\n\nstruct Vertex { Vec4 position; Color4 color; };\n\nVertex vertices[] = { {{-1, -1, 1, 0}, {1, -1, -1, 0}}, ... };	code	cpp
3082	1	Vertex defines the color and position a shape.	text	txt
3082	2	Vertex shader applies transformations.	text	txt
3082	3	Pixel shader finds the final output for each pixel.	text	txt
3083	1	Data >> Vertex Shader >> Fragment Shader >> Program Linking >> VBO >> Attribute Locations >> Uniforms	text	list
3084	1	This is equivallent to creating a new object in C++.	text	txt
3084	2	GLuint vertexShader;\nvertexShader = glCreateShader(GL_VERTEX_SHADER);\nglShaderSource(vertexShader, 1, &src, 0);	code	cpp
3085	1	glCompileShader(vertexShader);	code	cpp
3086	1	GLuint shaderProgram;\nshaderProgram = glCreateProgram();	code	cpp
3087	1	glAttachShader(shaderProgram, vertexShader);\nglAttachShader(shaderProgram, fragmentShader);	code	cpp
3088	1	glLinkProgram(shaderProgram);\nglUseProgram(shaderProgram);	code	cpp
4335	1	The function call operators of random engines are overloaded and generate a\nnew number uniformly distributed between `min()` and `max()`:	text	txt
4335	2	#include <random>\n\nstd::random_device seeder;\nstd::mt19937 generator{seeder()};\nauto number = generator();	code	cpp
4336	1	#include <random>\n\nstd::mt19937 generator{};\ngenerator.discard(4); // discard 4 numbers	code	cpp
4337	1	The Mersenne twister engine has a bias toward producing some values\nrepeatedly and omitting others, thus generating numbers not in a uniform\ndistribution, but rather in a binomial or Poisson distribution.	text	txt
3844	1	/boot/grub/grub.cfg	code	sh
3089	1	void Window::show()\n{\n    constexpr const GLchar* shaderSource{ R"(\n        #version 120\n\n        attribute vec4 inColor;\n        attribute vec4 inPosition;\n        uniform mat4 matrix;\n        varying vec4 outColor;\n\n        void main()\n        {\n            outColor = inColor;\n            gl_Position = inPosition * matrix;\n        }\n    )"};\n\n    constexpr const GLchar* fragmentSource{ R"(\n        #version 120\n\n        varying vec4 outColor;\n\n        void main()\n        {\n            gl_FragColor = outColor;\n        }\n    )"};\n\n    // vertex shader\n    GLuint vertexShader = glCreateShader(GL_VERTEX_SHADER);\n    glShaderSource(vertexShader, 1, &shaderSource, 0);\n    glCompileShader(vertexShader);\n\n    GLuint compilationStatus;\n    glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &compilationStatus);\n\n    if (compilationStatus == GL_FALSE)\n    {\n        GLchar message[256];\n        glGetShaderInfoLog(vertexShader, sizeof(message), 0, &message[0]);\n        std::cerr << message;\n        return;\n    }\n\n    // fragment shader\n    GLuint fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);\n    glShaderSource(fragmentShader, 1, &fragmentSource, 0);\n    glCompileShader(fragmentShader);\n\n    glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &compilationStatus);\n\n    if (compilationStatus = GL_FALSE)\n    {\n        GLchar message[256];\n        glGetShaderInfoLog(fragmentShader, sizeof(message), 0, &message[0]);\n        std::cerr << message;\n        return;\n    }\n\n    // shader program\n    GLuint shaderProgram = glCreateProgram();\n    glAttachShader(shaderProgram, vertexShader);\n    glAttachShader(shaderProgram, fragmentShader);\n    glLinkProgram(shaderProgram);\n\n    glGetProgramiv(shaderProgram, GL_LINK_STATUS, &compilationStatus);\n\n    if (compilationStatus = GL_FALSE)\n    {\n        GLchar message[256];\n        glGetShaderInfoLog(fragmentShader, sizeof(message), 0, &message[0]);\n        std::cerr << message;\n        return;\n    }\n\n    glUseProgram(shaderProgram);\n\n    while (!glfwWindowShouldClose(window.get()))\n    {\n        glClearColor(0.0f, 0.0f, 0.0f, 1.0f);\n        glClear(GL_COLOR_BUFFER_BIT);\n\n        draw();\n\n        glfwSwapBuffers(window.get());\n        glfwPollEvents();\n    }\n}	code	cpp
3090	1	Basic types, Vector types, Matrix types	text	list
3091	1	float, int, bool	text	list
3092	1	vec2, vec3, vec4	text	list
3093	1	mat2, mat3, mat4	text	list
3094	1	vec4 vector = vec3(1.0, 2.0, 0.0);	code	cpp
3099	2	void main()\n{\n    color = input_color;\n    gl_Position = input_position;\n}	code	cpp
3100	1	#version 120\n\nvarying vec4 color;\n\nvoid main()\n{\n    gl_FragColor = color;\n}	code	cpp
3100	2	Input variables inside a fragment shader is already rasterized from the output variables of vertex shader.	text	txt
3101	1	This function is equivallent to `memcpy()` function.	text	txt
3101	2	Vertex buffer objects copy data from RAM to GPU efficiently.	text	txt
3101	3	glBufferData();	code	cpp
3102	1	Vertex Buffer Object or briefly VBO.	text	txt
3103	1	GLuint buffer_id;\nglGenBuffers(1, &buffer_id);	code	cpp
3104	1	GLuint buffer_id;\nglGenBuffers(1, &buffer_id);\nglBindBuffer(GL_ARRAY_BUFFER, buffer_id);	code	cpp
3105	1	GLint buffer_id;\nglGenBuffers(1, &buffer_id);\nglBindBuffer(GL_ARRAY_BUFFER, buffer_id);\nglBufferData(GL_ARRAY_BUFFER, sizeof(vetrices), vetrices, GL_STATIC_DRAW);	code	cpp
3105	2	`glBufferData()` function copies data into GPU after binding.	text	txt
3106	1	GLuint attribute_position;\nattribute_position = glGetAttribLocation(shaderProgram, "input_position");\nglEnableVertexAttribArray(attribute_position);\nglBindBuffer(GL_ARRAY_BUFFER, vertexBuffer);\nglVertexAttribPointer(attribute_position, 3, GL_FLOAT, GL_FALSE, 0, 0);	code	cpp
3106	2	By defining attribute locations, we can address where the shader should take the data.	text	txt
3107	1	1. attribute position\n2. number of elements in the source\n3. size of each element\n4. whether OpenGL should normalize data\n5. zero means data are tightly packet\n6. starting offset of data array	text	list
3108	1	glDrawArrays(GL_TRIANGLES, 0, 6);	code	cpp
3108	2	Third argument takes the number of vetrices.	text	txt
3109	1	Uniforms are the last stage of the rendering pipeline and they can define constant global values like rotation matrices to shaders.	text	txt
3109	2	GLuint uniform_matrix;\nuniform_matrix = glGetUniformLocation(shaderProgram, "matrix");\nglUniformMatrix4fv(uniform_matrix, 1, GL_FALSE, &matrix);	code	cpp
4351	3	#include <algorithm>\n#include <iostream>\n#include <vector>\n\nint main()\n{\n    std::vector<int> numbers{1,2,3,4,5};\n    std::for_each(std::begin(numbers), std::end(numbers), [](auto e) { std::cout << e << " "; });\n}	code	cpp
3110	1	void Window::show()\n{\n    // vertex shader\n    /* ... */\n\n    // fragment shader\n    /* ... */\n\n    // shader program\n    /* ... */\n\n    // vertex buffer object\n    const GLfloat vertices[]{\n        -1.0f, -1.0f, 0.0f,\n         1.0f, -1.0f, 0.0f,\n         1.0f,  1.0f, 0.0f,\n        -1.0f, -1.0f, 0.0f,\n         1.0f,  1.0f, 0.0f,\n        -1.0f,  1.0f, 0.0f\n    };\n\n    const GLfloat colors[]{\n        0.0f, 0.0f, 1.0f,\n        0.0f, 1.0f, 0.0f,\n        1.0f, 0.0f, 0.0f,\n        0.0f, 0.0f, 1.0f,\n        1.0f, 0.0f, 0.0f,\n        0.0f, 1.0f, 0.0f,\n    };\n\n    GLuint vertexBuffer;\n    glGenBuffers(1, &vertexBuffer);\n    GLuint colorsBuffer;\n    glGenBuffers(1, &colorsBuffer);\n\n    glBindBuffer(GL_ARRAY_BUFFER, vertexBuffer);\n    glBufferData(GL_ARRAY_BUFFER, sizeof(vertexBuffer), vertexBuffer, GL_STATIC_DRAW);\n\n    glBindBuffer(GL_ARRAY_BUFFER, colorsBuffer);\n    glBufferData(GL_ARRAY_BUFFER, sizeof(colorsBuffer), colorsBuffer, GL_STATIC_DRAW);\n\n    GLint attribute_position = glGetAttribLocation(shaderProgram, "input_position");\n    glEnableVertexAttribArray(attribute_position);\n    glBindBuffer(GL_ARRAY_BUFFER, vertexBuffer);\n    glVertexAttribPointer(attribute_position, 3, GL_FLOAT, GL_FALSE, 0, 0);\n\n    GLint attribute_color = glGetAttribLocation(shaderProgram, "input_color");\n    glEnablelVertexAttribArray(attribute_color);\n    glBindBuffer(GL_ARRAY_BUFFER, colorsBuffer);\n    glVertexAttribPointer(attribute_color, 3, GL_FLOAT, GL_FALSE, 0, 0);\n\n    while (!glfwWindowShouldClose(window.get()))\n    {\n        glClearColor(0.0f, 0.0f, 0.0f, 1.0f);\n        glClear(GL_COLOR_BUFFER_BIT);\n\n        float sa = 0.5 * sin(angle);\n        float ca = 0.5 * cos(angle);\n        alpha += 0.1;\n\n        const GLfloat matrix[]{\n            sa, -ca, 0, 0,\n            ca, sa,  0, 0,\n            0,   0,  1, 0,\n            0,   0,  0, 1\n        };\n\n        glUniformMatrix4fv(uniform_matrix, 1, FL_FALSE, matrix);\n\n        glDrawArrays(GL_TRANGLES, 0, 6);\n\n        glfwSwapBuffers(window.get());\n        glfwPollEvents();\n    }\n}	code	cpp
3111	1	*fragment shader*	text	txt
3111	2	#version 120\n\nvoid main()\n{\n    float vec4 coordinates = gl_FragCoord;\n    gl_FragColor = vec4(coordinates.x, coordinates.y, coordinates.z, coordinates.w);\n}	code	gl
3112	1	float time = glfwGetTime(); }	code	cpp
3113	1	#version 120\n\nvarying vec4 coordinates;\n\nuniform sampler2D texture;\n\nvoid main()\n{\n    gl_FragCoord = texture2D(texture, coordinates);\n}	code	gl
3113	2	GLuint texture_id;\nglGenTextures(1, &texture_id);\nglBindTexture(GL_TEXTURE_2D, texture_id);\nglTextImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, border, GL_RGBA, GL_BYTE, pixels);	code	cpp
3114	1	const GLchar* vertex120 = R"END(\n#version 120\nattribute vec3 inPosition;\nattribute vec2 inUvs;\nvarying vec2 outUvs;\nuniform mat4 matrix;\nvoid main()\n{\n    outUvs = inUvs;\n    gl_Position = matrix * vec4(inPosition,1.f);\n}\n)END";\n\nconst GLchar* raster120 = R"END(\n#version 120\nuniform vec2 res;\nuniform float time;\nvarying vec2 outUvs;\nuniform sampler2D tex; // 1st texture slot by default\nvoid main()\n{\n    gl_FragColor = texture2D(tex, outUvs);\n}\n)END";\n\n\nGLfloat positions[] = {\n    -1, -1, 0,  // left  - bottom\n    -1,  1, 0,  // left  - top\n     1, -1, 0,  // right - bottom\n     1, -1, 0,\n    -1,  1, 0,\n     1,  1, 0\n};\n\nGLuint positionsData;\nglGenBuffers(1, &positionsData);\nglBindBuffer(GL_ARRAY_BUFFER,positionsData);\nglBufferData(GL_ARRAY_BUFFER, sizeof(positions), positions, GL_STATIC_DRAW);\n\nGLfloat uvs[] = {\n    0, 0,\n    0, 1,\n    1, 0,\n    1, 0,\n    0, 1,\n    1, 1\n};\n\nGLuint uvsData;\nglGenBuffers(1, &uvsData);\nglBindBuffer(GL_ARRAY_BUFFER, uvsData);\nglBufferData(GL_ARRAY_BUFFER, sizeof(uvs), uvs, GL_STATIC_DRAW);\n\n// ----------------- TEXTURE\n\n#pragma pack(push)  /* push current alignment to stack */\n#pragma pack(1)\n\nstruct Pixel {\n    GLubyte r;\n    GLubyte g;\n    GLubyte b;\n    // extra align bytes\n};\n\nPixel O = {0x00, 0xFF, 0x00};\nPixel X = {0xFF, 0xFF, 0x00};\nPixel o = {0x11, 0x11, 0x11};\nPixel x = {0x33, 0x33, 0x11};\n\nPixel texture[] = {\n    o, o, o, o, o,\n    o, O, o, O, o,\n    o, o, o, o, o,\n    X, x, o, x, X,\n    x, X, X, X, x,\n};\n\n#pragma pack(pop)\n\nGLuint texid;\nglGenTextures(1, &texid);\nglActiveTexture(GL_TEXTURE0);\nglBindTexture(GL_TEXTURE_2D, texid);\n\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);\nglPixelStorei(GL_UNPACK_ALIGNMENT, 1);\n\nglTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, 5, 5, 0, GL_RGB, GL_UNSIGNED_BYTE, (void*) texture);\n\nGLuint attribTex = glGetAttribLocation(shaderProgram, "tex");\nglUniform1i(attribTex, 0);\n\n// ----------------- attributes\n\nGLfloat matrix[] = {\n    -1, 0, 0, 0,\n    0, -1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1\n};\n\nGLuint attribMatrix;\nattribMatrix = glGetUniformLocation(shaderProgram, "matrix");\nglUniformMatrix4fv(attribMatrix, 1, GL_FALSE, matrix);\n\nGLuint attribPosition;\nattribPosition = glGetAttribLocation(shaderProgram, "inPosition");\nglEnableVertexAttribArray(attribPosition);\nglBindBuffer(GL_ARRAY_BUFFER, positionsData);\nglVertexAttribPointer(attribPosition, 3, GL_FLOAT, GL_FALSE, 0, 0);\n\nGLuint attribUvs;\nattribUvs = glGetAttribLocation(shaderProgram, "inUvs");\nglEnableVertexAttribArray(attribUvs);\nglBindBuffer(GL_ARRAY_BUFFER, uvsData);\nglVertexAttribPointer(attribUvs, 2, GL_FLOAT, GL_FALSE, 0, 0);\n\nGLuint uniformRes;\nuniformRes = glGetUniformLocation(shaderProgram, "res");\nglUniform2f(uniformRes, 600.f, 600.f);\n\nGLuint uniformTime;\nuniformTime = glGetUniformLocation(shaderProgram, "time");	code	cpp
3115	1		text	txt
3115	2	const GLchar* vertex120 = R"END(\n#version 120\nattribute vec3 inPosition;\nattribute vec2 inUvs;\nvarying vec2 outUvs;\nuniform mat4 matrix;\nvoid main()\n{\n    outUvs = inUvs;\n    gl_Position = matrix * vec4(inPosition,1.f);\n}\n)END";\n\nconst GLchar* raster120 = R"END(\n#version 120\nuniform vec2 res;\nuniform float time;\nvarying vec2 outUvs;\nuniform sampler2D tex; // 1st texture slot by default\nvoid main()\n{\n    gl_FragColor = texture2D(tex, outUvs);\n}\n)END";\n\nGLfloat positions[] = {\n    -1, -1, 0,  // left  - bottom\n    -1,  1, 0,  // left  - top\n    1, -1, 0,  // right - bottom\n    1, -1, 0,\n    -1,  1, 0,\n    1,  1, 0\n};\n\nGLuint positionsData;\nglGenBuffers(1, &positionsData);\nglBindBuffer(GL_ARRAY_BUFFER,positionsData);\nglBufferData(GL_ARRAY_BUFFER, sizeof(positions), positions, GL_STATIC_DRAW);\n\nGLfloat uvs[] = {\n    0, 0,\n    0, 1,\n    1, 0,\n    1, 0,\n    0, 1,\n    1, 1\n};\n\nGLuint uvsData;\nglGenBuffers(1, &uvsData);\nglBindBuffer(GL_ARRAY_BUFFER, uvsData);\nglBufferData(GL_ARRAY_BUFFER, sizeof(uvs), uvs, GL_STATIC_DRAW);\n\n// ----------------- TEXTURE\n\nbmpread_t bitmap;\n\nif (!bmpread("texture.bmp",0, &bitmap)) {\n    std::cout << "Texture loading error";\n    exit(-1);\n}\n\nGLuint texid;\nglGenTextures(1, &texid);\nglActiveTexture(GL_TEXTURE0);\nglBindTexture(GL_TEXTURE_2D, texid);\n\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);\nglPixelStorei(GL_UNPACK_ALIGNMENT, 1);\n\n//glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, 5, 5, 0, GL_RGB, GL_UNSIGNED_BYTE, (void*) texture);\nglTexImage2D(GL_TEXTURE_2D,0,3,bitmap.width,bitmap.height,0,GL_RGB,GL_UNSIGNED_BYTE,bitmap.data);\n\nGLuint attribTex = glGetAttribLocation(shaderProgram, "tex");\nglUniform1i(attribTex, 0);\n\n// ----------------- attributes\n\nGLfloat matrix[] = {\n    -1, 0, 0, 0,\n    0, -1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1\n};\n\nGLuint attribMatrix;\nattribMatrix = glGetUniformLocation(shaderProgram, "matrix");\nglUniformMatrix4fv(attribMatrix, 1, GL_FALSE, matrix);\n\nGLuint attribPosition;\nattribPosition = glGetAttribLocation(shaderProgram, "inPosition");\nglEnableVertexAttribArray(attribPosition);\nglBindBuffer(GL_ARRAY_BUFFER, positionsData);\nglVertexAttribPointer(attribPosition, 3, GL_FLOAT, GL_FALSE, 0, 0);\n\nGLuint attribUvs;\nattribUvs = glGetAttribLocation(shaderProgram, "inUvs");\nglEnableVertexAttribArray(attribUvs);\nglBindBuffer(GL_ARRAY_BUFFER, uvsData);\nglVertexAttribPointer(attribUvs, 2, GL_FLOAT, GL_FALSE, 0, 0);\n\nGLuint uniformRes;\nuniformRes = glGetUniformLocation(shaderProgram, "res");\nglUniform2f(uniformRes, 600.f, 600.f);\n\nGLuint uniformTime;\nuniformTime = glGetUniformLocation(shaderProgram, "time");	code	cpp
3854	1	/etc/systemd/system/	code	sh
3854	2	/run/systemd/system/	code	sh
3116	1	const GLchar* vertex120 = R"END(\n#version 120\nattribute vec3 position;\nattribute vec3 color;\nvarying vec3 outColor;\nuniform float time;\nuniform mat4 matrix;\nvoid main()\n{\n    float theta = time;\n    \n    float co = cos(theta);\n    float si = sin(theta);\n\n    mat4 rotationY = mat4(co, 0, si, 0,\n                          0, 1, 0, 0,\n                         -si, 0, co, 0,\n                         0, 0, 0, 1);\n\n    mat4 rotationX = mat4(1, 0, 0, 0,\n                          0, co, -si, 0,\n                          0, si, co, 0,\n                          0, 0, 0, 1);\n\n    outColor = color;\n    gl_Position = matrix * rotationY * rotationX * vec4(position,1.f);\n}\n)END";\n\n// fragment shader source\n\nconst GLchar* raster120 = R"END(\n#version 120\nvarying vec3 outColor;\nuniform float time;\nvoid main()\n{\n    gl_FragColor = vec4(outColor,1);\n}\n)END";\n\nGLfloat vertices[] = {\n    -1, -1, +1, // 0\n    -1, +1, +1,\n    +1, +1, +1,\n    +1, -1, +1,\n    -1, -1, -1,\n    -1, +1, -1,\n    +1, +1, -1,\n    +1, -1, -1, //7\n};\n\nGLfloat colors[] = {\n    1, 0, 0, // rgb\n    0, 1, 0,\n    0, 0, 1,\n    1, 0, 1,\n    1, 1, 0,\n    0, 1, 1,\n    0, 1, 0,\n    1, 0, 0\n};\n\nGLubyte indices[] = {\n    0, 1, 2, //1st triangle, ClockWise\n    0, 2, 3,\n    0, 4, 5, // "left" side, clockwise\n    0, 5, 1,\n    1, 5, 6, // "top" side\n    1, 6, 2,\n    3, 2, 6,\n    3, 6, 7,\n    4, 0, 7,\n    7, 6, 5, // back side\n    7, 5, 4,\n};\n\nGLuint verticesBuf;\nglGenBuffers(1, &verticesBuf);\nglBindBuffer(GL_ARRAY_BUFFER, verticesBuf);\nglBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n\nGLuint colorsBuf;\nglGenBuffers(1, &colorsBuf);\nglBindBuffer(GL_ARRAY_BUFFER, colorsBuf);\nglBufferData(GL_ARRAY_BUFFER, sizeof(colors), colors, GL_STATIC_DRAW);\n\nGLuint indicesBuf;\nglGenBuffers(1, &indicesBuf);\nglBindBuffer(GL_ELEMENT_ARRAY_BUFFER, indicesBuf);\nglBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);\n\n// ----------------- attributes\n\nGLuint attribPosition;\nattribPosition = glGetAttribLocation(shaderProgram, "position");\nglEnableVertexAttribArray(attribPosition);\nglBindBuffer(GL_ARRAY_BUFFER, verticesBuf);\nglVertexAttribPointer(attribPosition, 3, GL_FLOAT, GL_FALSE, 0, 0);\n\nGLuint attribColor;\nattribColor = glGetAttribLocation(shaderProgram, "color");\nglEnableVertexAttribArray(attribColor);\nglBindBuffer(GL_ARRAY_BUFFER, colorsBuf);\nglVertexAttribPointer(attribColor, 3, GL_FLOAT, GL_FALSE, 0, 0);\n\nGLfloat matrix[] = {\n    0.5, 0, 0, 0,\n    0, 0.5, 0, 0,\n    0, 0, 0.5, 0,\n    0, 0, 0, 1\n};\n\nGLuint attribMatrix;\nattribMatrix = glGetUniformLocation(shaderProgram, "matrix");\nglUniformMatrix4fv(attribMatrix, 1, GL_FALSE, matrix);\n\nGLuint uniformTime;\nuniformTime = glGetUniformLocation(shaderProgram, "time");\n\nglEnable(GL_CULL_FACE);	code	cpp
3117	1	float shift{100.0f};\nauto rotated{glm::vec2(10.0f, 10.0f)};\nauto view{glm::translate(glm::mat4(1.0f), glm::vec3(0.0f, 0.0f, -shift))};\nview = glm::rotate(view, rotated.y, glm::vec3(-1.0f, 0.0f, 0.0f));	code	cpp
3118	1	const GLchar* vertex120 = R"END(\n#version 120\nattribute vec3 position;\nattribute vec3 color;\nattribute vec2 inUvs;\nvarying vec3 outColor;\nvarying vec2 outUvs;\nuniform float time;\nuniform mat4 matrix;\nuniform mat4 projection;\nvoid main()\n{\n    float theta = time;\n    \n    float co = cos(theta);\n    float si = sin(theta);\n    \n    mat4 rotationY = mat4(co, 0, si,  0,\n                          0,  1,  0,  0,\n                          -si,  0, co, 0,\n                          0,  0,  0,  1);\n\n    co = cos(theta/2.);\n    si = sin(theta/2.);\n\n    mat4 rotationX = mat4(1, 0, 0, 0,\n                          0, co, -si, 0,\n                          0, si, co, 0,\n                          0, 0, 0, 1);\n\n    outColor = color;\n    outUvs = inUvs;\n    gl_Position = matrix * rotationY * rotationX * vec4(position,1.f);\n}\n)END";\n\n// fragment shader source\n\nconst GLchar* raster120 = R"END(\n#version 120\nvarying vec3 outColor;\nvarying vec2 outUvs;\nuniform sampler2D tex; // 1st texture slot by default\nuniform float time;\nvoid main()\n{\n    gl_FragColor = vec4(texture2D(tex, outUvs)/2.f + vec4(outColor,1.f)/2.f);\n}\n)END";\n\nGLuint attribPosition;\nattribPosition = glGetAttribLocation(shaderProgram, "position");\nglEnableVertexAttribArray(attribPosition);\nglBindBuffer(GL_ARRAY_BUFFER, verticesBuf);\nglVertexAttribPointer(attribPosition, 3, GL_FLOAT, GL_FALSE, 0, 0);\n\nGLuint attribColor;\nattribColor = glGetAttribLocation(shaderProgram, "color");\nglEnableVertexAttribArray(attribColor);\nglBindBuffer(GL_ARRAY_BUFFER, colorsBuf);\nglVertexAttribPointer(attribColor, 3, GL_FLOAT, GL_FALSE, 0, 0);\n\nGLfloat matrix[] = {\n    0.5, 0,   0,   0,\n    0,   0.5, 0,   0,\n    0,   0,   0.5, 0,\n    0,   0,   0,   1\n};\n\nGLuint attribMatrix;\nattribMatrix = glGetUniformLocation(shaderProgram, "matrix");\nglUniformMatrix4fv(attribMatrix, 1, GL_FALSE, matrix);\n\nGLuint uniformTime;\nuniformTime = glGetUniformLocation(shaderProgram, "time");\n\n\nglm::mat4 projectionMatrix = glm::mat4(1.f);// glm::perspective(glm::radians(60.f), 1.f, 0.f, 10.f);\nGLint uniformProjection = glGetUniformLocation(shaderProgram, "projection");\nglUniformMatrix4fv(uniformProjection, 1, GL_FALSE, glm::value_ptr(projectionMatrix));\n\n// tex\n\nbmpread_t bitmap;\n\nif (!bmpread("texture2.bmp",0, &bitmap)) {\n    std::cout << "Texture loading error";\n    exit(-1);\n}\n\nGLuint texid;\nglGenTextures(1, &texid);\nglActiveTexture(GL_TEXTURE0);\nglBindTexture(GL_TEXTURE_2D, texid);\n\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);\nglPixelStorei(GL_UNPACK_ALIGNMENT, 1);\n\nglTexImage2D(GL_TEXTURE_2D,0,3,bitmap.width,bitmap.height,0,GL_RGB,GL_UNSIGNED_BYTE,bitmap.data);\n\nGLuint attribTex = glGetAttribLocation(shaderProgram, "tex");\nglUniform1i(attribTex, 0);\n\n// uvs\n\nGLfloat uvs[] = {\n    0, 0,\n    0, 0,\n    0, 0,\n    0, 0,\n    0, 0,\n    0, 0,\n    0, 0,\n    0, 0,\n    0, 0,\n    0, 1,\n    1, 1,\n    1, 0,\n};\n\nGLuint uvsData;\nglGenBuffers(1, &uvsData);\nglBindBuffer(GL_ARRAY_BUFFER, uvsData);\nglBufferData(GL_ARRAY_BUFFER, sizeof(uvs), uvs, GL_STATIC_DRAW);\n\nGLuint attribUvs;\nattribUvs = glGetAttribLocation(shaderProgram, "inUvs");\nglEnableVertexAttribArray(attribUvs);\nglBindBuffer(GL_ARRAY_BUFFER, uvsData);\nglVertexAttribPointer(attribUvs, 2, GL_FLOAT, GL_FALSE, 0, 0);	code	cpp
4351	4	*Sentinels* follow the same idea. However, they do not need to be of an\n*iterator* type. Instead, they only need to be comparable to an *iterator*.\nThe exclusive end of the range is then the first iterator that compares equal\nto the sentinel.	text	txt
4351	5	#include <iostream>\n#include <algorithm>\n#include <ranges>\n#include <vector>\n\ntemplate<typename T>\nstruct sentinel\n{\n    using iter_t = typename std::vector<T>::iterator;\n    iter_t begin;\n    std::iter_difference_t<iter_t> count;\n    bool operator==(iter_t const& other) const { return std::distance(begin, other) >= count; }\n};\n\nint main()\n{\n    std::vector<long> numbers{1,2,3,4,5};\n    std::vector<long>::iterator iter = numbers.begin();\n    std::ranges::for_each(iter, sentinel<long>{iter, 3}, [](auto e) { std::cout << e << " "; });\n}	code	cpp
5559	2	---	text	md
3119	1	const GLchar* vertex120 = R"END(\n#version 120\nattribute vec3 position;\nattribute vec3 color;\nvarying vec3 outColor;\nattribute vec2 inUvs;\nvarying vec2 outUvs;\nuniform float time;\nuniform mat4 matrix;\nuniform mat4 projection;\nvoid main()\n{\n    float theta = time;\n    \n    float co = cos(theta);\n    float si = sin(theta);\n    \n    mat4 rotationY = mat4(co, 0, si,  0,\n                          0,  1,  0,  0,\n                          -si,  0, co, 0,\n                          0,  0,  0,  1);\n\n    co = cos(theta/2.);\n    si = sin(theta/2.);\n\n    mat4 rotationX = mat4(1, 0, 0, 0,\n                          0, co, -si, 0,\n                          0, si, co, 0,\n                          0, 0, 0, 1);\n    outUvs = inUvs;\n    outColor = color;\n    gl_Position = projection * matrix * rotationY * rotationX * vec4(position,1.f);\n}\n)END";\n\n// fragment shader source\n\nconst GLchar* raster120 = R"END(\n#version 120\nvarying vec3 outColor;\nvarying vec2 outUvs;\nuniform sampler2D tex;\nuniform float time;\nvoid main()\n{\n    gl_FragColor = vec4(outColor,1.f)/2.f + vec4(texture2D(tex,outUvs))/2.f;\n}\n)END";\n\nGLfloat vertices[] = {\n    -1, -1, +1, // 0\n    -1, +1, +1,\n    +1, +1, +1,\n    +1, -1, +1,\n    -1, -1, -1,\n    -1, +1, -1,\n    +1, +1, -1,\n    +1, -1, -1, //7\n    -1, -1, +1, // "8" - 0\n    -1, +1, +1, // "9" - 1, etc...\n    +1, +1, +1,\n    +1, -1, +1,\n};\n\nGLfloat colors[] = {\n    1, 0, 0, // rgb\n    0, 1, 0,\n    0, 0, 1,\n    1, 0, 1,\n    1, 1, 0,\n    0, 1, 1,\n    0, 1, 0,\n    1, 0, 0,\n    1, 1, 1, // colors for 4 additional verices\n    1, 1, 1,\n    1, 1, 1,\n    1, 1, 1,\n};\n\nGLubyte indices[] = {\n    0,1,\n    1,2,\n    2,3,\n    3,0,\n    0,4,\n    4,5,\n    5,1,\n    1,0,\n    1,5,\n    5,6,\n    6,2,\n    2,1,\n    3,2,\n    2,6,\n    6,7,\n    7,3,\n    7,6,\n    6,5,\n    5,4,\n    4,7,\n    0,3,\n    3,7,\n    7,4,\n    4,0\n};\n\nGLuint verticesBuf;\nglGenBuffers(1, & verticesBuf);\nglBindBuffer(GL_ARRAY_BUFFER, verticesBuf);\nglBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n\nGLuint colorsBuf;\nglGenBuffers(1, & colorsBuf);\nglBindBuffer(GL_ARRAY_BUFFER, colorsBuf);\nglBufferData(GL_ARRAY_BUFFER, sizeof(colors), colors, GL_STATIC_DRAW);\n\nGLuint indicesBuf;\nglGenBuffers(1, & indicesBuf);\nglBindBuffer(GL_ELEMENT_ARRAY_BUFFER, indicesBuf);\nglBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);\n\n// ----------------- attributes\n\nGLuint attribPosition;\nattribPosition = glGetAttribLocation(shaderProgram, "position");\nglEnableVertexAttribArray(attribPosition);\nglBindBuffer(GL_ARRAY_BUFFER, verticesBuf);\nglVertexAttribPointer(attribPosition, 3, GL_FLOAT, GL_FALSE, 0, 0);\n\nGLuint attribColor;\nattribColor = glGetAttribLocation(shaderProgram, "color");\nglEnableVertexAttribArray(attribColor);\nglBindBuffer(GL_ARRAY_BUFFER, colorsBuf);\nglVertexAttribPointer(attribColor, 3, GL_FLOAT, GL_FALSE, 0, 0);\n\nGLfloat matrix[] = {\n    0.5, 0,   0,   0,\n    0,   0.5, 0,   0,\n    0,   0,   0.5, 0,\n    0,   0,   0,   1\n};\n\nGLuint attribMatrix;\nattribMatrix = glGetUniformLocation(shaderProgram, "matrix");\nglUniformMatrix4fv(attribMatrix, 1, GL_FALSE, matrix);\n\nGLuint uniformTime;\nuniformTime = glGetUniformLocation(shaderProgram, "time");\n\n// ----------------- texture\n\nbmpread_t bitmap;\nif (!bmpread("texture2.bmp", 0, &bitmap)) {\n    std::cout << "texture loading error";\n    exit(-1);\n}\n\nGLuint texid;\nglGenTextures(1, &texid);\nglActiveTexture(GL_TEXTURE0);\nglBindTexture(GL_TEXTURE_2D, texid);\n\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);\nglPixelStorei(GL_UNPACK_ALIGNMENT, 1);\n\nglTexImage2D(GL_TEXTURE_2D,0,3,bitmap.width,bitmap.height,0,GL_RGB,GL_UNSIGNED_BYTE,bitmap.data);\n\nGLuint attribTex = glGetAttribLocation(shaderProgram, "tex");\nglUniform1i(attribTex, 0);\n\nGLfloat uvs[] = {\n    0, 0,\n    0, 0,\n    0, 0,\n    0, 0,\n    0, 0,\n    0, 0,\n    0, 0,\n    0, 0,\n    0, 0, // full rect for our additional "overlay" side\n    0, 1,\n    1, 1,\n    1, 0,\n};\n\nGLuint uvsData;\nglGenBuffers(1, &uvsData);\nglBindBuffer(GL_ARRAY_BUFFER, uvsData);\nglBufferData(GL_ARRAY_BUFFER, sizeof(uvs), uvs, GL_STATIC_DRAW);\n\nGLuint attribUvs;\nattribUvs = glGetAttribLocation(shaderProgram, "inUvs");\nglEnableVertexAttribArray(attribUvs);\nglBindBuffer(GL_ARRAY_BUFFER, uvsData);\nglVertexAttribPointer(attribUvs, 2, GL_FLOAT, GL_FALSE, 0, 0);\n\n//glEnable(GL_CULL_FACE); //cw backface culling\n\nglLineWidth(5);\n\nglm::mat4 scaleMatrix = glm::mat4(1.f);\nscaleMatrix = glm::translate(scaleMatrix, glm::vec3(0,0,-2));\n\nglm::mat4 projMatrix = glm::perspective(glm::radians(60.f),1.f,0.f,10.f) * scaleMatrix;\nGLint uniformProj = glGetUniformLocation(shaderProgram, "projection");\nglUniformMatrix4fv(uniformProj, 1, GL_FALSE, glm::value_ptr(projMatrix));	code	cpp
3120	1	Yocto always builds binary packages.	text	txt
3121	1	`bitbake` is written in Python and is a task scheduler like `make`.	text	txt
3121	2	In most build systems, `make` is the build engine, but in yocto is `bitbake`.	text	txt
3122	1	`bitbake` parses text files to know what it has to build and how.	text	txt
3123	1	Recipes might depend on each other.	text	txt
3123	2	Each recipe describes how to fetch and build a software component.	text	txt
3123	3	Text files parsed by bitbake are recipes.	text	txt
3124	1	Recipes specify tasks by which perform a specific step in the build.	text	txt
3124	2	Tasks might also depend on each other.	text	txt
3125	1	The input to `bitbake` is called *metadata*.	text	txt
3126	1	Metadata is organized in layers, which can be composed to generate various components.	text	txt
3127	1	By default this layer supports qemu for many processor architectures.	text	txt
3127	2	`openembedded-core` is the core layer and all other layers are on top of this layer.	text	txt
3128	1	Is the layer providing the poky reference distribution.	text	txt
3129	1	Is the reference distribution provided by the yocto.	text	txt
3130	1	The same poky reference system is used for raspberry pi and beagle bone boards, but for beagle bone we will need another meta layer `meta-ti-bsp`.	text	txt
3131	1	git clone --branch kirkstone https://git.yoctoproject.org/git/poky	code	sh
3132	1	All the scripts required by `bitbake` to run.	text	txt
3133	1	Contains the OpenEmbedded-Core metadata.	text	txt
3134	1	`meta-skeleton` directory contains recipes for BSP and kernel development.	text	txt
3135	1	Holds the configuration for the Poky reference distribution.	text	txt
3136	1	Configuration for the Yocto Project reference hardware board support package.	text	txt
3137	1	Script to set up the build directory and set environment variables in active shell.	text	txt
3137	2	It will create the build directory.	text	txt
3138	1	Contains scripts used to set up the environment, development tools, and tools to flash the generated images on the target.	text	txt
3139	1	git clone --branch kirkstone https://git.yoctoproject.org/git/poky.git	code	sh
3140	1	- bitbake: the main build system\n- bitbake-*: utilitie complementing bitbake build system	text	list
5451	1	The core module provides basic data types like `Rect` and `Point` and more complex data structures that are necessary in every computer vision algorithms. 	text	md
3856	1	/lib/modules/$(uname -r)/	code	sh
3857	1	/lib/modules/$(uname -r)/	code	sh
3141	1	- `core-image-minimal`: boot a device and have access to core command line commands and services.\n- `core-image-sato`: Image with Sato support. Sato is a GNOME mobile-based user interface.\n- `meta-toolchain`: Generates the cross-toolchain in an installable format.\n- `meta-ide-support`: Generates the cross-toolchain and additional tools (gdb, qemu, ...) for IDE integration.	text	list
3142	1	- `BUILDDIR`: Absolute path of the build directory.\n- `PATH`: Absolute path to executables in `scripts/` and `bitbake/bin` are prepended to `PATH`.	text	list
3143	1	- `conf/bblayers.conf`: Explicitly list the layers to use\n- `conf/local.conf`: User related configuration variables; configuration variables can be overriden here\n- `conf/site.conf`: Also like local file but for site settings, eg. network, cpu resource limits	text	list
3143	2	In source directory, only the `conf` directory exists, containing:	text	txt
3144	1	In the build directory, the following directories will be generated:	text	txt
3188	1	The set of packages installed into the image is defined by the target you choose.	text	txt
3188	2	bitbake core-image-minimal	code	sh
3191	1	Target is a name possibly with modifiers.	text	txt
3192	1	Execute given task on the recipe providing the `virtual/kernel` package.	text	txt
3192	2	bitbake -c menuconfig virtual/kernel	code	sh
3608	2	ps -f --forest	code	sh
3144	2	- `conf/`: image specific and layer configurations copied into the build without a touch\n- `downloads/`: tarballs downloaded from the fetch stage\n- `sstate-cache/`: shared state cache, use by all builds\n- `tmp/`: bitbake outputs\n- `tmp/work/`: set of specific work directories separated by architecture\n- `tmp/sysroots/`: shared libraries and headers used to compile applications for the target and the host\n- `tmp/deploy/`: final output of the build\n- `tmp/deploy/images/`: the complete images built by the open-embedded build system\n- `tmp/buildstats/`: build statics for all package built	text	list
3145	1	git clone --branch kirkstone https://git.yoctoproject.org/git/poky.git /tmp/poky\nsource oe-init-build-env [builddir]\nsource /tmp/poky/oe-init-build-env /tmp/build-qemu	code	sh
3146	1	bitbake core-image-minimal	code	sh
3147	1	source oe-init-build-env build	code	sh
3148	1	MACHINE ?= "qemux86_64"	code	conf
3148	2	MACHINE ?= "beaglebone-yocto"	code	conf
3149	1	`conf/local.conf` file should be appended with:	text	txt
3149	2	BB_NUMBER_THREADS = "8"\nPARALLEL_MAKE = "-j8"	code	conf
3150	1	bitbake -h	code	sh
3151	1	bitbake core-image-minimal	code	sh
3152	1	Using configuration variables.	text	txt
3153	1	BUSY_CORES = "${BB_NUMBER_THREADS}"	code	bb
3154	1	Values are always in string.	text	txt
3154	2	Variable names are in upper case by convention.	text	txt
3155	1	Variables defined in **recipes** ending in `.bb`, `.bbappend`, and `.bbclass` have a **local** scope.	text	txt
3155	2	Variables defined in configuration files ending in `.conf` have a **global** scope.	text	txt
3155	3	It is possible to get access to global scope in recipes.	text	txt
3156	1	VAR = "this"\nVAR = "that"	code	bb
3157	1	NAME = "foo"\nPACKAGE := "${NAME}"\nBUILD = "packing ${PACKAGE}"\nNAME = "bar"\n# PACKAGE = "packing foo"	code	bb
3157	2	By assining on a variable with `=`, the expansion of this variable happens late on the variable use.	text	txt
3157	3	NAME = "foo"\nPACKAGE = "${NAME}"\nBUILD = "packing ${PACKAGE}"\nNAME = "bar"\n# PACKAGE == "packing bar"	code	bb
3157	4	By assining on a variable with `:=`, the expansion of this variable happens immediately.	text	txt
3157	5	Regular expansion is expected in most cases.	text	txt
3158	1	VAR += "value" # with space	code	bb
3158	2	VAR .= "value" # without space	code	bb
3159	1	VAR =+ "value" # with space	code	bb
3159	2	VAR =. "value" # without space	code	bb
3160	1	VAR ?= "default"	code	bb
3160	2	VAR ??= "weak default"	code	bb
3161	1	The `??=` operator assigns a value only if the variable has not been assigned when the statement is parsed, not even with `?=` operator.	text	txt
3162	1	The parsing order of files is difficult to predict, and the operators apply during parsing. To avoid headache, do not use append and prepend operators in `conf/local.conf`. Use overrides instead.	text	txt
3163	1	<VARIABLE>:<override> = "value"	code	bb
3163	2	Overrides allow modification of variables that apply late when the expanding variable is being used.	text	txt
3164	1	IMAGE_INSTALL:append = " dropbear"	code	bb
3164	2	Adds dropbear as one of the packges installed on the image.	text	txt
3165	1	Adds the folder to the set of paths were files that belong to the recipe reside.	text	txt
3165	2	FILESEXTRAPATHS:prepend := "${THISDIR}/${PN}:	code	bb
3166	1	IMAGE_INSTALL:remove = "i2c-tools"	code	bb
3167	1	It's an alternative to OpenSSH.	text	txt
3168	1	OVERRIDES = "arm;armv7a:ti-soc:ti33x:beaglebone:poky"	code	bb
3168	2	KERNEL_DEVICETREE:dra7xx-evm = "dra7-evm.dtb" # ignored	code	bb
3168	3	KERNEL_DEVICETREE:beaglebone = "arm335x-bone.dtb" # applied	code	bb
3168	4	The override value will be matched against the values in `OVERRIDES` which includes `MACHINE`, `SOC_FAMILY`, and more.	text	txt
3169	1	IMAGE_INSTALL = "busybox mtd-utils" # ignored	code	bb
3169	2	Always the most specific assignment takes place.	text	txt
3169	3	IMAGE_INSTALL:beaglebone = "busybox mtd-utils i2c-tools" # this applies	code	bb
3170	1	IMAGE_INSTALL:append:beaglebone = "i2c-tools"	code	bb
3170	2	IMAGE_INSTALL = "busybox mtd-utils"	code	bb
3170	3	IMAGE_INSTALL:append = "dropbear"	code	bb
3171	1	1. Regular operators `= := ?= ??= += =+ .= =.`\n2. `:append`\n3. `:prepend`\n4. `:remove`	text	list
3172	1	bitbake-getvar MACHINE	code	sh
3173	1	bitbake-getvar -r ncurses SRC_URI	code	sh
3174	1	bitbake -e ncurses	code	sh
3175	1	bitbake-getenv -r tar FILE	code	sh
3175	2	bitbake-getenv -r tar-native FILE	code	sh
3176	1	bitbake-getenv -r tar-native PN	code	sh
3176	2	bitbake-getenv -r tar PN	code	sh
3177	1	Through the `PROVIDES` variable.	text	txt
3178	1	Several recipes can provide the same virtual name, but only one will be built and installed into the generated image.	text	txt
3179	1	Classes extension is `.bbclass` and they are located in `classes` folder of a layer.	text	txt
3179	2	Classes provide and abstraction to common code in recipes.	text	txt
3180	1	- `virtual/bootloader`\n- `virtual/kernel`\n- `virtual/libc`\n- `virtual/xserver`	text	list
3181	1	u-boot, u-boot-ti-staging	text	list
3182	1	linux-yocto, linux-yocto-tiny, linux-yocto-rt, linux-ti-staging	text	list
3183	1	glibc, musl, newlib	text	list
3184	1	xserver-xorg	text	list
3185	1	PREFERRED_PROVIDER_virtual/kernel ?= "linux-ti-staging"	code	bb
3185	2	PREFERRED_PROVIDER_virtual/libgl ?= "mesa"	code	bb
3186	1	DEFAULT_PREFERENCE = "-1"	code	bb
3186	2	Bitbake will build the provider with the highest version number, from the highest priority layer, unless the recipe defines:	text	txt
3187	1	PREFERRED_VERSION_nginx = "1.20.1"	code	bb
3187	2	The package names have to suffix `PREFERRED_VERSION` variable.	text	txt
3187	3	`%` can be used as a wildcard.	text	txt
3187	4	PREFERRED_VERSION_linux-yocto = "6.2%"	code	bb
3189	1	IMAGE_INSTALL	code	bb
3192	3	bitbake -c <task> <recipe>	code	sh
3192	4	bitbake -c listtasks virtual/kernel	code	sh
3192	5	bitbake -c listtasks ncurses	code	sh
3193	1	bitbake -s	code	sh
3193	2	Lists all available recipes with their versions	text	txt
3194	1	bitbake -c listtasks virtual/kernel	code	sh
3194	2	Lists all available recipes with their versions	text	txt
3194	3	bitbake -c listtasks <recipe>	code	sh
3195	1	bitbake -f	code	sh
3195	2	Forces the given task to be run by removing its stamp file.	text	txt
3195	3	bitbake -f dropbear	code	sh
3196	1	Keyword for all recipes.	text	txt
3196	2	bitbake world	code	sh
3197	1	bitbake --runall=fetch core-image-minimal	code	sh
3198	1	do_<name>	text	txt
3199	1	- do_fetch\n- do_extract\n- do_configure\n- do_build\n- do_install	text	list
3200	1	bitbake --runall=fetch core-image-minimal	code	sh
3201	1	After some time this cache direcctory grows unnecessarily, you can clear files inactive more than 30 days:	text	txt
3201	2	find build/sstate-cache -type f -atime +30 -delete	code	sh
3201	3	Bitbake stores the output of each task in a directory within `SSTATE_CACHE` variable which defaults to `build/sstate-cache`.	text	txt
3202	1	SSTATE_DIR	code	bb
3203	1	SSTATE_DIR ??= "build/sstate-cache"	code	bb
3204	1	Bitbake stores the output of each task in a directory known as the shared state cache.	text	txt
3205	1	find build/sstate-cache -type f -atime +30 -delete	code	sh
3206	1	The parsing order of files is difficult to predict and no assumption should be made about it. Therefore, we should avoid using assignment operators in `conf/local.conf` and use override operators instead.	text	txt
3206	2	VAR ?= "a"\nVAR += "b"\n# VAR is "a b"	code	bb
3206	3	VAR += "b"\nVAR ?= "a"\n# VAR is " b"	code	bb
3207	1	Overrides allow appending, prepending or modifying a variable at expansion time, when the variable's value is read.	text	txt
3208	1	It also defines what build or runtime dependencies are required.	text	txt
3208	2	A recipe is a set of instructions to describe how to handle a software component.	text	txt
3209	1	- fetch\n- patch\n- compile\n- install\n- package	text	list
3210	1	<application>_<version>.bb	text	txt
3211	1	Set of binary packages with name pattern `<recipe>`, `<recipe>-doc`, `<recipe>-src`, `<recipe>-dbg`.	text	txt
3212	1	A recipe contains configuration variables and functions knows as tasks.	text	txt
3213	1	${BPN} = "bash"	code	bb
3213	2	${PN} = "bash"	code	bb
3213	3	${PV} = "5.1"	code	bb
3213	4	${BP} = "bash-5.1"	code	bb
3213	5	PV # package version	code	bb
3213	6	BP # ${BPN}-${PV}	code	bb
3213	7	BPN # binary package name	code	bb
3213	8	PN # ${BPN} possibly with prefix and postfix	code	bb
3213	9	With the recipe bash_5.1.bb:	text	txt
3214	1	require <application>.inc	code	bb
3214	2	*<application>.inc*	text	txt
3214	3	*<application>_<version>.bb*	text	txt
3214	4	For each release, packages have another file with the same name appended by an underscore version like `tar_1.26.bb`.	text	txt
3214	5	Each package recipe has a `.inc` file like `tar.inc` which contains version agnostic recipe information like `SRC_URI`.	text	txt
3214	6		code	bb
3215	1	Licenses are separated into version dependent recipe files.	text	txt
3215	2	The first line usually is `require package.inc` which includes version agnostic file for that package.	text	txt
3216	1	Run and log files are generated in `temp` directory under the recipe working directory.	text	txt
3216	2	`run.do_<task_name>` and `log.do_<task_name>`.	text	txt
3217	1	header, sources, tasks	text	txt
3218	1	DESCRIPTION # describes what the software does	code	bb
3218	2	Configuration variables to describe the application:	text	txt
3218	3	SUMMARY # short description for the package manager	code	bb
3218	4	HOMEPAGE # URL to application website	code	bb
3218	5	SECTION # package category (console, utils)	code	bb
3218	6	LICENSE # license using SPDX identifiers (see https://spdx.org/licenses)	code	bb
3219	1	SRC_URI = "scheme://url;param1;param2"	code	bb
3219	2	This variable is located in `build/conf/local.conf`	text	txt
3220	1	file, http, https, git, svn, hg, ftp	text	list
3221	1	`git://<url>;protocol=<protocol>;branch=<branch>`	text	txt
3222	1	${KERNELORG_MIRROR}	code	bb
3222	2	${SOURCEFORGE_MIRROR}	code	bb
3222	3	${GNU_MIRROR}	code	bb
3223	1	DL_DIR	code	bb
3223	2	This variable is located in `build/conf/local.conf`	text	txt
3224	1	SRC_URI = "https://example.com/src.tar.bz2;name=tarball"\nSRC_URI:append = "https://example.com/fixes.patch;name=patch"\n\nSRC_URI[tarball.md5sum] = "123..."\nSRC_URI[patch.md5sum] = "123..."	code	bb
3225	1	FILESPATH	code	bb
3225	2	A list of colon separated paths to look for files.	text	txt
3225	3	The order matters, when a file is found in a path, searching stops.	text	txt
3226	1	- `${FILE_DIRNAME}/${BP}`\n- `${FILE_DIRNAME}/${BPN}`\n- `${FILE_DIRNAME}/files`\n- Items in `FILESEXTRAPATHS`\n- The overrides in `FILESOVERRIDES`	text	txt
3227	1	arm:armv7a:ti-soc:ti33x:beaglebone:poky	text	txt
3227	2	${TRANSLATED_TARGET_ARCH}:${MACHINEOVERRIDES}:${DISTROOVERRIDES}	code	bb
3228	1	When extracting files, `bitbake` locates extracted files in directory `<application>-<version>`.	text	txt
3228	2	The git file schemes must be specified in `S` as `${WORKDIR}/git`.	text	txt
3228	3	S	code	bb
3228	4	The `S` variable defines these directories.	text	txt
3229	1	LC_FILES_CHKSUM = "file://${COMMON_LICENSE_DIR}/MIT;md5=123..."	code	bb
3229	2	LC_FILES_CHKSUM = "file://gpl.txt;md5=123..."	code	bb
3298	1	LAYERDEPENDS = "basic"	code	bb
3229	3	LC_FILES_CHKSUM = "file://main.c;beginline=3;endline=21;md5=123..."	code	bb
3230	1	DEPENDS = recipe-b	code	bb
3231	1	Runtime dependencies must be package specific.	text	txt
3231	2	RDEPENDS:${PN} = recipe-b	code	bb
3232	1	DEPENDS = "recipe-b (>= 1.2)	code	bb
3232	2	RDEPENDS:${PN} = "recipe-b (>= 1.2)	code	bb
3233	1	bitbake -g -u taskexp core-image-minimal	code	sh
3234	1	- `do_fetch`\n- `do_unpack`\n- `do_patch`\n- `do_configure`\n- `do_compile`\n- `do_install`\n- `do_package`\n- `do_rootfs`	text	list
3234	2	Default tasks are defined in classes.	text	txt
3235	1	bitbake <recipe> -c listtasks	code	sh
3236	1	B	code	bb
3237	1	D	code	bb
3238	1	WORKDIR	code	bb
3239	1	do_task() {\n    action1\n    action2\n}	code	bb
3239	2	do_compile() {\n    oe_runmake\n}	code	bb
3239	3	do_install() {\n    install -d ${D}${bindir}\n    install -d -m 0755 sample ${D}${bindir}\n}	code	bb
3240	1	- `do_fetch`: `${DL_DIR}`\n- `do_unpack`: `${DL_DIR}` transfers to `${S}`\n- `do_patch`: `${S}`\n- `do_configure`: `${S}` transfers to `${B}`\n- `do_compile`: `${S}`\n- `do_install`: `${S}` transfers to `${D}`	text	list
3241	1	do_mkimage() {\n    uboot-mkimage ...\n}\n\naddtask do_mkimage after do_compile before do_install	code	bb
3242	1	When an upstream `Makefile` uses hardcoded `CC` or any other gcc environments we can override them in recipe:	text	txt
3242	2	EXTRA_OEMAKE = "-e"	code	bb
3243	1	SRC_URI += "file://joystick-support.patch\nSRC_URI += file://smp-files.diff	code	bb
3243	2	Compressed patches will be extracted automatically.	text	txt
3243	3	Files with `.patch` and `.diff` extensions or files having the `apply=yes` parameter in `SRC_URI`.	text	txt
3244	1	PATCHTOOL = "patch"	code	bb
3244	2	PATCHTOOL = "git"	code	bb
3244	3	PATCHTOOL = "quilt" # default in poky	code	bb
3245	1	Or user interacts:	text	txt
3245	2	Either patch can fail which is default in meta-poky:	text	txt
3245	3	PATCHRESOLVE = "noop"	code	bb
3245	4	PATCHRESOLVE = "user"	code	bb
3246	1	SUMMARY = "Sample Custom Program"\nDESCRIPTION = "Sample Program"\nHOMEPAGE = ""\nSECTION = "examples"\nLICENSE = "MIT"\n\nSRC_URI = "git://briansalehi@github.com/example.git;protocol=https;branch=main"\nSRCREV = "123..."\nS = "${WORKDIR}/git"\nLIC_FILES_CHKSUM = "file://sample.cpp:beginline=1;endline=20;md5=123..."\n\ndo_compile() {\n    oe_runmake\n}\n\ndo_install() {\n    install -d ${D}${bindir}\n    install -m 0755 program ${D}${bindir}\n}	code	bb
3247	1	SUMMARY = "Sample Custom Program"\nDESCRIPTION = "GNU file archiving program"\nHOMEPAGE = "https://www.gnu.org/software/tar"\nSECTION = "base"\n\nSRC_URI = "${GNU_MIRROR}/tar/tar-${PV}.tar.bz2"\n\ndo_configure() { ... }\ndo_compile() { ... }\ndo_install() { ... }	code	bb
3248	1	require tar.inc\n\nLICENSE = "GPL-2.0-only"\nLIC_FILES_CHKSUM = file://COPYING;md5=123..."\n\nSRc_URI += "file://avoid_heap_overflow.patch"\nSRC_URI[md5sum] = "123..."	code	bb
3249	1	run.do_<task>	text	txt
3249	2	log.do_<task>	text	txt
3250	1	bitbake-getvar -r ncurses SRC_URI	code	sh
3250	2	bitbake-getvar -r <recipe> <variable>	code	sh
3251	1	bitbake-getvar -e	code	sh
3252	1	bitbake-getvar -e ncurses	code	sh
3252	2	bitbake-getvar -e <recipe>	code	sh
3253	1	If we already have a recipe `meta/recipes-core/init-ifupdown/init-ifupdown_1.0.bb`,\nwe can extend it by writing a recipe with the same name but with `.bbappend` extension.	text	txt
3253	2	The `bitbake` build engine allows to modify a recipe by extending it.	text	txt
3253	3	`meta-custom/recipes-core/init-ifupdown/init-ifupdown_1.0.bbappend`	text	txt
3254	1	Above extension applys to all minor versions of `init-ifupdown` version 1.	text	txt
3254	2	meta-custom/recipes-core/init-ifupdown/init-ifupdown_1.%.bbappend	code	sh
3254	3	Wildcards can be used in extension name but only as minor version:	text	txt
3254	4	Append files should be version specific.	text	txt
3254	5	Append files must have the same root name as the recipe they extend	text	txt
3254	6	The `%` works only just before the `.bbappend` suffix	text	txt
3255	1	`FILESEXTRAPATHS`	text	txt
3255	2	FILESEXTRAPATHS:prepend := "${THISDIR}/files:"	code	bb
3255	3	This is analogues to the following which should not be done:	text	txt
3255	4	SRC_URI += "file://custom-modification-0.patch"	code	bb
3255	5	SRC_URI += "file://custom-modification-1.patch"	code	bb
3255	6	Prepending a path makes sure it has priority over the recipe's one.	text	txt
3255	7	Files are looked up in paths referenced in FILESEXTRAPATHS, from left to right.	text	txt
3256	1	do_install:append() {\ninstall -d ${D}${sysconfdir}\ninstall -m 0644 hello.conf ${D}${sysconfdir}\n}	code	sh
3256	2	Tasks can be extended by appending or prepending.	text	txt
3257	1	A recipe can inherit from multiple classes.	text	txt
3257	2	inherit <class>	code	bb
3258	1	- `base.bbclass`\n- `kernel.bbclass`\n- `autotools.bbclass`\n- `cmake.bbclass`\n- `meson.bbclass`\n- `native.bbclass`\n- `useradd.bbclass`\n- `systemd.bbclass`	text	txt
3259	1	`base.bbclass`	text	txt
3260	1	Base class automatically applies patch files listed in `SRC_URI`.	text	txt
3260	2	Defines mirrors like `SOURCEFORGE_MIRROR`, `DEBIAN_MIRROR`, `GNU_MIRROR`, `KERNEL_MIRROR`.	text	txt
3260	3	`fetch`, `unpack`, `patch`, `configure`, `build`, `install`, and other manual tasks like `clean` and `listtasks`.	text	txt
3260	4	Defines `oe-runmake`, using `EXTRA_OEMAKE` to use custom arguments.	text	txt
3260	5	Tasks are chained using dependencies and they will be called in hierarchy. All of them are default implemented in base class:	text	txt
3261	1	When we want to change make parameters without applying patches.	text	txt
3262	1	Automatically provides `virtual/kernel`.	text	txt
3262	2	Defines tasks to configure, compile, install a kernel and its modules.	text	txt
3262	3	SRC_URI += file://defconfig	code	bb
3262	4	The kernel is devided into several packages like `kernel`, `kernel-base`, `kernel-dev`, `kernel-modules`, etc.	text	txt
3262	5	Configuration variables like `KERNEL_IMAGETYPE`, `KERNEL_EXTRA_ARGS`, `INITRAMFS_IMAGE`, etc. are availabe.	text	txt
3263	1	DESCRIPTION = "Custom recipe"\nHOMEPAGE = "https://example.com"\nSECTION = "examples"\nLICENSE  = "BSD"\n\nSRC_URI = "${GNU_MIRROR}/hello/hello-${PV}.tar.gz"\nSRC_URI[md5sum] = "1234..."\nSRC_URI[sha256sum] = "1234..."\nLIC_FILES_CHSUM = "file://COPYING;md5=1234..."\n\ninherit autotools	code	bb
3263	2	`do_configure` generates configurations, `do_build` runs `make`, `do_install` runs `make install`.	text	txt
3263	3	Compilations flags can be added using `EXTRA_OEMAKE`.	text	txt
3264	1	At least one of the `USERADD_PARAM` or `GROUPADD_PARAM` variables must be set.	text	txt
3264	2	`USERADD_PACKAGES` must be defined when the `useradd` class is inherited.	text	txt
3264	3	Adds users to the resulting image.	text	txt
3264	4	Users and groups are created before the packages perform `do_install`.	text	txt
3265	1	DESCRIPTION = "Custom recipe"\nHOMEPAGE = "https://example.com"\nSECTION = "examples"\nLICENSE  = "BSD"\n\nSRC_URI = "file://bashrc"\nLIC_FILES_CHSUM = "file://COPYING;md5=1234..."\n\ninherit useradd\n\nUSERADD_PACKAGES = "${PN}"\nUSERADD_PARAM:${PN} = "-u 1000 -d /home/brian -s /bin/bash brian"\n\nFILES:${PN} = "/home/brian/.bashrc"\n\nS = "${WORKDIR}"\ndo_install() {\n    install -d ${D}/home/brian\n    install -m 644 bashrc ${D}/home/brian/\n    chown brian:brian ${D}/home/brian/.bashrc\n}	code	bb
3265	2	`USERADD_PACKAGES` defines individual packages produced by the recipe that need users or groups to be added.	text	txt
3266	1	`do_install` task copies whatever is in `S`.	text	txt
3266	2	In this class `do_configure` and `do_compile` tasks are disabled.	text	txt
3266	3	`bin_package.class` simplifies this process.	text	txt
3266	4	You should probably also inherit `allarch`.	text	txt
3266	5	Using this class, `LICENSE` should be set to `CLOSED` if applicable.	text	txt
3267	1	`BBPATH`	text	txt
3268	1	`include` and `require` keywords can be used in all files to insert the content of another file at that location.	text	txt
3268	2	`inherit` can be used in recipes or classes to inherit the functionality of a class.	text	txt
3268	3	`inherit`, `include`, and `require`.	text	txt
3269	1	INHERIT += "rm_work"	code	bb
3269	2	Inheriting in configuration files is based on the `INHERIT` variable.	text	txt
3270	1	require ninviders.inc\nrequire path/to/file.inc	code	sh
3270	2	`include` does not produce an error when a file cannot be found, whereas `require` raises a parsing error.	text	txt
3271	1	bitbake -c devshell <recipe>	code	sh
3272	1	INHERIT += "buildhistory"\ninsert into temp_blocks valuesLDHISTORY_COMMIT = 1	code	conf
3272	2	buildhistory-diff	code	sh
3272	3	To understand what changes after a build, enable build history in `local.conf`:	text	txt
3273	1	If all mirrors fail, build will fail.	text	txt
3273	2	`DL_DIR`, `PREMIRRORS`, `SRC_URI`, `MIRRORS`.	text	list
3274	1	bitbake -c devshell <recipe>	code	sh
3275	1	BUILDHISTORY_COMMIT = "1"	code	bb
3275	2	INHERIT += "buildhistory"	code	bb
3276	1	buildhistory-diff	code	sh
5225	1	act --graph	code	sh
3277	1	`own-mirrors` class can only add one URL:	text	txt
3277	2	PREMIRRORS:prepend = "\\\ngit://.*/.* http://example.com/my-mirror-for-git/ \\\nsvn://.*/.* http://example.com/my-mirror-for-svn/ \\\nhttp://.*/.* http://example.com/my-mirror-for-http/ \\\nhttps://.*/.* http://example.com/my-mirror-for-https/"	code	bb
3277	3	INHERITS += "own-mirrors"\nSOURCE_MIRROR_URL = "http://example.com/my-mirror"	code	bb
3277	4	For a more complex setup, prepend custom mirrors to the `PREMIRRORS` variable:	text	txt
3278	1	Source files downloaded from SCM need to be archived:	text	txt
3278	2	BB_GENERATE_MIRROR_TARBALLS = "1"	code	bb
3279	1	`do_fetch` is the only network enabled task to make sure no untraced sources are fetched.	text	txt
3280	1	BB_NO_NETWORK = "1"	code	bb
3281	1	Or restrict bitbake to only download files from the `PREMIRRORS`:	text	txt
3281	2	BB_FETCH_PREMIRRORONLY = "1"	code	bb
3282	1	bitbake --runall=fetch core-image-minimal	code	sh
3283	1	It is a good practice to begin a layer name with the prefix `meta-`.	text	txt
3284	1	Recipes and metadata.	text	txt
3285	1	- `meta`\n- `meta-skeleton`\n- `meta-poky`\n- `meta-yocto-bsp`	text	txt
3286	1	https://layers.openembedded.org	text	link
3287	1	The list of layers `bitbake` uses is defined in `$BUILDDIR/conf/bblayers.conf`.	text	txt
3288	1	`bitbake` parses each layer from `BBLAYERS` and adds the recipes, configuration files and classes it contains.	text	txt
3288	2	To include a new layer, add its absolute path to the `BBLAYERS` variable.	text	txt
3289	1	bitbake-layers	code	sh
3289	2	The tool resides in `poky/bitbake/bin/` directory.	text	txt
3290	1	bitbake-layers show-layers	code	sh
3291	1	bitbake-layers add-layer meta-custom	code	sh
3292	1	bitbake-layers remove-layer meta-qt5	code	sh
3293	1	SoC layers provide support for boards.	text	txt
3293	2	- `meta-ti-bsp`\n- `meta-freescale`\n- `meta-st-stm32mp`	text	list
3294	1	- `meta-browser` (chromium, firefox)\n- `meta-filesystems`\n- `meta-java`\n- `meta-linaro-toolchain`\n- `meta-qt5`\n- `meta-realtime`\n- `meta-telephony`	text	list
3294	2	Many layers offer to support applications not available in poky reference system, e.g:	text	txt
3295	1	The **priority** is used to select which recipe to use when multiple layers contains the same recipe.	text	txt
3295	2	A layer is a set of files and directories and can be created by hand but best practice is to use `bitbake-layers`:	text	txt
3295	3	bitbake-layers create-layer -p <priority> <layer>	code	sh
3295	4	Layer priority takes precedence over the recipe version number ordering. This allows to downgrade a recipe in a layer.	text	txt
3296	1	- `conf/layer.conf`: mandatory entry point for any layer.\n- `COPYING.MIT`: the license under which the layer is released, defaulted to MIT.\n- `README`: layer description containing at least the email address of its maintainer.	text	txt
3297	1	Any metadata matching `meta-<layer>/recipes-<layer>/<layer>/<layer>_<version>.bb` will be parsed by `bitbake` automatically.	text	txt
3299	1	LAYERSERIES_COMPAT = "1.2.3"	code	bb
3300	1	They hold metadata supporting a specific class of hardware devices.	text	txt
3300	2	BSP layers are a subset of regular layers.	text	txt
3301	1	MACHINE = "beaglebone"	code	conf
3301	2	`meta-ti/meta-ti-bsp/conf/machine/beaglebone.conf`	text	txt
3301	3	The machine file name corresponds to the `MACHINE` value in its configuration file.	text	txt
3301	4	A BSP layer provides one hardware configuration file per machine it supports, located in `meta-<bsp name>/conf/machine/*.conf` and they contain configuration variables related to the architecture and to the machine features.	text	txt
3302	1	TARGET_ARCH = "x86_64"	code	conf
3303	1	PREFERRED_PROVIDER_virtual/kernel = "yocto-linux"	code	conf
3304	1	MACHINE_FEATURES = "usbgadget usbhost screen wifi keyboard"	code	conf
3305	1	SERIAL_CONSOLES = "115200;ttyS0	code	conf
3306	1	Look at `conf/machine/include/cfa10036.inc` and `conf/machine/cfa10057.conf` for an example.	text	txt
3306	2	KERNEL_IMAGETYPE = "zImage"	code	conf
3307	1	By default, on ARM the bootloader is the mainline of U-Boot, with a fixed version per Poky release.	text	txt
3307	2	The U-Boot configurations reside in `meta/recipes-bsp/u-boot/u-boot.inc`.	text	txt
3308	1	SPL_BINARY	code	bb
3309	1	UBOOT_SUFFIX	code	bb
3310	1	UBOOT_MACHINE	code	bb
3311	1	UBOOT_ENTRYPOINT	code	bb
3312	1	UBOOT_LOADADDRESS	code	bb
3313	1	defaults to `all`.	text	txt
3313	2	UBOOT_MAKE_TARGET	code	bb
3314	1	By using the `linux-yocto` packages, provided in Poky.	text	txt
3314	2	By creating a custom kernel recipe, inheriting `kernel.bbclass`.	text	txt
3315	1	PREFERRED_PROVIDER_linux-yocto = "5.14%"	code	bb
3315	2	PREFERRED_PROVIDER_virtual/kernel = "linux-yocto"	code	bb
3315	3	`linux-yocto` is a set of recipes with advanced features to build a mainline kernel.	text	txt
3316	1	https://docs.yoctoproject.org/kernel-dev/advanced.html#working-with-advanced-metadata-yocto-kernel-cache	text	link
3316	2	Another way of configuring `linux-yocto` is by using *Advanced Metadata*.	text	txt
3316	3	It is a powerful way of spliting the configuration and the patches into several pieces.	text	txt
3317	1	A way to split the kernel configurations and patches in little pieces each providing support for one feature.	text	txt
3317	2	- `LINUX_KERNEL_TYPE`: `standard` for generic kernel, `tiny` bare minimum configuration for small kernels, or `preempt-rt` applies preempt realtime patch.\n- `KERNEL_FEATURES`: list of features to enable. Features are set of patches and configuration fragments.	text	list
3318	1	KERNEL_FEATURES += "features/sample.scc"	code	bb
3318	2	define KFEATURE_DESCRIPTION "Enable Sample Driver"\n\nkconf hardware enable-sample-driver.cfg\npatch add-sample-driver.patch	code	bb
3318	3	*features/sample.scc*	text	txt
3319	1	A distribution layer allows to change the defaults that are provided by `openembedded-core` or `poky`.	text	txt
3321	1	DISTRO = "distro"	code	bb
3322	2	DISTRO_NAME = "distro description"	code	bb
3322	3	DISTRO_VERSION = "1.2.3"	code	bb
3322	4	MAINTAINER = "Brian Salehi <briansalehi@proton.me>"	code	bb
3323	1	DISTRO_FEATURES	code	bb
3324	1	COMBINED_FEATURES	code	bb
3325	1	The following file is included:	text	txt
3325	2	TCMODE ??= "default"	code	bb
3325	3	conf/distro/include/tcmode-${TCMODE}.inc	text	list
3326	1	poky/meta-poky/conf/bblayers.conf.sample	code	bb
3326	2	poky/meta-poky/conf/local.conf.sample	code	bb
3327	1	TEMPLATECONF	code	bb
3327	2	${OEROOT}/.templateconf	text	list
3327	3	It is set in:	text	txt
3328	1	Image layers are used alongside the machine definition.	text	txt
3328	2	An image is the top level recipe.	text	txt
3329	1	machine layer describes the hardware and its capabilities, whereas image layer is architecture agnostic and defines how the root filesystem is built.	text	txt
3330	1	meta-*/recipes*/images/*.bb	text	list
3331	1	- `core-image-base`\n- `core-image-minimal`\n- `core-image-minimal-dev`\n- `core-image-x11`\n- `core-image-weston`\n- `core-image-rt`	text	list
3332	1	A description and a license.	text	txt
3332	2	Images inherit from `core-image` class.	text	txt
3333	1	core-image	code	bb
3334	1	IMAGE_BASENAME ??= "${PN}"	code	bb
3335	1	IMAGE_INSTALL	code	bb
3336	1	IMAGE_ROOTFS_SIZE	code	bb
3337	1	IMAGE_FEATURES	code	bb
3338	1	IMAGE_FSTYPES	code	bb
3339	1	IMAGE_LINGUAS	code	bb
3340	1	IMAGE_PKGTYPE ??= "deb,rpm,ipk,tar"	code	bb
3341	1	IMAGE_POSTPROCESS_COMMAND	code	bb
3342	1	EXTRA_IMAGEDEPENDS	code	bb
3343	1	Packages from `IMAGE_INSTALL` are installed into it using the package mangaer.	text	txt
3343	2	One or more image files are created based on `IMAGE_FSTYPE` value.	text	txt
3343	3	An empty directory is created for the root filesystem.	text	txt
3344	1	Root filesystem creation is specified in the `IMAGE_PKGTYPE` configuration variable.	text	txt
3344	2	It should be defined in the image recipe, otherwise the first package type defined in `PACKAGE_CLASSES` will be used.	text	txt
3347	1	Append this class to `IMAGE_TYPES` configuration variable.	text	txt
3347	2	There should be class that inherits `image_types`.	text	txt
3347	3	It has to define function `IMAGE_CMD:<type>`.	text	txt
3348	1	Common conversion types: `gz`, `bz2`, `sha256sum`, `bmap`.	text	txt
3348	2	There should be a class that inherits `image_types`.	text	txt
3348	3	It has to define function `CONVERSION_CMD:<type>`.	text	txt
3348	4	Append this class to `CONVERSIONTYPES`.	text	txt
3348	5	Append valid conversions to `IMAGE_TYPES`.	text	txt
3349	1	The final image names end in `.wks` or `.wks.in`.	text	txt
3349	2	IMAGE_FSTYPES = "wic.bmap wic"	code	bb
3349	3	WKS_FILE = "sample.wks.in"	code	bb
3350	1	bmaptool is an alternative to dd, skipping uninitialized contents in partitions.	text	txt
3351	1	Generated package group binary files will not be installed, but they require other packages.	text	txt
3351	2	A package group is a class that inherits from `packagegroup` class.	text	txt
3352	1	PACKAGE_ARCH ?= "all"	code	bb
3353	2	- packagegroup-base\n- packagegroup-core-boot\n- packagegroup-core-buildessential\n- packagegroup-core-nfs-client\n- packagegroup-core-nfs-server\n- packagegroup-core-tools-debug\n- packagegroup-core-tools-profile	text	list
3354	1	A sysroot is the logical root directory for headers and libraries where compiler looks for headers and runtime linker looks for libraries.	text	txt
3354	2	A sysroot in yocto could hold kernel headers, C libraries and others.	text	txt
3355	1	Instead of global sysroot, bitbake implements per-recipe sysroot.	text	txt
3355	2	Before the actual build, each recipe prepares its own sysroot.	text	txt
3356	1	Contains libraries and headers only for the recipes it `DEPENDS` on.	text	txt
3358	2	At the end of the build, each recipe produces its destination sysroot, which can be used as input for other recipes to generate their own sysroot.	text	txt
3359	1	Python and Shell	text	txt
3360	1	`os`: operating system interface	text	txt
3360	2	`bb`: to access bitbake's internal functions.	text	txt
3361	1	Anonymous Python functions are executed during parsing.	text	txt
3361	2	python __anonymous() {\n    if d.getVar("foo", True) == "example":\n        d.setVar("bar", "result")\n}	code	bb
3362	1	do_install() {\n    echo "Build OS: "${@os.uname()[0].lower()}"\n}	code	bb
3363	1	d.appendVar("X", "value")	code	python
3363	2	d.prependVar("X", "value")	code	python
3363	3	d.expand(expression)	code	python
3363	4	d.setVar("X", "value")	code	python
3363	5	d.getVar("X", expand=False)	code	python
3364	1	VARIABLE[anything] = "value"	code	bb
3364	2	Variable flags can be used to store information on tasks and variables.	text	txt
3364	3	More variable flags can be added freely.	text	txt
3365	1	VARIABLE[md5sum] = "..."	code	bb
3366	1	do_compile[dirs] = "${B}"	code	bb
3366	2	As a consequence, the last directory specified in `dirs` becomes the working directory of the task.	text	txt
3366	3	By making each directory, it would become the new working directory for the task.	text	txt
3367	1	do_settime[noexec] = "1"	code	bb
3368	1	do_menuconfig[nostamp] = "1"	code	bb
3368	2	The task will always be executed.	text	txt
3369	1	Task documentation will be display by `listtasks` recipe.	text	txt
3369	2	do_settime[doc] = "Set the current time in ${TIME}"	code	bb
3370	1	do_patch[depends] = "quilt-native:do_populate_sysroot"	code	bb
3371	1	Takes the list of up to 6 comma-separated arguments.	text	txt
3371	2	PACKAGECONFIG[<feature>] = "args"	code	bb
3372	1	Unused arguments can be ommited or left blank.	text	txt
3372	2	1. if the <feature> is enabled, uses this argument in `do_configuration` task.\n2. if the <feature> is disabled, this argument will be added to `EXTRA_OECONF`.\n3. if the <feature> is enabled, takes this argument as build dependency in `DEPENDS`.\n4. if the <feature> is enabled, takes this argument as runtime dependency in `RDEPENDS`.\n5. if the <feature> is enabled, takes this argument as additional recommendation in `RRECOMMENDS`.\n6. any conflicting `PACKAGECONF` settings for this feature.	text	list
3372	3	PACKAGECONFIG[<feature>] = ""	code	bb
3373	1	PACKAGECONFIG[wifi] = "--enable-wifi, --disable-wifi, wpa-supplicant, wpa-supplicant"	code	bb
3373	2	PACKAGECONFIG ??= "wifi bluetooth openvpn"	code	bb
3374	1	PACKAGECONFIG ??= "wifi bluetooth openvpn"	code	bb
3374	2	PACKAGECONFIG[bluez] = "--enable-bluetooth, --disable-bluetooth, bluez5, bluez5"	code	bb
3375	1	PACKAGECONFIG ??= "wifi bluetooth openvpn"	code	bb
3375	2	PACKAGECONFIG[openvpn] = "--enable-openvpn, --disable-openvpn, , openvpn"	code	bb
3376	1	PACKAGECONFIG:append = " <feature>"	code	bb
3377	1	PACKAGECONFIG:append:pn-<recipe> = " <feature>"	code	bb
3378	1	poky/scripts/contrib/list-packageconfig-flags.py	code	sh
3379	1	PACKAGECONFIG ??= "${@bb.utils.contains('DISTRO_FEATURES', 'bluetooth', 'bluez', '', d)}"	code	bb
3379	2	Example:	text	txt
3379	3	PACKAGECONFIG = "${@bb.utils.contains(<variable>, <value>, <true_value>, <false_value>, d)}"	code	bb
3379	4	The signature of this function is as follows:	text	txt
3380	1	PACKAGECONFIG ??= "${@bb.utils.filter(<variable>, <flag>, d)}"	code	bb
3380	2	Example:	text	txt
3380	3	PACKAGECONFIG ??= "${@bb.utils.filter('DISTRO_FEATURES', '3g_system', d)}"	code	bb
3381	1	PACKAGES = "${PN}-src ${PN}-gdb ${PN}-staticdev ${PN}-ev ${PN}-doc ${PN}-locale ${PACKAGE_BEFORE_PN} ${PN}	code	bb
3381	2	`${PACKAGE_BEFORE_PN}` allows to pick files normally included in the default package in another.	text	txt
3382	1	PACKAGE_DYNAMIC	code	bb
3383	1	ALLOW_EMPTY	code	bb
3384	1	CONFLICTS	code	bb
3385	1	FILES	code	bb
3386	1	LIC_FILES_CHKSUM = "\n    file://COPYING;md5=...\n    file://src/main.c;beginline=3;endline=20;md5sum=..."	code	bb
3386	2	LIC_FILES_CHKSUM	code	bb
3387	1	Every recipe must have a `LIC_FILES_CHKSUM` unless `LICENSE` is set to `CLOSED`.	text	txt
3388	1	As an example of a closed source project:	text	txt
3388	2	INCOMPATIBLE_LICENSE = "GPL-3.0* LPLG-3.0* AGPL-3.0*"	code	bb
3389	1	LICENSE_FLAGS_ACCEPTED = "commercial_gst-plugins-ugly"	code	bb
3389	2	To build a package with a commercial component, the package must be in the `LICENSE_FLAGS_ACCEPTED`.	text	txt
3389	3	LICENSE_FLAGS = "commercial"	code	bb
3391	1	COPY_LIC_MANIFEST = "1"	code	bb
3391	2	LICENSE_CREATE_PACKAGE = "1"	code	bb
3391	3	COPY_LIC_DIRS = "1"	code	bb
3392	1	compilers, linkers, libraries, debuggers, custom utilities.	text	list
3393	1	These SDKs come in the form of a shell script.	text	txt
3393	2	Extracting this shell script extracts the tools and sets up the environment.	text	txt
3393	3	The toolchain in the SDKs is self-contained and objects are linked to an SDK embedded libc.	text	txt
3394	1	To develop a bootloader or the kernel, a generic SDK can be used.	text	txt
3395	1	The recipe `meta-toolchain` generates a generic SDK.	text	txt
3395	2	bitbake meta-toolchain	code	sh
3397	1	The image-based SDKs are used to develop and build applications for a target.	text	txt
3398	1	populate_sdk	code	bb
3399	1	bitbake -c populate_sdk core-image-minimal	code	sh
3400	1	List of host packages to be installed:	text	txt
3400	2	TOOLCHAIN_HOST_TASK:append = " nativesdk-curl"	code	bb
3400	3	List of target packages to be installed:	text	txt
3400	4	TOOLCHAIN_TARGET_TASK	code	bb
3400	5	TOOLCHAIN_HOST_TASK	code	bb
3401	1	The script asks where to install the SDK, having a default path to:	text	txt
3401	2	To install an SDK, retrieve the generated script and execute it.	text	txt
3402	1	source /opt/poky/<version>/environment-setup-cortexa8hf-neon-poky-linux-gnueabi	code	sh
3402	2	`PATH` will be updated and environment variables will be exported to help using the SDK.	text	txt
3403	1	The full list is in the environment script.	text	txt
3403	2	CC, CFLAGS, CXX, CXXFLAGS, CPP,  CPPFLAGS, LD, LDFLAGS, ARCH, CROSS_COMPILE, GDB, OBJDUMP.	text	list
3404	1	$CC -o program main.c	code	sh
3405	1	The `LDFLAGS` variable is set to be used with the C compiler.	text	txt
3405	2	To build the Linux kernel, unset this variable:	text	txt
3405	3	unset LDFLAGS	code	sh
3405	4	make menuconfig	code	sh
3405	5	make	code	sh
3406	1	devtool helps to generate a recipe, modify an existing recipe or upgrade a recipe to use a newer upstream.	text	txt
3408	1	devtool adds or appends recipes to this layer so that the recipes point to a local path for their sources.	text	txt
3409	1	devtool add <recipe> <fetchuri>	code	sh
3410	1	devtool modify <recipe>	code	sh
3411	1	devtool upgrade -V <version> <recipe>	code	sh
3412	1	devtool edit-recipe <recipe>	code	sh
3413	1	devtool build <recipe>	code	sh
3414	1	devtool build-image <image>	code	sh
3415	1	devtool deploy-target <recipe> <target>	code	sh
3415	2	Target should be live and running ssh server.	text	txt
3416	1	devtool update-recipe <recipe>	code	sh
3417	1	devtool reset <recipe>	code	sh
3418	1	- Board Support Package: porting the bootloader, kernel, and device drivers.\n- System Integration: Assembling, configuring, upgrading, and recovering user space components needed for the system.\n- Application Development: writing the company specific applications and libraries.	text	list
3419	1	- Building everything manually: dependency hell, too many details, version incompatibility\n- Binary distribution: not customized, not portable, not reproducible\n- Buidl systems: full flexibility, reproducible, optimizable, portable	text	list
3420	1	Embedded Linux build systems usually take **open source components** and **inhouse components** as inputs, take configuration files for the process, and give **toolchain**, **kernel image**, **bootloader image**, **root filesystem image** as outputs.	text	txt
3421	1	std::pair p1{1, 2.0};	code	cpp
3421	2	std::pair<int, double> p2{1, 2.0};	code	cpp
3421	3	Beginning from C++17, compilers support template argument deduction for class templates:	text	txt
3422	1	auto seq2 = custom_sequeunce<0, 1, 2>{};	code	cpp
3422	2	template<auto ...seq>\nstruct custom_sequence\n{\n};	code	cpp
3422	3	Starting with C++17, non-type template parameters can be declared as `auto`:	text	txt
3422	4	auto seq = std::integer_sequence<int, 0, 1, 2>{};	code	cpp
3423	1	template<typename ...Ts>\nauto print_fold(Ts const& ts)\n{\n    ((std::cout << ts << " "), ...);\n}	code	cpp
3423	2	Starting with C++17, parameter packs are available:	text	txt
3423	3	template<typename ...Ts>\nauto sum_fold_exp(Ts const& ...ts)\n{\nreturn (ts + ...);\n}	code	cpp
3424	1	auto x2 = {1,2,3,4}; // std::initializer_list<int>	code	cpp
3424	2	auto x1{1,2,3,4}; // error: not a single element	code	cpp
3424	3	Before C++17 when an integer was direct initialized by auto type deduction, it would be deduced as `std::initializer_list<int>`, but this is no longer the case:	text	txt
3424	4	auto x4{42.0}; // double	code	cpp
3424	5	auto x3{42}; // before C++17 std::initializer_list<int>, after C++17 int	code	cpp
3425	1	static_assert(identity(42) == 42);	code	cpp
3425	2	Since C++17, `constexpr` lambda functions are available:	text	txt
3425	3	auto identity = [](int x) constexpr { return x; };	code	cpp
3426	1	std::char8_t character{u8'x'};	code	cpp
3426	2	Since C++17, UTF-8 character literal is supported.	text	txt
3427	1	Since C++17 `this` can be captured by value:	text	txt
3453	2	This function parses the command line for GoogleTest flags.	text	txt
3608	3	ps -f	code	sh
3427	2	#include <print>\n\nstruct sample\n{\n    int value;\n\n    sample(): value{}\n    {\n        auto print_by_reference = [this] { std::println("{}", value); };\n        auto print_by_value = [*this] { std::println("{}", value); };\n\n        print_by_reference();\n        print_by_value();\n\n        value = 42;\n\n        print_by_reference();\n        print_by_value();\n    }\n};\n\nint main()\n{\n    sample object{};\n}	code	cpp
3428	1	inline custom_type variable{value};	code	cpp
3428	2	Inline variables are available since C++17:	text	txt
3429	1	Since C++17 declaration of nested namespaces can be summerized:	text	txt
3429	2	namespace A::B::C { }	code	cpp
3430	1	auto [position, found] = container.find(42);	code	cpp
3430	2	Structured bindings were introduced in C++17:	text	txt
3431	1	Starting from C++17 if statement can have initializers:	text	txt
3431	2	if (auto result = m.insert({key, value}); result.second)\n{\n    std::println("{} = {}", key, value);\n}	code	cpp
3432	1	#include <type_traits>\n\nstruct basic_task\n{\n    virtual void do_something() = 0;\n};\n\nstruct task: public basic_task\n{\n    void do_something() override { }\n};\n\ntemplate<typename T>\nvoid evaluate(T&& arg)\n{\n    if constexpr (std::is_integral_v<T>) { }\n    else if constexpr (std::is_same_v<std::decay_t<T>, char const*>) { }\n    else if constexpr (std::is_base_of_v<basic_task, T>) { }\n}\n\nint main()\n{\n    evaluate(42);\n    evaluate("something");\n    evaluate(task{});\n}	code	cpp
3432	2	Compile-time if expressions are available since C++17:	text	txt
3433	1	C++17 introduced hexadecimal floating-point literals:	text	txt
3433	2	auto number{0x1f.1p0};	code	cpp
3434	1	color x{3}, y{88}, z{128}; // must be non-narrowing value	code	cpp
3434	2	enum class color: char { red, blue, green };	code	cpp
3434	3	Starting from C++17, the underlying type in scoped enumerations can be explicitly specified:	text	txt
3434	4	color w{129}; // error	code	cpp
3435	1	C++17 introduced `[[fallthrough]]` attribute:	text	txt
3435	2	switch (type)\n{\ncase direction:\n    [[fallthrough]];\ncase position:\n    // ...\ncase weight:\n    // ...\n}	code	cpp
3436	1	C++17 introduced `[[nodiscard]]` attribute:	text	txt
3436	2	template<typename K, typename V>\n[[nodiscard]] std::pair<K, V> make_pair(K&& key, V&& value)\n{\n    return std::pair<std::decay_t<K>, std::decay_t<V>>{std::forward<K>(key), std::forward<V>(value)};\n}	code	cpp
3437	1	[[maybe_unused]] int x = 42;	code	cpp
3437	2	C++17 introduced `[[maybe_unused]]`:	text	txt
3437	3	[[maybe_unused]] static void f() {}	code	cpp
3438	1	static_assert(VERSION >= 2);	code	cpp
3438	2	Since C++17 it is possible to write an assertion without message:	text	txt
3439	1	ASSERT_*	code	cpp
3439	2	EXPECT_*	code	cpp
3439	3	Generate nonfatal failures. They are preferred unless it doesn't make sense to continue when the assertion in question fails.	text	txt
3439	4	Generate fatal failures when they fail and abort the current function.	text	txt
3440	1	EXPECT_EQ(std::vector{}.size(), 0) << "This test always asserts on " << 0;	code	cpp
3440	2	ASSERT_EQ(true, true) << "This test always asserts on " << true;	code	cpp
3441	1	Literal strings, C-Style strings, `std::basic_string<CharT>`	text	list
3441	2	Anything that can be streamed to an `std::ostream` can be streamed to an assertion macro.	text	txt
3442	1	TEST(TestSuiteName, TestName)\n{\n    EXPECT_EQ(true, true);\n}	code	cpp
3443	1	If any assertion in test, either fatal or non-fatal fails, or if the test crashes, the entire test fails. Otherwise, it succeeds.	text	txt
3444	1	Both must be valid C++ identifiers, and they should not contain any underscores.	text	txt
3444	2	Tests from different test suites can have the same individual name.	text	txt
3444	3	The first is the name of the test suite, and the second is the test's name within the test suite.	text	txt
3445	1	Test fixture allows to reuse the same ocnfiguration of objects for several different sets.	text	txt
3446	1	1. Derive a texture class from `testing::Test`\n2. Use `protected` access specifier to access fixture members from sub-classes\n3. Write a default constructor or `SetUp()` function to prepare the objects for each test\n4. Write a destructor or `TearDown()` to release any already allocated resources\n5. Define member functions for the test	text	list
3446	2	TEST_F(TestFixtureClassName, TestName)\n{\n}	code	cpp
3447	1	When using a fixture, use `TEST_F()` instead of `TEST()` to have access to members.	text	txt
3447	2	The first argument of a test unit with a fixture must be the name of the test fixture class.	text	txt
3448	1	GoogleTest always deletes a test fixture before it creates the next one.	text	txt
3448	2	For each test defined in a test suite, GoogleTest will create a fresh fixture at runtime.	text	txt
3449	1	template<typename E>\nclass Queue\n{\npublic:\n    constexpr Queue() = default;\n    constexpr void enqueue(E const& element);\n    constexpr std::optional<E> dequeue() const;\n    constexpr std::size_t size() const;\n};\n\nclass QueueTest: public ::testing::Test\n{\nprotected:\n    QueueTest()\n    {\n        q1.enqueue(1);\n        q2.enqueue(2);\n        q3.enqueue(3);\n    }\n\n    Queue<int> q1;\n    Queue<int> q2;\n    Queue<int> q3;\n};	code	cpp
3450	1	By initializing a member variable in the constructor, we have the option to make it `const`.	text	txt
3450	2	In case the test fixture is a subclass, it would automatically call base class' constructor and destructor.	text	txt
3451	1	In the body of a constructor (or destructor), it’s not possible to use the `ASSERT_xx` macros.	text	txt
3451	2	C++ does not allow virtual function calls in constructors and destructors. You can call a method declared as virtual, but it will not use dynamic dispatch. It will use the definition from the class the constructor of which is currently executing. This is because calling a virtual method before the derived class constructor has a chance to run is very dangerous - the virtual method might operate on uninitialized data. Therefore, if you need to call a method that will be overridden in a derived class, you have to use SetUp()/TearDown().	text	txt
3452	1	If the tear-down operation could throw an exception, you must use `TearDown()` as opposed to the destructor.	text	txt
3452	2	GoogleTest assertion macros might throw exceptions. Therefore, they should not be used in destructors.	code	cpp
3453	1	This allows the user to control a test program’s behavior via various flags.	text	txt
3453	3	::testing::InitGoogleTest(&argc, argv);	code	cpp
3454	1	int result = RUN_ALL_TESTS();	code	cpp
3454	2	Return value of `RUN_ALL_TESTS()` must not be ignored, as automated tests need to know whether a test has passed based on its exit code.	text	txt
3455	1	Tests should be linked to `gtest_main`, which defines a suitable entry point.	text	txt
3456	1	int main(int argc, char** argv)\n{\n    ::testing::InitGoogleTest(&argc, argv);\n    return RUN_ALL_TESTS();\n}	code	cpp
3457	1	When you need to do something custom before the tests run that cannot be expressed within the framework of fixtures and test suites.	text	txt
3458	1	The implementation is thread-safe on systems where the **pthreads** library is available.	text	txt
3458	2	In most tests this is not an issue as usually the assertions are done in the main thread.	text	txt
3458	3	It is currently unsafe to use Google Test assertions from two threads concurrently on other systems.	text	txt
3459	1	Fake objects have working implementations, but usually take some shortcut. Mocks are objects pre-programmed with expectations, which form a specification of the calls they are expected to receive.	text	txt
3459	2	A mock object implements the same interface as a real object, but lets you specify at run time how it will be used and what it should do.	text	txt
4353	1	When copying ranges, we need to take care when the input and output ranges\noverlap. For `std::copy`, only the tail of the destination range can overlap\nthe source range; for `std::copy_backward`, only the head of the destination\nrange can overlap the source range.	text	txt
3460	1	1. first, you use some simple macros to describe the interface you want to mock, and they will expand to the implementation of your mock class;\n2. next, you create some mock objects and specify its expectations and behavior using an intuitive syntax;\n3. then you exercise code that uses the mock objects. gMock will catch any violation to the expectations as soon as it arises.	text	list
3461	1	- Writing prototypes for more optimal design\n- Tests are slow as they depend on too many libraries or use expensive resources\n- Tests are brittle and use unreliable resources like network\n- Verifying that the code handles a failure\n- Verifying proper interaction between modules\n- Mocking dependencies	text	list
3462	1	Assuming `Queue` class will have the following interface:	text	txt
3462	2	class Queue\n{\npublic:\n    Queue() = default;\n    virtual ~Queue() = default;\n    virtual void enqueue(int value);\n    virtual std::optional<int> dequeue();\n    virtual std::size_t size() const;\n};	code	cpp
3462	3	1. Derive a class `MockQueue` from `Queue`\n2. Take a virtual function of `Queue`\n3. Write `MOCK_METHOD()` in public access specifier\n4. Separately write the return type, name, and argument list of the function signature delimited by comma\n5. Add `const` as fourth parameter if the function is const\n6. Add `override` as fourth parameter if the function is virtual	text	list
3462	4	#include <gmock/gmock.h>\n\nclass MockQueue: public Queue\n{\npublic:\n    MOCK_METHOD(void, enqueue, (int), (override));\n    MOCK_METHOD(std::optional<int>, dequeue, (), (override));\n    MOCK_METHOD(std::size_t, size, (), (const, override));\n};	code	cpp
3463	1	In this context, the `algorithm` object must call `enqueue()` method at least once. Otherwise test fails.	text	txt
3463	2	1. Import gMock names from `testing` namespace\n2. Create some mock objects\n3. Specify your expectations on them\n4. Exercise some code that uses the mock\n5. When a mock is destructed, gMock will automatically check whether all the expectations on it have been satisfied	text	list
5226	1	Either only validate the correctness without checking the steps:	text	md
3463	3	#include <MockQueue.hpp>\n#include <gmock/gmock.h>\n#include <gtest/gtest.h>\n\nusing testing::AtLeast;\n\nTEST(TestQueue, CanHaveElements)\n{\n    MockQueue queue;\n    EXPECT_CALL(queue, enqueue()).Times(AtLeast(1));\n\n    RandomEngine engine(queue);\n    EXPECT_TRUE(engine.fill());\n}	code	cpp
3464	1	gMock requires expectations to be set before the mock functions are called, otherwise the behavior is undefined.	text	txt
3465	1	EXPECT_CALL(mock_object, method(matcher)).Times(cardinality).WillOnce(action).WillRepeatedly(action);	code	cpp
3465	2	EXPECT_CALL(mock_object, non-overloaded-method).Times(cardinality).WillOnce(action).WillRepeatedly(action);	code	cpp
3466	1	A matcher is like a predicate and can test whether an argument is what we'd expect. You can use a matcher inside `EXPECT_CALL()` wherever a function argument is expected.	text	txt
3466	2	EXPECT_CALL(MockQueue, enqueue); // expects that enqueue() will be called but dones't care about arguments	code	cpp
3467	1	EXPECT_CALL(MockQueue, enqueue(Ge(100)));	code	cpp
3468	1	If you aren't interested in the value of an argument, write `_` as the argument, which means “anything goes”.	text	txt
3468	2	using testing::_;\n\nEXPECT_CALL(MockQueue, enqueue(_));	code	cpp
3469	1	The first clause we can specify following an `EXPECT_CALL()` is `Times()`. We call its argument a **cardinality** as it tells how many times the call should occur.	text	txt
3469	2	EXPECT_CALL(MockQueue, enqueue(Ge(0))).Times(1);	code	cpp
3470	1	EXPECT_CALL(MockQueue, dequeue).Times(0);	code	cpp
3471	1	EXPECT_CALL(MockQueue, enqueue); // Times(1)	code	cpp
3471	2	- If neither `WillOnce()` nor `WillRepeatedly()` is in the expectation call, the inferred cardinality is `Times(1)`.\n- If there are `n` `WillOnce()` but no `WillRepeatedly()`, where `n >= 1`, the cardinality is `Times(n)`.\n- If there are `n` `WillOnce()` and one `WillRepeatedly()`, where `n >= 0`, the cardinality is `Times(n)`.	text	list
3472	1	EXPECT_CALL(MockQueue, enqueue); // just returns as it is a void function	code	cpp
3472	2	EXPECT_CALL(MockQueue, size); // returns 0	code	cpp
3472	3	If the the return type of a mock function is a built-in type or a pointer, the function has a default action. A `void` function just returns, a `bool` returning function will return `false`, and others return 0.	text	txt
3472	4	For C++11 and above, mock function will return a default constructed form of an object.	text	txt
3472	5	EXPECT_CALL(MockQueue, dequeue); // returns a default constructed std::optional<int> object	code	cpp
3473	1	EXPECT_CALL(MockQueue, dequeue).WillOnce(Return(Optional(1))).WillOnce(Return(Optional(2))).WillOnce(Return(Optional(3)));	code	cpp
3473	2	The `MockQueue.dequeue()` will be called exactly three times, returning 1, 2, 3 respectively.	text	txt
3474	1	The `MockQueue.size()` will return 0 every time it is called.	text	txt
3474	2	EXPECT_CALL(MockQueue, size).WillRepeatedly(Return(0));	code	cpp
3475	1	`WillOnce()` calls are used up, and for the rest gMock will do the default action for the function every time, unless `WillRepeatedly()` is specified.	text	txt
3475	2	EXPECT_CALL(MockQueue, size).WillOnce(Return(1)).WillOnce(Return(2)).WillRepeatedly(Return(AtLeast(3)));	code	cpp
3492	6	It's not possible to directly mock a free function.	text	txt
3476	1	By default, when a mock method is invoked, gMock will search the expectations in the reverse order they are defined, and stop when an active expectation that matches the arguments is found. If the matching expectation cannot take any more calls, you will get an upper-bound-violated failure.	text	txt
3477	1	using testing::_;\n\nEXPECT_CALL(MockQueue, enqueue(_));	code	cpp
3477	2	EXPECT_CALL(MockQueue, enqueue(10)).Times(2);	code	cpp
3477	3	When `enqueue(10)` is called three times, the third time will be a failure, as the last matching expectation specifies only two calls.	text	txt
3477	4	On the other hand, `enqueue(20)` will succeed as the last matching expectation does not specify what the argument is and how many times it will be called.	text	txt
3478	1	If you have two expectations on the same method, you want to put the one with more specific matchers after the other, or the more specific rule would be shadowed by the more general one that comes after it.	text	txt
3478	2	The reason for reverse order of searching expectations by gMock is that this allows a user to set up the default expectations in a mock object’s constructor or the test fixture’s set-up phase and then customize the mock by writing more specific expectations in the test body.	text	txt
3479	1	using testing::InSequence;\nusing testing::AtLeast;\n\nTEST(QueueTest, VerifyCallSequence)\n{\n    Queue queue;\n\n    {\n        InSequence sequence;\n\n        EXPECT_CALL(queue, size());\n        EXPECT_CALL(queue, enqueue).Times(AtLeast(1));\n    }\n\n    queue.fill(std::random_device());\n}	code	cpp
3479	2	By creating an object of type `InSequence`, all expectations in its scope are put into a sequence and have to occur sequentially.	text	txt
3479	3	But sometimes, you may want all the expected calls to occur in a strict order:	text	txt
3479	4	By default, the calls don't have to occur in the order the expectations are specified.	text	txt
3480	1		text	txt
3480	2	using testing::AnyNumber;\nusing testing::_;\n\nEXPECT_CALL(MockQueue, enqueue(_)).Times(AnyNumber());\nEXPECT_CALL(MockQueue, enqueue(1)).Times(1);	code	cpp
3481	1	using testing::Return;\n\nfor (int i = n; i > 0; i--)\n{\n    EXPECT_CALL(MockQueue, size()).WillOnce(Return(i));\n}	code	cpp
3481	2	This series of expectations for return values `n, ..., 3, 2, 1` does not result as expected.	text	txt
3481	3	The expectations are sticky by default. In the sense that they remain active even after we have reached their invocation upper bounds.	text	txt
3481	4	The latest expectation with return value of 1 will be sticky for each call, resulting in test failure.	text	txt
3482	1		text	txt
3482	2	using testing::Return;\nusing testing::InSequence;\n\n{\n    InSequence sequence;\n\n    for (int i = n; i > 0; i--)\n    {\n        EXPECT_CALL(MockQueue, size()).WillOnce(Return(i)).RetiresOnSaturation();\n    }\n}	code	cpp
3483	1	MOCK_METHOD(<return-type>, <method-name>, (<args>), (<qualifiers>));	code	cpp
3483	2	The first 3 parameters are simply the method declaration, and the 4th parameter is an enclosed list of qualifiers affecting the method.	text	txt
3484	1	MOCK_METHOD(void, do_something, (), (const, override, noexcept, ref(&)));	code	cpp
5226	2	act --validate	code	sh
5258	1	pwd -P\npwd --physical	code	sh
3484	2	- `const`: required when method is `const`\n- `override`: required if method is overriding a `virtual` method from its base\n- `noexcept`: required when method does not throw\n- `Calltype()`: useful in Windows\n- ref()`: required when method has either of lvalue or rvalue reference qualifications	text	list
3485	1	using testing::ReturnRef;\nusing testing::Const;\n\nstd::string expeected{"done"};\n\nEXPECT_CALL(MockObject, do_something()).Times(1).WillOnce(ReturnRef(Const(expected)));	code	cpp
3486	1	using testing::Return;\nusing testing::Const;\nusing testing::Optional;\n\nstd::string result{"done"};\n\nEXPECT_CALL(Const(MockObject), do_something()).WillRepeatedly(Return(Optional<std::string>(result)));	code	cpp
3487	1	MOCK_METHOD(bool, CheckMap, ((std::map<int, double>), bool));	code	cpp
3487	2	Commas which are not surrounded by parentheses, prevent `MOCK_METHOD` from parsing its arguments correctly. Therefore, whenever a statement contains a comma, the statement should be surrounded by parentheses.	text	txt
3487	3	MOCK_METHOD((std::pair<bool, int>), GetPair, ());	code	cpp
3487	4	Note that wrapping a return or argument type with parentheses is, in general, invalid C++. `MOCK_METHOD` removes the parentheses.	text	txt
3488	1	class derived: public base\n{\npublic:\n    MOCK_METHOD(void, transform, (), (override));\n    MOCK_METHOD(void, resume, (), (override));\n    MOCK_METHOD(void, timeout, (), (override));\n};	code	cpp
3488	2	Mock methods must always be put in a `public` access specifier, regardless of what access the method being mocked has.	text	txt
3488	3	In C++ it is perfectly valid to change the accessibility of a virtual function in the base class:	text	txt
3488	4	class base\n{\npublic:\n    virtual void transform() = 0;\nprotected:\n    virtual void resume() = 0;\nprivate:\n    virtual void timeout() = 0;\n};	code	cpp
3489	1	virtual int add(element x);\nvirtual int add(element x, times t);	code	cpp
3489	2		text	txt
3489	3	MOCK_METHOD(int, add, (element x), (override));\nMOCK_METHOD(int, add, (element x, times t), (override));	code	cpp
3489	4	Note: if you don’t mock all versions of the overloaded method, the compiler will give you a warning about some methods in the base class being hidden. To fix that, use using to bring them in scope:	text	txt
3489	5	using derived::add;\nMOCK_METHOD(int, add, (element x), (override));	code	cpp
3490	1	We can mock class templates just like any class:	text	txt
3490	2	template<typename T>\nclass Bag\n{\n    virtual size_t size() const = 0;\n};	code	cpp
3490	3	template<typename T>\nclass BagTest: public Bag<T>\n{\n    MOCK_METHOD(size_t, size, (), (const, override));\n};	code	cpp
3491	1	class BagTest: public Bag\n{\n    MOCK_METHOD(size_t, size, (), (const));\n};	code	cpp
3491	2	Just don't add `override`:	text	txt
3492	1	class basic_task\n{\npublic:\n    virtual void run() = 0;\n};	code	cpp
3492	2	class task: public basic_task\n{\npublic:\n    void run() override { do_something(); }\n};	code	cpp
3492	3	class mock_basic_task: public basic_task\n{\npublic:\n    MOCK_METHOD(void, run, (), (override));\n};	code	cpp
3492	4	using testing::AtLeast;\n\nTEST(Task, Run)\n{\n    task t{};\n    EXPECT_CALL(t, run()).Times(AtLeast(1));\n};	code	cpp
3492	5	It may seem like a lot of hassle, but in practice we should put all related functions in the same interface, so per-function syntactic overhead will be much lower.	text	txt
3492	7	Introduce an interface for it and have a concrete subclass that calls the free function:	text	txt
3492	8	void do_something() { }	code	cpp
3493	1	When a mock method has no expectations but is called, we say that it's an **uninteresting call**, and the default action of the method will be taken..	text	txt
3494	1	We might want to ignore uninteresting calls, or sometimes we may want to treat them as errors.	text	txt
3494	2	`NiceMock<MockType>` is a subclass of `MockType`, so it can be used whenever `MockType` is accepted.	text	txt
3494	3	TEST(TestSuite, TestCase)\n{\n    NiceMock<MockType> mock_object;\n    EXPECT_CALL(mock_object, do_something());\n}	code	cpp
3494	4	To suppress the warnings we can rewrite mock objects as nice mocks:	text	txt
3495	1	TEST(TestSuite, TestCase)\n{\n    StrictMock<MockType> mock_object;\n    EXPECT_CALL(mock_object, do_something());\n}	code	cpp
3495	2	We can make all uninteresting calls fail by using strict mocks:	text	txt
3496	1	Nice and strict mocks may not work correctly if the destructor of mock class is not virtual.	text	txt
3496	2	Nice and strict mocks only work for mock methods defined in the mock class. Therefore, nested nice and strict mocks is no supported:	text	txt
3496	3	NiceMock<StrictMock<MockType>> mock_object;	code	cpp
3497	1	This is the default mock when we write one. It will warn about uninteresting calls but does not fail the test.	text	txt
3498	1	switch (expression)\n{\ncase 1: /* ... */ ; break;\ncase 2: /* ... */ ; break;\ndefault: FAIL() << "execution should not reach here!";\n}	code	cpp
3498	2	These are useful when control flow, rather than a Boolean expression, determines the test's success or failure.	text	txt
3498	3	These assertions generate a success or failure directly instead of testing a value or expression.	text	txt
3499	1	However, we may want to add success messages to output in the future.	text	txt
3499	2	This does not make the overall test succeed.	text	txt
3499	3	TEST(TestSuite, TestCase)\n{\n    SUCCEED() << "You have gone all the way through learning GoogleTest up to advanced usage!";\n}	code	cpp
3499	4	The `SUCCEED` assertion is purely documentary and currently doesn't generate any user-visible output.	text	txt
3500	1	Generates a fatal failure, which returns from the current function.	text	txt
3500	2	TEST(TestSuite, TestCase)\n{\n    FAIL() << "what a bummer!"\n}	code	cpp
3501	1	Can only be used in functions that return `void`.	text	txt
3501	2	class TaskTest: public ::testing::Test\n{\nprotected:\n    void should_never_reach() { FAIL() << "what a bummer!"; }\n};\n\nTEST_F(TaskTest, IntentionalFailure)\n{\n    should_never_reach();\n}	code	cpp
3502	1	Generates a nonfatal failure, which allows the current function to continue running.	text	txt
3502	2	TEST(TestSuite, TestCase)\n{\n    ADD_FAILURE() << "test failed at this point";\n}	code	cpp
3503	1	Generates a nonfatal failure at the file and line number specified.	text	txt
3503	2	ADD_FAILURE_AT(file_path, line_number);	code	cpp
5259	1	whoami	code	sh
3504	1	A matcher matches a single argument. You can use it inside `ON_CALL()` or `EXPECT_CALL()`, or use it to validate a value directly using two macros:	text	txt
3504	2	ASSERT_THAT(actual_value, matcher)	code	cpp
3504	3	EXPECT_THAT(actual_value, matcher)	code	cpp
3505	1	using ::testing::Lt;	code	cpp
3505	2	All matchers are defined in the `::testing` namespace.	text	txt
3506	1	EXPECT_THAT(actual_value, Eq(expected_value));	code	cpp
3506	2	Equality matching via `EXPECT_THAT(actual_value, expected_value)` will cause unexpected results.	text	txt
3506	3	Prefer to make the comparison explicit:	text	txt
3506	4	EXPECT_EQ(actual_value, expected_value);	code	cpp
3507	1	EXPECT_FALSE(condition);	code	cpp
3507	2	ASSERT_TRUE(condition);	code	cpp
3507	3	ASSERT_FALSE(condition);	code	cpp
3507	4	EXPECT_TRUE(condition);	code	cpp
3508	1	EXPECT_NE(value, value);	code	cpp
3508	2	EXPECT_EQ(value, value);	code	cpp
3508	3	Binary comparison test assertions compare two values.	text	txt
3508	4	EXPECT_LT(value, value);	code	cpp
3508	5	EXPECT_LE(value, value);	code	cpp
3508	6	EXPECT_GT(value, value);	code	cpp
3508	7	EXPECT_GE(value, value);	code	cpp
3509	1	The arguments must be comparable by the assertion's comparison operator, otherwise a compiler error will result.	text	txt
5452	1	Handles reading and writing image files.	text	md
3510	1	If an argument supports the `operator<<()`, it will be called to print the argument when the assertion fails. Otherwise, GoogleTest will attempt to print them in the best way it can, unless you overload the extraction operator by yourself.	text	txt
3511	1	The argument evaluation order is undefined and programs should not depend on any particular order.	text	txt
3512	1	For C-style strings, `EXPECT_STREQ()` should be used to compare by value.	text	txt
3512	2	Assertions test if they are in the same memory location, not if they have the same value.	text	txt
3513	1	EXPECT_EQ(pointer, nullptr);	code	cpp
3513	2	Always use `nullptr` over `NULL`.	text	txt
3513	3	EXPECT_NE(pointer, nullptr);	code	cpp
3514	1	EXPECT_STREQ(cstring, cstring);	code	cpp
3514	2	EXPECT_STRNE(cstring, cstring);	code	cpp
3515	1	EXPECT_STRCASEEQ(cstring, cstring);	text	txt
3515	2	EXPECT_STRCASENE(cstring, cstring);	code	cpp
3516	1	Verifies that the two values are approximately equal, to within 4 ULPs (Units in the Last Place) from each other.	text	txt
3516	2	EXPECT_DOUBLE_EQ(value, value);	code	cpp
3516	3	EXPECT_FLOAT_EQ(value, value);	code	cpp
3517	1	EXPECT_NEAR(value, value, absolute_error_bound);	code	cpp
3518	1	Verify that a piece of code throws, or does not throw, an exception.	text	txt
3518	2	Exceptions should already be enabled on the host system.	text	txt
3519	1	EXPECT_THROW(statement, exception_type);	code	cpp
3519	2	ASSERT_THROW(statement, exception_type);	code	cpp
3520	1	ASSERT_ANY_THROW(statement);	code	cpp
3520	2	EXPECT_ANY_THROW(statement);	code	cpp
3521	1	EXPECT_NO_THROW(statement);	code	cpp
3521	2	ASSERT_NO_THROW(statement);	code	cpp
3522	1	ASSERT_PRED4(predicate, value, value, value, value);	code	cpp
3522	2	ASSERT_PRED2(predicate, value, value);	code	cpp
3522	3	EXPECT_PRED3(predicate, value, value, value);	code	cpp
3522	4	EXPECT_PRED4(predicate, value, value, value, value);	code	cpp
3522	5	EXPECT_PRED5(predicate, value, value, value, value, value);	code	cpp
3522	6	Verifies that the predicate `predicate` returns true when passed the given values as arguments.	text	txt
3522	7	EXPECT_PRED1(predicate, value);	code	cpp
3522	8	EXPECT_PRED2(predicate, value, value);	code	cpp
3522	9	ASSERT_PRED1(predicate, value);	code	cpp
3522	10	ASSERT_PRED5(predicate, value, value, value, value, value);	code	cpp
3522	11	ASSERT_PRED3(predicate, value, value, value);	code	cpp
3523	1	ASSERT_PRED2((predicate<int, int>), 5, 0);	code	cpp
3523	2	It is necessary to explicitly specify the type of the function.	text	txt
3523	3	EXPECT_PRED1(static_cast<bool (*)(int)>(IsPositive), 5);	code	cpp
3523	4	EXPECT_PRED1(static_cast<bool (*)(double)>(IsPositive), 3.14);	code	cpp
3523	5	template <typename T>\nbool is_negative(T x) { return x < 0; }\n\nEXPECT_PRED1(is_negative<int>, -5);	code	cpp
3523	6	If a template has multiple parameters, wrap the predicate in parentheses so the macro arguments are parsed correctly:	text	txt
3524	1	testing::AssertionResult predicate_formatter(const char* expressionX, ..., Tx valueX, ...);	code	cpp
3524	2	The values are the predicate arguments, and expressions are the corresponding visual representations of the variables that appear in the source code.	text	txt
3524	3	Types can be either `T` or `T const&`.	text	txt
3524	4	Predicate formatter is a function or functor with the signature:	text	txt
3525	1	An `AssertionResult` object represents the result of an assertion with an associated message.	text	txt
3525	2	AssertionResult result = testing::AssertionSuccess() << "message";	code	cpp
3525	3	AssertionResult result = testing::AssertionFailure() << "message";	code	cpp
3525	4	You can create an `AssertionResult` using one of these factory functions:	text	txt
3526	1	EXPECT_PRED_FORMAT4(predicate_formatter, value, value, value, value);	code	cpp
3526	2	ASSERT_PRED_FORMAT1(predicate_formatter, value);	code	cpp
3526	3	EXPECT_PRED_FORMAT5(predicate_formatter, value, value, value, value, value);	code	cpp
3526	4	ASSERT_PRED_FORMAT2(predicate_formatter, value, value);	code	cpp
3526	5	ASSERT_PRED_FORMAT3(predicate_formatter, value, value, value);	code	cpp
3526	6	ASSERT_PRED_FORMAT5(predicate_formatter, value, value, value, value, value);	code	cpp
3526	7	ASSERT_PRED_FORMAT4(predicate_formatter, value, value, value, value);	code	cpp
3526	8	EXPECT_PRED_FORMAT1(predicate_formatter, value);	code	cpp
3526	9	EXPECT_PRED_FORMAT2(predicate_formatter, value, value);	code	cpp
3526	10	EXPECT_PRED_FORMAT3(predicate_formatter, value, value, value);	code	cpp
3527	1		text	txt
3527	2	const int a = 3;\nconst int b = 4;\nconst int c = 10;\n\nEXPECT_PRED_FORMAT2(AssertMutuallyPrime, a, b);  // Succeeds\nEXPECT_PRED_FORMAT2(AssertMutuallyPrime, b, c);  // Fails	code	cpp
3527	3	testing::AssertionResult AssertMutuallyPrime(const char* m_expr, const char* n_expr, int m, int n)\n{\n    if (MutuallyPrime(m, n))\n        return testing::AssertionSuccess();\n\n    return testing::AssertionFailure() << m_expr << " and " << n_expr << " (" << m << " and " << n << ") are not mutually prime";\n}	code	cpp
3527	4	bool MutuallyPrime(int m, int n) { ... }	code	cpp
3528	1	These assertions spawn a new process and execute the code under test in that process.	text	txt
3528	2	Death assertions verify that a statement causes the process to terminate with a nonzero exit status and produces `stderr` output that matches matcher.	text	txt
3529	1	EXPECT_DEATH(statement, matcher);	code	cpp
3529	2	In many applications, there are assertions that can cause application failure if a condition is not met. If the assertion checks the wrong condition, then the program may proceed in an erroneous state, which could lead to memory corruption, security holes, or worse. Hence it is vitally important to test that such assertion statements work as expected.	text	txt
3529	3	If the death test statement runs to completion without dying, the child process will nonetheless terminate, and the assertion fails.	text	txt
5453	1	Handles functions related to the input and output of video files.	text	md
3530	1	If a piece of code throws an exception, we don’t consider it “death” for the purpose of death tests, as the caller of the code could catch the exception and avoid the crash.	text	txt
3531	1	The second parameter is either a matcher being used against the output of the statement, as of type `const std::string&`, or a regular expression.	text	txt
3531	2	EXPECT_DEATH(statement, "Error on line [0-9]+ of .*");	code	cpp
3531	3	A death test takes a statement and a matcher.	text	txt
3531	4	EXPECT_DEATH(statement, matcher);	code	cpp
3531	5	A literal string as second argument is treated as `ContainsRegex(s)`, not as `Eq(s)`.	text	txt
3532	1	EXPECT_DEATH_IF_SUPPORTED(statement, matcher);	code	cpp
3532	2	If death tests are supported, behaves the same as `EXPECT_DEATH`. Otherwise, verifies nothing.	text	txt
3533	1	Verifies that `statement` causes the process to terminate with an exit status that satisfies `predicate`, and produces `stderr` output that matches `matcher`.	text	txt
3533	2	EXPECT_EXIT(statement, predicate, matcher);	code	cpp
3534	1	testing::ExitedWithCode(int);	code	cpp
3534	2	testing::KilledBySignal(int);	code	cpp
3535	1	EXPECT_EXIT(NormalExit(), testing::ExitedWithCode(0), "Success");	code	cpp
3535	2	The parameter `predicate` is a function or functor that accepts an `int` exit status and returns a `bool`. GoogleTest provides two predicates to handle common cases:	text	txt
3536	1	A<Type>();	code	cpp
3536	2	`actual_value` can be any value of type `Type`.	text	txt
3536	3	An<Type>();	code	cpp
3537	1	Ne(value); // operator!=()	code	cpp
3537	2	Lt(value); // operator<()	code	cpp
3537	3	Le(value); // operator<=()	code	cpp
3537	4	Gt(value); // operator>()	code	cpp
3609	1	ps -e	code	sh
3537	5	Eq(value); // operator==()	code	cpp
3537	6	Ge(value); // operator>=()	code	cpp
3537	7	In case of `Eq(value)`, we can also use `value`.	text	txt
3538	1	IsFalse(value); // operator bool()	code	cpp
3538	2	IsTrue(value); // operator bool()	code	cpp
3539	1	IsNull(pointer);	code	cpp
3539	2	NotNull(pointer);	code	cpp
3540	1	Argument is `std::optional<>` that contains a value matching `m`.	text	txt
3540	2	Optional(m);	code	cpp
3541	1	VariantWith<T>(m);	code	cpp
3541	2	Argument is `std::variant<>` that holds the alternative of type `T` with a value matching `m`.	text	txt
3542	1	Ref(lvalue);	code	cpp
3543	1	TypedEq<T>(value);	code	cpp
3543	2	You may need to use this instead of `Eq(value)` when the mock function is overloaded.	text	txt
3544	1	When passing references, wrap them in `std::ref()`.	text	txt
3544	2	Matchers make a copy of arguments in case it's modified or destructed later.	text	txt
3544	3		code	cpp
3545	1	`IsTrue` and `IsFalse` are useful when you need to use a matcher, or for types that can be explicitly converted to a boolean, but are not implicitly converted to boolean. In other cases, you can use the basic `EXPECT_TRUE` and `EXPECT_FALSE` assertions.	text	txt
3546	1	FloatEq(float);	code	cpp
3546	2	DoubleEq(double);	code	cpp
3546	3	DoubleEq(double);	code	cpp
3546	4	NanSensitiveFloatEq(float);	code	cpp
3546	5	NanSensitiveDoubleEq(double);	code	cpp
3546	6	FloatEq(float);	code	cpp
3547	1		code	cpp
3547	2	`DoubleEq()` and `FloatEq()` conform to the IEEE standard, which requires comparing two `NaN`s for equality to return `false`. The `NanSensitive*` version instead treats two `NaN`s as equal, which is often what a user wants.	text	txt
3548	1		text	txt
3548	2	EXPECT_THAT(actual_value, IsNan());	code	cpp
3549	1	FloatNear(double, max_absolute_error);	code	cpp
3549	2	NonSensitiveDoubleNear(double, max_absolute_error);	code	cpp
3549	3	NonSensitiveFloatNear(double, max_absolute_error);	code	cpp
3549	4		text	txt
3549	5	DoubleNear(double, max_absolute_error);	code	cpp
3550	1	EXPECT_THAT(<string>, ContainsRegex(<regex>));	code	cpp
3551	1	EXPECT_THAT(<string>, MatchesRegex(<regex>));	code	cpp
3552	1	EXPECT_THAT(<string>, EndsWith(<string>));	code	cpp
3553	1	EXPECT_THAT(<string>, HasSubstr(<string>));	code	cpp
3554	1	EXPECT_THAT(<string>, IsEmpty());	code	cpp
3555	1	EXPECT_THAT(<string>, StartsWith(<string>));	code	cpp
3556	1	EXPECT_THAT(<string>, StrCaseEq(<string>));	code	cpp
3557	1	EXPECT_THAT(<string>, StrCaseNe(<string>));	code	cpp
3558	1	EXPECT_THAT(<string>, StrEq(<string>));	code	cpp
3559	1	EXPECT_THAT(<string>, StrNe(<string));	code	cpp
3560	1	EXPECT_THAT(<base64>, WhenBase64Unescaped(<string>));	code	cpp
3561	1	EXPECT_THAT(<container>, BeginEndDistanceIs(<matcher>));	code	cpp
3561	2	EXPECT_THAT(<container>, BeginEndDistanceIs(<size>));	code	cpp
3562	2	EXPECT_THAT(<container>, SizeIs(<size>));	code	cpp
3563	2	EXPECT_THAT(<container>, Eq(<container>));	code	cpp
3564	1	EXPECT_THAT(<container>, Contains(<matcher>));	code	cpp
3565	1	EXPECT_THAT(<container>, Contains(<value>).Times(<repitition>));	code	cpp
3566	1	EXPECT_THAT(<container>, Each(<matcher>));	code	cpp
3567	1	EXPECT_THAT(<container>, ElementsAre(<matcher>...);	code	cpp
3568	1	EXPECT_THAT(<container>, ElementsAreArray(<container>));	code	cpp
3568	3	EXPECT_THAT(<container>, ElementsAreArray(<array>, <count>));	code	cpp
3568	5	EXPECT_THAT(<container>, ElementsAreArray({<value>...}));	code	cpp
3570	1	EXPECT_THAT(<container>, IsSubsetOf({<value>...));	code	cpp
3570	3	EXPECT_THAT(<container>, IsSubsetOf(<array>));	code	cpp
3570	5	EXPECT_THAT(<container>, IsSubsetOf(<container>));	code	cpp
3571	2	EXPECT_THAT(<container>, IsSupersetOf(<container>));	code	cpp
3571	4	EXPECT_THAT(<container>, IsSupersetOf(<array>, <count>));	code	cpp
3572	1	EXPECT_THAT(<container>, PointWise(<matcher>, <container>));	code	cpp
3573	1	EXPECT_THAT(<container>, SizeIs(<matcher>));	code	cpp
3574	2	EXPECT_THAT(<container>, UnorderedElementsAreArray(<array>, <count>));	code	cpp
3574	4	EXPECT_THAT(<container>, UnorderedElementsAreArray({<value>...}));	code	cpp
3574	6	EXPECT_THAT(<container>, UnorderedElementsAreArray(<array>));	code	cpp
3575	2	EXPECT_THAT(<container>, UnorderedPointWise(<container>));	code	cpp
3577	1	EXPECT_THAT(<container>, WhenSortedBy(<predicate>, <matcher>));	code	cpp
3578	2	EXPECT_THAT(<pointer>, Field(&<class>::<member>, <matcher>));	code	cpp
3579	2	EXPECT_THAT(<container>, Contains(Key(<matcher>)));	code	cpp
3581	1	EXPECT_THAT(<object>, FieldsAre(<matcher>...));	code	cpp
3582	2	EXPECT_THAT(<object>, Property(<method-name>, &<class>::<method>, <matcher>));	code	cpp
3583	2	EXPECT_THAT(<value>, ResultOf(<function>, <matcher>));	code	cpp
3585	1	EXPECT_THAT(<pointer>, Pointee(<matcher>));	code	cpp
3587	1	EXPECT_THAT(<pointer>, WhenDynamicCastTo<T>(<matcher>));	code	cpp
3588	2	EXPECT_THAT(<tuple>, AllArgs(<matcher>));	code	cpp
3589	2	EXPECT_THAT(<argument>, AllOfArray(<array>, <count>));	code	cpp
3589	4	EXPECT_THAT(<argument>, AllOfArray(<container>));	code	cpp
3590	1	EXPECT_THAT(<argument>, AnyOf(<array>, <count>));	code	cpp
3590	3	EXPECT_THAT(<argument>, AnyOf({<matcher>...}));	code	cpp
3590	5	EXPECT_THAT(<argument>, AnyOf(<iterator>, <iterator>));	code	cpp
3592	1	EXPECT_THAT(<argument>, Conditional(<condition>, <matcher>, <matcher>));	code	cpp
3593	2	SafelyMatcherCast<T>(<matcher>);	code	cpp
3594	2	Predicate ownership will be moved to the matcher.	text	txt
3596	1	ExplainMatchResult(<matcher>, <value>, <listener>);	code	cpp
3600	1	MATCHER_P2(IsBetween, a, b, absl::StrCat(negation ? "isn't" : "is", " between ", PrintToString(a), " and ", PrintToString(b))) { return a <= arg && arg <= b; }	code	cpp
5063	1	The `dmesg` or `journalctl` commands are most commonly used to inspect kernel logs.	text	txt
5064	1	Tracing is located at `/sys/kernel/debug/tracing` directory.	text	txt
5066	1	Do not use spaces in naming of tex files. Use hyphens or dots instead.	text	txt
5068	1	Documents should have at least one line of text to compile.	text	txt
5069	2	\\\\begin{document}\nSample Text\n\\\\end{document}	code	txt
5070	2	\\\\title{Sample Document}\n\\\\author{Brian Salehi}\n\\\\date{\\\\today}	text	txt
5071	1	\\\\documentclass{article}\n\\\\usepackage(blindtext)	text	txt
5072	1	\\\\documentclass{article}\n\\\\usepackage[utf8]{inputenc}	text	txt
5073	1	Newline `\\\\\\\\` can be at the end of the line we want to break.	text	txt
5076	1	\\\\underline{Underline text}	code	txt
5077	2	\\\\underline{\\\\underline{Double underline text}}\n\\\\uuline{Double underline text}}	code	txt
5078	2	\\\\uwave{Wavy Underline text}	code	txt
5079	2	\\\\sout{Strikethrough text}	code	txt
5080	2	\\\\xout{Slashed out text}	code	txt
5081	2	\\\\dashuline{Dash underline text}	code	txt
5082	2	\\\\dotuline{Dotted underline text}	code	txt
5083	2	\\\\begin{document}\n\\\\color{red}Colored Text\n\\\\end{document}	code	txt
5085	1	Surround the math block with curly braces `${ equation }$` to protect it from\nbreakage.	text	txt
5086	1	The equation $${A(x) = x^2 + 4x + 3}$$ gives the area of the rectangle.	code	txt
5088	1	**RAID 0**\n**RAID 1**\n**RAID 3**	text	txt
5089	1	**RAID 4**\n**RAID 5**\n**RAID 6**\n**RAID 10**	text	txt
5090	1	cat /proc/mdstat\nwatch -n1 cat /proc/mdstat	code	txt
5092	1	mdadm --detail --scan >> /etc/mdadm.conf	code	txt
5093	2	mdadm --monitor --scan --test	code	txt
5096	1	mdadm --assemble /dev/md0 /dev/sda /dev/sdb /dev/sdc	code	txt
5098	1	fdisk /dev/sdd\nmdadm --manage /dev/md0 --add /dev/sdd	code	txt
3601	2	Wrap another matcher with `ExplainMatchResult()`.	text	txt
3601	3	MATCHER_P(NestedPropertyMatches, matcher, "") { return ExplainMatchResult(matcher, arg.nested().property(), result_listener); }	code	cpp
3601	4	MATCHER_P(XAndYThat, matcher, "X that " + DescribeMatcher<int>(matcher, negation) + (negation ? " or" : " and") + " Y that " + DescribeMatcher<double>(matcher, negation)) {\n  return ExplainMatchResult(matcher, arg.x(), result_listener) && ExplainMatchResult(matcher, arg.y(), result_listener);\n}	code	cpp
3601	5	Matcher cannot be defined inside a function or a class.	text	txt
3601	6	Matcher body must be purely function without side effects.	text	txt
3601	7	Use `PrintToString(x)` to convert a value to string.	text	txt
3602	1	A mutex is an object that is used to guard a shared resource to ensure the use of the shared resource does not result in corruption.	text	txt
3603	1	`std::mutex` has `lock()` and `unlock()` member functions. The `lock()` function acquires access to a shared resource. `unlock()` releases this previously acquired access. Any attempt to execute the `lock()` function after another thread has already executed `lock()` will result in the thread having to wait until the `unlock()` function is executed.	text	txt
3605	1	- `BASH_VERSION`\n- `BASHPID`\n- `GROUPS`\n- `HOSTNAME`\n- `OSTYPE`\n- `PWD`\n- `RANDOM`\n- `UID`\n- `SHELL`	text	txt
5063	2	sudo journalctl -k\nsudo journalctl --dmesg	code	txt
5065	1	Using online tex compiler: https://overleaf.com	text	txt
5067	1	- article\n- exam	text	txt
5068	2	\\\\documentclass{article}	text	txt
5070	1	\\\\documentclass{article}	text	txt
5070	3	\\\\begin{document}\n\\\\maketitle\n\\\\end{document}	code	txt
5071	2	\\\\begin{document}\n\\\\blindtext\n\\\\end{document}	code	txt
5259	2	echo $USER	code	sh
5072	2	\\\\begin{document}\nGroß Text.\n\\\\end{document}	code	txt
5073	2	Sample text.\\\\\\\\\nNext line of text.	code	txt
5077	1	usepackage(ulem)	text	txt
5078	1	usepackage(ulem)	text	txt
5079	1	usepackage(ulem)	text	txt
5080	1	usepackage(ulem)	text	txt
5081	1	usepackage(ulem)	text	txt
5082	1	usepackage(ulem)	text	txt
5083	1	\\\\documentclass[11pt]{article}\n\\\\usepackage{xcolor}	text	txt
5084	1	A rectangle has side lengths of $(x+1)$ and $(x+3)$.\nThe equation $A(x) = x^2 + 4x + 3$ gives the area of the rectangle.	code	txt
5085	2	A rectangle has side lengths of $(x+1)$ and $(x+3)$.\nThe equation ${A(x) = x^2 + 4x + 3}$ gives the area of the rectangle.	code	txt
5087	1	**Redundant Array of Independent Drives** is a mechanism in which multiple\ndisks are combined for more reliablity and speed.	text	txt
5088	2	Similar to RAID 5 but with parities on only one drive.	text	txt
5089	2	mdadm --create --verbose /dev/md0 --level 5 --raid-devices 3 /dev/sda /dev/sdb /dev/sdc	code	txt
5091	1	mdadm --detail --scan\nmdadm --detail /dev/md0	code	txt
5093	1	Edit `mdadm(1)` configuration `/etc/mdadm.conf`, and specify `MAILADDR`,\n`MAILFROM` and `PROGRAM`.	text	txt
5094	1	mdadm --monitor --stop	code	txt
5097	1	mdadm --manage /dev/md0 --fail /dev/sdX\nmdadm --manage /dev/md0 --remove /dev/sdX\nmdadm --zero-superblock /dev/sdX\nmdadm --detail --scan >> /etc/mdadm.conf	code	txt
5114	1	sudo hotspot	code	txt
3609	2	ps -ef --forst	code	sh
3609	3	ps -ef	code	sh
3610	1	#!/usr/bin/env bash	code	sh
3610	2	The difference between using `env` or full path to the interpreter is that `env` will tend to find the interpreter regardless of residing in a standard path or not. So using `env` is more portable.	text	txt
3611	1	chmod +x script.sh	code	sh
3612	1	bash -n script.sh	code	sh
3613	1	bash -x script.sh	code	sh
3614	1	Subroutines and coroutines.	text	txt
3615	1	When it has either of the following keywords in its body:\n- `co_await`\n- `co_return`\n- `co-yield`	text	txt
3616	1	A coroutine must have a special return type implemented by the coroutine developer.	text	txt
3616	2	A new awaiter object was introduced in the standard.	text	txt
3616	3	`promise_type` should be encapsulated within the return type and must:\n- have the name `promise_type`.\n- to be a `class` or `struct`.\n- provide at least a constructor.\n- provide `initial_suspend()` method returning an awaiter object.\n- provide non-throwing `final_suspend()` method returning an awaiter object.\n- provide `get_return_object()` method that returns the parent type.\n- provide `unhandled_exception()` method returning void.	text	txt
3617	1	`std::suspend_always` and `std::suspend_never`.	text	txt
5469	1	cmake_minimum_required(VERSION 4.0)\nproject(Example VERSION 1.0 LANGUAGES CXX)\n\nfind_package(ftxui 5.0.0 CONFIG REQUIRED COMPONENTS component dom screen)\n\nadd_executable(program main.cpp)\ntarget_link_libraries(program PRIVATE ftxui::component ftxui::dom ftxui::screen)	code	cmake
3617	2	#include <coroutine>\n#include <iostream>\n\nstruct return_type\n{\n    struct promise_type\n    {\n        std::suspend_never initial_suspend() { return {}; }\n        std::suspend_never final_suspend() noexcept { return {}; }\n        return_type get_return_object() { return {}; }\n        void unhandled_exception() {}\n    };\n};\n\nreturn_type do_something()\n{\n    std::cout << "start\\n";\n    co_await std::suspend_always{}\n    std::cout << "finish\\n";\n}\n\nint main()\n{\n    do_something();\n}	code	cpp
3618	1	`std::coroutine_handle<>` is the primary standard type to be used in coroutines.	text	txt
3619	1	#include <coroutine>\n#include <iostream>\n\nstruct return_type\n{\n    struct promise_type\n    {\n        std::suspend_never initial_suspend() { return {}; }\n        std::suspend_never final_suspend() noexcept { return {}; }\n        return_type get_return_object() { return return_type{std::coroutine_handle<promise_type>::from_promise(*this)}; }\n        void unhandled_exception() {}\n    };\n\n    std::coroutine_handle<> handle();\n\n    return_type(std::coroutine_handle<> handle): handle{handle}\n    {\n    }\n};\n\nreturn_type do_something()\n{\n    std::cout << "start\\n";\n    co_await std::suspend_always{}\n    std::cout << "finish\\n";\n}\n\nint main()\n{\n    do_something();\n}	code	cpp
3620	1	There are two ways of resuming a coroutine. Either by call semantics `operator()` of the handle, or by calling its `resume()` method.	text	txt
3620	2	The coroutine handle should be used to resume its execution.	text	txt
3620	3	object.handle.resume();\nobject.handle();	code	cpp
3621	1	Coroutines can be started lazily or eagerly.	text	txt
3697	2	name: Custom Workflow\non:\n  workflow_dispatch:\njobs:\n  sample:\n    - name: Official action\n      uses: actions/checkout@v4\n\n    - name: User-defined action\n      uses: briansalehi/actions/custom@v1.2.3\n\n    - name: Action template\n      uses: {owner}/{repo}/{path}@{ref}	code	yml
3621	2	#include <coroutine>\n#include <iostream>\n\nstruct lazy_return\n{\n    struct promise_type\n    {\n        std::suspend_always initial_suspend();  // #1 lazily started coroutine\n    };\n};\n\nstruct eager_return\n{\n    struct promise_type\n    {\n        std::suspend_never initial_suspend(); // #2 eagerly started coroutine\n    };\n};\n\nlazy_return lazy_coroutine()\n{\n    std::cout << "initial execution\\n";\n    co_await std::suspend_always();\n    std::cout << "final execution\\n";\n}\n\neager_return eager_coroutine()\n{\n    std::cout << "initial execution\\n";\n    co_await std::suspend_never();\n    std::cout << "final execution\\n";\n}\n\nint main()\n{\n    lazy_return lazy_task = lazy_coroutine();\n    // no output\n    lazy_task();\n    // initial execution\n    lazy_task();\n    // final execution\n\n    eager_return eager_task = lazy_coroutine();\n    // initial execution\n    eager_task();\n    // final execution\n}	code	cpp
3621	3	The difference between the two is the return type used for `promise_type::initial_suspend()` method.	text	txt
3622	1	- Cannot use variadic arguments\n- Cannot be constexpr or consteval\n- Cannot have `auto` or `decltype(auto)` as return type, but still an `auto` with a trailing return type is valid\n- `main` function cannot be a coroutine\n- Constructors and destructors cannot be coroutines\n- Cannot have a plain return statement, instead there should be `co_return` to mark end of execution	text	txt
3623	1	- Free standing function\n- Member functions within a class\n- Virtual functions in polymorphic classes\n- Lambda expressions\n- Static free standing and member functions	text	txt
3624	1	`co_yield` keyboard was introduced in C++20 and can only be used in a coroutine context.	text	txt
3624	2	#include <coroutine>\n\nreturn_type generator(int start, int end, int step)\n{\n    for (int value{start}; value < end; value += step)\n    {\n        co_yield value;\n    }\n}	code	cpp
3624	3	This semantic is mostly used in sequence generators and range based for loops.	text	txt
3624	4	`co_yield` can suspend coroutine after returning evaluated value.	text	txt
3624	5	`co_yield` is utilized for returning intermediate values processed within coroutine body.	text	txt
5454	1	Basic image processing operations are provided by imgproc, such as filtering, rotating and resizing.	text	md
4348	1	We have one free function and a member function in `directory_entry`.\nThey both return file_time_type which in C++17 is defined as:	text	txt
3625	1	#include <coroutine>\n\nstruct return_type\n{\n    struct promise_type\n    {\n        long value;\n\n        std::suspend_always initial_suspend() { return {}; }\n        std::suspend_always final_suspend() noexcept { return {}; }\n        void unhandled_exception() {}\n        return_type get_return_object() { return std::coroutine_handle<promise_type>::from_promise(*this); }\n        std::suspend_always yield_value(long initial_value) {}\n    };\n\n    std::coroutine_handle<promise_type> handle;\n    return_type(std::coroutine_handle<promise_type> handle): handle{handle} {}\n    operator std::coroutine_handle<promise_type>() const { return handle; }\n    long get_value() const { return handle.promise().value; }\n};	code	cpp
3625	2	- `promise_type` needs to have a method `std::suspend_always yield_value(T value)`.\n- Parameter type should match the return type.\n- The return value can be stored in a `coroutine_handle` object and retrieved later.	text	txt
3626	1		text	txt
3627	1	1. Single Responsibility Principle\n2. Open Closed Principle\n3. Liskov Substitution Principle\n4. Interface Segregation Principle\n5. Dependency Inversion Principle	text	list
3628	1	A class should have only one reason to change, thus should only have one responsibility, otherwise any change will break it.	text	txt
3628	2	class basic_note\n{\npublic:\n    void add(std::size_t const priority, std::string const& title);\n    void remove(std::size_t const priority);\n};\n\nclass viewer\n{\npublic:\n    void display(basic_note const& note) noexcept;\n};	code	cpp
3628	3	class basic_note\n{\npublic:\n    void add(std::size_t const priority, std::string const& title);\n    void remove(std::size_t const priority);\n    void display(std::size_t const priority);\n};	code	cpp
3692	2	name: First Workflow\non:\n  # other properties\njobs:\n  initial:\n    name: Initial Job	code	yml
3629	1	class basic_note\n{\npublic:\n    void add(std::size_t const priority, std::string const& title);\n\n    void add(std::size_t const priority, std::string const& title)\n    {\n        if (title.starts_with("!"))\n        {\n            /* ... */\n        }\n        else\n        {\n            /* ... */\n        }\n    }\n\n    virtual void remove(std::size_t const priority);\n};	code	cpp
3629	2	class basic_note\n{\npublic:\n    virtual void add(std::size_t const priority, std::string const& title);\n    virtual void remove(std::size_t const priority);\n};\n\nclass tagged_note: public basic_note\n{\npublic:\n    void add(std::size_t const priority, std::string const& title) override\n    {\n        if (title.starts_with("!"))\n        {\n            /* ... */\n        }\n        else\n        {\n            basic_note::add(priotity, title);\n        }\n    }\n};	code	cpp
3629	3	Modules should be open for extension but closed for modification.	text	txt
3630	1	class basic_player\n{\npublic:\n    virtual void play() = 0;\n    virtual void stop() = 0;\n};\n\nclass resumable_player: public basic_player\n{\npublic:\n    virtual void pause() = 0;\n    virtual void resume() = 0;\n};\n\nclass radio: public basic_player\n{\npublic:\n    void play() override;\n    voiid stop() override;\n};\n\nclass music_player: public resumable_player\n{\npublic:\n    void play() override;\n    void pause() override;\n    void resume() override;\n    void stop() override;\n};\n\nvoid interrupt(std::shared_ptr<basic_player> const& player)\n{\n    player.pause();\n}\n\nradio digital_radio{};\ndigital_radio.play();\n\ninterrupt(digital_radio); // compile time error\n\nmusic_player mp3_player{};\nmp3_player.play();\n\ninterrupt(mp3_player); // okay	code	cpp
3630	2	Subtypes must be replacable with their base types without altering the correctness of the program. A subclass must have all the behaviors of its base type and must not remove or change its parent behavior.	text	txt
3630	3	class basic_player\n{\npublic:\n    virtual void play() = 0;\n    virtual void pause() = 0;\n    virtual void resume() = 0;\n    virtual void stop() = 0;\n};\n\nclass radio: public basic_player\n{\npublic:\n    void play() override;\n    void pause() override { std::runtime_error("radio cannot be interrupted"); }\n    void resume() override;\n    voiid stop() override;\n};\n\nvoid interrupt(std::shared_ptr<basic_player> const& player)\n{\n    player.pause();\n}\n\nradio digital_radio{};\ndigital_radio.play();\n\ninterrupt(digital_radio); // runtime error	code	cpp
3631	1	std::fstream bidirectional{};	code	cpp
3631	2	std::ofstream writable{};	code	cpp
3631	3	std::ifstream readable{};	code	cpp
3631	4	An stream class that has both write and read operations are a good example. We may not use both operations, so there should be separate types for each. Standard library has two similar types:	text	txt
3631	5	Clients should not be forced to use the methods they do not use. Some interfaces have too many methods but not all of them might be useful in subtypes. Separate the interface and reorganize methods based on usage.	text	txt
3632	1	Abstractions should not depend on details. Details should depend on abstractions.	text	txt
3632	2	class basic_downloader\n{\npublic:\n    virtual std::vector<std::string> get() = 0;\n};\n\nclass file_downloader: public basic_downloader\n{\npublic:\n    std::vector<std::string> get() override;\n};\n\nclass page\n{\nprivate:\n    std::unique_ptr<file_downloader> downloader;\n};	code	cpp
3632	3	class basic_downloader\n{\npublic:\n    virtual std::vector<std::string> get() = 0;\n};\n\nclass file_downloader: public basic_downloader\n{\npublic:\n    std::vector<std::string> get() override;\n};\n\nclass page\n{\nprivate:\n    std::unique_ptr<basic_downloader> downloader;\n};	code	cpp
3634	1		text	txt
3634	2	cmake_minimum_required(VERSION 3.30)\nproject(Sample VERSION 0.1 LANGUAGES CXX)\nfind_package(OpenCV 4.0.0 COMPONENTS core REQUIRED)\nmessage(STATUS "OpenCV version ${OpenCV_VERSION}")\nmessage(STATUS "OpenCV libs ${OpenCV_LIBS}")\nmessage(STATUS "OpenCV headers ${OpenCV_INCLUDE_DIRS}")\nadd_executable(project)\ntarget_sources(project PRIVATE main.cpp)\ntarget_include_directories(program PRIVATE ${CMAKE_CURRENT_SOURCE_DIR} ${OpenCV_INCLUDE_DIRS})\ntarget_link_libraries(project PRIVATE ${OpenCV_LIBS})	code	cmake
3635	1	`Mat` is the most useful type in OpenCV from `<opencv2/core.hpp>` header, holding values of a matrix.	text	txt
3635	2	cv::Mat m{};	code	cpp
3636	1	#include <opencv2/core.hpp> // link to opencv_core\n#include <opencv2/imgcodecs.hpp> // link to opencv_imgcodecs\n\nint main()\n{\n    cv::Mat image = cv::imread("image.jpg", cv::IMREAD_GRAYSCALE);\n}	code	cpp
5454	2	Advanced image processing algorithms are provided by ximgproc, such as structured forests for edge detection, domain transform filter, adaptive manifold filter, and more.	text	md
3637	1	#include <opencv2/core.hpp> // link to opencv_core\n#include <opencv2/imgcodecs.hpp> // link to opencv_imgcodecs\n\nint main()\n{\n    cv::Mat image = cv::imread("image.jpg", cv::IMREAD_GRAYSCALE);\n    cv::imwrite("/tmp/capture.jpg", image);\n}	code	cpp
3638	1	`cv::IMREAD_UNCHANGED`, `cv::IMREAD_GRAYSCALE`, `cv::IMREAD_COLOR`	text	list
3639	1	m.rows();	code	cpp
3639	2	m.cols();	code	cpp
3640	1	cv::Vec3b pixel;	code	cpp
3641	1	cv::Vec3b colored_pixel = colored_image.at<cv::Vec3b>(0, 0);	code	cpp
3641	2	std::int8_t grayscale_pixel = grayscale_image.at<std::int8_t>(0, 0);	code	cpp
3642	1	#include <opencv2/core.hpp> // link to opencv_core\n#include <opencv2/imgcodecs.hpp> // link to opencv_imgcodecs\n#include <opencv2/highgui.hpp> // link to opencv_highgui\n\nint main()\n{\n    cv::Mat image = cv::imread("lena.jpg", cv::IMREAD_COLOR);\n\n    cv::namedWindow window("Image View");\n    cv::imshow(window, image);\n    cv::waitKey(0);\n    cv::destroyWindow(image);\n}	code	cpp
3643	1	#include <opencv2/core.hpp>\n#include <opencv2/imgcodecs.hpp>\n#include <opencv2/videoio.hpp>\n\nint main()\n{\n    cv::VideoCapture video{0}; // default camera\n    cv::Mat image;\n\n    if (video.isOpened())\n    {\n        video >> image;\n        cv::imwrite("/tmp/output.jpg", image);\n        video.release();\n    }\n}	code	cpp
3644	1	cv::Mat m{};	code	cpp
3644	2	cv::Vec<double, 100> v{};	code	cpp
3644	3	cv::Scalar	code	cpp
3644	4	cv::Point	code	cpp
3644	5	cv::Size	code	cpp
3644	6	cv::Rect	code	cpp
3644	7	cv::RotatedRect	code	cpp
3693	1	Every job needs a runner that executes it. Runners are identified by labels.	text	txt
3693	2	name: First Workflow\non:\n  # other properties\njobs:\n  initial:\n    runs-on: ubuntu-latest	code	yml
5074	1	\\\\textbf{Bold text}	code	txt
3645	1	typedef Vec<uchar, 2> Vec2b; \ntypedef Vec<uchar, 3> Vec3b; \ntypedef Vec<uchar, 4> Vec4b; \n \ntypedef Vec<short, 2> Vec2s; \ntypedef Vec<short, 3> Vec3s; \ntypedef Vec<short, 4> Vec4s; \n \ntypedef Vec<int, 2> Vec2i; \ntypedef Vec<int, 3> Vec3i; \ntypedef Vec<int, 4> Vec4i; \n \ntypedef Vec<float, 2> Vec2f; \ntypedef Vec<float, 3> Vec3f; \ntypedef Vec<float, 4> Vec4f; \ntypedef Vec<float, 6> Vec6f; \n \ntypedef Vec<double, 2> Vec2d; \ntypedef Vec<double, 3> Vec3d; \ntypedef Vec<double, 4> Vec4d; \ntypedef Vec<double, 6> Vec6d;	code	cpp
3646	1	v1 = v2 + v3;\nv1 = v2 - v3;\nv1 = v2 * scale;\nv1 = scale * v2;\nv1 = -v2;\nv1 += v2;\nv1 == v2;\nv1 != v2;\nnorm(v1) (euclidean norm);	code	cpp
3647	1	Scalar is a class template derived from Vec class template but only with 4 elements, which is usually used to hold pixel information.	text	txt
3647	2	Scalar s1(0);\nScalar s2(0.0, 1.0, 2.0, 3.0);\ns[0]; s[1]; s[2]; s[3];	code	cpp
3648	1	p.x; p.y;\npt1 = pt2 + pt3; \npt1 = pt2 - pt3; \npt1 = pt2 * a; \npt1 = a * pt2; \npt1 = pt2 / a; \npt1 += pt2; \npt1 -= pt2; \npt1 *= a; \npt1 /= a; \npt1 == pt2; \npt1 != pt2;\ndouble value = norm(pt); // L2 norm	code	cpp
3649	1	typedef Point_<int> Point2i; \ntypedef Point2i Point; \ntypedef Point_<float> Point2f; \ntypedef Point_<double> Point2d;	code	cpp
3650	1	Similar to Point2b type but instead of `x` and `y` members, Size types hold `width` and `length` members.	text	txt
3650	2	s.width;\ns.length;\ns.area();	code	cpp
3651	1	The first two parameters are the coordinations of the upper-left corner. The third and fourth parameters are respectively the width and length of the rectangle.	text	txt
3651	2	cv::Rect r{0, 0, 100, 100};	code	cpp
3652	1	The same type as Rect but with rotation specified by a center point and rotation angle in degrees.	text	txt
3652	2	cv::Point2f center{100, 100};\ncv::Size2f size{100, 100};\nfloat angle{45};\ncv::RotatedRect r{center, size, angle};	code	cpp
3653	1	cv::Rect b = cv::boundingBox(r);	code	cpp
3654	1	cv::Mat m{cv::Size{100, 100}, CV_32F};	code	cpp
3655	1	- `CV_8UC1`\n- `CV_8UC1`\n- `CV_8UC1`\n- `CV_32FC3`\n- `CV_32FC3`\n- `CV_32FC3`	text	txt
3656	1	cv::Mat m = cv::Mat::zeros(5, 5, CV_32F);	code	cpp
3657	1	cv::Mat m = cv::Mat::ones(5, 5, CV_32F);	code	cpp
3658	1	cv::Mat m = cv::Mat::eye(5, 5, CV_32F);	code	cpp
3659	1	Mat c = a + b;\nMat d = a - b;\nMat e = a .* 2; // scalar by matrix\nMat f = a .* b; // per element multiplication\nMat g = cv::Mat::eye(2, 3) * cv::Mat::eye(3, 2); // matrix multiplication\nMat h = m.t(); // transposition\nMat i = m.inv(); // inversion	code	cpp
3660	1	int i = cv::countNonZero(m);	code	cpp
3661	1	meanStdDev(src, mean, stddev);	code	cpp
3662	1	minMaxLoc(matrix, minval, maxval, minloc, maxloc);	code	cpp
3709	2	If the action has defined `inputs`, you can specify them using the `with` property:	text	txt
3663	1	cv::FileStorage storage("/tmp/result.yml", cv::FileStorage::WRITE);\n\nint fps = 5;\nstorage << "fps" << fps;\n\ncv::Mat m = cv::Mat::eye(2, 3, CV_32F);\nstorage << "matrix" << m;\n\nstorage.release();	code	cpp
3664	1	cv::FileStorage storage("/tmp/result.yml", cv::FileStorage::READ);\n\ncv::Mat m;\nstorage["matrix"] >> m;\n\nint fps;\nstorage["fps"] >> fps;\n\nstorage.release();	code	cpp
3665	1	**Synchronous Programming:** code is executed in a strict sequential order, makes program unresponsive to external events, difficult to scale, useful for reactive or embedded systems that need to respond in real time.	text	txt
3665	2	**Concurrency Programming:** more than one task can run at the same time, tasks can be executed in any order, exceptional care is needed when coordinating access to shared resources, incorrect access leads to race conditions or deadlocks, supported by C++ through `std::thread`.	text	txt
3665	3	**Asynchronous Programming:** allows some tasks to be scheduled and run in the background while continuing to work on the current job without waiting for the scheduled tasks to finish, when background tasks are finished they will report results back to the main job or scheduler, solves the problem of synchronous unresponsiveness for a long time, suitable paradigm for event-driven programs, user interfaces, web servers, network communications, or long running background processing, adds code complexity, supported in C++ through coroutines.	text	txt
4337	2	#include <random>\n#include <functional>\n\nint main()\n{\n    std::random_device seeder;\n\n    std::array<int, std::mt19937::state_size> seed_data{};\n    std::generate(std::begin(seed_data), std::end(seed_data), std::ref(seeder));\n    std::seed_seq seeds(std::begin(seed_data), std::end(seed_data));\n    std::mt19937 generator{seeds};\n    std::uniform_int_distribution<> dist{0, 10}; // [0, 10)\n    int random_number = dist(generator);\n}	code	cpp
4338	1	Difference of time points is a duration.	text	txt
4347	1	#include <iostream>\n#include <ctime>\n#include <sys/stat.h>\n\nint main(int argc, char** argv)\n{\n    char const* file_path{argv[0]};\n\n    struct stat file_stat;\n\n    if (stat(file_path, &file_stat) == 0)\n    {\n        std::time_t mod_time{file_stat.st_mtime};\n        char* str{std::asctime(std::localtime(&mod_time))};\n        std::cout << "Last modification time: " << str;;\n    }\n    else\n    {\n        std::cerr << "File status retrival failed\\\\n";\n    }\n}	code	cpp
3665	4	**Parallel Programming:** multiple computation tasks can be done simultaneously on multiple processing units, either in a multicore system or in a cluster of multicore systems, parallelism can be done either in shared-memory paradigm with all tasks communicating via shared memory, or in message-passing paradigm with each task having its own memory space and using message passing techniques to communicate with each other, needs synchronization mechanisms to avoid tasks interfering with each other, requires load balancing the workload to reach its full potential, increases design complexity.	text	txt
3665	5	**Multithreading Programming:** subset of parallel programming, program divides into multiple threads executing independent units within the same process with shared memory space, no neeed for interprocess communication.	text	txt
3665	6	**Event-Driven Programming:** control flow is driven by external events, an event signals an action, events are listened by event loop, callbacks or functors are used to write event handlers in C++.	text	txt
3665	7	**Reactive Programming:** deals with data streams, programs built using declarative or functional programming to define a pipeline of operators and transformations applied to the stream, operations happen asynchronously using schedulers and backpressure handling mechanisms, backpressure happens when data quantity overwhelms the consumers.	text	txt
3665	8	**Dataflow Programming:** program is designed as a directed graph of nodes representing computation units and edges representing the flow of data, mostly useful in machine learning, real-time analysis, audio, video, and image processing systems.	text	txt
3666	1	Concurrency can happen preemptive, whereby the scheduler switches contexts without interactive with the tasks, or it can be non-preemptive or cooperative, whereby the task yields control to the scheduler to let another task continue work.	text	txt
3667	1	Allows important tasks to be scheduled earlier to deal with important external events quickly. These more important tasks wake up when the operating system sends them a signal that triggers an interrupt.	text	txt
3668	1	The speed-up from parallelization is not linear. The Amdahl's law formula computes the theoretical maximum speed-up a task can perform after parallelization as follows:	text	txt
3668	3	The `s` is the speed-up factor of the improved part and `p` is the fraction of the parallelizable  part compared to the entire process. Therefore, `1 - p` represents the ratio of the task not parallelizable (the bottleneck or sequential part), while `p / s` represents the speed-up achieved by the parallelizable part.	text	txt
5469	2	Alternatively, we can integrate it with `FetchContent`:	text	md
3668	4	The maximum speed-up is limited by the sequential portion of the task. The greater the fraction of parallelizable task (`p` approaches 1), the more the maximum speed-up increases up to the speed-up factor `s`. On the other hand, when the sequential portion becomes larger (`p` approaches 0), `Smax` tends to , meaning that no improvement is possible.	text	txt
3668	5	The critical path in parallel systems is defined by the longest chain of dependent calculations. As the critical path is hardly parallelizable, it defines the sequential portion and thus the quicker runtime that a program can achieve. For example, if the sequential part of a process represents 10% of the runtime, then the fraction of the parallelizable part is `p = 0.9`. In this case, the potential speed-up will not exceeed 10 times the speed-up, regardless of the number of processor available.	text	txt
3669	1	This law computes the speed-up gained by using `p` processors as follows:	text	txt
3669	3	Here, `p` is the number of processors and `f` is the fraction of the task that remains sequential. Therefore, `(1-f)p` represents the speed-up achieved by distributing the fraction of the task across processors, and the standalone `p` represents the extra work done when increasing resources.	text	txt
3669	4	Gustafson's law shows that the speed-up is affected by parallelization when lowering `f` and by scalability when inreasing `p`.	text	txt
3670	1	**Creation:** A new process is created using the `fork()` system call, which creates a new process by duplicating an existing one.	text	txt
3670	2	**Execution:** After creation, the child process may execute the same code as the parent or use the `exec()` family of system calls to load and run a different program. If the parent process has more than one thread of execution, only the thread calling `fork()` is duplicated in the child process. Any Mutual Exclusions, condition variables, or other synchronization primitives that were held by other threads at the time of the fork remain in their then-current state in the parent but do not carry over to the child. This can lead to complex synchronization issues, as mutexes that were locked by other threads (which do not exist in the child) might remain in a locked state, potentially causing deadlocks if the child tries to unlock or wait on these primitives.	text	txt
3670	3	**Termination:** A process terminates either voluntarily, by calling the exit() system call, or involuntarily, due to receiving a signal from another process that causes it to stop. Upon termination, the process returns an exit status to its parent process and releases its resources back to the system.	text	txt
3671	1	**Pipes** are simple IPC mechanisms providing unidirectional communication between processes. A **named pipe** or a FIFO, extends pipe mechanism by providing a pipe that is accessible via a name in the filesystem, allowing unrelated processes to communicate.	text	txt
3669	2	S_{p} = p + (1 - f)p	code	tex
5222	1	`act` is an unofficial utility capable of running workflows locally before we push them into upstream.	text	md
3671	2	**Signals** can be sent to a process to notify it of events. While they are not a method for transferring data, signals are useful for controlling process behavior and triggering actions within processes.	text	txt
3671	3	**Message queues** allow processes to exchange messages in a FIFO manner. Unlike pipes, message queues support asynchronous communication, whereby messages are stored in a queue and can be retrieved by the receiving process at its convenience.	text	txt
3671	4	**Semaphores** are used for synchronization, helping processes manage access to shared resources. They prevent race conditions by ensuring that only a specified number of processes can access a resource at any given time.	text	txt
3671	5	**Shared memory** enables multiple processes to access and manipulate the same segment of physical memory. To ensure data integrity and prevent conflicts, shared memory requires synchronization mechanisms such as semaphores or mutexes.	text	txt
3671	6	**Sockets** are used to establish and maintain connections between processes, and they support both connection-oriented where it is important to ensure that all data is delivered reliably and in the correct order such as file transfer and remote login, and connectionless communication by which no reliable connection is established between two processes before data is transferred, often used for streaming media and real-time gaming, where it is more important to have low latency than to guarantee reliable delivery of all data.	text	txt
3672	1	- Daemons run in the background and lack controlling terminal\n- Daemons run independently of user sessions but may wait for system events and rely on the system triggers\n- Each daemon is tailored to execute a specific task or a set of tasks	text	txt
3673	1	Detaching from the terminal: the `fort()` system call make a clone of the running process detached from the terminal. The parent process exits after the fork, leaving the child process running in the background.	text	txt
3673	2	Session creation: the `setsid()` system call creates a new session and designates the calling process as the leader of both the session and the process group. This step is crucial for complete detachment from the terminal.	text	txt
3673	3	Working directory change: to prevent blocking the unmounting of the filesystem, daemons typically change their working directory to the root directory.	text	txt
3673	4	File descriptor handling: inherited file descriptors are closed by daemons, and stdin, stdout, and stderr are often redirected to /dev/null.	text	txt
3673	5	Signal handling: Proper handling of signals, such as SIGHUP for configuration reloading or SIGTERM for graceful shutdown, is essential for effective daemon management.	text	txt
3674	1	A process is an instance of a running program that owns its private set of resources, including memory, file descriptors, and execution context. Threads are closely intertwined with the process they belong to, allowing them to share the same memory space and resources within a process, including file descriptors, heap memory, and any other global data structures allocated by the process. Threads represent a lightweight and efficient way to execute multiple tasks within a single process.	text	txt
3675	1	Effective synchronization is crucial in multithreaded programming to avoid race conditions, deadlocks, and other concurrency-related issues. Synchronization primitives and techniques have been developed such as mutexes, which provide exclusive access to a shared resource, semaphores, which allow for controlled access to a limited number of resources, and condition variables, which enable threads to wait for specific conditions to be met before proceeding.	text	txt
3676	1	Coroutines can be defined as functions that can be paused and resumed at specific points. Coroutines are cooperative, which means that they must explicitly yield control to the caller in order to switch execution context. This can be a disadvantage in some cases, but it can also be an advantage, as it gives the user program more control over the execution of coroutines.	text	txt
3677	1	**Creation** involves a function, which takes several parameters. Thread’s attributes, such as its scheduling policy, stack size, priority, and the function that the thread will execute.	text	txt
3677	2	**Execution** starts by executing its assigned routine. The thread can perform various tasks independently or interact with other threads if necessary. Threads can also create and manage their own local variables and data structures, making them self-contained and capable of performing specific tasks concurrently.	text	txt
3677	3	**Synchronization** is required ensure orderly access to shared resources and prevent data corruption. Common synchronization primitives include locks, semaphores, and barriers. Proper synchronization allows threads to coordinate their activities, avoiding race conditions, deadlocks, and other issues that can arise in concurrent programming.	text	txt
3677	4	**Termination** can happen in several ways. It can explicitly call the function to terminate itself. It can also terminate by returning from its start routine. In some cases, a thread can be canceled by another thread using the function. Upon termination, the system reclaims the resources allocated to the thread, and any pending operations or locks held by the thread are released.	text	txt
3678	1	**Mutexes:** enforce exclusive access to critical sections of code, once locked by a thread, prevents other threads from entering the protected section until the mutex is unlocked.	text	txt
3678	2	**Semaphores:** more versatile than mutexes, used for a wider range of synchronization tasks, including signaling between threads. A semaphore maintains an integer counter that can be incremented (signaling) or decremented (waiting) by threads. Semaphores allow for more complex coordination patterns, such as counting semaphores for resource allocation and binary semaphores similar to mutexes.	text	txt
3678	3	**Condition Variables:** used for thread synchronization based on specific conditions. Threads can block (wait on) a condition variable until a particular condition becomes true. Other threads can signal the condition variable, causing waiting threads to wake up and continue execution. Often used in conjunction with mutexes to achieve more fine-grained synchronization and avoid busy waiting.	text	txt
3678	4	**Barriers:** allow a group of threads to synchronize their execution, ensuring that all threads reach a certain point before proceeding further.	text	txt
3678	5	**Read-Write Locks:** provide a way to control concurrent access to shared data, allowing multiple readers but only a single writer at a time.	text	txt
3678	6	**Spinlocks:** a type of mutex that involves busy waiting, continuously checking a memory location until it becomes available.	text	txt
3679	1		text	txt
3679	2	**Race conditions** occur when multiple threads access and modify shared data concurrently.	text	txt
3679	3	**Deadlocks** occur when two or more threads wait indefinitely for resources held by each other.	text	txt
5226	3	or run the steps without actually creating a container:	text	md
3679	4	**Starvation** occurs when a thread is perpetually denied access to resources it needs to make progress.	text	txt
3679	5	**Livelocks** are like deadlocks, but instead of being permanently blocked, the threads remain active and repeatedly try to acquire resources, only without making any progress.	code	cpp
3680	1	- Kernel threads only used by drivers in kernel space\n- User space native threads created by the kernel using a kernel API, such as standard threads\n- User space lightweight or virtual threads emulated by a runtime or library, such as coroutines	text	txt
3681	1	When a thread is constructed, it executes immediately. The only delay might be due to OS scheduling process. The order of execution between the parent and children are not defined.	text	txt
3681	2	#include <thread>\n\nvoid task_function() { };\nauto task_lambda = [] { };\nstruct task { void operator() { } } task_functor;\nstruct some_type { void do_something() { } } task_object;\nstruct some_other_type { static void do_something() { } };\n\nstd::jthread{task_function};\nstd::jthread{task_lambda};\nstd::jthread{task_functor};\nstd::jthread{&some_type::do_something, &task_object};\nstd::jthread{&some_other_type::do_something};	code	cpp
3682	1	std::size_t const core_count{std::thread::hardware_concurrency()};	code	cpp
3682	2	The value returned by this function should only be considered as a hint. It may return 0 when not well defined.	text	txt
3683	1	#include <thread>\n#include <iostream>\n#include <syncstream>\n\nstruct output\n{\n    std::size_t const core_count;\n\n    output(): core_count{std::thread::hardware_concurrency()}\n    {\n        for (std::size_t core_index{0}; core_index < core_count; ++core_index)\n        {\n            std::jthread{&output::write, this, core_index};\n        }\n    }\n\n    void write(std::size_t const value)\n    {\n        std::osyncstream{std::cout} << value << ' ';\n    }\n};\n\nint main()\n{\n    output{};\n}	code	cpp
3684	1	std::this_thread::sleep_for(std::chrono::duration);	code	cpp
3684	2	std::this_thread::sleep_until(std::chrono::time_point);	code	cpp
3685	1	`std::thread::id` is a lightweight class that defines a unique identifier of thread objects. Thread identifier objects can be compared, serialized, and printed via an output stream. They can also be used as a key in mapping containers, as they are supported by the `std::hash` function.	text	txt
3685	2	#include <thread>\n#include <iostream>\n\nvoid main()\n{\n    std::cout << std::this_thread::get_id() << std::endl;\n}	code	cpp
3686	1		text	txt
3686	2		code	cpp
3687	1	GitHub Action workflows are YAML files with a `.yml` or `.yaml` extension that are located in the `.github/workflows` directory in a repository.	text	txt
3688	1	Typically, workflows are started with the `name` property, which sets the display name of the workflow in the UI, and then the `on` property which is the trigger of the workflow.	text	txt
3688	2	name: First Workflow\non:\n  push:\n    # other properties\n  workflow-dispatch:\n    # other properties	code	yml
3688	3	A workflow can have multiple triggers.	text	txt
3689	1	Most arguments, for example branches or paths are sequences and need a dash for each entry if you are not using the JSON syntax.	text	txt
3689	2	name: First Workflow\non:\n  push:\n    branch:\n      - 'release'\n    path:\n      - 'src/'	code	yml
3690	1	The `*` character can be used as a wildcard in paths and `**` as a recursive wildcard. `*` is a special character in YAML, so you need to use quotation marks in that case:	text	txt
3690	2	on:\n  push:\n    branches:\n      - 'release/**'\n    paths:\n      - 'doc/**'	code	yml
3691	1	After configuring the triggers for a workflow, jobs should be defined as another root element. Jobs are a map in YAML, each property is a key that is not a predefined keyword and only specifies an identifier.	text	txt
3691	2	name: First Workflow\non:\n  # other properties\njobs:\n  initial:\n    # other properties	code	yml
3692	1	The name of a job object can only contain alphanumeric values, a dash, and an underscore. If you want any other characters to be displayed in the workflow, you can use the name property:	text	txt
3694	1	A job consists of a sequence of steps that are executed one after the other. The most basic step is the `- run: <command>`, which will execute a command-line command:	text	txt
3694	3	The `name` is optional and sets the output of the step in the log.	text	txt
3695	1	The `shell` property in a job steps is optional and will default to `bash` on non-Windows platforms, with a fallback to `sh`. On Windows, the default is PowerShell Core (`pwsh`), with a fallback to `cmd`. But you could configure any shell you want with the `{0}` placeholder for the input of the step.	text	txt
3696	1	To add variable output, we can use expressions that are written between `${{` and `}}`. In the expression, you can use values from context objects such as the GitHub context.	text	txt
3696	2	name: First Workflow\non:\n  push:\n    branch:\n      - 'release/*'\njobs:\n  initial:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo "Running as ${{ github.actor }}"	code	yml
3697	1	The syntax is `{path}@{ref}`. The path points to a physical location on GitHub and can be `{owner}/{repo}` if the actions are in the root of a repository or `{owner}/{repo}/{path}` if the actions are in a subfolder. The reference after `@{ref}` is any git reference that points to a commit. It can be a tag, branch, or an individual commit SHA.	text	txt
3698	1	GitHub Actions workflows will not automatically download the code from your repository. If you want to do something with files in your repository, you have to check out the content first. This is done using the checkout action.	text	txt
3699	1	We can display files in repository after checking out by adding an extra step `- run: tree`:	text	txt
3699	2	name: First Workflow\non:\n  push:\n    branch:\n      - 'release/*'\njobs:\n  initial:\n    runs-on: ubuntu-latest\n    checkout:\n      - name: Checkout\n        uses: actions/checkout@v4.1.0\n    steps:\n      - run: echo "Running as ${{ github.actor }}"\n      - run: tree	code	yml
3700	1	You can write comments by prefixing text with a hash.	text	txt
3695	2	name: First Workflow\non:\n  workflow_dispatch:\njobs:\n  initial:\n    runs-on: ubuntu-latest\n    steps:\n      - run: date\n        shell: perl {0}	code	yml
3698	2	name: Custom Workflow\non:\n  push:\n    branch:\n      - release/*\njobs:\n  initial:\n    name: Checkout\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo "Running as ${{ github.actor }}"\n      - uses: actions/checkout@v4	code	yml
3700	2	# first line is usually the name of the file	code	yml
3701	1	you can assign a value to a variable with the following syntax: `key: value`.	text	txt
3701	2	name: Initial Workflow	code	yml
5226	4	act -n\nact --dry-run	code	sh
3701	3	key is the name of the variable. Depending on the data type of value, the type of the variable will be different. Note that keys and values can contain spaces and do not need quotation marks!	text	txt
3702	1	You can quote keys and values with single or double quotes. Double quotes use the backslash as the escape pattern, while single quotes use an additional single quote to scape..	text	txt
3702	2	name: "Initial Workflow"	code	yml
3702	3	Only add quotes if you use some special characters or you want to force certain values to be a string.	text	txt
3703	1	In YAML, there are two different collection types: maps and lists.	text	txt
3703	2	Maps use two spaces of indentation:	text	txt
3703	3	parent_type:\n  key1: value1\n  key2: value2\n  nested_type:\n    key1: value1	code	yml
3703	4	A sequence is an ordered list of items and has a dash before each line:	text	txt
3703	5	sequence:\n  - item1\n  - item2\n  - item3	code	yml
3704	1	Since YAML is a superset of JSON, you can also use the JSON syntax to put collections in one line:	text	txt
3704	2	key: [item1, item2, item3]\nkey: {key1: value1, key2: value2}	code	yml
3705	1	There are three types of triggers for workflows:	text	txt
3705	2	- Webhook triggers\n- Scheduled triggers\n- Manual triggers	text	txt
3706	1	Webhook triggers start the workflow based on an event in GitHub. There are many webhook triggers available. For example, we can run a workflow on a push, an issues event, a repository event, or a discussions event.	text	txt
3706	2	name: Initial Workflow\non:\n  push:\n    branches:\n      - 'release/*'	code	yml
3707	1	Scheduled triggers can run the workflow at multiple scheduled times. The syntax is the same syntax used for cron jobs:	text	txt
3707	2	on:\n  schedule:\n    # every 15th minute\n    - cron:  '*/15 * * * *'\n    # every hour from 9am to 5pm\n    - cron:  '0 9-17 * * *'\n    # every Friday at midnight\n    - cron:  '0 2 * * FRI'	code	yml
3708	1	Manual triggers allow you to start the workflow manually. The `workflow_dispatch` trigger will allow you to start the workflow using the web UI or GitHub CLI.	text	txt
3709	1	You can define input parameters for this trigger using the `inputs` property. The `repository_dispatch` trigger can be used to trigger the workflow using the API. This trigger can also be filtered by certain event types and can accept additional JSON payload that can be accessed in the workflow.	text	txt
3709	3	jobs:\n  - uses: ActionsInAction/HelloWorld@v1\n    with:\n      WhoToGreet: Brian	code	yml
3709	4	You can also set environment variables for steps using the `env` property:	text	txt
3709	5	jobs:\n  - uses: ActionsInAction/HelloWorld@v1\n    env:\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}	code	yml
3710	1	Secret names are not case-sensitive, and they can only contain normal characters (`[a-z]` and `[A-Z]`), numbers (`[0-9]`), and an underscore (`_`). They must not start with `GITHUB_` or a number.	text	txt
3710	2	The best practice is to name secrets with uppercase words separated by the underscore character.	text	txt
3711	1	${{ secrets.MY_SECRET }}	code	yml
3714	1	You will be prompted for the secret or variable values, or you can read the value from a file, pipe it to the command, or specify it as the body (`-b` or `--body`):	text	txt
3715	1	Environments are used to describe a general deployment target such as development, test, staging, or production.	text	txt
3715	2		code	yml
3720	1	We can specify log levels using `::level::` syntax, which level can be either of `debug`, `notice`, `warning`, `error` values.	text	txt
3720	2	name: Initial\non:\n  workflow-dispatch:\njobs:\n  initial:\n    runs-on: ubuntu-latest\n    steps:\n      - run: |\n          echo "::debug::This is a debug message"\n          echo "::notice::This is a notice message"\n          echo "::warning::This is a warning message"\n          echo "::error::This is an error message"	code	yml
3720	3	`warning` and `error` annotations also mark actions as failed.	text	txt
3721	1	By adding the variable `ACTIONS_STEP_DEBUG` set as true, all actions will have very verbose output to workflow logs.	text	txt
3721	2	gh variable set ACTIONS_STEP_DEBUG --body true	code	sh
3722	1	name: Initial\non:\n  workflow-dispatch:\njobs:\n  initial:\n    runs-on: ubuntu-latest\n    container:\n      image: custom-name:latest	code	yml
3723	1	inputs:\n  actor:\n    description: 'Use who runs the workflow'\n    required: true\n    default: 'unknown'	code	yml
3724	1	name: 'Docker Action'\ndescription: 'Run actions on a custom docker image'\nruns:\n  using: docker\n  image: Dockefile\n  args:\n    - <arguments>	code	yml
3725	1	All actions are defined by a file called `action.yml` in the source of a repository:	text	txt
3712	1	gh secret set <name>	code	sh
3713	1	gh variable set <name>	code	sh
3714	2	gh secret set <name> < secret.txt	code	sh
3714	3	gh secret set <name> --body <value>	code	sh
3718	2	gh secret set <name> --env <name>	code	sh
3716	1	We associate a job with an environment using `env` property:	text	txt
3718	3	gh secret set <name> --org <name> -v private	code	sh
3718	4	gh secret set <name> --org <name> -v selected -r <repo>	code	sh
3718	1	If you are setting secrets or variables for an environment using the GitHub CLI, then you can specify them using the `--env` (`-e`)` argument. For organization secrets, set the visibility (`--visibility` or `-v`) to `all`, `private`, or `selected`. For `selected`, you must specify one or more repos using `--repos` (`-r`):	text	txt
3719	1	name: Sample Workflow\non:\n  workflow_dispatch:\njobs:\n  sample:\n    runs-on: ubuntu-latest\n    env:\n      name: Production\n      url: https://example.com\n    steps:\n      run: echo ${{ env.url }}	code	yml
3725	2	name: 'Docker Action'\ndescription: 'Run actions on a custom docker image'\ninputs:\n  actor:\n    required: true\n    default: 'user'\nruns:\n  using: docker\n  image: Dockefile\n  args:\n    - ${{ inputs.actor }}	code	yml
3725	3	The `runs` section in the `action.yml` file defines what type of action it is.	text	txt
3725	4	The action is ready to be used within workflow:	text	txt
3726	1	Passing output values to subsequent steps and jobs works by redirecting a name-value pair to the environment file `$GITHUB_OUTPUT`:	text	txt
5227	1	act -w\nact --watch	code	sh
5260	1	hostname	code	sh
3726	2	jobs:\n  initial:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Initialize\n        id: initial-action\n        run: echo "special_value=42" >> "$GITHUB_OUTPUT"\n      - name: Print\n        run: echo "value: ${{ steps.initial-action.outputs.special_value }}"	code	yml
3727	1	jobs:\n  initial:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Initialize\n        id: initial-action\n        run: echo "special_value=42" >> "$GITHUB_ENV"\n      - name: Print\n        run: echo "value: ${{ env.special_value }}"	code	yml
3728	1	jobs:\n  initial:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Initial Action\n        id: initial-action\n        run: echo "should_run=true" >> "$GITHUB_OUTPUT"\n      - name: Conditional Action\n        if: ${{ steps.initial-action.outputs.should_run == true }}\n        run: echo "Conditional Step Executed"	code	yml
3728	2	In an `if` property, `${{ }}` syntax can be omitted.	text	txt
3728	3	- name: Conditional Action\n  if: steps.initial-action.outputs.should_run == true\n  run: echo "Conditional Step Executed"	code	yml
3729	1	contains(search, item)\ncontains('some value', 'some')\ncontains(github.event.issue.labels.*.name, 'bug')	code	yml
3729	2	startsWith(search, item)	code	yml
3729	3	endsWith(search, item)	code	yml
3729	4	format(format_string, v...)\nformat('{0} {1} {2}', env.project_name, env.project_version, env.project_author)	code	yml
3729	5	join(array, separator)	code	yml
3729	6	toJSON(value)	code	yml
3729	7	fromJSON(value)	code	yml
3729	8	hashFiles(path)	code	yml
3730	1	- `success()`\n- `always()`\n- `cancelled()`\n- `failure()`	text	txt
3730	2	jobs:\n  action:\n    runs-on: ubuntu-latest\n    steps:\n      - run: exit 1\n      - name: Failure Exit\n        run: echo "Job exited with failure"\n        if: ${{ failure() }}	code	yml
3731	1	Download the [latest runner](https://github.com/actions/runner/releases/latest) and unpack it.	text	txt
3731	2	FROM ubuntu:latest\n\nRUN apt update && apt upgrade --yes && apt install --yes --no-install-recommends ca-certificate curl bash tar liblttng-ust1 libkrb5-3 zlib1g libssl1.1 libicu63 && apt clean\n\nENV RUNNER_ALLOW_RUNASROOT="1"\n\nWORKDIR /workdir\n\nRUN curl -O -L https://github.com/actions/runner/releases/download/v2.321.0/actions-runner-linux-x64-2.321.0.tar.gz\nRUN tar xzf actions-runner-linux-x64-2.321.0.tar.gz\nRUN bash actions-runner/bin/installdependencies.sh\nRUN bash actions-runner/config.sh --url https://github.com/<owner>/<repo> --token <token>\n\nENTRYPOINT bash actions-runner/run.sh	code	docker
3731	3	After execution, runner should be available on GitHub as a self-hosted runner. We can now use `self-runner` runner on our jobs:	text	txt
3731	4	name: Workflow\non:\n  push: [workflow-dispatch]\njobs:\n  action:\n    runs-on: self-hosted\n    steps:\n      - name: System Information\n        shell: bash\n        run: |-\n          echo "Runner: ${{ runner.name }}"\n          echo "OS: ${{ runner.os }}"\n          echo "Arch: ${{ runner.arch }}"	code	yml
3732	1	./config.sh remove --token <token>	code	sh
3733	1	Create a new workflow `.github/workflows/release.yml` and write a `release` and `push` trigger which will be based on either `tags` or `branches`. Then add a job `publish` and give it permissions to read the repository and write into packages, then checkout the repository, build the project, create a release with `create-release` action, and upload assets using `upload-release-asset` action for every file:	text	txt
4353	2	#include <algorithm>\n#include <vector>\n\nstd::vector<int> data{ 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n\n// OK for std::copy\n//         [ source range      ]\n// [ destination range ]\nstd::copy(data.begin() + 1, data.end(), data.begin());\n// data == {2, 3, 4, 5, 6, 7, 8, 9, 9}\n\ndata = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n\n// OK for std::copy_backward\n// [ source range      ]\n//         [ destination range ]\nstd::copy_backward(data.begin(), data.begin() + 8, data.end());\n// data == {1, 1, 2, 3, 4, 5, 6, 7, 8}	code	cpp
3733	2	name: Release\non:\n  release:\n    types: [created]\n  push:\n    tags:\n      - v*\n    branches:\n      - release\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      packages: write\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      - name: Build\n        run: echo "building"\n      - name: Release\n        id: create_release\n        uses: actions/create-release@v1\n        with:\n          tag_name: ${{ github.refname }}\n          release_name: "Release ${{ github.refname }}"\n        body: "Release notes for ${{ github.refname }}"\n        draft: false\n        prerelease: false\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      - name: Upload\n        uses: actions/upload-release-asset@v1\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\n          asset_path: ./package.tar.gz\n          asset_name: package.tar.gz\n          asset_content_type: application/gzip	code	yml
3733	3	Finally, create a release:	text	txt
3733	4	gh release create ${{ github.refname }} --generate-notes	code	sh
3734	1	Use the `-B` option to specify a directory to hold the build files.	text	txt
3734	2	cmake -B build	code	sh
3735	1	It’s common to add some variation of build to our `.gitignore` file so we don’t accidentally start tracking these files.	text	txt
3735	2	echo 'build*/' >> .gitignore	code	sh
3736	1	If `cmake` is not invoked from the same directory as the `CMakeLists.txt` file, it’s possible to supply a separate command-line argument, `-S`, and a path to where that file lives.	text	txt
3737	1	Configure and Generate stages both happen when we run:	text	txt
3737	3	The Build step requires a new command:	text	txt
3738	1	The underlying build system is Make in Linux. On Windows, the Visual Studio/MSBuild project files will be generated and then built.	text	txt
3739	1	Make is referred to as what is called single-config, while Visual Studio is multi-config.	text	txt
3740	1	cmake_minimum_required(VERSION 3.30.0)\nproject(project LANGUAGES CXX)\nset(CMAKE_CXX_STANDARD 26)\nadd_executable(program)\ntarget_sources(program PRIVATE main.cpp)	code	cmake
3741	1	Essentially policies are a way for the CMake maintainers to avoid breaking changes for projects as new versions of CMake are rolled out.	text	txt
3742	1	A target is usually an executable or a library. We can also create special custom target commands. Targets make it possible to encapsulate a set of properties and behaviors together.	text	txt
3743	1	project(<name> VERSION <version> LANGUAGES <language>... DESCRIPTION <description> HOMEPAGE_URL <url>)	code	cmake
3743	2	When project does not use programming languages, `NONE` should be specified. When `LANGUAGES` not specified, `C` and `CXX` are enabled by default.	text	txt
3744	1	- `PROJECT_NAME`, `CMAKE_PROJECT_NAME`\n- `PROJECT_IS_TOP_LEVEL`\n- `PROJECT_SOURCE_DIR`\n- `PROJECT_BINARY_DIR`\n- `PROJECT_VERSION`, `CMAKE_PROJECT_VERSION`\n- `PROJECT_VERSION_MAJOR`, `CMAKE_PROJECT_VERSION_MAJOR`\n- `PROJECT_VERSION_MINOR`, `CMAKE_PROJECT_VERSION_MINOR`\n- `PROJECT_VERSION_PATCH`, `CMAKE_PROJECT_VERSION_PATCH`\n- `PROJECT_VERSION_TWEAK`, `CMAKE_PROJECT_VERSION_TWEAK`\n- `PROJECT_LANGUAGES`, `CMAKE_PROJECT_LANGUAGES`\n- `PROJECT_DESCRIPTION`, `CMAKE_PROJECT_DESCRIPTION`\n- `PROJECT_HOMEPAGE_URL`, `CMAKE_PROJECT_HOMEPAGE_URL`	text	txt
3745	1	Variables like `PROJECT_NAME` belongs to the project scope but the project might not be the top level project. In case we want to get the top level project variables we should prefix the variable with `CMAKE_`.	text	txt
3745	2	message(${PROJECT_NAME}) # current project	code	cmake
3745	3	message(${CMAKE_PROJECT_NAME}) # top level project	code	cmake
3746	1	executables, libraries, and custom commands.	text	txt
3746	2	add_executable()	code	cmake
3746	3	add_library()	code	cmake
3746	4	add_custom_command()	code	cmake
3747	1	target_compile_features(<target> PRIVATE cxx_std_23 cxx_restrict)	code	cmake
3748	1	cmake -G Ninja -B build-release	code	sh
3748	2	cmake -G "Unix Makefiles" -B build-release	code	sh
3749	1	When switching to another generator, the binary directory should be rebuilt.	text	txt
3749	2	cmake -G Ninja -B build-release	code	sh
3749	3	cmake -G "Unix Makefiles" -B build-release --fresh	code	sh
3749	4	This option was added in 3.24 release.	text	txt
5455	1	High level user interface is provided by highgui to create windows, handle mouse events, keyboard, and more.	text	md
3737	2	cmake -B build	code	sh
3737	4	cmake --build build	code	sh
3750	1	To avoid overwriting release configurations with debug info, it is best to separate each configuration by different binary directories.	text	txt
3750	2	cmake -G Ninja -B build-release -D CMAKE_BUILD_TYPE=Release	code	sh
3750	3	cmake --build build-release	code	sh
3750	4	cmake -G Ninja -B build-debug -D CMAKE_BUILD_TYPE=Debug	code	sh
3750	5	cmake --build build-debug	code	sh
3751	1	Multi-config generators will create subdirectories inside the build folder. In case of Ninja Multi-Config, binary directories will be `Debug`, `Release`, `RelWithDebInfo`.	text	txt
3751	2	cmake -G "Ninja Multi-Config" -B build	code	sh
3751	3	cmake --build build --config Debug	code	sh
3751	4	cmake --build build --config Release	code	sh
3752	1	1. Copy the third-party library into source directory.\n2.  If third-party project is using CMake, it’s possible to use a feature called `add_subdirectory` to add that library relatively cleanly. Any modifications will make future upgrades incredibly painful. A `LICENSE` file exists in that library’s root folder.\n3. Git submodules have the advantage of keeping the source files of third-party dependencies out of project but submodules can make cloning and updating the project more complex.\n4. `FetchContent` solves all of these problems, keeping good hygiene between code and dependencies and avoiding unwanted complexity or maintenance headaches.	text	txt
3753	1	FetchContent allows us to keep the source of any third-party dependency out of codebase. A target can depend on the targets provided by the dependency at configure time. The dependency will be built at the same time as the project.	text	txt
3754	1	The build artifacts will added to a folder called `_deps` inside the build directory.	text	txt
3755	1	When building using `FetchContent` we are building dependencies at the same time as the project. This often adds unnecessary work and makes it difficult to rebuild the project without also rebuilding the dependencies.	text	txt
3755	2	Dependencies might become publicly inaccessible by removal or renaming.	text	txt
3755	3	If a dependency we wish to use doesn’t currently have CMake support, we can’t use it with `FetchContent`.	text	txt
3756	1	include(FetchContent)\nFetchContent_Declare(<name> GIT_REPOSITORY <url> GIT_TAG <tag>)\nFetchContent_MakeAvailable(<name>)\ntarget_link_libraries(<target> PRIVATE <name>)	code	cmake
3757	1	If you are developing an application and a library at the same time, and they are both closely related, it can be tedious to keep the application in sync when making small incremental changes to the library. You need to commit your changes, push them to the remote repository, and then pull the changes down again in the application project. A better approach is to tell FetchContent to look directly at that source folder instead of downloading the dependency and storing it locally.	text	txt
3757	2	This is meant as a temporary convenience and isn’t something to push to your main branch.	text	txt
3757	3	FetchContent_Declare(<name> SOURCE_DIR <path>)	code	cmake
3758	1	Multiple dependencies can be listed.	text	txt
3758	2	FetchContent_MakeAvailable(<name>...)	code	cmake
3759	1	`FetchContent_MakeAvailable` is actually an abstraction over several lower-level CMake commands like `FetchContent_GetProperties`, `FetchContent_Populate`, etc. The CMake documentation recommends using `FetchContent_MakeAvailable` unless there is a good reason not to.	text	txt
3760	1	To enable or disable features of an imported library, add cache values after declaration and before making them available in the project.	text	txt
3760	2	FetchContent_Declare(<name> GIT_REPOSITORY <link> GIT_TAG <tag>)\nset(WITH_TEST ON CACHE BOOL "Enable testing")\nset(WITH_UI OFF CACHE BOOL "Enable User Interface")\nFetchContent_MakeAvailable(<name>)	code	cmake
3761	1	To ensure an application can include headers, we should use public headers. This is great because it means clients don’t need to mess around setting their own include directories; they just link against the target and inherit this property automatically.	text	txt
3761	2	target_include_directories(<target> public ${CMAKE_CURRENT_SOURCE_DIR}/include)	code	cmake
3762	1	The term generator expression refers to the time the expression is evaluated. Generator expressions are evaluated at project generation time, which happens as the second stage right after CMake configuration. Every time we’ve run `cmake -B build`, CMake first runs the configure step and then runs the generate step. This is where generator expressions are evaluated, and project files are created.	text	txt
3762	2	target_include_directories(<target> PUBLIC $<INSTALL_LOCAL_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>)	code	cmake
3763	1	This allows us to use different include paths based on whether we’re building the library or using it after it has been installed.	text	txt
3763	2	target_include_directories(<target> PUBLIC $<BUILD_LOCAL_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include> $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)	code	cmake
4163	1	Benefits of using `auto`:	text	txt
3764	1	The `BUILD_LOCAL_INTERFACE` generator expression is new in CMake 3.26 and it will only expand its contents when used by **another target in the same build system**, whereas `BUILD_INTERFACE` will expand its contents when used by **another target in the same build system** and when **the property is exported** using the `export` command. As we don’t intend to export our targets from the build tree, we’re opting for the more restrictive of the two commands.	text	txt
3764	2	target_include_directories(<target> PUBLIC $<BUILD_LOCAL_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)	code	cmake
3764	3	target_include_directories(<target> PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)	code	cmake
3765	1	FetchContent_Declare(<name> GIT_REPOSITORY <link> GIT_TAG <tag> SOURCE_SUBDIR <path>)	code	cmake
3766	1	Windows requires symbols from a shared library to be explicitly exported; otherwise, they are hidden, and they’re only available internally to the library. This contrasts with macOS and Linux, where all symbols are usually exported by default.	text	txt
3766	2	include(GenerateExportHeader)\ngenerate_export_header(<target> BASE_NAME <name>)	code	cmake
3766	3	This will create the `<name>_export.h` header file in the build directory. This brings us back to changing `target_include_directories()` to also include the build directory.	text	txt
3766	4	target_include_directories(<target> PUBLIC $<BUILD_LOCAL_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include;${CMAKE_CURRENT_BINARY_DIR}>)	text	txt
3767	1	The absolute path of where the library can be found when it is built is baked into the application.	text	txt
3767	2	set_target_properties(<target> PROPERTIES BUILD_RPATH "$<$<PLATFORM_ID:Linux>:$ORIGIN>$<$<PLATFORM_ID:Darwin>:@loader_path>")	code	cmake
3768	1	set_target_properties(<target> PROPERTIES C_VISIBILITY_PRESET hidden VISIBILITY_INLINES_HIDDEN ON C_STANDARD_REQUIRED ON C_EXTENSIONS OFF)	code	cmake
3768	2	Arguably, setting the language standard is more intuitive this way:	text	txt
3768	3	target_compile_features(<target> PRIVATE c_std_17)	code	cmake
3769	1	We’re not technically linking against the library, but we must add the target as a dependency so that the include search paths for our target get populated.	text	txt
3769	2	target_include_directories(<lib> INTERFACE $<BUILD_LOCAL_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>)	code	cmake
3770	1	{\n    "version": 8,\n    "cmakeVersion": {\n        "major": 3,\n        "minor": 30,\n        "patch": 0\n    },\n    "configurationPreset": [\n        {\n            "name": "amd64-release",\n            "displayName": "amd64 Release Configuration",\n            "generator": "Ninja Multi-Config",\n            "binaryDir": "${sourceDir}/build-release",\n            "cacheVariables": {\n                "WITH_TESTS": "ON"\n            }\n        }\n    ]\n}	code	json
3771	1	Macros are variables in presets that will be expanded to meaningful values.	text	txt
3771	2	${sourceDir}	code	cmake
3771	3	${binaryDir}	code	cmake
3771	4	${presetName}	code	cmake
3772	1	A small selection of pairs are not inherited, including `name`, `displayName`, `description`, and `inherits` itself, but nearly everything else is.	text	txt
5213	1	Label is the string representation of the security context of a subject or an object in SELinux. Similar to what a context has, a label contains four components: user, role, type, and level.	text	md
5483	1	#include <ftxui/screen/screen.hpp>\n#include <ftxui/screen/color.hpp>\n\nint main()\n{\n    ftxui::Screen screen{ftxui::Screen::Create(\n        ftxui::Dimension::Full(),\n        ftxui::Dimension::Fixed(10)\n    )};\n    screen.Print();\n}	code	cpp
3772	2	{\n    "version": 8,\n    "configurationPreset": [\n        {\n            "name": "base",\n            "hidden": true,\n            "binaryDir": "${sourceDir}/build-${presetName}"\n        },\n        {\n            "name": "amd64-release",\n            "inherits": "base",\n            "cacheVariables": {\n                "TARGET_PLATFORM": "amd64"\n            }\n        },\n        {\n            "name": "arm64-release",\n            "inherits": "base",\n            "cacheVariables": {\n                "TARGET_PLATFORM": "arm64"\n            }\n        }\n    ]\n}	code	json
3773	1	Manipulating predefined presets by library authors are easy but we will be back to the problem of typing long commands. Customized configurations can be written in user specific presets.	text	txt
3773	2	{\n    "version": 8,\n    "configurationPresets": [\n        {\n            "name": "amd64-release-static",\n            "inherits": amd64-release",\n            "generator": "Ninja Multi-Config",\n            "cacheVariables": {\n                "SHARED_LIBS": ON\n            }\n        }\n    ]\n}	code	json
3774	1	{\n    "version": 8,\n    "configurationPresets": [\n        {\n            "name": "amd64-linux-release",\n            "displayName": "AMD64 Linux Specific Release"\n            "binaryDir": "${sourceDir}/build-${presetName}",\n            "condition": {\n                "type": "equals",\n                "lhs": "${hostSystemName}",\n                "rhs": "Linux"\n            }\n        }\n    ]\n}	code	json
3775	1	{\n    "version": 8,\n    "configurationPresets": [ ],\n    "buildPresets": [\n        {\n            "name": "shared",\n            "configurePreset": "shared",\n            "configuration": "Release"\n        },\n        {\n            "name": "static",\n            "configurePreset": "static",\n            "configuration": "Release"\n        }\n    ]\n}	code	json
3775	2	A better way for changing configuration type of presets is to use `--config` option:	text	txt
3775	3	cmake --build --preset static --config Debug	code	sh
3776	1	{\n    "version": 8,\n    "workflowPresets": [\n        {\n            "name": "static",\n            "steps": [\n                {\n                    "type": "configure",\n                    "name": "static"\n                },\n                {\n                    "type": "build",\n                    "name": "static"\n                }\n            ]\n        }\n    ]\n}	code	json
3776	2	Configuration cannot be overwritten by command options in workflows.	text	txt
3777	1	cmake -B build -D CMAKE_INSTALL_PREFIX=install	code	cmake
3778	1	cmake --build build --config Release --target install	code	cmake
3778	2	cmake --install build --config Release	code	cmake
3779	1	When building, the default configuration is `Debug`.	text	txt
3779	2	cmake --build build	code	cmake
3779	3	But CMake will look for `Release` configuration on installing.	text	txt
3779	4	cmake --install build	code	cmake
3780	1	cmake --install build --prefix install	code	cmake
3781	1	Config mode, Module mode.	text	txt
3781	2	find_package(<lib> CONFIG REQUIRED)	code	cmake
3781	3	find_package(<lib> REQUIRED)	code	cmake
3782	1	Config mode is the mode to use when the dependency has itself been built and installed using CMake. As part of the install process, either `<package>-config.cmake` or `<Package>Config.cmake` will be created by CMake. This file includes the location of built artifacts, include paths and etc. to import and use the library.	text	txt
3783	1	CMake looks for a file called `Find<Package>.cmake` in several locations. Manual locations can be added to `CMAKE_MODULE_PATH` to make them visible to CMake.	text	txt
3784	1	`Find<Package>.cmake` files are hand crafted and hard to write. But modules are helpful when we want to import a project that is not built by CMake.	text	txt
3785	1	- Events: causes that trigger workflows\n- Jobs: sequence of tasks that could run in parallel or sequentially\n- Steps: individual tasks running in sequence	text	txt
3786	1	- Code events: `push`, `pull_request`, `pull_request_review`\n- Issue events: `issues`, `issue_comment`, `milestone`\n- Scheduled events: `schedule`\n- Manual events: `workflow_dispatch`\n- Repository events: `repository`, `team`, `organization`\n- External events: `repository_dispatch`, `workflow_run`, `page_build`, `registry_package`	text	txt
3787	1	- `ubuntu-latest`\n- `macos-latest`\n- `windows-latest`\n- `self-hosted`	text	txt
3788	1		text	txt
3788	2	name: Workflow\non: [push, workflow_dispatch]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      # ...	code	yml
3789	1	Jobs within a workflow run in parallel by default to speed up the overall execution time of the workflow. However, we can define dependencies between jobs using the `needs` keyword:	text	txt
3789	2	name: Workflow\non: [push, workflow_dispatch]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      # ...\n  test:\n    runs-on: ubuntu-latest\n    needs: build\n    steps:\n      # ...\n  deploy:\n    runs-on: ubuntu-latest\n    needs: test\n    steps:\n      # ...	code	yml
5455	2	One of the important use cases are to showing the images and drawing shapes on them.	text	md
3790	1	- Shell commands: running directly on runners\n- Built-in actions: provided by GitHub to do specific workflow actions\n- Community and third-party actions: simplifies common tasks provided by the community	text	txt
3791	1	- `name`: optional name for each step to be displayed in logs\n- `run`: the command to execute when step type is a shell command\n- `uses`: the action identifier to use when step type is a built-in action\n- `with`: set of input parameters to pass to the action in key-value pairs\n- `if`: a conditional expression that determines whether the step should be executed	text	txt
3791	2	name: Workflow\non: [push, workflow_dispatch]\njobs:\n  checkout:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n  build:\n    runs-on: ubuntu-latest\n    needs: checkout\n    steps:\n      - name: Configure\n        run: cmake -S project -B build -D CMAKE_BUILD_TYPE=Release\n      - name: Build\n        run: cmake --build build --parallel\n  test:\n    runs-on: ubuntu-latest\n    needs: build\n    steps:\n      - name: Test\n        run: ctest --testdir build\n  deploy:\n    runs-on: ubuntu-latest\n    needs: build\n    steps:\n      - name: Deploy\n        run: cpack -G "DEB;RPM" --config build/CPackConfig.cmake\n  docs:\n    runs-on: ubuntu-latest\n    needs: build\n    steps:\n      - name: Generate Documentation\n        if: github.ref_name == 'release'\n        run: ctest --testdir build	code	yml
3792	1	GitHub Actions does not checkout the source repository by default, by doing so is as easy as using `checkout` action:	text	txt
3792	2	name: Workflow\non: [push, workflow_dispatch]\njobs:\n  checkout:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4	code	yml
5483	2	Alternatively, we can print a `ftxui::Screen` object as follows:	text	md
3793	1	name: Workflow\non: [push, workflow_dispatch]\njobs:\n  setup-node:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/setup-node@v4\n        with:\n          node-version: latest	code	yml
3794	1	name: Workflow\npermissions:\n  contents: write\non:\n  tags:\n    - v*\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/create-release@v4\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref_name }}\n          release_name: "Release ${{ github.ref_name }}"\n          body: "Release notes for ${{ github.ref_name }}"\n          draft: false\n          prerelease: false	code	yml
5075	1	\\\\textit{Italic text}	code	txt
3795	1	The `GITHUB_TOKEN` is provided by GitHub Actions, we do not need to create one.	text	txt
3795	2	name: Workflow\non: [push, workflow_dispatch]\npermissions:\n  contents: write\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/create-release@v1\n        with:\n          tag_name: ${{ github.ref_name }}\n          release_name: "Release ${{ github.ref_name }}"\n          body: "Release notes for ${{ github.refname }}"\n          prerelease: false\n          draft: false\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}	code	yml
3796	1	The `GITHUB_TOKEN` is provided by GitHub Actions, we do not need to create one.	text	txt
3796	2	name: Workflow\non: [push, workflow_dispatch]\npermissions:\n  contents: write\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/create-release@v1\n        with:\n          tag_name: ${{ github.ref_name }}\n          release_name: "Release ${{ github.ref_name }}"\n          body: "Release notes for ${{ github.refname }}"\n          prerelease: false\n          draft: false\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      - uses: actions/upload-release-asset@v1\n        with:\n          upload_url: ${{ steps.create-release.outputs.upload_url\n          asset_path: ${{ env.package-path }}\n          asset_name: ${{ env.package-name }}\n          asset_content_type: ${{ env.package-type }}\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}	code	yml
3797	1	We can for example cache the npm build steps by hashing `package.json` file.	text	txt
3797	2	name: Workflow\non: [push, workflow_dispatch]\njobs:\n  cache:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Save Cache\n        uses: actions/cache@v2\n        with:\n          path: ~/.npm\n          key: ${{ runner.os }}-cache-${{ hashFiles('**/package-lock.json') }}\n      - name: Restore Cache\n        uses: actions/cache@v2\n        with:\n          path: ~/.npm\n          restore-key: |\n            ${{ runner.os }}-npm-\n          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}	code	yml
3798	1	name: Workflow\non: [push, workflow_dispatch]\njobs:\n  upload:\n    runs-on: ubuntu-latest\n    needs: build\n    steps:\n      - uses: actions/upload-artifact@v4\n        with:\n          name: artifacts\n          path: build/\n          retention-days: 1	code	yml
3799	1	name: Workflow\non: [push, workflow_dispatch]\njobs:\n  download:\n    runs-on: ubuntu-latest\n    needs: build\n    steps:\n      - uses: actions/download-artifact@v4\n        with:\n          name: artifacts\n          path: assets/\n        run: ls assets/	code	yml
3800	1	name: Workflow\non: [push, workflow_dispatch]\njobs:\n  delete:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: geekyeggo/delete-artifact@v5\n        with:\n          name: artifacts	code	yml
3801	1	name: Workflow\non: [push, workflow_dispatch]\njobs:\n  conditional:\n    runs-on: ubuntu-latest\n    if: github.event_name == 'push'\n    steps:\n      - uses: actions/checkout@v4	code	yml
5222	2	git clone https://github.com/nektos/act.git /usr/local/src\ncd /usr/local/src/act\n./install\nsudo cp /usr/local/src/act/bin/act /usr/local/bin/act	code	sh
3802	1	name: Workflow\non: [push, workflow_dispatch]\njobs:\n  immortal:\n    runs-on: ubuntu-latest\n    steps:\n      - id: test\n        run: ./build/test-program\n        continue-on-failure: true\n      - if: steps.test.outcome == 'failure'\n        run: echo "Test Failed"	code	yml
3803	1		text	txt
3803	2	name: Workflow\non: [push, workflow_dispatch]\njobs:\n  output:\n    runs-on: ubuntu-latest\n    steps:\n      - id: generate-random\n        run: echo "number=$(echo $RANDOM)" >> "$GITHUB_OUTPUT"\n      - run: echo "number: ${{ steps.generate-random.outputs.number }}"	code	yml
3804	1	To have outputs for a job, we need to define it at the job level.	text	txt
3804	2	name: Workflow\non: [push, workflow_dispatch]\njobs:\n  producer:\n    runs-on: ubuntu-latest\n    outputs:\n      number: ${{ steps.generate-random.outputs.number }}\n    steps:\n      - id: generate-random\n        run: echo "number=$(echo $RANDOM)" >> "$GITHUB_OUTPUT"\n  consumer:\n    runs-on: ubuntu-latest\n    needs: producer\n    steps:\n      - run: echo "number: ${{ needs.producer.outputs.number }}"	code	yml
3805	1		text	txt
3805	2	name: Workflow\non: [push, workflow_dispatch]\njobs:\n  build:\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest, macos-latest]\n        node: [14, 16]\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v4\n      - id: cache\n        uses: actions/cache@v2\n        with:\n          path: ~/.npm\n          key: ${{ runner.os }}-npm-${{ matrix.node }}-${{ hashFile('**/package-lock.json') }}	code	yml
4348	2	// C++17\nusing file_time_type = std::chrono::time_point</*trivial-clock*/>;	code	cpp
3806	1	In the past, PostgreSQL supported an instance-wide configuration variable called `old_snapshot_threshold`.	text	txt
3806	2	The community has removed this feature and introduced a new variable called `transaction_timeout`, which can be set per session.	text	txt
3806	3	The default value of this new setting is `unlimited`, or more accurately, `0`.	text	txt
3807	1	If you want to limit the duration of your transaction, you can simply set `transaction_timeout` inside your session:	text	txt
3807	2	SET transaction_timeout TO 5000;	code	sql
3807	3	BEGIN;	code	sql
3807	4	SELECT now();	code	sql
3808	1	Imagine somebody changes your data structure by creating a table, an index, or some other kind of object. An event trigger allows us to react to those events and execute code as needed.	text	txt
3808	2	SHOW event_triggers;	code	sql
3808	3	Event triggers will fire for all applicable statements.	text	txt
3809	1	In PostgreSQL, a trigger will always launch a function. Therefore, the first step is to come up with the function we want to run.	text	txt
3810	1	Login trigger is a trigger that is supposed to track login attempts in a table.	text	txt
3810	2	We should return event_trigger type when we want to trigger events.	text	txt
3810	3	CREATE TABLE user_logins (\n    id serial,\n    who text\n);	code	sql
5483	3	std::cout << screen.ToString();	code	cpp
3810	4	CREATE FUNCTION on_login_proc()\nRETURNS event_trigger AS\n$$\nBEGIN\n    INSERT INTO user_logins (who)\n    VALUES (SESSION_USER);\n    RAISE NOTICE 'User logged in';\nEND;\n$$ LANGUAGE plpgsql;	code	sql
3810	5	The return value of this function is a special data type specifically designed for this purpose.	text	txt
3810	6	Then we create the event itself:	text	txt
3810	7	CREATE EVENT TRIGGER on_login_event\nON ddl_command_start\nEXECUTE FUNCTION on_login_proc();	code	sql
3810	8	We can then enable the trigger:	text	txt
3810	9	ALTER EVENT TRIGGER on_login_trigger ENABLE ALWAYS;	code	sql
3811	1	Key-Value pairs, where key can only contain alphanumeric values with dash and underscore, and value can contain integer type, string type with single or double quotes.	text	txt
3811	2	name: Release Workflow	code	yml
3811	3	Dictionaries are nested objects than end in key-value pairs	text	txt
3811	4	on:\n  do-something:\n    runs-on: ubuntu-24.04	code	yml
3811	5	A Sequence is a dictionary key that each of its entries start with a dash, and after dash can be any other type.	text	txt
3811	6	steps:\n  - name: Configure\n    run: echo configuring\n  - name: Build\n    run: echo building	code	yml
3812	1	A sequence of tasks that are defined at a repository level and start executing these sequence of tasks when gets triggered by one or more conditions defined within the workflow.	text	txt
3812	2	Each workflow might have one or a few jobs. Jobs define the sequence of tasks that are supposed to run in the workflow. Jobs in a workflow run in parallel, unless we define a dependency between them.	text	txt
3812	3	Steps are the sequence of actions that run in a job.	text	txt
3812	4	name: Workflow\non: push\njobs:\n  release:\n    name: "Sequence of tasks are here"\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo "A task runs here"\n  validate:\n    name: "Second job that runs in parallel"\n    runs-on: ubuntu-latest\n    steps:\n      - run; echo "Validate some stuff"	code	yml
3813	1	When all of the tasks within all jobs exit successfully with 0 error code, the workflow exits successfully.	text	txt
3813	2	name: Workflow\non: push\njobs:\n  release:\n    name: "Sequence of tasks are here"\n    runs-on: ubuntu-latest\n    steps:\n      - run: exit 1\n      - run: echo "This job fails and you will never see this output"	code	yml
3814	1	- Repository events: `push`, `issues`, `pull_request`, `pull_request_review`, `fork`\n- Manual trigger: triggered via UI, triggered via API, triggered from another workflow\n- Schedule: cron jobs	text	txt
3814	2	name: Workflow\non:\n  push:\n  issues:\n  pull_request:\n  pull_request_review:\n  fork:\n  workflow_dispatch:\n  schedule:\n    - cron: "0 * * * *"\njobs:\n  first-job:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo ${{ github.event_name }}	code	yml
3815	1	Ubuntu, MacOS, Windows	text	list
3815	2	name: Workflow\non: workflow_dispatch\njobs:\n  linux:\n    runs-on: ubuntu-latest\n    steps:\n      - run: uname -s\n  windows:\n    runs-on: windows-latest\n    steps:\n      - shell: bash\n        run: uname -s\n  macos:\n    runs-on: macos-latest\n    steps:\n      - run: uname -s	code	yml
3816	1	Actions are prebuilt jobs ready to be used. Actions might take inputs and generate outputs.	text	txt
3816	2	name: Workflow\non: workflow_dispatch\njobs:\n  checkout:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4	code	yml
3817	1	- `branches`, `branches_ignore`\n- `tags`, `tags_ignore`\n- `paths`, `paths_ignore`	text	txt
3817	2	name: Workflow\non:\n  push:\n    branches:\n      - release\n    tags:\n      - v*\n    paths:\n      - src/**\n      - include/**\n    paths-ignore:\n      - docs/**\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo ${{ github.ref }}	code	yml
3818	1	\n- `assigned`, `unassigned`\n- `labeled`, `unlabeled`\n- `opened`\n- `edited`\n- `closed`\n- `reopened`\n- `synchronize`\n- `converted_to_draft`\n- `locked`, `unlocked`\n- `ready_for_review`, `review_requested`, `review_request_removed`\n- `auto_merge_enabled`, `auto_merge_disabled`	text	txt
3818	2	name: Workflow\non:\n  pull_request:\n    types:\n      - opened\n      - reopened\n      - sychronize\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo ${{ github.ref }}	code	yml
3819	1	name: Workflow\non:\n  pull_request:\n    types: [opened, sychronize]\n    branches:\n      - main\n      - releases/**\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo ${{ github.ref }}	code	yml
3820	1	Not all commands might be available on all distributions.	text	txt
3820	2	lshw	code	sh
3820	3	lspci	code	sh
3820	4	lsusb	code	sh
3820	5	lsblk	code	sh
3820	6	lscpu	code	sh
3820	7	lsdev	code	sh
3821	1	There are many useful options for this command.	text	txt
3821	2	hdparm -I /dev/sda	code	sh
3822	1	Using `strace` we can trace system calls within a program.	text	txt
3822	2	strace -c date	code	sh
3822	3	strace bash -c "cd /lookforme" |& grep "/lookforme"	code	sh
3823	1	journalctl -k -f	code	sh
3824	1	The `proc` and `sysfs` are virtual file systems that do not store anything on disk but are only available on RAM.	text	txt
3824	2	The `/proc` directory holds all the process's information.	text	txt
3825	1	cat /proc/cmdline	code	sh
3825	2	journalctl -k | grep BOOT_IMAGE	code	sh
3825	3	When the kernel does not know a parameter, it passes the argument to user space for user analysis and utilities.	text	txt
3826	1	cat /proc/meminfo	code	sh
3827	1	The `/sys` mount point has the `sysfs` file system and holds the information about the hardware detected by the kernel.	text	txt
3828	1	The `debugfs` file system is mounted in `/sys/kernel/debug` and provides debugging information.	text	txt
3829	1	The tracing mounts in `/sys/kernel/tracing` which provides powerful tracing functionality.	text	txt
3830	1	Each loaded kernel module contains information in the `/sys/module` directory.	text	txt
3832	2	For example, for network devices:	text	txt
3832	3	/sys/class/net	code	sh
3833	1	strace -e openat lspci	code	sh
3835	1	Device files are the entry to device drivers from user spaces and a way to communicate to the kernel.	text	txt
3835	2	Device files have major number, minor number, and type (c or d).	text	txt
3835	3	Device files are created when the driver is loaded.	text	txt
3836	1	Character drivers can implement `open()`, `write()` `read()` and `ioctl()` so that user space processes can open, read from and write into the device file when possible.	text	txt
3836	2	For example, the following device file will call for `open()` and `write()` functions.	text	txt
3836	3	echo > /dev/null	code	sh
3837	1	strace cat /dev/null	code	sh
3838	1	strace bash -c "echo > /dev/zero"	code	sh
3839	1	Grand Unified Bootloader loads into RAM after BIOS or self-test (POST). Then it will load the kernel and initial ramdisk to boot up the system.	text	txt
3840	1	GRUB can find kernel by finding its file.	text	txt
3842	2	Generally, GRUB customizations are written inside this file.	text	txt
3843	1	grub2-mkconfig -o /boot/grub/grub.cfg	code	sh
3845	1	Usually console access is read-only in kernel parameters as `ro` but we can change it to `rw`.	text	txt
3845	2	linux /vmlinuz-6.13.0 rw	code	sh
3846	1	Documentation/kernel-parameters.txt	text	txt
3846	2	Many of parameters are registered with `_setup()` inside the kernel source.	text	txt
3847	1	crashkernel	code	sh
3848	1	enforcing	code	sh
3849	1	ftrace	code	sh
3850	1	clearcpuid	code	sh
3851	1	init=/usr/bin/bash	code	sh
3851	2	And to change the default to run in the ramdisk:	text	txt
3851	3	rdinit	code	sh
3852	1	Initial RAM disk or initrd mounts the root file system in `/` so that the rest of the system can be loaded.	text	txt
3853	1	The very first process in the user space that will be started by the kernel.	text	txt
3853	2	When no program named init could be found, kernel will try to start a shell.	text	txt
3853	3	On desktops and modern systems, the init is a link to systemd.	text	txt
3854	3		code	sh
3855	1	`.ko` and when compressed `.zst`.	text	txt
3857	2	Moules are organized in different subdirectories.	text	txt
3858	1	wc -l /lib/modules/$(uname -r)/modules.dep	code	sh
3858	2	Each loaded module has an entry inside module dependencies file.	text	txt
3859	1	lsmod	code	sh
3860	1	rmmod <module>	code	sh
3861	1	modinfo <module>	code	sh
3862	1	depmod	code	sh
3863	1	insmod <module>.ko	code	sh
3864	1	modprobe	code	sh
3864	2	This command uses module dependency tree under `/lib/modules/$(uname -r)` to load dependent modules.	text	txt
3865	1	Some modules are loaded inside initrd but then never used in root file system.	text	txt
3866	1	There should already be a Makefile in the working directory and the source file for the module.	text	txt
3866	2	obj-m := practice.o	code	Makefile
5261	1	hostname -i	code	sh
3866	3	#include <linux/init.h>\n#include <linux/module.h>\n#include <linux/sched.h>\n\nstatic int prepare_practice(void)\n{\n    printk("Practice module loaded\\n");\n    return 0;\n}\n\nstatic void remove_practice(void)\n{\n    printk("Practice module unloaded\\n");\n}\n\nmodule_init(prepare_practice);\nmodule_exit(remove_practice);\nMODULE_LICENSE("GPL");	code	c
3866	4	make -C /usr/src/kernels/$(uname -r)/ M=$PWD modules	code	sh
3866	5	make -C /lib/modules/$(uname -r)/build/ M=$PWD modules	code	sh
3866	6	sudo insmod practice.ko	code	sh
3866	7	sudo rmmod practice	code	sh
3866	8	sudo journalctl -k	code	sh
3867	1	Initialization function but returning non-zero should indicate a problem in initialization. Each error code means something specific.	text	txt
3868	1	make config	code	sh
3868	2	make menuconfig	code	sh
3868	3	make nconfig	code	sh
3868	4	make xconfig	code	sh
3868	5	make gconfig	code	sh
3869	1	make clean	code	sh
3869	2	make mrproper	code	sh
3869	3	make distclean	code	sh
3870	1	make all	code	sh
3870	2	make bzImage*	code	sh
3870	3	make vmlinux*	code	sh
3870	4	make modules*	code	sh
3871	1	make INSTALL_MOD_PATH=/ modules_install	code	sh
3871	2	make INSTALL_PATH=/sbin install	code	sh
3872	1	make htmldocs	code	sh
3872	2	make SPHINXDIRS="scheduler" pdfdocs	code	sh
3872	3	make SPHINXDIRS="locking" pdfdocs	code	sh
3873	1	make cscope	code	sh
3873	2	make tags	code	sh
3874	1	grep -rli sys_read include	code	sh
3874	2	cscope -d	code	sh
3874	3	nvim -t sys_read	code	sh
3875	1	`drivers/char/mem.c` file implements `read_null()` and `write_null()` functions for `/dev/null` device.	text	txt
3876	1	ip addr	code	sh
3876	2	ethtool -i wlp1s0	code	sh
3876	3	modinfo iwlwifi	code	sh
3877	1	make bzImage	code	sh
3877	2	make uImage	code	sh
3877	3	make vmlinux	code	sh
3878	1	make modules	code	sh
3879	1	make modules_install	code	sh
3879	2	This command will install all kernel modules with their hierarchies inside `/lib/modules/$(uname -r)/` directory.	text	txt
3879	3	make install	code	sh
3879	4	Installs bzImage into `/boot` by renaming it to `vmlinuz-$(uname -r)`.	text	txt
3879	5	Also might install initramfs or initrd.	text	txt
3880	1	make M=$PWD -C /usr/src/kernels/$(uname -r) clean	code	sh
3881	1	make CROSS_COMPILE=arm-linux-gnueabi- ARCH=arm uImage	code	sh
3882	1	If the function makes use of any of the three keywords `co_await`, `co_return`, `co_yield`, the compiler will treat this function very differently.	text	txt
3883	1	Coroutines are actually a factory pattern for generating the real coroutine objects.	text	txt
3883	2	return_type create_coroutine();	code	cpp
3884	1	A coroutine generator is a function that returns with either `co_return` or `co_yield` keyword.	text	txt
5484	1	When accessing pixels of a screen, row and column indices start from 0.	text	md
3884	2	sequence_generator make_sequence_generator()\n{\n    int a{1};\n    int b{1};\n    while (true)\n    {\n        co_yield a;\n        a = std::exchange(b, a + b);\n    }\n}	code	cpp
3885	1	The return type is a structure with a few specific methods and another nested structure behaving as a promise type. The promise type is an object that will be automatically created by the compiler.	text	txt
4057	1	section .data\n    CONDITION equ 1	text	txt
3885	2	struct return_type\n{\n    struct promise_type\n    {\n        /* implementation functions */\n    };\n};	code	cpp
3886	1	The promise type is an object generated by the compiler and is the central intersection point for the coroutine code and the caller code.	text	txt
3887	1	The compiler implicitly calls the `get_return_object()` function inside the promise type when the coroutine code is executing.	text	txt
3887	2	struct return_type\n{\n    struct promise_type\n    {\n        return_type get_return_object() { return {}; }\n    };\n};	code	cpp
3887	3	It is up to the promise to construct the return object that will be handed back to the caller.	text	txt
3887	4	The compiler will store this return object somewhere, and when the coroutine reaches its first suspension point and the control flow is back to the caller, then the caller will receiver this object as the return object.	text	txt
3888	1	The `void return_void()` function is the customization point where we reach the `co_return` statement.	text	txt
3888	2	struct return_type\n{\n    struct promise_type\n    {\n        return_type get_return_object() { return {}; }\n        void return_void() { }\n    };\n};	code	cpp
3888	4	struct return_type\n{\n    struct promise_type\n    {\n        return_type get_return_object() { return {}; }\n        void return_value(T) { }\n    };\n};	code	cpp
3889	1	The function `void unhandled_exception()` is the function that handles exceptions in a coroutine.	text	txt
3889	2	struct return_type\n{\n    struct promise_type\n    {\n        return_type get_return_object() { return {}; }\n        void return_void() { }\n        void unhandled_exception() { }\n    };\n};	code	cpp
3890	1	The functions `initial_suspend()` and `final_suspend()` are the customization points where allow us to execute some code when the coroutine first starts executing, and then shortly before the coroutine ends executing normally.	text	txt
3890	2	struct return_type\n{\n    struct promise_type\n    {\n        return_type get_return_object() { return {}; }\n        void return_void() { }\n        void unhandled_exception() { }\n\n        std::suspend_always initial_suspend() { return {}; }\n        std::suspend_always final_suspend() noexcept { return {}; }\n    };\n};	code	cpp
3891	1	struct return_type\n{\n    struct promise_type\n    {\n    };\n};	code	cpp
3891	2	std::coroutine_traits<return_type, ...>\n{\n};	code	cpp
3888	3	Either we return nothing and we define the `return_void()` function, or the coroutine returns a value and we define the `return_value()` function:	text	txt
3892	2	suspend_read awaitable = async_read(socket, buffer);\nauto [ec, bytes_read] = co_await awaitable;	code	cpp
3892	3	The calls to the operator `co_await` are the opportunities for suspension. These are the only points where the compiler can pause the coroutine and hand the control flow back to the caller.	text	txt
3892	4	Similar to coroutine promises that provide hooks to control what happens at the start up or when returning from the coroutine, awaitables provide hooks to control what happens when we go into suspension.	text	txt
3893	1	Awaitables can be designed to not suspend at all, or always suspend on awaitable calls. Not all `co_await` calls necessarily suspends.	text	txt
3894	1	The function `await_ready()` returns a `bool` that indicates whether the work is already done before `co_await` call, and does it really need to suspend or not.	text	txt
3894	2	struct awaitable_type\n{\n    bool await_ready();\n};	code	cpp
3895	1	The function `await_suspend(std::coroutine_handle<>)` is the customization point where it will be executed shortly before the function suspends.	text	txt
3895	3	We can pass a coroutine handle with default template parameter, but we can also specialize it with a promise type:	text	txt
3896	1	When we decide to resume the coroutine, this function will be called to handle resuming the execution.	text	txt
3896	2	struct awaitable_type\n{\n    bool await_ready();\n    void await_suspend(std::coroutine_handle<>);\n    void await_resume();\n};	code	cpp
3876	4	/usr/src/kernels/$(uname -r)/drivers/net/wireless/intel/iwlwifi	code	sh
3898	1	The `resume()` function is responsible for resuming the execution. And the `destroy()` function is a handle to manage destruction of a coroutine externally, so that it cleans up earlier than the execution normally ends.	text	txt
3898	2	The two converting functions, can take promise object and hand the coroutine handle or wise versa.	text	txt
3898	3	struct std::coroutine_handle<promise_type>\n{\n    void resume() const;\n    void destroy() const;\n    promise_type& promise() const;\n    static coroutine_handle from_promise(promise_type&);\n};	code	cpp
3899	1	- **return type**: handles getting the execution back to the caller\n- **promise_type**: provides customization points for start up and shutdown\n- **awaitable type**: handles coroutine suspension points when we do `co_await` calls\n- **coroutine handle**: a pointer to the coroutine	text	txt
3900	1	The promise returns the coroutine handle.	text	txt
3900	2	struct return_type\n{\n    struct promise_type\n    {\n        return_type get_return_object() { return return_type{std::coroutine_handle<promise_type>::from_promise(*this)}; }\n        void return_void() { }\n        void unhandled_exception() { }\n        std::always_suspend initial_suspend() { }\n        std::always_suspend final_suspend() { }\n    };\n\n    std::coroutine_handle<promise_type> handle;\n    return_type(std::coroutine_handle<promise_type> handle): handle{handle} { }\n    void resume() { handle.resume(); }\n};	code	cpp
3901	1	Value types must be awaitable, meaning that they must have a few specific methods in order to be called by the coroutine:	text	txt
3901	2	struct value_type\n{\n    int value;\n    constexpr explicit value_type(int input): value{input} { }\n    constexpr bool await_ready() const noexcept { return false; }\n    constexpr void await_suspend() const noexcept { }\n    constexpr void await_resume() const noexcept { }\n};	code	cpp
3901	3	return_type create_coroutine()\n{\n    value_type v{1};\n    while (true)\n    {\n        co_await v;\n        v.value++;\n    }\n}	code	cpp
5095	1	mdadm --stop /dev/md0	code	txt
5484	2	Notice that the returned pixel is a reference to an existing object.	text	md
3902	1	template<typename Promise>\nstruct value_type\n{\n    int value;\n    constexpr explicit value_type(int input): value{input} { }\n    constexpr bool await_ready() const noexcept { return false; }\n    constexpr void await_suspend(std::coroutine_handle<Promise> handle) const noexcept { handle.promise().number = value; }\n    constexpr void await_resume() const noexcept { }\n};	code	cpp
3902	2	struct return_type\n{\n    struct promise_type\n    {\n        int number;\n        return_type get_return_object() { return return_type{std::coroutine_handle<promise_type>::from_promise(*this)}; }\n        void return_void() { }\n        void unhandled_exception() { }\n        std::suspend_always initial_suspend() { return {}; }\n        std::suspend_always final_suspend() noexcept { return {}; }\n        int yield_value(int value) { return value_type<promise_type>{input}; }\n    };\n    std::coroutine_handle<promise_type> handle;\n    return_type(std::coroutine_handle<promise_type> handle): handle{handle} { }\n    void print_value() { handle.resume(); std::cout << number << std::endl; }\n};	code	cpp
3902	3	return_type make_coroutine()\n{\n    co_yield 42;\n}	code	cpp
3902	4	int main()\n{\n    return_type coroutine = make_coroutine();\n    coroutine.print_value();\n}	code	cpp
3903	1	template<typename Promise>\nstruct value_type\n{\n    int value;\n    constexpr explicit value_type(int input): value{input} { }\n    constexpr bool await_ready() const noexcept { return false; }\n    constexpr void await_suspend(std::coroutine_handle<Promise> handle) const noexcept { handle.promise().number = value; }\n    constexpr void await_resume() const noexcept { }\n};	code	cpp
4163	2	* It is not possible to leave a variable uninitialized with `auto`.\n* It prevents narrowing conversion of data types. (?)\n* It makes generic programming easy.\n* It can be used where we don't care about types.	text	txt
4163	3	Preconditions of using `auto`:	text	txt
4163	4	* `auto` does not retain cv-ref qualifiers.\n* `auto` cannot be used for non-movable objects.\n* `auto` cannot be used for multi-word types like long long.	text	txt
5228	1	act -s name=value ...\nact --secret name=value ...	code	sh
3892	1	Awaitable type is a type that we can call `co_await` on. So a `co_await` is an operator that expects values as arguments. Any type that makes valid argument for `co_await` is awaitable.	text	txt
3895	2	struct awaitable_type\n{\n    bool await_ready();\n    void await_suspend(std::coroutine_handle<>);\n};	code	cpp
3895	4	struct awaitable_type\n{\n    bool await_ready();\n    void await_suspend(std::coroutine_handle<promise_type>);\n};	code	cpp
3897	1	struct awaitable_type\n{\n    bool await_ready() { return false; }\n    void await_suspend(std::coroutine_handle<>) { }\n    void await_resume() { }\n};	code	cpp
3903	2	struct return_type\n{\n    struct promise_type\n    {\n        int number;\n        return_type get_return_object() { return return_type{std::coroutine_handle<promise_type>::from_promise(*this)}; }\n        void return_void() { }\n        void unhandled_exception() { }\n        std::suspend_always initial_suspend() { return {}; }\n        std::suspend_always final_suspend() noexcept { return {}; }\n        int yield_value(int value) { return value_type<promise_type>{input}; }\n    };\n    std::coroutine_handle<promise_type> handle;\n    return_type(std::coroutine_handle<promise_type> handle): handle{handle} { }\n    void print_value() { handle.resume(); std::cout << number << std::endl; }\n    void provide(int input) { handle.promise().number = input; handle.resume(); }\n};	code	cpp
3903	3	return_type make_coroutine()\n{\n    int value = co_await 42;\n}	code	cpp
3903	4	int main()\n{\n    return_type coroutine = make_coroutine();\n    coroutine.print_value();\n}	code	cpp
3904	1	The configuration command which is only for configuration, and runtime functions which are the commands that can be performed on emails durin runtime.	text	txt
3905	1	set <var>=<value>	code	muttrc
3905	2	There is also another form of assignment only for yes/no values:	text	txt
3905	3	toggle <var>	code	muttrc
3906	1	These two commands are applicable on variables defined by `toggle` command.	text	txt
3906	2	ask-yes	code	muttrc
3906	3	ask-no	code	muttrc
3906	4	User will be prompted each time with a given default answer.	text	txt
3907	1	These commands are only applicable to boolean variables as a shortcut and makes no sense for int and string variables as Mutt will only echo the current value.	text	txt
3907	2	unset <var>	code	muttrc
3907	3	set <var>	code	muttrc
3907	4	set no<var>	code	muttrc
3908	1	source <filename>	code	muttrc
3909	1	source "<command> |"	code	muttrc
3909	2	source "gpg --decrypt credentials |"	code	muttrc
3909	3	When the filename argument of `source` command ends with pipe character, then the content is not evaluated literally, but executed as system shell command, and the output is taken as muttrc commands. This is useful to dynamically change config at runtime on complex or external conditions.	text	txt
3910	1	:	code	muttrc
3910	2	This command reloads the whole config when you specify the main rc file.	text	txt
3911	1	mailboxes <folder> ...	code	muttrc
3912	1	my_hdr <string>	code	muttrc
3913	1	The list should be comma separated.	text	txt
3913	2	alias <short address> <long address> , ...	code	muttrc
3914	1	When checking headers for managing different addresses on the same host, you should let mutt know how to identify you:	text	txt
3914	2	alternates <regexp> ...	code	muttrc
3915	1	list <regexp> ...	code	muttrc
3915	2	subscribe <regexp> ...	code	muttrc
3916	1	color <object> <foreground color> <background color> [pattern]	code	muttrc
3917	1	ignore <regex> ...	code	muttrc
3917	2	unignore <regex> ...	code	muttrc
3918	1	hdr_order <pattern> ...	code	muttrc
3919	1	There is no need to surround the function with `<>` in `bind` and `exec`.	text	txt
3919	2	bind <mode> <key> <function>	code	muttrc
3920	1	Use literal `<>` around function names for `macro` and `push`. To use `<` literal character escape it.	text	txt
3920	2	macro <mode> <key> <sequence> [description]	code	muttrc
3921	1	There is no need to surround the function with `<>` in `bind` and `exec`.	text	txt
3921	2	exec <function> ...	code	muttrc
3921	3	No input data for dialogs are allowed in this context.	text	txt
3922	1	Use literal `<>` around function names for `macro` and `push`. To use `<` literal character escape it.	text	txt
3922	2	This command includes input to dialogs and functions.	text	txt
3922	3	push <sequence>	code	muttrc
3923	1	`regexp` are extended regular expressions, `mutt-pattern` are regexp with mutt-specific modifiers preceeding them.	text	txt
3923	2	"~f eMail.*@.*adr$"	code	muttrc
3924	1	`regexp`, `mutt-pattern`, `mutt-command` are 3 different levels of patterns, each having their own special characters that have to be escaped when their literal characters are intented to be used. Depending on the level, you should escape them many times as needed until the intended level can see it as literal.	text	txt
3925	1	`regexp`: `(|).*+?[]{}\\\\^$`	text	txt
3925	2	`mutt-pattern`: `(|)!~\\\\"'` and `WSPC`	text	txt
3925	3	`mutt-command`: `;#\\`\\\\'"$` and `WSPC`	text	txt
3926	1	;	code	muttrc
3927	1	# comment	code	muttrc
3928	1	Legal shell variable name can only be used.	text	txt
3928	2	$EDITOR	code	muttrc
4057	2	section .text\n    global main	text	txt
3929	1	WSPC characters are either space or tab and they separate arguments from commands, or separate patterns from each other.	text	txt
3930	1	Every character between a pair of single quotes or double quotes is literal, except with double quotes which will not quote shell variables and command substitutions, unless quoted with backslash.	text	txt
3931	1	For each algorithm, there are three cases to analyze; the best case, the worst case, and the average case. For each, there are use cases, but most of the time, we only care about the worst case scenario. The big O notation is the definition of the worst case scenario of an algorithm. If the algorithm can be written as `f(n) = 5n + 3`, then `g(n) = n` is always greater than `f(n)`. Therefore, by taking only the highest order of a function, we estimate the worst case scenario. For the best case scenario, if we have a function `f(n)`, and the best case is `g(n)`, then the comparison `f(n) > g(n)` is always true. For the average case, if we have `f(n)` and the best case scenario is `g(n)`, and the worst case of `h(n)`, then the average function `w(n)` is always sandwiched between `f(n)` and `g(n)`, thus `f(n) >= w(n) >= g(n)`.	text	txt
3932	1	The worst case scenario is written by `O(n)` notation. Best case scenario is written by `Omega(n)`. Average case scenario is written by `Delta(n)` notation.	text	txt
3933	1	When we have a function `1 + 2 + 3 + ... + n`, then we can rewrite the function as `f(n) = (n + 1) / 2`. Then say the worst case is `O(n) = n`, and the best case scenario is `Omega(n) = 1`. For average case, we have `Delta(n) = n/2 + 1/2 = n`.	text	txt
3933	2		code	cpp
3934	1	Array is a set of adjacent elements on memory.	text	txt
3934	2	|**Operation**|**Time Complexity**|\n|Read|`O(1)`|\n|Write|`O(n)`|\n|Search|`O(n)`|\n|Delete|`O(n)`|	text	txt
3935	1	The maximum number can be the first element in best case scenario, or it can be the last element in the worst case scenario. So the algorithm is to search for all the elements of an array from beginning to the end, and for best and worst case scenario we read the entire list. Therefore, the algorithm is linear, and the worst case is `O(n)`, and the best case is `Omega(n)`.	text	txt
3935	2	template<typename T>\nT max(std::array<T> const& container)\n{\n    auto iter{container.cbegin()};\n    auto last{container.cend()};\n    auto value{*iter};\n\n    for (; iter != last; ++iter)\n    {\n        if (*iter > value)\n        {\n            value = *iter;\n        }\n    }\n\n    return value;\n}	code	cpp
3936	1	The first and naive approach could be to take the reverse of a string and linearly step through both strings and check until the end. In this case, we have `O(n)` and `Omega(n)`.	text	txt
3936	2	bool is_palindrome(std::string const& s)\n{\n    std::string r{s};\n    std::reverse(r.begin(), r.end());\n    bool result{true};\n    int i{0};\n\n    while (result && i < s.length())\n    {\n        if (s[i] != r[i])\n        {\n            result = false;\n        }\n\n        ++i;\n    }\n\n    return result;\n}	code	cpp
3936	3	But this can also be done by approaching from the beginning and the end of the string at the same time. The time complexity of this approach is `O(n)` and `Omega(n)`.	text	txt
3936	4	bool is_palindrome(std::string const& s)\n{\n    auto forward{s.cbegin()};\n    auto backward{s.cend() - 1};\n    bool result{true};\n\n    while (result && std::distance(forward, backward) > 0)\n    {\n        if (*forward != *backwards)\n        {\n            result = false;\n        }\n\n        ++forward;\n        --backward;\n    }\n\n    return result;\n}	code	cpp
5193	1	name: Custom Workflow\non:\n  workflow_dispatch:\nsteps:\n  release:\n    runs-on: ubuntu-latest\n    env:\n      GITHUB_TOKEN: ${{ secrets.github_token }}\n    permissions:\n      pull-requests: write	code	yml
3937	1	When there are multiple variations in the behavior of a member function, we can either implement each variation in a naive way and separate them by conditions, but then we will have to add more conditional statements over time, thus modifying the existing code which leads to the violation of Open-Closed principle.	text	txt
3937	2	class context\n{\nprivate:\n    state current_state;\n\npublic:\n    enum class state { active, passive };\n\n    void run()\n    {\n        switch (current_state)\n        {\n        case state::active:\n            // strategy 1\n            break;\n        case state::passive:\n            // strategy 2\n            break;\n        default:\n            // possible future strategies\n        }\n    }\n};	code	cpp
3937	3	With strategy pattern, each conditional behavior, also known as algorithms, are taken out of the member functions and are put inside their own classes. The class that might behave differently based on conditions, is also known as a context. Since all of the algorithm classes have the same behavior, but with different implementations, they can be inherited from a common base class. These classes are called strategies or policies.	text	txt
3937	4	#include <memory>\n\nclass context\n{\nprivate:\n    std::unique_ptr<basic_strategy> m_strategy;\npublic:\n    context(): m_strategy{nullptr}\n    { }\n\n    explicit context(std::unique_ptr<basic_strategy> strategy): m_strategy{std::move(strategy)}\n    { }\n\n    void set_strategy(std::unique_ptr<basic_strategy> strategy)\n    {\n        m_strategy.reset(std::move(strategy));\n    }\n\n    void run()\n    {\n        strategy->run();\n    }\n};\n\nclass basic_strategy\n{\nprotected:\n    virtual void run() = 0;\n};\n\nstruct strategy1: public basic_strategy\n{\n    void run() override;\n};\n\nstruct strategy2: public basic_strategy\n{\n    void run() override;\n};\n\nint main()\n{\n    context c{};\n    std::unique_ptr<strategy1> s1{std::make_unique<strategy1>()};\n    std::unique_ptr<strategy2> s2{std::make_unique<strategy2>()};\n\n    c.set_strategy(s1);\n    c.run();\n\n    c.set_strategy(s2);\n    c.run();\n}	code	cpp
3938	1	Instead of creating strategies dynamically on runtime, strategy pattern can be applied using templates in compile-time.	text	txt
3938	2	template<typename Strategy>\nclass context\n{\nprivate:\n    Strategy m_strategy;\npublic:\n    void run()\n    {\n        strategy->run();\n    }\n};\n\nclass strategy1\n{\n};\n\nclass strategy2\n{\n};\n\nint main()\n{\n    context<strategy1> c1{};\n    c1.run();\n    context<strategy2> c2{};\n    c2.run();\n}	code	cpp
3939	1	When the strategy is not used across the class, there is no need to store it as a member. Therefore, we can only pass the strategy to the member function where it uses the strategy.	text	txt
3939	2	class context\n{\npublic:\n    template<typename Strategy>\n    void run(Strategy strategy)\n    {\n        strategy->run();\n    }\n};\n\nclass strategy1\n{\n};\n\nclass strategy2\n{\n};\n\nint main()\n{\n    context c{};\n    c.run<strategy1>();\n    c.run<strategy2>();\n}	code	cpp
3940	1	Similar to strategy pattern which applies to classes that have multiple variations of behaviors between instances, template method pattern applies to algorithms that some of the steps have variations of behaviors.	text	txt
3940	2	With template method pattern, we define the skeleton of an algorithm in an operation, deferring some steps to the subclasses. Then, redefine certain steps of an algorithm without changing the algorithms structure.	text	txt
3959	1	GitHub automatically creates a secret and it can be accessed by `github.token` or `secrets.github_token`.	text	txt
3940	3	class basic_context\n{\nprotected:\n    virtual void step1() = 0; // varying step\n    virtual void step2() = 0; // varying step\n    virtual void step3() { } // optional step, hook\n    void step4() { } // fixed step\n\npublic:\n    virtual void run()\n    {\n        step1(); // varying\n        step2(); // varying\n        step3(); // hook\n        step4(); // fixed\n    }\n};\n\nclass context: public basic_context\n{\nprotected:\n    void step1() override { }\n    void step2() override { }\n\npublic:\n    void run() override;\n};\n\nint main()\n{\n    context c{};\n    c.run();\n}	code	cpp
3941	1	Where there are requests from one part of an application called *invoker*, to another component called receiver, by first design we might directly connect these two to directly call on each other. But if later we need to know the state of these requests in order to implement features like undo and redo, we need to make these requests into instances of command class. The difference is that requests were functions but now they are classes with the advantage of having states.	text	txt
3942	1	class invoker as "User" <<Invoker>> {\n    - receiver\n}\n\nclass receiver as "Bank Account" <<Receiver>> {\n    + withdraw(amount: int): void\n    + deposit(amount: int): void\n}\n\nreceiver -o invoker: < aggregates	code	plantuml
3942	2	The invoker and receiver classes can be decoupled like this:	text	txt
3942	3	abstract command {\n    - receiver\n    {abstract} + execute(): void\n}\n\nclass withdraw_command {\n    + execute(): void\n}\n\nclass deposit_command {\n    + execute(): void\n}\n\nclass invoker as "User" <<Invoker>> {\n    - command\n}\n\nclass receiver as "Bank Account" <<Receiver>> {\n    + withdraw(amount: int): void\n    + deposit(amount: int): void\n}\n\ncommand <|.. withdraw_command: > implements\ncommand <|.. deposit_command: > implements\ncommand -o invoker: < aggregates\nreceiver -o command: < aggregates	code	plantuml
3943	1	#include <iostream>\n\nclass bank_account\n{\nprivate:\n    int m_balance;\n    int m_overdraft_limit;\n\npublic:\n    explicit bank_account(): m_overdraft_limit{-500} { }\n    explicit bank_account(int balance, int overdraft_limit = -500): m_balance{balance}, m_overdraft_limit{overdraft_limit} { }\n\n    void withdraw(int amount) { m_balance-= amount; }\n    void deposit(int amount) { m_balance+= amount; }\n    int balance() const { return m_balance; }\n};\n\nclass command\n{\n    virtual void execute() const = 0;\n};\n\nclass withdraw_command: public command\n{\nprivate:\n    int amount;\n    bank_account& account;\n\npublic:\n    explicit withdraw_command(bank_account& account, int const amount): amount{amount}, account{account} { }\n\n    void execute() const override { account.withdraw(amount); }\n};\n\nclass deposit_command: public command\n{\nprivate:\n    int amount;\n    bank_account& account;\n\npublic:\n    explicit deposit_command(bank_account& account, int const amount): amount{amount}, account{account} { }\n\n    void execute() const override { account.deposit(amount); }\n};\n\nint main()\n{\n    bank_account account{1000};\n    withdraw_command action{account, 10};\n    std::cout << account.balance() << std::endl; // 1000\n    action.execute();\n    std::cout << account.balance() << std::endl; // 990\n}	code	cpp
3944	1	on:\n  workflow_dispatch:\n    inputs:\n      log-level:\n        description: "verbosity of logs"\n        required: true\n        default: "warning"\n        type: choice\n        options:\n          - info\n          - warning\n          - debug\n      environment:\n        description: "selected environments"\n        type: environment\n        required: true	code	yml
3945	1	gh workflow run <workflow> -f log-level=debug -f environment=Debug	code	sh
5456	1	`video` module provides algorithms to analyze motion between successive frames in a video, tracking different objects in a video, creating models for video surveillance, and more.	text	md
3946	1	jobs:\n  release:\n    strategy:\n      fail-fast: false\n      max-parallel: 3\n      matrix:\n        os_version: [macos-latest, ubuntu-latest]\n        node_version: [12, 14, 16]\n    name: Release\n    runs-on: ${{ matrix.os_version }}\n    steps:\n      - uses: actions/setup-node@v3.6.0\n        with:\n          node-version: ${{ matrix.node_version }}	code	yml
3947	1	jobs:\n  release:\n    if: ${{ github.ref_name == "main" }}\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo "Deploy branch ${{ github.ref_name }}"	code	yml
3948	1	|Operator|Description|\n|---|---|\n|`()`|Logical grouping|\n|`[]`|Index|\n|`.`|Property dereference|\n|`!`|Logical inverse|\n|`<`, `<=`, `>`, `>=`|Comparison|\n|`==`, `!=`|Equality and inequality|\n|`&&`, `||`|Logical combinations|	text	txt
3949	1	contains(list, item)	code	yml
3949	2	startsWith(list, item)	code	yml
3949	3	endsWith(list, item)	code	yml
3949	4	format(string, v0, v1,...)	code	yml
3949	5	join(list, separator)	code	yml
3949	6	toJSON(string)	code	yml
3949	7	fromJSON(object)	code	yml
3949	8	hashFiles(path)	code	yml
3950	1	steps:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - name: "Runs the step if the previous step has failed"\n        if: ${{ failure() }}\n      - name: "Runs the step only if the workflow has cancelled"\n        if: ${{ cancelled() }}\n      - name: "Runs the step if none of the previous steps have failed or been cancelled"\n        if: ${{ success() }}\n      - name: "Runs the step even if previous steps failed or cancelled"\n        if: ${{ always }}	code	yml
3951	1	jobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo "::warning some warning"\n      - run: echo "::error some error"	code	yml
3952	1	jobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - name: "Set file path"\n        id: paths\n        run: echo "file_path=/src/project/main.cpp" >> "$GITHUB_OUTPUT"\n      - name: "Get file path"\n        run: echo "${{ steps.paths.outputs.file_path }}"	code	yml
3953	1	jobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo "::add-mask::$(( RANDOM ))"	code	yml
3954	1	jobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - id: produce\n        run: echo "action_state=yellow" >> "$GITHUB_ENV"\n      - run: echo "state: ${{ env.action_state }}"	code	yml
3955	1	jobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo "### First Step" >> "$GITHUB_STEP_SUMMARY"\n      - run: echo "### Second Step" >> "$GITHUB_STEP_SUMMARY"\n      - run: echo "### Third Step" >> "$GITHUB_STEP_SUMMARY"	code	yml
3956	1	- Organization\n  - User\n    - Repository (default)\n      - Environment	text	txt
3957	1	Secrets and variables can be created in either of three context levels to have different access levels.	text	txt
3957	2	jobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/create-release@v1\n        with:\n          GITHUB_TOKEN: ${{ secrets.github_token }}	code	yml
3958	1	Secrets and variables can be set using `gh` command:	text	txt
3958	2	gh secret set KEY --body "$((RANDOM))"	code	sh
3958	3	gh secret set KEY --body "$((RANDOM))" --env <environment>	code	sh
3958	4	gh secret set KEY --body "$((RANDOM))" --org <organization> --visibility public	code	sh
3958	5	gh secret set KEY --body "$((RANDOM))" --org <organization> --repos <repo>...	code	sh
3958	6	gh secret set KEY --body "$((RANDOM))" --user	code	sh
3959	2	jobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          GITHUB_TOKEN: ${{ github.token }}	code	yml
3960	1	Permissions can be applied on the entire workflow, or on a single job.	text	txt
3961	1	jobs:\n  release:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      pull-requests: write\n    steps:\n      - uses: actions/labeler@v4	code	yml
3962	1	When the program needs to do multiple checking before running something, the chain of responsibility pattern can be applied. An obvious pattern is where we need multiple if conditions which breaks reusability. For example, checks for authentication, validation and connection before a user can do something. Another example is to check for length, strength, and validity of an input password.	text	txt
3963	1	Represent sequential checks as a chain of handlers. Each handler handles the situation or passes on the responsibility to the next handler.	text	txt
5228	2	act -s GITHUB_TOKEN="12345abcdef"	code	sh
3963	2	\ntemplate<typename T>\nclass basic_validator\n{\npublic:\n    virtual ~basic_validator();\n    virtual std::shared_ptr<basic_validator> next(std::shared_ptr<basic_validator> validator) = 0;\n    virtual bool is_valid(T const&) = 0;\n};\n\ntemplate<typename T>\nclass password_length_validator: public basic_validator\n{\nprotected:\n    std::shared_ptr<basic_validator> m_next;\n\npublic:\n    virtual ~password_length_validator() override { }\n\n    std::shared_ptr<basic_validator> next(std::shared_ptr<basic_validator> validator) override\n    {\n        m_next.reset(validator);\n        return validator;\n    }\n\n    bool is_valid(T const& value) override\n    {\n        return m_next ? m_next->is_valid(value) : true;\n    }\n};\n\ntemplate<typename T>\nclass incorrect_character_validator: public basic_validator\n{\n    virtual ~incorrect_character_validator() override { };\n\n    std::shared_ptr<basic_validator> next(std::shared_ptr<basic_validator> validator) override\n    {\n        m_next.reset(validator);\n        return validator;\n    }\n\n    bool is_valid(T const& value) override\n    {\n        return m_next ? m_next->is_valid() : true;\n    }\n};\n\nint main()\n{\n    std::shared_ptr<basic_validator> validator{std::make_shared<password_length_validator>()};\n    validator->next(std::make_shared<incorrect_character_validator>());\n    std::cout << validator->is_valid("123456") << std::endl;\n}	code	cpp
3964	1	Use this pattern to reduce coupling between classes that call one another and make functionality more reusable between similar classes.	text	txt
3964	2	This pattern represents events or changes that can occur in a program as their own classes, which implement a common command interface.	text	txt
4338	2	#include <chrono>\n#include <thread>\n\nusing namespace std::chrono_literals;\n\nauto tp1 = std::chrono::steady_clock::now();\nstd::this_thread::sleep_for(1ms);\nauto tp2 = std::chrono::steady_clock::now();\n\nauto duration = tp2 - tp1;\nstd::cout << duration << "\\\\n";\n// example output: 1115389ns	code	cpp
4339	1	#include <chrono>\n#include <thread>\n\nusing namespace std::chrono_literals;\n\nauto tp1 = std::chrono::steady_clock::now();\nstd::this_thread::sleep_for(1ms);\nauto tp2 = std::chrono::steady_clock::now();\n\n// explicit type of duration, base type double, with micro precision\nstd::chrono::duration<double, std::micro> sleep_duration = tp2 - tp1;\nstd::cout << sleep_duration << "\\\\n";\n// example output: 1115.39µs	code	cpp
4340	1	Duractions can be converted between each other using `duration_cast`.	text	txt
3965	1	#include <vector>\n#include <ranges>\n#include <string>\n#include <memory>\n#include <iostream>\n#include <iterator>\n\nclass console\n{\nprivate:\n    std::vector<std::string> m_logs;\npublic:\n    void clear() noexcept { m_logs.clear(); }\n    void print() const { std::ranges::copy(m_logs, std::ostream_iterator{std::cout, "\\n"}); }\n    void add(std::string const& log) { m_logs.push_back(log); }\n};\n\nclass basic_console_command\n{\npublic:\n    virtual ~basic_console_command() = default;\n    virtual void execute() = 0;\n};\n\nclass clear_console_command: public basic_console_command\n{\nprivate:\n    console& m_console;\npublic:\n    explicit clear_console_command(console& tty): m_console{tty} { }\n    void execute() override { m_console.clear(); }\n};\n\nclass print_console_command: public basic_console_command\n{\nprivate:\n    console& m_console;\npublic:\n    explicit print_console_command(console& tty): m_console{tty} { }\n    void execute() override { m_console.print(); }\n};\n\nclass add_console_command: public basic_console_command\n{\nprivate:\n    console& m_console;\n    std::string m_value;\npublic:\n    explicit print_console_command(console& tty, std::string const& value): m_console{tty}, m_value{value} { }\n    void execute() override { m_console.add(m_value); }\n};\n\nclass button\n{\nprivate:\n    std::shared_ptr<basic_console_command> m_command;\npublic:\n    explicit button(std::shared_ptr<basic_console_command> command): m_command{command} { }\n    void click() { m_command.execute(); }\n};\n\nint main()\n{\n    console tty{};\n\n    std::shared_ptr<clear_console_command> clear_command{std::make_shared<clear_console_command>(tty)};\n    std::shared_ptr<print_console_command> print_command{std::make_shared<print_console_command>(tty)};\n    std::shared_ptr<add_console_command> add_command{std::make_shared<add_console_command>(tty, "Command Pattern")};\n\n    button clear{clear_command};\n    button print{print_command};\n    button add{add_command};\n}	code	cpp
3966	1	List of emails in the currently opened mailbox. By default it opens the system mailbox.	text	txt
3967	1	The pager contains the email content. How much information can be seen depends on configuration.	text	txt
3968	1	The file browser is the interface to the local or remote file system, presenting mailboxes listed in a custom sorting of items.	text	txt
3969	1	The sidebar shows a list of all mailboxes.	text	txt
3970	1	set sidebar_visible\nset sidebar_format = "%B%<F? [%F]>%* %<N?%N/>%S"\nset mail_check_stats	code	neomutt.rc
3971	1	`<sidebar_next>` and `<sidebar-prev>` named keys move the highlight, and `<sidebar-open>` named key opens the highlighted folder.	text	txt
3971	2	bind index,pager \\CP sidebar-prev	code	neomutt.rc
3971	3	bind index,pager \\CN sidebar-next	code	neomutt.rc
3971	4	bind index,pager \\CO sidebar-open	code	neomutt.rc
3972	1		text	txt
3972	2		code	neomutt.rc
3973	1	A class should have only one reason to change and only one responsibility.	text	txt
3973	2	class Note\n{\npublic:\n    void add();\n    void remove();\n    void display(); // beyond the responsibility of this class\n};	code	cpp
3974	1	Classes should be open for extension but closed for modification. We should add more code instead of changing current code.	text	txt
3974	2	class Note\n{\npublic:\n    void add()\n    {\n        // directly modifying code breaks this principle\n        if (contains("!"))\n        {\n        }\n    }\n\n    void remove();\n};	code	cpp
3974	3	class INote\n{\npublic:\n    virtual void add() = 0;\n    virtual void remove() = 0;\n};\n\nclass TaggedNote\n{\npublic:\n    void add() override\n    {\n        if (contains("!"))\n        {\n        }\n    }\n\n    void remove() override;\n};	code	cpp
3975	1	Subtypes must be substitutable for their base types. Inheritance relationship should be based on behavior. A subclass must not remove or change its parent behavior. This allows subclass to replace its base type. New classes can be added without modifying existing code. By following this principle, we automatically follow open-closed principle as well.	text	txt
3975	2	using OperationResult = std::variant<int, bool>;	code	cpp
3975	3	class IOperation\n{\npublic:\n    virtual OperationResult perform() = 0;\n};\n\nclass IntegerOperation: public IOperation\n{\npublic:\n    OperationResult perform() override\n    {\n        return int{};\n    }\n};\n\nclass BooleanOperation: public IOperation\n{\npublic:\n    OperationResult perform() override\n    {\n        return bool{};\n    }\n};	code	cpp
3976	1	Interface users should not be forced to depend on methods they do not use. Interfaces with too many irrelevant methods will be complex to use. Some users may not use all the methods. Separate the interface and put methods based on client use.	text	txt
3976	2	struct IFile\n{\n    virtual ~IFile() = default;\n    virtual void write() = 0;\n    virtual void read() = 0; // not all users may use write()\n};	code	cpp
3976	3	struct IWrite\n{\n    virtual ~IWrite() = default;\n    virtual void write() = 0;\n};\n\nstruct IRead\n{\n    virtual ~IRead() = default;\n    virtual void read() = 0;\n};	code	cpp
3977	1	Interfaces should not depend on classes, classes should depend on interfaces. Using a concrete class directly creates dependency. Software becomes difficult to modify. Invert the dependency by using an interface rather than a concrete class.	text	txt
5229	1	act --var name=value ...	code	sh
5261	2	ip address	code	sh
3977	2	class ImageReader\n{\npublic:\n    virtual ~ImageReader() = default;\n    virtual void decode() = 0;\n};\n\nclass BitmapReader: public ImageReader\n{\npublic:\n    void decode() override;\n};	code	cpp
3977	3	class ImageViewer\n{\nprivate:\n    // depends on implementation not abstraction\n    std::shared_ptr<BitmapReader> m_reader;\npublic:\n    ImageViewer(std::shared_ptr<BitmapReader> reader): m_reader{reader} { }\n    void display();\n};	code	cpp
3977	4	class ImageViewer\n{\nprivate:\n    std::shared_ptr<ImageReader> m_reader;\npublic:\n    ImageViewer(std::shared_ptr<ImageReader> reader): m_reader{reader} { }\n    void display();\n};	code	cpp
3978	1	|Pattern|Description|\n|---|---|\n|Singleton|Ensure only one instance exists|\n|Factory Method|Create instance without depending on its concrete type|\n|Object Pool|Reuse existing instances|\n|Abstract Factory|Create instances from a specific family|\n|Prototype|Clone existing objects from a prototype|\n|Builder|Construct a complex object step by step|	text	txt
3979	1	Ensure a class only has one instance, and provide a global point of access to it.	text	txt
3979	2	The class is responsible for its own instance. Direct construction of the object is prohibited. It contains a method to construct and return a single instance.	text	txt
3979	3	Singleton {\n    + static createInstance(): unique_instance\n    + SingletonOperation()\n    + GetSingletonData()\n    - static unique_instance\n    - singleton_data\n}	code	uml
3980	1	class Singleton\n{\nprivate:\n    Singleton() = default;\n    static Singleton m_instance;\n\npublic:\n    static Singleton& createInstance();\n    void doSomething();\n    void doSomethingElse();\n};	code	cpp
3980	2	#include "singleton.hpp"\n\nSingleton Singleton::m_instance;\n\nSingleton& Singleton::createInstance()\n{\n    return m_instance;\n}\n\nvoid Singleton::doSomething()\n{\n}\n\nvoid Singleton::doSomethingElse()\n{\n}	code	cpp
3980	3	#include "singleton.hpp"\n\nint main()\n{\n    Singleton& singleton = Singleton::createInstance();\n    singleton.doSomething();\n}	code	cpp
3981	1	A program that is not a system program is designed as if it has exclusive access to all of the resources it uses. It does not deal with complexity of talking directly to the kernel. In contrast, a system program makes direct requests from the operating system for services.	text	txt
3982	1	#include <algorithm>\n#include <utility>\n\nint min_year{std::min({2003, 2011, 2014, 2017, 2020, 2023, 2026, 2029, 2032, 2035, 2038})};\nint max_year{std::max({2003, 2011, 2014, 2017, 2020, 2023, 2026, 2029, 2032, 2035, 2038})};\nstd::pair<int, int> minmax_result{std::minmax({2003, 2011, 2014, 2017, 2020, 2023, 2026, 2029, 2032, 2035, 2038})};	code	cpp
3983	1	All overloads are also available for `std::min()` and `std::max()` functions.	text	txt
3983	2	std::minmax(a, b);	code	cpp
3983	3	std::minmax(a, b, predicate);	code	cpp
3983	4	std::minmax({initializer list});	code	cpp
3983	5	std::minmax({initializer list}, predicate);	code	cpp
3984	1	Arguments can be integers, floating points, and points. When arguments are pointers, they both should point to the same array object.	text	txt
3984	2	#include <numeric>\n\nauto result{std::midpoint(a, b)};	code	cpp
3985	1	#include <cmath>\n\nauto result{std::lerp(a, b, t)}; // result = a + t(b - a)	code	cpp
3986	1		text	txt
3986	2	#include <utility>\n\nstd::cmp_equal(a, b);\nstd::cmp_not_equal(a, b);\nstd::cmp_less(a, b);\nstd::cmp_greater(a, b);\nstd::cmp_less_equal(a, b);\nstd::cmp_greater_equal(a, b);	code	cpp
3987	1	#include <utility>\n#include <string>\n\nvoid get_message(std::string&& m);\nstd::string message{"something to say"};\nget_message(message);	code	cpp
3988	1	Typical use cases are factory functions which create an object and should pass to their arguments unmodified.	text	txt
3988	2	 Another use case is constructors which often use their arguments to initialize their base class with identical arguments.	text	txt
3988	3	#include <utility>\n#include <string>\n\nvoid f(std::string& ref);\nvoid f(std::string const& cref);\nvoid f(std::string&& rref);\nvoid f(std::string const&& rref);\n\nstd::string sv;\nstd::string const sc;\n\ntemplate<typename T>\nvoid call_f(T&& arg)\n{\n    f(std::forward(arg));\n}\n\ncall_f(sv); // ref\ncall_f(std::move(sv)); // rref\ncall_f(sc); // cref\ncall_f(std::move(sc)); // rcref	code	cpp
3989	1	#include <type_traits>\n#include <cstdint>\n\nenum class some_type : std::uint16_t { first, second, etc };\nauto underlying_type{std::to_underlying(some_type)};	code	cpp
3990	1	Swap internally uses move semantics for efficiency.	text	txt
3990	2	#include <utility>\n\nstd::swap(a, b);	code	cpp
3991	1	#include <functional>\n\nusing std::placeholder;\n\ndouble div(double a, double b) { return a / b; }\n\nstd::function<double(double, double)> div1{std::bind(div, _1, _2)};\nstd::function<double(double, double)> div2{std::bind(div, 2000, _1)};\nstd::function<double(double, double)> div3{std::bind_front(div, 2000)}; // C++20\nstd::function<double(double, double)> div4{std::bind_back(div, 10)}; // C++23	code	cpp
3992	1	While `std::bind()` and counterparts `std::bind_back()` and `std::bind_front()` create a function object, `std::function()` takes these objects and binds them to a variable.	text	txt
3993	1	#include <utility>\n\nstd::pair<T1, T2> p1{a, b};\nauto p2{std::make_pair(a, b)};	code	cpp
3994	1	std::get<0>(p);\np.first;\nstd::get<1>(p);\np.second;	code	cpp
4015	1	By appending `q` to the number.	text	txt
4015	2	section .data\n    O_CREATE equ 00000100q	code	txt
4028	1	section .data\n    number1 dq 36\n    number2 dq 3	text	txt
4028	2	section .bss\n    result resq 1	text	txt
4028	3	section .text\n    global main	text	txt
4028	4	main:\n    push rbp\n    mov rbp, rsp	text	txt
4028	5	    ; addition\n    mov rax, [number1]\n    add rax, [number2]\n    mov [result], rax ; 39	text	txt
4028	6	    ; subtration\n    mov rax, [number1]\n    sub rax, [number2]\n    mov [result], rax ; 33	text	txt
4028	7	    mov rsp, rbp\n    pop rbp	text	txt
4028	8	    xor rax, rax\n    ret	code	txt
4029	1	section .data\n    number1 dq 36\n    number2 dq 3	text	txt
4029	2	section .bss\n    result resq 1\n    modulo resq 1	text	txt
4029	3	section .text\n    global main	text	txt
4029	4	main:\n    push rbp\n    mov rbp, rsp	text	txt
4029	5	    ; increment\n    mov rax, [number1]\n    inc rax\n    mov [result], rax	text	txt
4029	6	    ; decrement\n    mov rax, [number1]\n    dec rax\n    mov [result], rax	text	txt
4029	7	    mov rsp, rbp\n    pop rbp	text	txt
4029	8	    xor rax, rax\n    ret	code	txt
4030	1	section .data\n    number1 dq 36\n    number2 dq 3	text	txt
4030	2	section .bss\n    result resq 1\n    modulo resq 1	text	txt
4030	3	section .text\n    global main	text	txt
4030	4	main:\n    push rbp\n    mov rbp, rsp	text	txt
4030	5	    ; shift arithmetic left\n    mov rax, [number1]\n    sal rax, 2 ; multiply by 4\n    mov [result], rax	text	txt
4030	6	    ; shift arithmetic right\n    mov rax, [number1]\n    sar rax, 2 ; divide by 4\n    mov [result], rax	text	txt
4030	7	    mov rsp, rbp\n    pop rbp	text	txt
4030	8	    xor rax, rax\n    ret	code	txt
4031	1	* `mul` multiplies unsigned integers\n* `imul` multiplies signed integers\n* `imul` will store the lower 64 bits of the resulting product in rax and the\n  upper 64 bits in rdx.\n* `idiv` will divide the dividen in rdx:rax by the divisor in the source\n  operand and store the integer result in rax.	text	txt
4031	2	section .data\n    number1 dq 36\n    number2 dq 3	text	txt
4031	3	section .bss\n    result resq 1\n    modulo resq 1	text	txt
4031	4	section .text\n    global main	text	txt
4031	5	main:\n    push rbp\n    mov rbp, rsp	text	txt
4031	6	    ; multiply\n    mov rax, [number2]\n    imul qword[number2] ; multiplly rax with number2\n    mov [result], rax	text	txt
4031	7	    ; divide\n    mov rax, [number1]\n    mov rdx, 0 ; division uses rdx:rax convention\n    idiv qword[number2]\n    mov [result], rax\n    mov [modulo], rdx	text	txt
4031	8	    mov rsp, rbp\n    pop rbp	text	txt
4031	9	    xor rax, rax\n    ret	code	txt
4033	1	* Single precision floating point arithmetic instructions are postfixed with ss\n* Double precision floating point arithmetic instructions are postfixed with sd	text	txt
4033	2	section .text\n    global main	text	txt
4033	3	main:\n    push rbp\n    mov rbp, rsp	text	txt
4033	4	    ; sum floating-point numbers\n    movsd xmm0, [number1]\n    addsd xmm0, [number2]	text	txt
4033	5	    ; difference\n    movsd xmm0, [number1]\n    subsd xmm0, [number2]	text	txt
4033	6	    mov rsp, rbp\n    pop rbp	text	txt
4033	7	    xor rax, rax\n    ret	code	txt
4034	1	* Single precision floating point arithmetic instructions are postfixed with ss\n* Double precision floating point arithmetic instructions are postfixed with sd	text	txt
4034	2	section .text\n    global main	text	txt
4034	3	main:\n    push rbp\n    mov rbp, rsp	text	txt
4034	4	    ; multiplication\n    movsd xmm0, [number1]\n    mulsd xmm0, [number2]	text	txt
4034	5	    ; division\n    movsd xmm0, [number1]\n    divsd xmm0, [number2]	text	txt
4034	6	    mov rsp, rbp\n    pop rbp	text	txt
4034	7	    xor rax, rax\n    ret	code	txt
4035	1	* Single precision floating point arithmetic instructions are postfixed with ss\n* Double precision floating point arithmetic instructions are postfixed with sd	text	txt
4035	2	section .text\n    global main	text	txt
4035	3	main:\n    push rbp\n    mov rbp, rsp	text	txt
4035	4	    ; square root\n    sqrtsd xmm0, [number1]	text	txt
4035	5	    mov rsp, rbp\n    pop rbp	text	txt
4035	6	    xor rax, rax\n    ret	code	txt
5262	1	hostname -f	code	sh
4043	1	section .data\n    text db "Brian Salehi", 10, 0\n    length equ $ - text - 1	text	txt
4043	2	section .text\n    global main	text	txt
4043	3	main:\n    push rbp\n    mov rbp, rsp	text	txt
4043	4	    ; print initial sequence\n    mov rax, 1\n    mov rdi, 1\n    mov rsi, text\n    mov rdx, length\n    syscall	text	txt
4043	5	    ; prepare for reverse operation\n    xor rax, rax\n    mov rbx, text\n    mov rcx, length\n    xor r12, r12 ; to store index	text	txt
4043	6	store_loop:\n    ; push sequence to stack\n    mov al, byte [rbx+r12]\n    push rax\n    inc r12\n    loop store_loop	text	txt
4043	7	    xor rax, rax\n    mov rbx, text\n    mov rcx, length\n    xor r12, r12	text	txt
4043	8	reverse_loop:\n    ; pop sequence from stack\n    pop rax\n    mov byte [rbx+r12], al\n    inc r12\n    loop reverse_loop\n    mov byte [rbx+r12], 0	text	txt
4043	9	    ; print reversed string\n    mov rax, 1\n    mov rdi, 1\n    mov rsi, text\n    mov rdx, length\n    syscall	text	txt
4043	10	    mov rsp, rbp\n    pop rbp	text	txt
4043	11	    xor rax, rax\n    ret	code	txt
4044	1	section .text\n    global main	text	txt
4044	2	main:\n    push rbp\n    mov rbp, rsp	text	txt
4044	3	    mov rsp, rbp\n    pop rbp	text	txt
4044	4	    ret	code	txt
4045	1	Each function call results in 8 bytes return address being pushed on the\nstack. It is necessary to make sure to restore the stack to the appropriate\nvalue before we leave a function.	text	txt
4045	2	section .text\n    global main	text	txt
4045	3	main:\n    push rbp\n    call func1\n    pop rbp\n    ret	text	txt
4045	4	func1:\n    push rbp\n    call func2\n    pop rbp\n    ret	text	txt
4045	5	func2:\n    push rbp\n    call func3\n    pop rbp\n    ret	text	txt
4045	6	func3:\n    push rbp\n    pop rbp\n    ret	code	txt
4046	1	section .text\n    global main	text	txt
4046	2	main:\n    push rbp\n    mov rbp, rsp	text	txt
4046	3	    leave\n    ret	code	txt
4047	1	Use `xmm0` register for floating-point values and `rax` register for other\nvalues.	text	txt
4047	2	section .data\n    val dq 0	text	txt
4047	3	section .text\n    global main	text	txt
4047	4	main:\n    push rbp\n    mov rbp, rsp	text	txt
4047	5	    call fail_func\n    xor rax, rax	text	txt
4047	6	    call success_func\n    xor rax, rax	text	txt
4047	7	    leave\n    ret	text	txt
4047	8	fail_func:\n    push rbp\n    mov rbp, rsp	text	txt
4047	9	    mov rax, 1	text	txt
4047	10	    leave\n    ret	text	txt
4047	11	success_func:\n    push rbp\n    mov rbp, rsp	text	txt
4047	12	    mov rax, 0	text	txt
4047	13	    leave\n    ret	code	txt
4049	1	extern printf	text	txt
4049	2	section .data\n    radius dq 10.0	text	txt
4049	3	section .text\n    global main	text	txt
4049	4	main:\n    push rbp\n    mov rbp, rsp	text	txt
4049	5	    call area\n    call print	text	txt
4049	6	    xor rax, rax\n    leave\n    ret	text	txt
4049	7	area:\nsection .data\n    .pi dq 3.141592     ; local to area	text	txt
4049	8	section .text\n    push rbp\n    mov rbp, rsp	text	txt
4049	9	    movsd xmm0, [.pi]\n    mulsd xmm0, [radius]\n    mulsd xmm0, [radius]	text	txt
4049	10	    leave\n    ret	text	txt
4049	11	print:\nsection .data\n    .fmt db "%f", 10, 0	text	txt
4049	12	section .text\n    push rbp\n    mov rbp, rsp	text	txt
4049	13	    mov rax, 1\n    mov rdi, .fmt\n    call printf	text	txt
4049	14	    leave\n    ret	code	txt
4053	1	There are two types of inline assembly: **basic** and **extended**.	text	txt
4053	2	Compilers will not optimize assembly parts of the program, so using inline\nassembly is not advices. There will be no error checking on inline assembly\ncode.	text	txt
4057	3	main:\n    push rbp\n    mov rbp, rsp	text	txt
4057	4	%IF CONDITION\n    xor rdi, rdi\n%ELSE\n    mov rdi, 1\n%ENDIF	text	txt
4057	5	    leave\n    ret	code	txt
4058	1	section .text\n    global write	text	txt
4058	2	; preconditions:\n; address of string be set to rsi\n; length of string be set to rdx\nwrite:\n    push rbp\n    mov rbp, rsp	text	txt
4058	3	    mov rax, 1  ; write system call number\n    mov rdi, 1  ; stdout\n    syscall	text	txt
4058	4	    xor rax, rax\n    leave\n    ret	code	txt
4059	1	section .text\n    global read	text	txt
4059	2	; preconditions:\n; address of buffer be set to rsi\n; length of buffer be set to rdx\nread:\n    push rbp\n    mov rbp, rsp	text	txt
4059	3	    mov rax, 0  ; read system call number\n    mov rdi, 0  ; stdin	text	txt
4059	4	    xor rax, rax\n    leave\n    ret	code	txt
4060	1	section .text\n    global read	text	txt
4060	2	print:\n    push rbp\n    mov rbp, rsp	text	txt
4060	3	    push r12        ; callee saved	text	txt
4060	4	    xor rdx, rdx    ; character counter\n    mov r12, rdi    ; string address	text	txt
4060	5	.counter:\n    cmp byte[r12], 0\n    je .print	text	txt
4060	6	    inc rdx\n    inc r12\n    jmp .counter	text	txt
4060	7	.print:\n    cmp rdx, 0\n    je .exit	text	txt
4060	8	    mov rsi, rdi    ; string address\n                    ; rdx holds string length\n    mov rax, 1      ; write\n    mov rdi, 1      ; stdout\n    syscall	text	txt
4060	9	.exit:\n    pop r12\n    xor rax, rax\n    leave\n    ret	code	txt
4061	1	section .text\n    global read	text	txt
4061	2	; \\\\pre rdi address of string placeholder\n; \\\\pre rsi maximum characters to read\n; \\\\post rax error code\nread:\n    section .data\n        newline db 0xa	text	txt
4061	3	    section .bss\n        .buffer resb 1      ; hold 1 character from input	text	txt
4061	4	    section .text\n        push rbp\n        mov rbp, rsp	text	txt
4061	5	        push r12            ; callee saved\n        push r13            ; callee saved\n        push r14            ; callee saved	text	txt
4061	6	        mov r12, rdi        ; input string address\n        mov r13, rsi        ; max count\n        xor r14, r14        ; character counter	text	txt
4061	7	    .read:\n        mov rax, 0          ; read\n        mov rdi, 1          ; stdin\n        lea rsi, [.buffer]  ; input address\n        mov rdx, 1          ; characters to read\n        syscall	text	txt
4061	8	        mov al, [.buffer]   ; check if reached NL\n        cmp al, byte[newline]\n        je .check_exit	text	txt
4061	9	        cmp al, 97          ; check if input character is lower than 'a'\n        jl .read            ; ignore this and read next character	text	txt
4061	10	        cmp al, 122         ; check if input character is greater than 'z'\n        jg .read            ; ignore this and read next character	text	txt
4061	11	        inc r14             ; increment counter	text	txt
4061	12	        cmp r14, r13        ; check if number of characters reached maximum\n        ja .read            ; don't put input charater into buffer\n                            ; but keep reading from stdin to read newline	text	txt
4061	13	        mov byte[r12], al   ; put input character into buffer\n        inc r12             ; point to next character placeholder in buffer\n        jmp .read           ; read next input character	text	txt
4061	14	    .check_exit\n        cmp r14, 0          ; check if anything was read\n        ja .exit_success	text	txt
4061	15	        mov rax, 1          ; return 1 when failed to read anything\n        jmp .exit	text	txt
4061	16	    .exit_success\n        xor rax, rax        ; return 0 when read at least 0 character	text	txt
4061	17	    .exit\n        inc r12             ; counter null character\n        mov byte[r12], 0    ; close string by putting null at the end\n        pop r14             ; restore for callee\n        pop r13             ; restore for callee\n        pop r12             ; restore for callee	text	txt
4061	18	        leave\n        ret	code	txt
4064	1	info registers rdi rsi rsp\nx/1xg <the pointer in rdi>\nx/s <address where the pointer in rdi points to>\nx/s <address where the pointer in rdi points to + 8>\nx/s <address where the pointer in rdi points to + 16>	code	txt
5140	1	import QtQuick	text	txt
5230	1	act --input name=value ...	code	sh
4074	1	Data in section `.data` and `.bss` should be aligned on a 16-byte border so\nthat registers can be filled with data once for each block of data.	text	txt
4075	1	In **NASM** the assembly directive `align 16` and `alignb 16` can be used in\nfront of the data.	text	txt
4075	2	For **AVX**, data should be aligned on a 32 bytes border and for **AVX-512**,\ndata needs to be aligned on a 64 bytes border.	text	txt
4076	1	The I/O service is a channel that is used to access operating system\nresources and establish communication between our program and the operating\nsystem that performs I/O requests.	text	txt
5231	1	act --env name=value ...	code	sh
4096	1	We can provide a path to the CMake script, which (only) contains a list of\n`set()` commands to specify variables that will be used to initialize an\nempty build tree.	text	txt
4096	2	cmake -C <initial-cache-script> <path-to-source>	code	txt
4097	1	The initialization and modification of existing cache variables can be done\nin command line, as follows:	text	txt
4097	2	cmake -D <var>[:<type>]=<value> <path-to-source>	code	txt
4156	1	Entities can be exported only when:	text	txt
3716	2	name: Initial Workflow\non:\n  workflow_dispatch:\njobs:\n  second_job:\n    runs-on: ubuntu-latest\n    env:\n      GITHUB_TOKEN: ${{ secrets.github_token }}\n    steps:\n      - run: tree	code	yml
4087	1		code	txt
4093	1	cmake -S ./project -B ./build	code	txt
4094	1	Selecting and configuring a generator decides which build tool from our\nsystem will be used for building. This can be overridden by the\n`CMAKE_GENERATOR` environment variable or by specifying the generator\ndirectly on the command line.	text	txt
4094	2	cmake -G <generator-name> <path-to-source>	code	txt
4095	1	Some generators (such as Visual Studio) support a more in-depth specification\nof a toolset (compiler) and platform (compiler or SDK). Additionally, these\nhave respective environment variables that override the default values:\n`CMAKE_GENERATOR_TOOLSET` and `CMAKE_GENERATOR_PLATFORM`.	text	txt
4095	2	cmake -G <generator-name> -T <toolset-spec> -A <platform-name> <path-to-source>	code	txt
4097	3	The `:<type>` section is optional (it is used by GUIs); you can use `BOOL`,\n`FILEPATH`, `PATH`, `STRING`, or `INTERNAL`.	text	txt
4097	4	If you omit the type, it will be set to the type of an already existing\nvariable; otherwise, it will be set to `UNINITIALIZED`.	text	txt
5456	2	`videostab` provides algorithms to stabilize videos. This is important because when we capture videos with camera there are shakes and movements.	text	md
4098	1	For single-configuration generators (such as Make and Ninja), you'll need to\nspecify it during the configuration phase with the `CMAKE_BUILD_TYPE`\nvariable and generate a separate build tree for each type of config:	text	txt
4098	2	* `Debug`\n* `Release`\n* `MinSizeRel`\n* `RelWithDebInfo`	text	txt
4098	3	cmake -S . -B build -D CMAKE_BUILD_TYPE=Release	code	txt
4098	4	Custom variables that are added manually with the `-D` option won't be\nvisible in cache variables list unless you specify one of the supported\ntypes.	text	txt
4099	1	cmake -U <globbing_expr> <CMAKE_BINARY_DIR>	code	txt
4099	2	Here, the globbing expression supports the `*` wildcard and any `?` character\nsymbols. Both of the `-U` and `-D` options can be repeated multiple times.	text	txt
4100	1	cmake -L[A][H] <CMAKE_BINARY_DIR>	code	txt
4100	2	Such a list will contain cache variables that aren't marked as `ADVANCED`. We\ncan change that by adding the `A` modifier.	text	txt
4100	3	To print help messages with variables, add the `H` modifier.	text	txt
4100	4	Custom variables that are added manually with the `-D` option won't be\nvisible unless you specify one of the supported types.	text	txt
4101	1	cmake --system-information [output-file]	code	txt
4101	2	The optional file argument allows you to store the output in a file.	text	txt
4101	3	Running it in the build tree directory will print additional information\nabout the cache variables and build messages from the log files.	text	txt
4102	1	By default, the log level is `STATUS`.	text	txt
4102	2	cmake --log-level=<level>	code	txt
4102	3	Here, level can be any of the following:	text	txt
4102	4	* `ERROR`\n* `WARNING`\n* `NOTICE`\n* `STATUS`\n* `VERBOSE`\n* `DEBUG`\n* `TRACE`	text	txt
4103	1	You can specify this setting permanently in the `CMAKE_MESSAGE_LOG_LEVEL`\ncache variable.	text	txt
4104	1	To debug very complex projects, the `CMAKE_MESSAGE_CONTEXT` variable can be\nused like a stack. Whenever your code enters a specific context, you can add\na descriptive name to the stack and remove it when leaving. By doing this,\nour messages will be decorated with the current `CMAKE_MESSAGE_CONTEXT`\nvariable like so:	text	txt
4104	2	```\n[some.context.example] Debug message\n``````	text	txt
4104	3	The option to enable this kind of log output is as follows:	text	txt
4104	4	cmake --log-context <path-to-source>	code	txt
4105	1	If all logging options fail there is always trace mode.	text	txt
4105	2	Trace mode will print every command with the filename and exact line number\nit is called from alongside its arguments.	text	txt
4105	3	cmake --trace	code	txt
4106	1	Developers can simplify how users interact with their projects and provide a\n`CMakePresets.json` file that specifies some defaults.	text	txt
4107	1	cmake --list-presets	code	txt
4108	1	cmake --preset=<preset>	code	txt
4108	2	These values override the system defaults and the environment. However, at\nthe same time, they can be overridden with any arguments that are explicitly\npassed on the command line.	text	txt
4110	1	Since there is no concept of a source/build tree in scripts, variables that\nusually hold references to these paths will contain the current working\ndirectory instead: `CMAKE_BINARY_DIR`, `CMAKE_SOURCE_DIR`,\n`CMAKE_CURRENT_BINARY_DIR`, and `CMAKE_CURRENT_SOURCE_DIR`.\ncmake --build <dir> [<options>] [-- <build-tool-options>]	code	txt
4111	1	CMake allows you to specify key build parameters that work for every builder.\nIf you need to provide special arguments to your chosen, native builder, pass\nthem at the end of the command after the `--` token.	text	txt
4111	2	cmake --build <dir> -- <build-tool-options>	code	txt
4112	1	Builders know the structure of project dependencies, so they can\nsimultaneously process steps that have their dependencies met to save time.	text	txt
4112	2	cmake --build <dir> --parallel [<number-of-jobs>]\ncmake --build <dir> -j [<number-of-jobs>]	code	txt
4112	3	The alternative is to set it with the `CMAKE_BUILD_PARALLEL_LEVEL`\nenvironment variable.	text	txt
4113	1	Every project is made up of one or more parts, called targets. Usually, we'll\nwant to build all of them; However, on occasion, we might be interested in\nskipping some or explicitly building a target that was deliberately excluded\nfrom normal builds.	text	txt
4113	2	cmake --build <dir> --target <target1> -t <target2> ...	code	txt
4114	1	cmake --build <dir> -t clean\ncmake --build <dir> --target clean	code	txt
4115	1	cmake --build <dir> --clean-first	code	txt
4116	1	cmake --build <dir> --verbose\ncmake --build <dir> -v	code	txt
4116	2	The same effect can be achieved by setting the `CMAKE_VERBOSE_MAKEFILE`\ncached variable.	text	txt
4117	1	cmake --install <dir> [<options>]	code	txt
4118	1	We can specify which build type we want to use for our installation. The\navailable types include:	text	txt
4118	2	* `Debug`\n* `Release`\n* `MinSizeRel`\n* `RelWithDebInfo`	text	txt
4118	3	cmake --install <dir> --config <cfg>	code	txt
4119	1	As a developer, you might choose to split your project into components that\ncan be installed independently. This might be something like application,\ndocs, and extra-tools.	text	txt
4119	2	cmake --install <dir> --component <comp>	code	txt
4120	1	If installation is carried on a Unix-like platform, you can specify default\npermissions for the installed directories, with the following option, using\nthe format of `u=rwx,g=rx,o=rx`:	text	txt
4120	2	cmake --install <dir>  --default-directory-permissions <permissions>	code	txt
4121	1	We can prepend the installation path specified in the project configuration\nwith a prefix of our choice:	text	txt
4121	2	cmake --install <dir> --prefix <prefix>	code	txt
4122	1	cmake --install <build_dir> -v\ncmake --install <build_dir> --verbose	code	txt
4122	2	The same effect can be achieved if the `VERBOSE` environment variable is set.	text	txt
4122	3	VERBOSE=1 cmake --build <dir>	code	txt
4123	1	cmake -D <var>=<value> -P <cmake-script-file> -- <unparsed options>...	code	txt
4124	1	There are two ways you can pass values to scripts:	text	txt
4124	2	* Through variables defined with the `-D` option.\n* Through arguments that can be passed after a `--` token.	text	txt
4124	3	cmake [{-D <var>=<value>}...] -P <cmake-script-file>  [-- <unparsed-options>...]\ncmake -D CMAKE_BUILD_TYPE=Release -P script.cmake  -- --verbose	code	txt
4124	4	CMake will create `CMAKE_ARGV<n>` variables for all arguments passed to the\nscript (including the `--` token).	text	txt
4125	1	On rare occasions, we might need to run a single command in a\nplatform-independent way – perhaps copy a file or compute a checksum.	text	txt
4125	2	cmake -E <command> [<options>]	code	txt
4126	1	cmake -E	code	txt
4127	1	cmake ––help[-<topic>]\ncmake --help-commands file	code	txt
4128	1	The simplest way to run tests for a built project is to call ctest in the\ngenerated build tree:	text	txt
4128	2	ctest	code	txt
4129	1	Files that contain the CMake language are called listfiles and can be\nincluded one in another, by calling `include()` and `find_package()`, or\nindirectly with `add_subdirectory()`	text	txt
4129	2	CMake projects are configured with `CMakeLists.txt` listfiles.	text	txt
4129	3	It should contain at least two commands:	text	txt
4129	4	cmake_minimum_required(VERSION <x.xx>)\nproject(<name> <OPTIONS>)	code	txt
4129	5	We also have an `add_subdirectory(api)` command to include another\n`CMakeListst.txt` file from the api directory to perform steps that are\nspecific to the API part of our application.	text	txt
4130	1	Not that many: a script can be as complex as you like or an empty file.\nHowever, it is recommended that you call the `cmake_minimum_required()`\ncommand at the beginning of the script. This command tells CMake which\npolicies should be applied to subsequent commands in this project	text	txt
4130	2	When running scripts, CMake won't execute any of the usual stages (such as\nconfiguration or generation), and it won't use the cache.	text	txt
4131	1	To use a utility module, we need to call an `include(<MODULE>)` command.	text	txt
4133	1	Unlike some other languages, the fundamental types (`bool`, `char`, `int`,\n`float`,...) in C++ do not receive special treatment with the following\nexceptions:	text	txt
4133	2	- Fundamental types have their semantics defined in the C++ standard.\n- Default initializing a variable of a fundamental type does not perform any\n  initialization.\n- Arguments to operators for fundamental types are prvalues.	text	txt
4133	3	#include <string>\n\nint v; // left uninitialized\n\n// Only well-defined since C++17\nint x = 1;\n(x = 2) = x; // x == 1\n\n// right side evalutes: 1 (prvalue)\n// left side evaluates: ref to x (x==2)\n// assignment evaluates: ref to x (x==1)\n\nstd::string y = "a";\n(y = "b") = y; // y == "b"\n\n// right side evaluates: ref to y\n// left side evalutes: ref y (y=="b")\n// assignment evaluates: ref to y (y=="b")	code	cpp
4137	1	* direct initialization initializes an object from an explicit set of\n  constructor arguments.\n* copy initialization initializes an object from another object.\n* brace initialization prevents narrowing conversion of data types.\n* all elements of list initialization should be of the same type.	text	txt
4137	2	#include <iostream>\n#include <initializer_list>\n#include <string>\n#include <vector>\n#include <map>\n\nvoid func(int const a, int const b, int const c)\n{\n    std::cout << a << b << c << '\\\\n';\n}\n\nvoid func(std::initializer_list<int> const list)\n{\n    for (auto const& e: list)\n        std::cout << e;\n    std::cout << '\\\\n';\n}\n\nint main()\n{\n    std::string s1("text"); // direct initialization\n    std::string s2 = "text"; // copy initialization\n    std::string s3{"text"}; // direct list-initialization\n    std::string s4 = {"text"}; // copy list-initialization\n\n    std::vector<int> v{1, 2, 3};\n    std::map<int, std::string> m{{1, "one"}, {2, "two"}};\n\n    func({1, 2, 3}); // call std::initializer_list<int> overload\n\n    std::vector v1{4}; // size = 1\n    std::vector v2(4); // size = 4\n\n    auto a = {42}; // std::initializer_list<int>\n    auto b{42}; // int\n    auto c = {4, 2}; //std::initializer_list<int>\n    auto d{4, 2}; // error, too many elements	code	cpp
4138	1	Before C++ direct list initialization deduced as `std::initializer_list<int>`\nbut since C++17 it is as `int`.	text	txt
4138	2	auto x { 42 };\n// before C++17: std::initializer_list<int>\n// since C++17: int	code	cpp
4139	1	Aggregate types can be initialized using special aggregate initialization.\nThis initializes members in their declaration order. Members that are not\nexplicitly initialized and do not have a default member initializer are\ninitialized using empty copy-list-initialization (i.e. `T x={}`).	text	txt
4139	2	#include <string>\n#include <vector>\n\nstruct Data\n{\n    int x;\n    double y;\n    std::string label = "Hello World!"; // only permitted since C++14\n    std::vector<int> arr;\n};\n\nstruct X\n{\n    int a;\n    int b;\n};\n\nstruct Y\n{\n    X x;\n    X y;\n};\n\n// Initialization is done in declaration order:\nData a = {10, 2.3};\n// a.x == 10, a.y == 2.3\n// a.label == "Hello World!", a.arr == std::vector<int>{}\n\n// Nested brackets can be omitted:\nY b = { 10, 20, 30 };\n// b.x == {10, 20}, b.y == {30, int{} == 0}	code	cpp
4140	1	C++20 introduced designated initializers for aggregate initialization. This\nallows for better control over which elements of the aggregate will be\nexplicitly initialized.	text	txt
4140	2	#include <string>\n\nstruct Data {\n    int a;\n    double b;\n    std::string c;\n};\n\nData x = { .b = 2.4 };\n// x == { 0, 2.4, "" }\n\n// Typical use case with default-heavy aggregate:\nstruct Configuration {\n    enum class options { enabled, disabled };\n    struct Coords { int x; int y; };\n\n    options used_option = options::enabled;\n    std::string label = "default label";\n    Coords coords = { 10, 20 };\n};\n\nConfiguration config = { .label = "some label" };\n// config == {options::enabled, "some label", {10, 20}};\n\n// A clunky but functional option for named agruments in C++\nstruct Arg { const std::string& label; int64_t id; };\nvoid some_func(Arg arg) {}\n\nsome_func({.label = config.label, .id = 42});	code	cpp
5145	1	import QtQuick	text	txt
4145	1	if (std::is_constant_evaluated())\n{\n    /* A */\n}\nelse\n{\n    /* B */\n}	code	cpp
5232	1	act -a <name>\nact --actor <name>	code	sh
4146	1	- `if consteval` is part of the core language, so no header needed\n- `if consteval` cannot be used wrong, but `is_constant_evaluated()` can:	text	txt
4146	2	if constexpr (std::is_constant_evaluated()) { /*A*/ } else { /*B*/ };	code	cpp
4146	3	- Within `if consteval` block you can call immediate `consteval` functions.	text	txt
4147	1	Besides being a simple smart pointer, `std::unique_ptr` is also an important\nsemantic tool, marking an ownership handoff.	text	txt
4340	2	#include <chrono>\n#include <thread>\n\nusing namespace std::chrono_literals;\n\nauto tp1 = std::chrono::steady_clock::now();\nstd::this_thread::sleep_for(1ms);\nauto tp2 = std::chrono::steady_clock::now();\n\nauto micro = std::chrono::duration_cast<std::chrono::microseconds>(tp2 - tp1);\nstd::cout << micro << "\\\\n";\n// example output: 1115µs	code	cpp
4341	1	#include <chrono>\n\nbool system_is_steady = std::chrono::system_clock::is_steady;	code	cpp
4342	1	#include <chrono>\n\nauto resolution = std::chrono::system_clock::duration{1};	code	cpp
4147	2	#include <memory>\n\nstruct Data{};\n\n// Function returning a unique_ptr handing off ownership to caller.\nstd::unique_ptr<Data> producer() { return std::make_unique<Data>(); }\n\n// Function accepting a unique_ptr taking over ownership.\nvoid consumer(std::unique_ptr<Data> data) {}\n\n// Helps with Single Reponsibility Principle\n// by separating resource management from logic\nstruct Holder {\n    Holder() : data_{std::make_unique<Data>()} {}\n    // implicitly defaulted move constructor && move assignment\n    // implicitly deleted copy constructor && copy assignment\nprivate:\n    std::unique_ptr<Data> data_;\n};\n\n// shared_ptr has a fast constructor from unique_ptr\nstd::shared_ptr<Data> sptr = producer();\n\n// Even in cases when manual resource management is required,\n// a unique_ptr on the interface might be preferable:\nvoid manual_handler(std::unique_ptr<Data> ptr) {\n    Data* raw = ptr.release();\n    // manual resource management\n}	code	cpp
4149	1	Unnamed namespaces as well as all namespaces declared directly or indirectly\nwithin an unnamed namespace have internal linkage, which means that any name\nthat is declared within an unnamed namespace has internal linkage.	text	txt
4149	2	namespace\n{\n    void f() { } // ::(unique)::f\n}\n\nf(); // OK\n\nnamespace A\n{\n    void f() { } // A::f\n}\n\nusing namespace A;\n\nf(); // Error: ::(unique)::f and A::f both in scope	code	cpp
4150	1	Prior to C++11, non-type template arguments could not be named with internal\nlinkage, so `static` variables were not allowed.\nVC++ compiler still doesn't support it.	text	txt
4150	2	template <int const& Size>\nclass test {};\n\nstatic int Size1 = 10; // internal linkage due static\n\nnamespace\n{\n    int Size2 = 10; // internal linkage due unnamed namespace\n}\n\ntest<Size1> t1; // error only on VC++\ntest<Size2> t2; // okay	code	cpp
5493	1	#include <ftxui/dom/elements.hpp>\n\nconstexpr auto content{"Flashback, for experts like you."};\n\nint main()\n{\n    ftxui::Element modifiedText{ftxui::text(content) | ftxui::bold};\n}	code	cpp
4151	1	Members of an inline namespace are treated as if they are members of the\nenclosing namespace. This property is transitive: if a namespace N contains\nan inline namespace M, which in turn contains an inline namespace O, then the\nmembers of O can be used as though they were members of M or N.	text	txt
4151	2	Common use cases of inline namespaces are:	text	txt
4151	3	* Specialization of a template is required to be done in the same namespace\n  where the template was declared.\n* Define the content of the library inside a namespace\n* Define each version of the library or parts of it inside an inner inline\n  namespace\n* Use preprocessor macros to enable a particular version of the library	text	txt
4151	4	namespace incorrect_implementation\n{\n    namespace v1\n    {\n        template<typename T>\n        int test(T value) { return 1; }\n    }\n\n    namespace v2\n    {\n        template<typename T>\n        int test(T value) { return 2; }\n    }\n\n    #ifndef _lib_version_1\n        using namespace v1;\n    #endif\n\n    #ifndef _lib_version_2\n        using namespace v2;\n    #endif\n}\n\nnamespace broken_client_code\n{\n    // okay\n    auto x = incorrect_implementation::test(42);\n\n    struct foo { int a; };\n\n    // breaks\n    namespace incorrect_implementation\n    {\n        template <>\n        int test(foo value) { return value.a; }\n    }\n\n    // won't compile\n    auto y = incorrect_implementation::test(foor{42});\n\n    // library leaks implementation details\n    namespace incorrect_implementation\n    {\n        namespace version_2\n        {\n            template<>\n            int test(foo value) { return value.a; }\n        }\n    }\n\n    // okay, but client needs to be aware of implementation details\n    auto y = incorrect_implementation::test(foor{42});\n}\n\nnamespace correct_implementation\n{\n    #ifndef _lib_version_1\n    inline namespace v1\n    {\n        template<typename T>\n        int test(T value) { return 1; }\n    }\n    #endif\n\n    #ifndef _lib_version_2\n    inline namespace v2\n    {\n        template<typename T>\n        int test(T value) { return 2; }\n    }\n    #endif\n}\n\nnamespace working_client_code\n{\n    // okay\n    auto x = correct_implementation::test(42);\n\n    struct foo { int a; };\n\n    namespace correct_implementation\n    {\n        template <>\n        int test(foo value) { return value.a; }\n    }\n\n    // okay\n    auto y = correct_implementation::test(foor{42});\n}	code	cpp
4152	1	// before C++17\nnamespace A\n{\n    namespace B\n    {\n        namespace C\n        {\n            /* ... */\n        }\n    }\n}\n\n// since C++16\nnamespace A::B::C\n{\n    /* ... */\n};	code	cpp
4154	1	import std;\n\nint main()\n{\n    std::cout << std::format("{}\\\\n", "modules are working");\n}	code	cpp
4154	2	Headers can also be imported:	text	txt
4154	3	import std;\nimport "geometry.hpp"	code	cpp
4163	5	#include <string>\n#include <vector>\n#include <memory>\n\nint main()\n{\n    auto i = 42; // int\n    auto d = 42.5; // double\n    auto c = "text"; // char const*\n    auto z = {1, 2, 3}; // std::initializer_list<int>\n\n    auto b = new char[10]{0}; // char*\n    auto s = std::string{"text"}; // std::string\n    auto v = std::vector<int>{1, 2, 3}; // std::vector<int>\n    auto p = std::make_shared<int>(42); // std::shared_ptr<int>\n\n    auto upper = [](char const c) { return toupper(c); };\n    auto add = [](auto const a, auto const b) { return a + b; };\n\n    template<typename F, typename F>\n    auto apply(F&& f, T value)\n    {\n        return f(value);\n    }\n}\n\nclass foo\n{\n    int _x;\npublic:\n    foo(int const x = 0): _x{x} {}\n    int& get() { return _x; }\n};\n\ndecltype(auto) proxy_gen(foo& f) { return f.get(); }\n// ^__ decltype() preserves cv-ref qualification of return type	code	cpp
4165	1	* Only by C++20 structured bindings can include `static` or `thread_local`\n  specifiers in the declaration.\n* Only by C++20 `[[maybe_unused]]` attribute can be used in the declaration.\n* Only by C++20 a lambda can capture structure binding identifiers.	text	txt
4165	2	#include <iostream>\n#include <set>\n\nint main()\n{\n    std::set<int> numbers;\n\n    if (auto const [iter, inserted] = numbers.insert(1); inserted)\n        std::cout << std::distance(numbers.cbegin(), iter);\n}	code	cpp
4167	1	#include <bitset>\n\nusing byte = std::bitset<8>;\nusing fn = void(byte, double);\nusing fn_ptr = void(*)(byte, double);\n\nvoid func(byte b, double d) { /* ... */ }\n\nint main()\n{\n    byte b{001101001};\n    fn* f = func;\n    fn_ptr fp = func;\n}	code	cpp
4168	1	Scoped enumerations do not export their enumerators to the surrounding scope.	text	txt
4168	2	Scoped enumerations have an underlying type so they can be forward declared.	text	txt
4168	3	Values of scoped enumerations do not convert implicitly to int.	text	txt
4168	4	enum class status: unsigned int; // forward declared\n\nstatus do_something(); // function declaration/prototype\n\nenum class status : unsigned int\n{\n    success = 0,\n    failed = 1,\n    unknown = 0xffff0000U\n};\n\nstatus do_something() { return status::success; }	code	cpp
4169	1	#include <string>\n\nenum class status : unsigned int\n{\n    success = 0,\n    failure = 1,\n    unknown = 0xffff0000U\n};\n\nstd::string_view to_string(status const s)\n{\n    switch (s)\n    {\n        using enum status;\n        case success: return "success";\n        case failure: return "failure";\n        case unknown: return "unknown";\n    }\n}	code	cpp
4170	1	`std::variant` is the C++17 type-safe alternative to union which supports\nnon-trivial custom types.	text	txt
4170	2	Variant is never empty. Without arguments, it default constructs the first\ntype.	text	txt
4170	3	#include <variant>\n#include <string>\n\nstd::variant<int, double, std::string> v{"some characters"};\nbool x = std::holds_alternative<std::string>(v);\n// x == true	code	cpp
4171	1	Assignment sets the variant type:	text	txt
4171	2	#include <variant>\n#include <string>\n\nstd::variant<int, double, std::string> v;\nv = 10;	code	cpp
4172	1	Elements can be extracted by type or index; however, only the active type can\nbe accessed.	text	txt
4172	2	#include <variant>\n#include <string>\n\nstd::variant<int, double, std::string> v{10};\nint number;\n\nnumber = std::get<int>(v);\nnumber = std::get<0>(v); // same as above but with index	code	cpp
4172	3	`std::variant` throws when we attempt to access the wrong type:	text	txt
4172	4	#include <variant>\n#include <string>\n\nstd::variant<int, double, std::string> v{10};\n\ndouble value = std::get<double>(v);\n// throws std::bad_variant_access	code	cpp
4173	1	When working with `std::variant`, querying the current content can become\ncumbersome. As an alternative, especially for cases when type deduction is\ninvolved, we can use the `std::visit`.	text	txt
4173	2	The `std::visit` requires as an argument an invocable that is compatible with\neach of the contained types.	text	txt
4175	1	The `std::expected` (C++23) comes with a monadic interface. Relying on the\nmonadic interface prevents the typical if-then-else verbose error checking.\nThe `and_then()` and `or_else()` methods expect a callable that accepts a\nvalue/error and returns a `std::expected`. The `transform` and\n`transform_error` methods expect a callable that accepts a value/error and\nreturns a value/error.	text	txt
4176	1	Before C++20 you had to define six operators for a type to provide full\nsupport for all possible comparisons of its objects. The problem is that even\nthough most of the operators are defined in terms of either `operator ==` or\n`operator <`, the definitions are tedious and they add a lot of visual\nclutter.	text	txt
4176	2	class Value\n{\n    long id;\n\npublic:\n    bool operator==(Value const& rhs) const { return id == rhs.id; }\n    bool operator!=(Value const& rhs) const { return !(*this == rhs); }\n    bool operator< (Value const& rhs) const { return id < rhs.id; }\n    bool operator<=(Value const& rhs) const { return !(*this < rhs); }\n    bool operator> (Value const& rhs) const { return rhs < *this; }\n    bool operator>=(Value const& rhs) const { return !(rhs < *this); }\n};	code	cpp
4176	3	In addition, for a well implemented type, you might need:	text	txt
4176	4	- Declare the operators with `noexcept` if they cannot throw.\n- Declare the operators with `constexpr` if they can be used at compile time.\n- Declare the operators as hidden friends (declare them with `friend` inside\n  the class structure so that both operands become parameters and support\n  implicit conversions if the constructors are not `explicit`).\n- Declare the operators with `[[nodiscard]]` to warn if the return value is\n  not used.	text	txt
5233	1	act -q\nact --quiet	code	sh
4176	5	class Value\n{\n    long id;\n\npublic:\n    [[nodiscard]] friend constexpr bool operator==(Value const& lhs, Value const& rhs) noexcept { return lhs.id == rhs.id; }\n    [[nodiscard]] friend constexpr bool operator!=(Value const& lhs, Value const& rhs) noexcept { return !(lhs == rhs); }\n    [[nodiscard]] friend constexpr bool operator< (Value const& lhs, Value const& rhs) noexcept { return lhs.id < rhs.id; }\n    [[nodiscard]] friend constexpr bool operator<=(Value const& lhs, Value const& rhs) noexcept { return !(lhs < rhs); }\n    [[nodiscard]] friend constexpr bool operator> (Value const& lhs, Value const& rhs) noexcept { return rhs < lhs; }\n    [[nodiscard]] friend constexpr bool operator>=(Value const& lhs, Value const& rhs) noexcept { return !(rhs < lhs); }\n};	code	cpp
4176	6	Since C++20 `operator ==` also implies `operator !=`, therefore, for `a` of\ntype `TypeA` and `b` of `TypeB`, the compiler will be able to compile `a !=\nb` if there is:	text	txt
4176	7	- a freestanding `operator !=(TypeA, TypeB)`\n- a freestanding `operator ==(TypeA, TypeB)`\n- a freestanding `operator ==(TypeB, TypeA)`\n- a member function `TypeA::operator!=(TypeB)`\n- a member function `TypeA::operator==(TypeB)`\n- a member function `TypeB::operator==(TypeA)`	text	txt
4176	8	Having both a freestanding and a member function is an ambiguity error.	text	txt
4176	9	Since C++20 it is enough to declare `operator <=>` with `=default` so that\nthe defaulted member `operator <=>` generates a corresponding member\n`operator ==`:	text	txt
4176	10	class Value\n{\n    auto operator<=>(Value const& rhs) const = default;\n    auto operator==(Value const& rhs) const = default; // implicitly generated\n};	code	cpp
4176	11	Both operators use their default implementation to compare objects member by\nmember. The order to the members in the class matter.	text	txt
4176	12	In addition, even when declaring the spaceship operator as a member function,\nthe generated operators:	text	txt
4176	13	- are `noexcept` if comparing the members never throws\n- are `constexpr` if comparing the members is possible at compile time\n- implicit type conversions for the first operand are also supported if a\n  corresponding implicit type conversion is defined\n- may warn if the result of a comparison is not used (compiler dependent)	text	txt
4177	1	If the `operator <=>` for `x <= y` does not find a matching definition of\n`operator <=`, it might be rewritten as `(x <=> y) <= 0` or even `0 <= (y <=>\nx)`. By this rewriting, the `operator <=>` performs a three-way comparison,\nwhich yields a value that can be compared with 0:	text	txt
4177	2	- If the value of `x <=> y` compares equal to 0, `x` and `y` are equal or equivalent.\n- If the value of `x <=> y` compares less than 0, `x` is less than `y`.\n- If the value of `x <=> y` compares greater than 0, `x` is greater than `y`.	text	txt
4174	1	#include <variant>\n#include <string>\n#include <iostream>\n\nstd::variant<int, double, std::string> v;\n\ntemplate<typename ...Ts>\nstruct overloaded : Ts...\n{\n    using Ts::operator()...;\n};\n\nv = 3.14;\n\nstd::visit(overloaded{\n    [](int& x) {\n        std::cout << "int: " << x << '\\n';\n    },\n    [](double& x) {\n        std::cout << "double: " << x << '\\n';\n    },\n    [](std::string& x) {\n        std::cout << "std::string: " << x << '\\n';\n    }\n}, v);\n// prints "double: 3.14"	code	cpp
4177	3	The return type of `operator <=>` is not an integral value. The return type\nis a type that signals the comparison category, which could be the *strong\nordering*, *weak ordering*, or *partial ordering*. These types support the\ncomparison with 0 to deal with the result.	text	txt
4177	4	You have to include a specific header file to deal with the result of\n`operator <=>`.	text	txt
4177	5	#include <compare>\n\nclass Value\n{\n    long id;\n\npublic:\n    std::strong_ordering operator<=>(Value const& rhs) const\n    {\n        return id < rhs.id ? std::strong_ordering::less :\n            id > rhs.id ? std::strong_ordering::greater :\n                std::strong_ordering::equivalent;\n    }\n};	code	cpp
4177	6	However, it is usually easier to define the operator by mapping it to results\nof underlying types.	text	txt
4177	7	#include <compare>\n\nclass Value\n{\n    long id;\n\npublic:\n    auto operator<=>(Value const& rhs) const\n    {\n        return id <=> rhs.id;\n    }\n};	code	cpp
4177	8	The member function has to take the second parameter as `const` lvalue\nreference with `=default`. A friend function might also take both parameters\nby value.	text	txt
4178	1	- **strong ordering**: any value of a given type is either *less than* or\n  *equal to* or *greater than* any other value of this type. If a value is\n  neither less nor greater is has to be equal.\n  + `std::strong_ordering:less`\n  + `std::strong_ordering:equal` or `std::strong_ordering::equivalent`\n  + `std::strong_ordering:greater`\n- **weak ordering**: any value of a given type is either *less than*,\n  *equivalent to* or *greater than* any other value of this type. However,\n  equivalent values do not have to be equal (have the same value).\n  + `std::weak_ordering::less`\n  + `std::weak_ordering::equivalent`\n  + `std::weak_ordering::greater`\n- **partial ordering**: any value of a given type could either be *less\n  than*, *equivalent to* or *greater than* any other value of this type.\n  However it could also happen that you cannot specify a specific order\n  between two values.\n  + `std::partial_ordering::less`\n  + `std::partial_ordering::equivalent`\n  + `std::partial_ordering::greater`\n  + `std::partial_ordering::unordered`	text	txt
4178	2	As an example, a floating-point type has a special value `NaN`. Any\ncomparison with `NaN` yields `false`. So in this case a comparison might\nyield that two values are unordered and the comparison operator might return\none of four values.	text	txt
4178	3	Stronger comparison types have implicit type conversions to weaker comparison\ntypes.	text	txt
4178	4	Relational comparison with `nullptr` results compiler error.	text	txt
4178	5	Comparison types themselves can be compared against a specific return value.\nDue to implicit type conversions to weaker ordering types `x <=> y ==\nstd::partial_ordering::equivalent` will compile even if the `operator <=>`\nyields a `std::strong_ordering` or `std::weak_ordering` value. However, the\nother way around does not work. Comparison with 0 is always possible and\nusually easier.	text	txt
4179	1	The return type does not compile if the attributes have different comparison\ncategories. In that case use the weakest comparison type as the return type.	text	txt
4179	2	#include <compare>\n#include <string>\n\nclass Person\n{\n    std::string name;\n    double weight;\n\npublic:\n    std::partial_ordering operator<=>(Person const& rhs) const\n    {\n        auto cmp1 = name <=> rhs.name;\n        if (name != 0) return cmp1; // std::strong_ordering\n\n        return weight <=> rhs.weight; // std::partial_ordering\n    }\n};	code	cpp
4179	3	If you do not know the comparison types, use\n`std::common_comparison_category<>` type trait that computes the strongest\ncomparison category.	text	txt
4191	3	auto fibonacci = [](this auto self, int n)\n{\n    if (n < 2) { return n; }\n    return self(n - 1) + self(n - 2);\n};	code	cpp
4207	4		code	txt
4179	4	#include <compare>\n#include <string>\n\nclass Person\n{\n    std::string name;\n    double weight;\n\npublic:\n    auto operator<=>(Person const& rhs) const\n        -> std::common_comparison_category_t<decltype(name <=> rhs.name),\n                                             decltype(weight <=> rhs.name)>\n    {\n        auto cmp1 = name <=> rhs.name;\n        if (name != 0) return cmp1; // std::strong_ordering\n\n        return weight <=> rhs.weight; // std::partial_ordering\n    }\n};	code	cpp
4182	1	#include <memory>\n\nclass string_buffer\n{\npublic:\n    explicit string_buffer() {}\n    explicit string_buffer(std::size_t const size) {}\n    explicit string_buffer(char const* const ptr) {}\n    explicit operator bool() const { return false; }\n    explicit operator char* const () const { return nullptr; }\n};\n\nint main()\n{\n    std::shared_ptr<char> str;\n    string_buffer b1;            // calls string_buffer()\n    string_buffer b2(20);        // calls string_buffer(std::size_t const)\n    string_buffer b3(str.get()); // calls string_buffer(char const*)\n\n    enum item_size { small, medium, large };\n\n    // implicit conversion cases when explicit not specified\n    string_buffer b4 = 'a';      // would call string_buffer(std::size_t const)\n    string_buffer b5 = small;    // would call string_buffer(std::size_t const)\n}	code	cpp
4183	1	struct base\n{\n    // default member initialization\n    const int height = 14;\n    const int width = 80;\n\n    v_align valign = v_align::middle;\n    h_align halign = h_align::left;\n\n    std::string text;\n\n    // constructor initialization list\n    base(std::string const& t): text{t}\n    {}\n\n    base(std::string const& t, v_align const va, h_align const ha): text{t}, valign{va}, halign{ha}\n    {}\n};	code	cpp
4184	1	[[nodiscard]] bool completed();	code	cpp
4185	1	[[nodiscard("lock objects should never be discarded")]] bool generated();	code	cpp
4186	1	auto l = [] [[nodiscard]] () -> int { return 42; };\nl(); // warning here	code	cpp
4187	1	struct [[nodiscard]] ErrorType{};\nErrorType get_value();\n\nint main()\n{\n    get_value(); // warning here\n}	code	cpp
4188	1	*C++20*\nstruct Holder\n{\n    [[nodiscard]] Holder(int value);\n    Holder();\n};\n\nint main()\n{\n    Holder{42}; // warning here\n    Holder h{42}; // constructed object not discarded, no warning\n    Holder{}; // default constructed, no warning\n}	code	cpp
4189	1	Using 4 overloads for all possible combinations of ref-quilified methods is\ncode dupliation.	text	txt
4189	2	class box\n{\npublic:\n    box(std::string label): m_label{std::move(label)} {}\n    std::string& label() & { return m_label; }\n    std::string const& label() const& { return m_label; }\n    std::string&& label() && { return std::move(m_label); }\n    std::string const&& label() const&& { return std::move(m_label); }\nprivate:\n    std::string m_label;\n};	code	cpp
4189	3	Since C++23 we can replace all 4 overloads with one:	text	txt
4189	4	class box\n{\npublic:\n    box(std::string label): m_label(std::move(label)} {}\n    template<typename S> auto&& label(this S&& self)\n    {\n        return std::forward<S>(self).m_label;\n    }\n};	code	cpp
4190	1	C++23 allows you to write ref-qualified members differently:	text	txt
4190	2	void f() &;\nvoid g() const&;\nvoid h() &&;	code	cpp
4190	3	Instead:	text	txt
4190	4	void f(this Data&);\nvoid g(this Data const&);\nvoid h(this Data&&);	code	cpp
4191	1	C++23 allows for recursive lambda expressions.	text	txt
4198	1	#include <iostream>\n\nvoid print_container(auto const& container)\n{\n    for (auto const& element: container)\n    {\n        std::cout << element << '\\\\n';\n    }\n}	code	cpp
4207	1	- Types for constant integral values (int, long, enum, ...)\n- `std::nullptr_t`\n- Pointers to be globally visible objects/function/members\n- Lvalue references to objects or functions\n- Floating point types (C++20)\n- Data structures with public members (C++20)\n- Lambdas (C++20)	text	txt
4207	2	**Not supporting types:**	text	txt
5223	1	Because the default containers are huge, we should specify a light-weight container instead:	text	md
4208	1	#include <iostream>\n#include <algorithm>\n#include <iterator>\n#include <vector>\n\ntemplate<template<typename> typename V, typename T>\nvoid print(V<T> const& container)\n{\n    for (auto const& item: container)\n        std::cout << item << " ";\n    std::cout << std::endl;\n}\n\nint main()\n{\n    print(std::vector<int>{1,2,3,4});\n}	code	cpp
4209	1	It is a template parameter representing multiple parameters with different types.	text	txt
4209	2	void print() { }\n\ntemplate<typename T, typename... Types>\nvoid print(T first, Types... rest)\n{\n    std::cout << first << '\\\\n';\n    print(rest...);\n}	code	cpp
4210	1	void num_args() { }\n\ntemplate<typename T, typename... Types>\nvoid num_args(T first, Types... rest)\n{\n    std::cout << sizeof...(rest) + 1 << '\\\\n';\n}	code	cpp
4211	1	Parameter pack is available since C++17:	text	txt
4211	2	template<typename... Args>\nauto print(Args... args)\n{\n    (std::cout << ... << args) << std::endl;\n}\n\nprint(42, "42", 42.0);	code	cpp
4239	8	The second overload resolution might seem strange that integers fit two\niterators, but compiler only sees two matching arguments having the same type\nwhich can also be `int`.	text	txt
4223	1	For each function or class template, there are preconditions and\nrequirements. These requirements were implicitly handled before C++20, but\nconcepts make it easier to express requirements explicitly.	text	txt
4223	2	template<typename T>\nrequires std::is_copyable<T> && supports_less_than<T>\nT max_value(T a, T b)\n{\n    return b < a ? a : b;\n}	code	cpp
4224	1	template<typename T>\nconcept supports_less_than = requires (T x) { x < x; };	code	cpp
4225	1	Having two different function bodies but with the same signature, would\nresult in ambigous overload and compiler will raise an error.	text	txt
4225	2	To inform compiler about the best match of two overloads with same signature,\nwe can use concepts as a type constraint.	text	txt
4225	3	template<typename T>\nconcept has_push_back = requires (Container c, Container::value_type v) { c.push_back(v); };\n\ntemplate<typename T>\nconcept has_insert = requires (Container c, Container::value_type v) { c.insert(v); };\n\nvoid add(has_push_back auto& container, auto const& value)\n{\n    container.push_back(value);\n}\n\nvoid add(has_insert auto& container, auto const& value)\n{\n    container.insert(value);\n}	code	cpp
4226	1	template<typename T>\nconcept has_push_back = requies (Container c, Container::value_type v) { c.push_back(v); };\n\ntemplate<has_push_back C, typename T>\nvoid add(C& container, T const& value)\n{\n    container.push_back(value);\n}\n\nvoid add(has_push_back auto& container, auto const& value)\n{\n    container.push_back(value);\n}\n\nvoid add(auto& container, auto const& value)\n{\n    if constexpr (requires { container.push_back(value); })\n    {\n        container.push_back(value);\n    }\n    else\n    {\n        container.insert(value);\n    }\n}	code	cpp
4230	1	Class template arguments have to support all operations of member templates\nthat are **used**. They don't have to support all the operations that\n**could** be used.	text	txt
4230	2	template<typename T>\nclass stack\n{\npublic:\n    std::vector<T> container;\nprivate:\n    void print() const\n    {\n        for (T const& element: container)\n        {\n            std::cout << element << ' ';\n            // requires operator<<() support for type T\n        }\n    }\n};	code	cpp
1458	1	template<typename T>\nclass pod_wrapper\n{\n    static_assert(std::is_standard_layout_v<T>, "POD type expected!");\n    T value;\n};\n\nstruct point\n{\n    int x;\n    int y;\n};\n\npod_wrapper<int> w1; // OK\npod_wrapper<point> w2; // OK\npod_wrapper<std::string> w3; // error: POD type expected	code	cpp
4239	1	Compiler tries to deduce class template arguments by first deducing the\nconstructor argument types which is a regular function template argument\ndeduction. If a constructor meets all the following requirements, then its\nargument types will be used for class template arguments.	text	txt
4239	2	1. Number of arguments must match\n2. Types must fit (including implicit conversions)\n3. Choose best match:\n  - Perfect match over template\n  - Template over conversion\n  - For non-empty brace initialization, `std::initializer_list<>` has highest\n    priority	text	txt
4239	3	namespace std\n{\n    template<typename ElemT, typename Allocator = allocator<T>>\n    class vector\n    {\n    public:\n        vector() noexcept(noexcept(Allocator()));\n\n        explicit vector(Allocator const&) noexcept;\n\n        explicit vector(size_t n, Allocator const& = Allocator());\n\n        vector(size_t n, ElemT const& value, Allocator const& = Allocator());\n\n        template<typename Iter>\n        vector(Iter beg, Iter end, Allocator const& = Allocator());\n\n        vector(vector const& x);\n\n        vector(vector&&) noexcept;\n\n        vector(vector const&, Allocator const&);\n\n        vector(vector&&, Allocator const&);\n\n        vector(vector&&, Allocator const&);\n\n        vector(initializer_list<ElemT>, Allocator const& = Allocator());\n    };\n} // std\n\nint main()\n{\n    std::vector v1(42, 73);\n}	code	cpp
4239	4	By following the overload resolution matching rules, the first rule *number\nof arguments* specifies that we have 6 following matches that fit two\nparameters:	text	txt
4239	5	explicit vector(size_t n, Allocator const& = Allocator());\n\nvector(size_t n, ElemT const& value, Allocator const& = Allocator());\n\ntemplate<typename Iter>\nvector(Iter beg, Iter end, Allocator const& = Allocator());\n\nvector(vector&&, Allocator const&);\n\nvector(vector&&, Allocator const&);\n\nvector(initializer_list<ElemT>, Allocator const& = Allocator());	code	cpp
4239	6	By applying the second rule *types must fit* we will only have the following\n3 remaining overload resolutions:	text	txt
5235	2	A user can be assigned multiple roles, but only one role can be active at a time.	text	md
4239	7	vector(size_t n, ElemT const& value, Allocator const& = Allocator());\n\ntemplate<typename Iter>\nvector(Iter beg, Iter end, Allocator const& = Allocator());\n\nvector(initializer_list<ElemT>, Allocator const& = Allocator());	code	cpp
4309	1	C++20 added prefix and suffix checking methods: starts_with and ends_with to both std::string and std::string_view.	text	txt
4239	9	Going further, the third rule of *choose the best match*, we would lose the\nfirst two because if we have an initializer list for constructing an object,\nthe overload resolution having `std::initializer_list<>` is a best match. So\nwe would only have the last overload:	text	txt
4239	10	vector(initializer_list<ElemT>, Allocator const& = Allocator());	code	cpp
4244	1	The type of objects without template arguments are not types, but act as a\nplaceholder for a type that activates CTAD. When compiler encouters it, it\nbuilds a set of deduction guides which can be complemented by user with user\ndefined deduction rules.	text	txt
4244	2	**CTAD** does not occur if the template argument list is present.	text	txt
4244	3	std::pair p{42, "demo"};    // std::pair<int, char const*>\nstd::vector v{1, 2};        // std::vector<int>\n\n// declaration of the template\ntemplate<typename T>\nstruct container\n{\n    container(T t) {}\n\n    template<typename Iter>\n    container(Iter beg, Iter end);\n};\n\n// additional deduction guide\ntemplate<typename Iter>\ncontainer(Iter b, Iter e) -> container<typename std::iterator_traits<Iter>::value_type>;\n\n// use cases\ncontainer c(7); // OK: deduces container<int> using an implicitly-generated guide\nstd::vector<double> v = {/* ... */};\nauto d = container(v.begin(), v.end()); // OK: deduces container<double>\ncontainer e{5, 6}; // Error: there is no std::iterator_traits<int>::value_type	code	cpp
5192	1	name: Custom Workflow\non:\n  workflow_dispatch:\nsteps:\n  release:\n    runs-on: ubuntu-latest\n    env:\n      GITHUB_TOKEN: ${{ secrets.github_token }}\n    permissions:\n      contents: write\n    steps:\n      - name: Create release\n        uses: actions/create-release@v2\n        with:\n          draft: false\n          prerelease: false\n          release_name: "${{ github.ref_name }}"\n          tag_name: "${{ github.ref_name }}"\n          body: "Program ${{ github.ref_name }}"	code	yml
5272	2	rm -i <file>	code	sh
4247	1	#include <vector>\n#include <map>\n\nstd::vector<int> get_numbers()\n{\n    return std::vector<int>{1, 2, 3, 4, 5};\n}\n\nstd::map<int, double> get_doubles()\n{\n    return std::map<int, double>{\n        {0, 0.0},\n        {1, 1.1},\n        {2, 2.2}\n    };\n}\n\nint main()\n{\n    auto numbers = std::vector<int>{1, 2, 3, 4, 5};\n    auto copies = std::vector<int>(numbers.size() * 4);\n\n    for (int element: numbers)\n        copies.push_back(element);\n\n    for (int& element: numbers)\n        copies.push_back(element);\n\n    for (auto&& element: get_numbers())\n        copies.push_back(element);\n\n    for (auto&& [key, value]: get_doubles())\n        copies.push_back(key);\n}	code	cpp
5147	1	import QtQuick	text	txt
4248	1	#include <iostream>\n#include <stdexcept>\n#include <iterator>\n\ntemplate<typename T, std::size_t const S>\nclass dummy_array\n{\n    T data[S] = {};\n\npublic:\n    T const& at(std::size_t const index) const\n    {\n        if (index < S) return data[index];\n        throw std::out_of_range("index out of range");\n    }\n\n    void insert(std::size_t const index, T const& value)\n    {\n        if (index < S) data[index] = value;\n        else throw std::out_of_range("index out of range");\n    }\n\n    std::size_t size() const { return S; }\n};\n\ntemplate<typename T, typename C, std::size_t const S>\nclass dummy_array_iterator_type\n{\npublic:\n    dummy_array_iterator_type(C& collection, std::size_t const index): index{index}, collection{collection}\n    {}\n\n    bool operator !=(dummy_array_iterator_type const& other) const\n    {\n        return index != other.index;\n    }\n\n    T const& operator *() const\n    {\n        return collection.at(index);\n    }\n\n    dummy_array_iterator_type& operator ++()\n    {\n        ++index;\n        return *this;\n    }\n\n    dummy_array_iterator_type operator ++(int)\n    {\n        auto temp = *this;\n        ++*temp;\n        return temp;\n    }\n\nprivate:\n    std::size_t index;\n    C& collection;\n};\n\ntemplate<typename T, std::size_t const S>\nusing dummy_array_iterator = dummy_array_iterator_type<T, dummy_array<T, S>, S>;\n\ntemplate<typename T, std::size_t const S>\nusing dummy_array_const_iterator = dummy_array_iterator_type<T, dummy_array<T, S> const, S>;\n\ntemplate<typename T, std::size_t const S>\ninline dummy_array_iterator<T, S> begin(dummy_array<T, S>& collection)\n{\n    return dummy_array_iterator<T, S>(collection, 0);\n}\n\ntemplate<typename T, std::size_t const S>\ninline dummy_array_iterator<T, S> end(dummy_array<T, S>& collection)\n{\n    return dummy_array_iterator<T, S>(collection, collection.size());\n}\n\ntemplate<typename T, std::size_t const S>\ninline dummy_array_const_iterator<T, S> begin(dummy_array<T, S> const& collection)\n{\n    return dummy_array_const_iterator<T, S>(collection, 0);\n}\n\ntemplate<typename T, std::size_t const S>\ninline dummy_array_const_iterator<T, S> end(dummy_array<T, S> const& collection)\n{\n    return dummy_array_const_iterator<T, S>(collection, collection.size());\n}\n\nint main()\n{\n    dummy_array<int, 5> numbers;\n    numbers.insert(0, 1);\n    numbers.insert(1, 2);\n    numbers.insert(2, 3);\n    numbers.insert(3, 4);\n    numbers.insert(4, 5);\n\n    for (auto&& element: numbers)\n        std::cout << element << ' ';\n    std::cout << '\\\\n';\n}	code	cpp
4249	1	The alignment must match the size of the largest member in order to avoid\nperformance issues.	text	txt
4249	2	struct foo1         // size = 1, alignment = 1\n{                   // foo1:    +-+\n    char a;         // members: |a|\n};\n\nstruct foo2         // size = 2, alignment = 1\n{                   // foo1:    +-+-+\n    char a;         // members: |a|b|\n    char b;\n};\n\nstruct foo3         // size = 8, alignment = 4\n{                   // foo1:    +----+----+\n    char a;         // members: |a...|bbbb|\n    int  b;\n};\n\nstruct foo3_\n{\n    char a;         // 1 byte\n    char _pad0[3];  // 3 bytes\n    int  b;         // 4 byte\n};\n\nstruct foo4         // size = 24, alignment = 8\n{                   // foo4:    +--------+--------+--------+--------+\n    int a;          // members: |aaaa....|cccc....|dddddddd|e.......|\n    char b;\n    float c;\n    double d;\n    bool e;\n};\n\nstruct foo4_\n{\n    int a;          // 4 bytes\n    char b;         // 1 byte\n    char _pad0[3];  // 3 bytes\n    float c;        // 4 bytes\n    char _pad1[4];  // 4 bytes\n    double d;       // 8 bytes\n    bool e;         // 1 byte\n    char _pad2[7];  // 7 bytes\n};	code	cpp
4251	1	`alignas` takes an expression evaluating 0 or valid value for alignment, a\ntype-id, or a parameter pack.	text	txt
4251	2	Only valid values of object alignment are the powers of two.	text	txt
4251	3	Program is ill-formed if largest `alignas` on a declaration is smaller than\nnatural alignment without any `alignas` specifier.	text	txt
4251	4	// alignas specifier applied to struct\nstruct alignas(4) foo1  // size = 4, aligned as = 4\n{                       // foo1:    +----+\n    char a;             // members: |a.b.|\n    char b;\n};\n\nstruct foo1_            // size = 4, aligned as = 1\n{\n    char a;             // 1 byte\n    char b;             // 1 byte\n    char _pad0[2];      // 2 bytes\n};\n\n// alignas specifier applied to member data declarations\nstruct foo2             // size = 16, aligned as = 8\n{                       // foo2:    +--------+--------+\n    alignas(2) char a;  // members: |aa......|bbbb....|\n    alignas(8) int b;\n};\n\nstruct foo2_            // size = 16, aligned as = 4\n{\n    char a;             // 2 bytes\n    char _pad0[6];      // 6 bytes\n    int b;              // 4 bytes\n    char _pad1[4];      // 4 bytes\n};\n\n// the alignas specifier applied to the struct is less than alignas\n// specifier applied to member data declaration, thus will be ignored.\nstruct alignas(4) foo3  // size = 16, aligned as = 8\n{                       // foo3:    +--------+--------+\n    alignas(2) char a;  // members: |aa......|bbbbbbbb|\n    alignas(8) int b;\n};\n\nstruct foo3_            // size = 16, aligned as = 4\n{\n    char a;             // 2 byte\n    char _pad0[6];      // 6 bytes\n    int b;              // 4 bytes\n    char _pad1[4];      // 4 bytes\n};\n\nalignas(8) int a;       // size = 4, alignment = 8\nalignas(256) long b[4]; // size = 32, alignment = 256	code	cpp
4254	1	namespace units\n{\n    inline namespace literals\n    {\n        inline namespace units_literals\n        {\n            constexpr size_t operator ""_KB(unsigned long long const size)\n            {\n                return static_cast<size_t>(size * 1024);\n            }\n        }\n    }\n}\n\nint main()\n{\n    using namespace units::units_literals;\n\n    size_t bytes = "1024"_KB;\n}	code	cpp
4255	1	Always define literals in a separate namespace to avoid name clashes.	text	txt
4255	2	T operator ""_suffix(char const*);\n\ntemplate <char...>\nT operator ""_suffix();	code	cpp
5234	3	#!/usr/bin/env sh\n\nrandom="$(openssl rand -hex "$1")"\n\necho "random=$random" >> "$GITHUB_OUTPUT"	code	sh
5272	4	rm -I <file>	code	sh
5148	1	import QtQuick	text	txt
4452	2	This helps avoid dangling references and race conditions.	text	txt
5263	1	sudo hostname <new name>	code	sh
4286	1	class base\n{\n    virtual void foo() = 0;\n    virtual void bar() {}\n    virtual void baz() = 0;\n};\n\nclass alpha: public base\n{\n    virtual void bar() override {}\n    virtual void baz() override {}\n};\n\nclass beta: public alpha\n{\n    virtual void foo() override {}\n};\n\nbeta object;	code	cpp
4287	1	class base\n{\n    virtual void foo() = 0;\n    virtual void bar() {}\n    virtual void baz() = 0;\n};\n\nclass alpha: public base\n{\n    virtual void foo() override {}\n    virtual void baz() override final {}\n};\n\nclass beta: public alpha\n{\n    // won't compile\n    virtual void baz() override {}\n};\n\nint main()\n{\n    beta object;\n}	code	cpp
5457	1	3D reconstruction algorithms can take a set of 2D images and reconstruct a 3D scene. Use cases of calib3d is to find relationships between these images. The module can handle camera calibration.	text	md
4288	1	class base\n{\n    virtual void foo() = 0;\n    virtual void bar() {}\n    virtual void baz() = 0;\n};\n\nclass derived final: public base\n{\n    virtual void foo() override {}\n    virtual void baz() override {}\n};\n\n// won't compile\nclass prime: public derived\n{\n};	code	cpp
4289	1	#include <syncstream>\n#include <iostream>\n\nint main()\n{\n    std::osyncstream output_stream{std::cout};\n    output_stream << "This literal string will be";\n    output_stream << std::endl; // no effect\n    output_stream << "written into output stream";\n    // flushes on destruction\n}	code	cpp
4290	1	String stream operations are slow. To enhance the performance of operations,\nyou have the `view()` member function coming in C++20. This can be used as an\nalternative to `str()`. In short, rather than creating a copy of the internal\nstring, you will get a view instead, so there is no need to dynamically\nallocate memory.	text	txt
4290	2	#include <iostream>\n#include <sstream>\n\n// make allocations obvious\nvoid* operator new(std::size_t sz){\n    std::cout << "Allocating " << sz << " bytes\\\\n";\n    return std::malloc(sz);\n}\n\nint main() {\n    std::stringstream str;\n    str << "Using C++20 standard";\n    // allocates\n\n    std::cout << str.str() << '\\\\n';\n    // allocates\n\n    std::cout << str.view() << '\\\\n';\n    // doesn't allocate\n}	code	cpp
4291	1	Using C++20 there is an extra constructor that can take an rvalue reference\nto the string object, and thus it might not require an additional copy:	text	txt
4291	2	#include <iostream>\n#include <sstream>\n\n// make allocations obvious\nvoid* operator new(std::size_t sz){\n    std::cout << "Allocating " << sz << " bytes\\\\n";\n    return std::malloc(sz);\n}\n\nint main() {\n    std::stringstream str {std::string("hello C++ programming World")};\n}	code	cpp
4291	3	Compiled with C++17, two allocations can be witnessed. But compiled with\nC++20, duplicate copy no longer takes place.	text	txt
5264	1	uname -r	code	sh
4292	1	Staring with C++23, you can take complete control over the internal memory of\na stream.	text	txt
4292	2	#include <iostream>\n#include <sstream>\n#include <spanstream> // new header\n\n// make allocations obvious\nvoid* operator new(std::size_t sz){\n    std::cout << "Allocating " << sz << " bytes\\\\n";\n    return std::malloc(sz);\n}\n\nint main() {\n    std::stringstream ss;\n    ss << "one string that doesn't fit into SSO";\n    ss << "another string that hopefully won't fit";\n    // allocates memory\n\n    char buffer[128]{};\n    std::span<char> internal_memory(buffer);\n    std::basic_spanstream<char> ss2(internal_memory);\n    ss2 << "one string that doesn't fit into SSO";\n    ss2 << "another string that hopefully won't fit";\n    // doesn't allocate new memory\n}	code	cpp
4293	1	In C++11, all containers received emplace variants of their typical\ninsert/push methods. The emplace variants can construct the element in place,\nsaving a move or copy.	text	txt
4308	1	Converting from an `std::basic_string_view` to an `std::basic_string` is not\npossible. You must explicitly construct an `std::basic_string` object from a\n`std::basic_string_view`.	text	txt
4293	2	#include <vector>\n#include <string>\n\nstd::vector<std::string> vec;\n\n{\n    std::string s("Hello World!");\n    vec.push_back(s); // Copy\n    vec.push_back(std::move(s)); // Move\n}\n\n{\n    std::string s("Hello World!");\n    vec.emplace_back(s); // Copy (same as push_back)\n    vec.emplace_back(std::move(s)); // Move (same as push_back)\n\n    // In-place construction, no move or copy:\n    vec.emplace_back("Hello World!");\n\n    // Note the difference, this is still a move:\n    vec.emplace_back(std::string{"Hello World!"});\n}	code	cpp
4294	1	To find a substring prior standard C++23:	text	txt
4294	2	#include <string>\n#include <iostream>\n\nint main() {\n    std::string message{"Using prior C++23 standard."};\n\n    if (message.find("C++") != std::string::npos)\n        std::cout << "You are using C++\\\\n";\n}	code	cpp
4294	3	Using C++23:\n\n#include <string>\n#include <iostream>\n\nint main() {\n    std::string message{"Using C++23 standard."};\n\n    if (message.contains("C++"))\n        std::cout << "You are using C++\\\\n";\n}	code	cpp
4295	1	Using C++23:	text	txt
4295	2	#include <string_view>\n\nbool secure_protocol(std::string_view url)\n{\n    if (url.starts_with("https"))\n        return true;\n\n    return false;\n}	code	cpp
4296	1	#include <string_view>\n\nbool org_domain(std::string_view url)\n{\n    if (url.ends_with(".org"))\n        return true;\n\n    return false;\n}	code	cpp
4297	1	auto si  = std::to_string(42); // "42"\nauto sl  = std::to_string(42L); // "42"\nauto su  = std::to_string(42u); // "42"\nauto sd  = std::to_wstring(42.0); // "42.000000"\nauto sld = std::to_wstring(42.0L); // "42.000000"	code	cpp
4144	1	C++23 brings `if consteval` conditional statement.\n\nThis `if` statement takes no condition but would only evaluate during\nconstant evaluation. Otherwise, the `else` statement is evaluated.	text	txt
4298	1	auto i1 = std::stoi("42");\nauto i2 = std::stoi("101010", nullptr, 2);\nauto i3 = std::stoi("052", nullptr, 8);\nauto i7 = std::stoi("052", nullptr, 0);\nauto i4 = std::stoi("0x2A", nullptr, 16);\nauto i9 = std::stoi("0x2A", nullptr, 0);\nauto i10 = std::stoi("101010", nullptr, 2);\nauto i11 = std::stoi("22", nullptr, 20);\nauto i12 = std::stoi("-22", nullptr, 20);\n\nauto d1 = std::stod("123.45"); // d1 = 123.45000000000000\nauto d2 = std::stod("1.2345e+2"); // d2 = 123.45000000000000\nauto d3 = std::stod("0xF.6E6666p3"); // d3 = 123.44999980926514	code	cpp
4298	2	1. The first parameter is the input string.\n2. The second parameter is a pointer that, when not null, will receive the\n   number of characters that were processed. This can include any leading\n   whitespaces that were discarded, the sign, and the base prefix, so it\n   should not be confused with the number of digits the integral value has.\n3. A number indicating the base; by default, this is 10. Valid numbers of 2\n   to 36.	text	txt
4298	3	template<typename T, typename = typename T = std::is_integral_v<T>>\nT stoi(std::string const& str, std::size_t* pos = 0, T base = 10);\n\ntemplate<typename F, typename = typename F = std::is_floating_point_v<F>>\nF stof(std::string const& str, std::size_t* pos = 0);	code	cpp
4299	1	* A sign, plus (+) or minus (-) (optional)\n* Prefix 0 to indicate an octal base (optional)\n* Prefix 0x or 0X to indicate a hexadecimal base (optional)\n* A sequence of digits	text	txt
4299	2	auto i1 = std::stoi("42"); // 42\nauto i2 = std::stoi("    42"); // 42\nauto i3 = std::stoi("    42fortytwo"); // 42\nauto i4 = std::stoi("+42"); // 42\nauto i5 = std::stoi("-42"); // -42	code	cpp
4300	1	- `std::invalid_argument`: conversion cannot be performed.\n- `std::out_of_range`: converted value is outside the range of the result\n  type.	text	txt
4300	2	try\n{\n    auto i1 = std::stoi("");\n}\ncatch (std::invalid_argument const& exp)\n{\n    std::cerr << exp.what() << '\\\\n';\n}\n\ntry\n{\n    auto i2 = std::stoi("12345678901234");\n    auto i3 = std::stoi("12345678901234");\n}\ncatch (std::out_of_range const& exp)\n{\n    std::cerr << exp.what() << '\\\\n';\n}	code	cpp
4301	1	- Decimal floating-point expression (optional sign, sequence of decimal\n  digits with optional point, optional `e` or `E`, followed by exponent with\n  optional sign).\n- Binary floating-point expression (optional sign, `0x` or `0X` prefix,\n  sequence of hexadecimal digits with optional point, optional `p` or `P`,\n  followed by exponent with optional sign).\n- Infinity expression (optional sign followed by case-insensitive `INF` or\n  `INFINITY`).\n- A non-number expression (optional sign followed by case-insensitive `NAN`\n  and possibly other alphanumeric characters).	text	txt
4301	2	auto d1 = std::stod("123.45");       // d1 = 123.45000000000000\nauto d2 = std::stod("+123.45");      // d2 = 123.45000000000000\nauto d3 = std::stod("-123.45");      // d3 = -123.45000000000000\nauto d4 = std::stod(" 123.45");      // d4 = 123.45000000000000\nauto d5 = std::stod(" -123.45abc");  // d5 = -123.45000000000000\nauto d6 = std::stod("1.2345e+2");    // d6 = 123.45000000000000\nauto d7 = std::stod("0xF.6E6666p3"); // d7 = 123.44999980926514\nauto d8 = std::stod("INF");          // d8 = inf\nauto d9 = std::stod("-infinity");    // d9 = -inf\nauto d10 = std::stod("NAN");         // d10 = nan\nauto d11 = std::stod("-nanabc");     // d11 = -nan	code	cpp
4302	1	#include <string>\n#include <string_view>\n\nusing namespace std::string_literals;\n\nauto s1{ "text"s }; // std::string\nauto s2{ L"text"s }; // std::wstring\nauto s3{ u8"text"s }; // std::u8string\nauto s3{ u"text"s }; // std::u16string\nauto s4{ U"text"s }; // std::u32string\n\nusing namespace std::string_view_literals;\n\nauto s5{ "text"sv }; // std::string_view	code	cpp
4303	1	#include <string>\n\nusing namespace std::string_literals;\n\nauto filename { R"(C:\\\\Users\\\\Brian\\\\Documents\\\\)"s };\nauto pattern { R"((\\\\w[\\\\w\\\\d]*)=(\\\\d+))"s };	code	cpp
5526	1	#include <ftxui/dom/elements.hpp>\n\nint main()\n{\n    ftxui::Element text{ftxui::text("Flashback, for experts like you")};\n    ftxui::italic(text);\n}	code	cpp
4305	1	Passing `std::basic_string_view` to functions and returning\n`std::basic_string_view` still creates temporaries of this type, but these\nare small-sized objects on the stack (a pointer and a size could be 16 bytes\nfor 64-bit platforms); therefore, they should incur fewer performance costs\nthan allocating heap space and copying data.	text	txt
4305	2	#include <string_view>\n\nstd::string_view trim_view(std::string_view str)\n{\n    auto const pos1{ str.find_first_not_of(" ") };\n    auto const pos2{ str.find_last_not_of(" ") };\n    str.remove_suffix(str.length() - pos2 - 1);\n    str.remove_prefix(pos1);\n    return str;\n}\n\nauto sv1{ trim_view("sample") };\nauto sv2{ trim_view(" sample") };\nauto sv3{ trim_view("sample ") };\nauto sv4{ trim_view(" sample ") };	code	cpp
4308	2	std::string_view sv{ "demo" };\nstd::string s{ sv };	code	cpp
4641	5	/bin/bash /bin/cat /etc/hosts	code	txt
4309	2	#include <string>\n#include <string_view>\n\nstd::string str("the quick brown fox jumps over the lazy dog");\nbool t1 = str.starts_with("the quick"); // const char* overload\n                                        // t1 == true\nbool t2 = str.ends_with('g'); // char overload\n                              // t2 == true\n\nstd::string_view needle = "lazy dog";\nbool t3 = str.ends_with(needle); // string_view overload\n                                 // t3 == true\n\nstd::string_view haystack = "you are a lazy cat";\n// both starts_with and ends_with also available for string_view\nbool t4 = haystack.ends_with(needle);\n// t4 == false	code	cpp
4310	1	- You cannot format objects of user-defined types with printf.	text	txt
4311	1	`std::format` supports positional arguments i.e. referring to an argument by\nits index separated from format specifiers by the `:` character.	text	txt
4311	2	#include <iostream>\n#include <format>\n\nstd::clog << std::format("{0:02x} {1:02x} {2:02x}\\\\n", v0, v1, v2);	code	cpp
4312	1	#include <format>\n\nstd::format("{02x}\\\\n", value);	code	cpp
4313	1	#include <format>\n#include <ostream>\n\nenum class color_code : std::uint_least8_t {};\n\nstd::ostream& operator<<(std::ostream& os, color_code s)\n{\n    return os << std::setfill('0') << std::setw(2) << std::hex << static_cast<unsigned>(s);\n}\n\ntemplate <>\nstruct std::formatter<color_code> : std::formatter<unsigned>\n{\n    auto format(color_code const& code, format_context& ctx) {\n        return format_to(ctx.out(), "{:02x}", static_cast<unsigned>(code));\n    }\n};\n\nstd::format("{}\\\\n", color_code);	code	cpp
4314	1	#include <format>\n#include <chrono>\n\nstd::format("{:%F %T} UTC", std::chrono::system_clock::now());	code	cpp
4315	1	#include <iostream>\n#include <format>\n\nstd::print("{} <{}>", "Brian Salehi", "salehibrian@gmail.com");	code	cpp
4316	1	#include <string>\n#include <regex>\n\nusing namespace std::string_literals;\n\nstd::string pattern{R"(...)"};\n\nstd::regex srx{pattern};\nstd::regex lrx{R"(...)"s};	code	cpp
4317	1	std::regex irx{R"(...)"s, std::regex_constants::icase};	code	cpp
4318	1	#include <string>\n#include <regex>\n\ntemplate<typename CharT>\nusing tstring = std::baisc_string<CharT, std::char_traits<CharT>, std::allocator<CharT>>;\n\ntemplate<typename CharT>\nusing tregex = std::basic_regex<CharT>;\n\ntemplate<typename CharT>\nbool matches(tstring<CharT> const& text, tstring<CharT> const& pattern)\n{\n    std::basic_regex<CharT> rx{pattern, std::regex_constants::icase};\n    return std::regex_match(text, rx);\n}\n\nint main()\n{\n    std::string text{R"(https://github.com - https://github.com/briansalehi/references)"};\n    std::string pattern{R"((\\\\w+)://([\\\\w.]+)/([\\\\w\\\\d._-]+)/([\\\\w\\\\d._-]+)[.git]?)"};\n\n    if(matches(text, pattern))\n        std::cout << text << '\\\\n';\n    else\n        std::cerr << "invalid repository link!\\\\n";\n}	code	cpp
4319	1	The `std::regex_match()` method has overloads that take a reference to a\n`std::match_results` object to store the result of the match.	text	txt
4319	2	If there is no match, then `std::match_results` is empty and its size is 0.\nOtherwise, its size is 1, plus the number of matched subexpressions.	text	txt
4319	3	The class template `std::sub_match` represents a sequence of characters that\nmatches a capture group; this class is actually derived from std::pair, and\nits first and second members represent iterators to the first and the one-\npast-end characters in the match sequence. If there is no match sequence, the\ntwo iterators are equal:	text	txt
4319	4	* `typedef sub_match<const char *> csub_match;`\n* `typedef sub_match<const wchar_t *> wcsub_match;`\n* `typedef sub_match<string::const_iterator> ssub_match;`\n* `typedef sub_match<wstring::const_iterator> wssub_match;`	text	txt
4319	5	The class template `std::match_results` is a collection of matches; the first\nelement is always a full match in the target, while the other elements are\nmatches of subexpressions:	text	txt
4319	6	* `typedef match_results<const char *> cmatch;`\n* `typedef match_results<const wchar_t *> wcmatch;`\n* `typedef match_results<string::const_iterator> smatch;`\n* `typedef match_results<wstring::const_iterator> wsmatch;`	text	txt
4343	1	#include <chrono>\n\nusing namespace std::chrono_literals;\n\nauto timer {2h + 42min + 15s}; // std::chrono::duration<long long>\n\nauto year { 2035y }; // std::chrono::year (c++20)\nauto day { 15d }; // std::chrono::day (c++20)	code	cpp
4344	1	- `operator""y`\n- `operator""d`	text	txt
4360	1	C++23 standard includes `std::ranges::to<>`.	text	txt
4319	7	#include <string>\n#include <regex>\n\nint main()\n{\n    std::string text{R"(https://github.com - https://github.com/briansalehi/references)"};\n    std::string pattern{R"((\\\\w+)://([\\\\w.]+)/([\\\\w\\\\d._-]+)/([\\\\w\\\\d._-]+)[.git]?)"};\n\n    std::regex rx{pattern, std::regex_constants::icase};\n    std::smatch matches;\n    bool matched = std::regex_match(text, matches, rx);\n\n    if (auto [match, protocol, domain, username, project] = matches; matched)\n        std::cout << project << " owned by " << username\n                  << " hosted on " << domain\n                  << " using " << protocol << " protocol\\\\n";	code	cpp
4320	1	The C++ standard library supports six regular expression engines:	text	txt
4320	2	* ECMAScript (default)\n* basic POSIX\n* extended POSIX\n* awk\n* grep\n* egrep (grep with the option -E)	text	txt
4320	3	#include <regex>\n\nstd::regex pattern{R"(...)", std::regex_constants::egrep};	code	cpp
4321	1	#include <string>\n#include <regex>\n\nstd::string text {\nR"(\n# server address\naddress = 123.40.94.215\nport=22\n\n# time to live\nttl = 5\n)"};\n\nint main()\n{\n    std::string pattern{R"(^(?!#)(\\\\w+)\\\\s*=\\\\s*([\\\\w\\\\d]+[\\\\w\\\\d._,:-]*)$)"};\n    std::regex rx{pattern, std::regex_constants::icase};\n    std::smatch match{};\n\n    if (std::string variable, value; std::regex_search(text, match, rx))\n    {\n        variable = match[1];\n        value = match[2];\n    }\n}	code	cpp
4322	1	The iterators available in the regular expressions standard library are as\nfollows:	text	txt
5236	1	The role is defined in the SELinux user mapping file `/etc/selinux/targeted/seusers`.	text	md
5265	1	uname -m	code	sh
4322	2	* `std::regex_interator`: A constant forward iterator used to iterate through\n  the occurrences of a pattern in a string. It has a pointer to an\n  `std::basic_regex` that must live until the iterator is destroyed. Upon\n  creation and when incremented, the iterator calls `std::regex_search()` and\n  stores a copy of the `std::match_results` object returned by the algorithm.\n* `std::regex_token_iterator`: A constant forward iterator used to iterate\n  through the submatches of every match of a regular expression in a string.\n  Internally, it uses a `std::regex_iterator` to step through the submatches.\n  Since it stores a pointer to an `std::basic_regex` instance, the regular\n  expression object must live until the iterator is destroyed.	text	txt
4322	3	The token iterators can return the unmatched parts of the string if the index\nof the subexpressions is -1, in which case it returns an `std::match_results`\nobject that corresponds to the sequence of characters between the last match\nand the end of the sequence:	text	txt
4345	1	// A day in a year can be specified using literals and operator/\nauto christmas_eve = 2023y/std::chrono::December/24d;\n// decltype(christmas_eve) == std::chrono::year_month_day\n\nauto specific_day = std::chrono::weekday{std::chrono::sys_days{christmas_eve}};\n// specific_day == std::chrono::Sunday	code	cpp
4346	1	#include <chrono>\n\nauto date{2024y/std::chrono::April/1d};\nfor (; date.month() == std::chrono::April; date += std::chrono::days{1})\n{\n    // iterate over all days in April 2024\n}	code	cpp
5150	2		code	txt
4322	4	#include <string>\n#include <regex>\n\nstd::string text {\nR"(\n# server address\naddress = 123.40.94.215\nport=22\n\n# time to live\nttl = 5\n)"};\n\nint main()\n{\n    std::string pattern{R"(^(?!#)(\\\\w+)\\\\s*=\\\\s*([\\\\w\\\\d]+[\\\\w\\\\d._,:-]*)$)"};\n    std::regex rx{pattern, std::regex_constants::icase};\n    std::sregex_iterator end{};\n\n    // iterate through regex matches\n    for (auto it = std::sregex_iterator{std::begin(text), std::end(text), rx};\n            it ! end; ++it)\n    {\n        std::string variable = (*it)[1];\n        std::string value = (*it)[2];\n    }\n\n    // iterate through unmatched tokens\n    for (auto it = std::sregex_iterator{std::begin(text), std::end(text), rx, -1};\n            it ! end; ++it)\n    {\n        std::string variable = (*it)[1];\n        std::string value = (*it)[2];\n    }\n\n    // iterate through tokens of regex matches\n    std::sregex_token_iterator tend{};\n    for (auto it = std::sregex_token_iterator{std::begin(text), std::end(text), rx};\n            it ! tend; ++it)\n    {\n        std::string token = *it;\n    }\n}	code	cpp
4323	1	#include <string>\n#include <regex>\n\nint main()\n{\n    std::string text{"this is a example with a error"};\n    std::regex rx{R"(\\\\ba ((a|e|i|o|u)\\\\w+))"};\n    std::regex_replace(text, rx, "an $1");\n}	code	cpp
4324	1	Apart from the identifiers of the subexpressions (`$1`, `$2`, and so on),\nthere are other identifiers for the entire match (`$&`), the part of the\nstring before the first match ($\\\\`), and the part of the string after the\nlast match (`$'`).	text	txt
4324	2	#include <string>\n#include <regex>\n\nint main()\n{\n    std::string text{"current date: 3 10 2022"};\n    std::regex pattern{R"((\\\\d{1,2})\\\\s*(\\\\d{1,2})\\\\s*(\\\\d{2,4}))"};\n    std::string reformatted = std::regex_replace(text, pattern, R"([$`] $2 $1 $3 [$'])");\n}	code	cpp
4325	1	Standard types that are not arithmetic types, such as `std::complex<T>` or\n`std::nullptr_t`, do not have `std::numeric_limits` specializations.	text	txt
4325	2	#include <limits>\n\nauto min_int = std::numeric_limits<int>::min();\nauto max_int = std::numeric_limits<int>::max();\n\nauto min_double = std::numeric_limits<double>::min();\nauto low_double = std::numeric_limits<double>::lowest();\nauto max_double = std::numeric_limits<double::lowest();	code	cpp
4325	3	In this example objects in a range should have `<` comparison operator overloaded.	text	txt
4325	4	    for (autp i = start; i < end; ++i)\n        if (*i < latest_minimum)\n            latest_minimum = *i;	text	txt
4325	5	#include <limits>\n\ntemplate<typename T, typename Iter>\nT minimum(Iter const start, Iter const end)\n{\n    T latest_minimum = std::numeric_limits<T>::max();\n\n    return latest_minimum;\n}	code	cpp
4326	1	`digits` represents the number of bits (excluding the sign bit if present)\nand padding bits (if any) for integral types and the number of bits of the\nmantissa for floating-point types.	text	txt
4326	2	#include <limits>\n\nauto s = std::numeric_limits<short>::digits;\nauto d = std::numeric_limits<double>::digits;	code	cpp
4327	1	#include <limits>\n\nauto s = std::numeric_limits<short>::digits10;\nauto d = std::numeric_limits<double>::digits10;	code	cpp
4328	1	#include <limits>\n\nauto value_is_signed = std::numeric_limist<T>::is_signed;	code	cpp
4329	1	#include <limits>\n\nauto value_is_integer = std::numeric_limist<T>::is_integer;	code	cpp
4330	1	#include <limits>\n\nauto value_is_exact = std::numeric_limist<T>::is_exact;	code	cpp
4331	1	#include <limits>\n\nauto value_has_infinity = std::numeric_limist<T>::has_infinity;	code	cpp
4332	1	#include <complex>\n\nusing namespace std::complex_literals;\n\nauto c{ 12.0 + 4.2i }; // std::complex<double>	code	cpp
4333	1	Except for `random_device`, all engines produce numbers in a uniform distribution.	text	txt
4333	2	#include <random>\n\nauto min = std::mt19937::min();\nauto max = std::mt19937::max();	code	cpp
4348	3	*Sample*\nauto filetime = std::filesystem::last_write_time(myPath);\nconst auto toNow = std::filesystem::file_time_type::clock::now() - filetime;\nconst auto elapsedSec = duration_cast<seconds>(toNow).count();	code	cpp
4349	1	// C++17\nusing file_time_type = std::chrono::time_point</*trivial-clock*/>;\n\n// C++20\nusing file_time_type = std::chrono::time_point<std::chrono::file_clock>;	code	cpp
4349	2	#include <iostream>\n#include <filesystem>\n#include <chrono>\n\nint main(int argc, char** argv)\n{\n    std::filesystem::path file_path{argv[0]};\n    std::filesystem::file_time_type last_write_time = std::filesystem::last_write_time(file_path);\n    std::cout << std::format("{0:%F 0:%R}\\\\n", last_write_time);\n}	code	cpp
4350	1	`std::ssize()` is a C++20 function template that returns the size information\nof the passed-in range or array as a signed integer (typically\n`std::ptrdiff_t`). The range version `std::ranges::ssize()` instead uses the\nrange-style "customization point object" approach while maintaining the same\nfunctionality. This allows for simpler code when working with raw indexes.	text	txt
4350	2	#include <vector>\n#include <iostream>\n\nint main() {\n    std::vector<int> data{1, 2, 3, 4, 5, 6};\n\n    // z is the literal suffix for signed size type\n    for (auto i = 0z; i < ssize(data); i++) {\n        int sum = 0;\n        if (i - 1 >= 0)\n            sum += data[i-1];\n        sum += data[i];\n        if (i + 1 < ssize(data))\n            sum += data[i+1];\n        std::cout << "" << sum << "\\\\n";\n    } // prints 3, 6, 9, 12, 15, 11\n}	code	cpp
4351	1	A *range* is denoted by a pair of *iterators*, or more generally, since\nC++20, an *iterator* and a *sentinel*.	text	txt
4354	1	- Iteration over a sequence for arbitrary action on each element: `for_each`, `for_each_n`, `transform`\n- Searching through a sequence: `find`, `find_if`, `find_end`, `search`, `count`, `any_of`, `adjacent_find`\n- Mutate the sequence: `copy`, `copy_if`, `move`, `fill`, `replacd`, `generate`, `rotate`\n- Sort in various ways: `sort`, `stable_sort`, `partial_sort`, `nth_element`, `is_sorted`\n- Reduction and scans: `reduce`, `transform_reduce`, `inclusive_scan`, `exclusive_scan`	text	txt
4355	1	The algorithms that have the overload with `std::execution` enumeration as\nfirst parameter.	text	txt
4355	2	#include <algorithm>\n#include <vector>\n\nint main()\n{\n    std::vector<long> numbers{42,73,10,35,89,24};\n    std::sort(std::execution::par, std::begin(numbers), std::end(numbers));\n}	code	cpp
4356	1	The overhead of creating and managing threads on two operations costs highly.\nIt would be better to join the operations in one parallel execution.	text	txt
4356	2	#include <algorithm>\n#include <vector>\n\nint main()\n{\n    std::vector<long> numbers{1,2,3,4,5,6};\n\n    // we have two separate parallel execution\n    std::transform(std::execution::par, numbers.begin(), numbers.end());\n    std::reduce(std::execution::par, numbers.begin(), numbers.end());\n\n    // instead we can combine the two\n    std::transform_reduce(std::execution::par, numbers.begin(), numbers.end());\n}	code	cpp
4357	1	#include <algorithm>\n\nstd::min(42, 87);\nstd::min({2,5,8,23,43});\nstd::max(34, 47);\nstd::max({4,8,12,42});	code	cpp
4358	1	Starting with C++23, basic strings support `starts_with()` operation:	text	txt
4358	2	#include <ranges>\n\nstd::ranges::starts_with("Hello World", "Hello");\n// true	code	cpp
4359	1	Starting with C++23, basic strings support `ends_with()` operation:	text	txt
4359	2	#include <ranges>\n#include <vector>\n\nstd::vector nums {1, 2, 3, 4};\nstd::ranges::ends_with(v, {3, 4});\n// true	code	cpp
4360	2	#include <ranges>\n#include <string>\n\nint main()\n{\n    std::string alphabet = std::views::iota('a', 'z')\n                         | std::views::transform([](auto const v){ return v - 32; })\n                         | std::ranges::to<std::string>();\n\n    std::string abc = alphabet | std::views::take(3) | std::ranges::to<std::string>();\n}	code	cpp
4361	1	Containers of the same type can be easily compared using comparison\noperators. When we need to compare the content of containers of different\ntypes, we can use the `std::equal` and `std::is_permutation` algorithms.	text	txt
4361	2	#include <algorithm>\n#include <vector>\n#include <set>\n\nstd::vector<int> data1{2, 1, 3, 4, 5};\nstd::vector<int> data2{2, 4, 1, 3, 5};\n\n// Linear comparison:\nbool cmp1 = std::equal(data1.begin(), data1.end(), data2.begin());\n// cmp1 == false\n\nbool cmp2 = (data1 == data2);\n// cmp2 == false (same as std::equal if types match)\n\n// Elements match but are potentially out of order:\nbool cmp3 = std::is_permutation(data1.begin(), data1.end(), data2.begin());\n// cmp3 == true\n\nstd::set<int> data3{1, 2, 3, 4, 5};\n\n// Linear comparison:\nbool cmp4 = std::ranges::equal(data1, data3);\n// cmp4 == false\n\n// Elements match but are potentially out of order:\nbool cmp5 = std::ranges::is_permutation(data1, data3);\n// cmp5 == true	code	cpp
4362	1	| `std::for_each` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
4362	2	Invokes the provided functor on each range element in order, ignoring the result.	text	txt
4362	3	While the range-based for-loop has mostly replaced the use cases for\n`std::for_each`, it still comes in handy as a trivial parallelization tool\nand in its C++20 range version with projections.	text	txt
4362	4	#include <algorithm>\n#include <ranges>\n#include <vector>\n\nint main()\n{\n    std::vector<long> numbers{1, 2, 3, 4, 5};\n    long sum{};\n\n    sum = std::for_each(numbers.begin(), numbers.end(), sum_predicate<long>{});\n    // sum == 15, using a unary predicate\n\n    std::for_each(numbers.begin(), numbers.end(), [&sum](auto v) { sum += v; });\n    // sum == 30, using a lambda\n\n    std::ranges::for_each(numbers, [&sum](auto v) { count++; sum += v; });\n    // sum == 45, using ranges\n\n    for (auto v: numbers) { sum += v; }\n    // sum == 60, using range-based for\n}	code	cpp
4362	5	#include <algorithm>\n#include <vector>\n\nint main()\n{\n    std::vector<int> data{1, 2, 3, 4, 5};\n\n    std::for_each(data.begin(), data.end(), [i = 5](int& v) mutable { v += i--; });\n    // data == {6, 6, 6, 6, 6}\n}	code	cpp
4362	6	#include <algorithm>\n#include <execution>\n#include <vector>\n\nint main()\n{\n    struct Custom {};\n    void process(Custom&) {}\n    std::vector<Custom> rng(10, Custom{});\n\n    // parallel execution C++17\n    std::for_each(std::execution::par_unseq, // parallel, in any order\n            rng.begin(), rng.end(), // all elements\n            process // invoke process on each element\n            );\n}	code	cpp
4362	7	#include <algorithm>\n#include <vector>\n#include <optional>\n\nint main()\n{\n    std::vector<std::optional<int>> opt{{},2,{},4,{}};\n    // range version with projection C++20\n\n    std::ranges::for_each(opt,\n        [](int v) {\n            // iterate over projected values\n            // {0, 2, 0, 4, 0}\n        },\n        [](std::optional<int>& v){\n            // projection that will return\n            // the contained value or zero\n            return v.value_or(0);\n        }\n    );\n}	code	cpp
4363	1	As long as the operations are independent, there is no need for\nsynchronization primitives.	text	txt
4363	2	#include <algorithm>\n#include <execution>\n#include <ranges>\n#include <vector>\n\nstruct work\n{\n    void expensive_operation() { /* ... */ }\n};\n\nint main()\n{\n    std::vector<work> work_pool{work{}, work{}, work{}};\n    std::for_each(std::execution::par_unseq, work_pool.begin(), work_pool.end(), [](work& w) { w.expensive_operation(); });\n}	code	cpp
4363	3	When synchronization is required, operations need to be atmoic.	text	txt
4363	4	#include <algorithm>\n#include <execution>\n#include <atomic>\n#include <vector>\n\nint main()\n{\n    std::vector<long> numbers{1,2,3,4,5};\n    std::atomic<size_t> sum{};\n    std::for_each(std::execution::par_unseq, numbers.begin(), numbers.end(), [&sum](auto& e) { sum += e; });\n}	code	cpp
4363	5	Note: parallel execution requires *libtbb* library to be linked.	text	txt
4364	1	#include <algorithm>\n#include <ranges>\n#include <vector>\n\nstruct work_unit\n{\n    size_t value;\n    work_unit(size_t initial): value{std::move(initial)} {}\n    size_t current() const { return value; }\n};\n\nint main()\n{\n    size_t sum{};\n    std::vector<work_unit> tasks{1,2,3};\n    std::ranges::for_each(tasks, [&sum](auto const& e) { sum += e; }, &work_unit::current);\n    // sum: 6\n}	code	cpp
4365	1	| `std::for_each_n` | standard |\n| --- | --- |\n| introduced | C++17 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
4365	2	While `std::for_each` operates on the entire range, the interval $[begin,\nend)$, while the `std::for_each_n` operates on the range $[first, first +\nn)$.	text	txt
5214	1	id -Z	code	sh
5238	1	seinfo -r\nseinfo --role	code	sh
5266	1	seq <numbers>	code	sh
4365	3	#include <algorithm>\n#include <vector>\n\nint main()\n{\n    std::vector<long> numbers{1,2,3,4,5,6};\n    std::size_t sum{};\n    std::for_each_n(numbers.begin(), 3, [&sum](auto const& e) { sum += e; });\n    // sum = 6\n}	code	cpp
4365	4	Importantly, because the algorithm does not have access to the end iterator\nof the source range, it does no out-of-bounds checking, and it is the\nresponsibility of the caller to ensure that the range $[first, first + n)$ is\nvalid.	text	txt
4366	1	| `std::swap` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | N/A |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
4366	2	Correctly calling swap requires pulling the default `std::swap` version to\nthe local scope.	text	txt
4366	3	#include <algorithm>\n\nnamespace library\n{\n    struct container { long value; };\n}\n\nint main()\n{\n    library::container a{3}, b{4};\n    std::ranges::swap(a, b); // first calls library::swap\n                             // then it calls the default move-swap\n}	code	cpp
4367	1	| `std::iter_swap` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | N/A |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
4367	2	The `std::iter_swap` is an indirect swap, swapping values behind two forward\niterators.	text	txt
4367	3	#include <algorithm>\n#include <memory>\n\nint main()\n{\n    auto p1 = std::make_unique<int>(1);\n    auto p2 = std::make_unique<int>(2);\n\n    int *p1_pre = p1.get();\n    int *p2_pre = p2.get();\n\n    std::ranges::swap(p1, p2);\n    // p1.get() == p1_pre, *p1 == 2\n    // p2.get() == p2_pre, *p2 == 1\n}	code	cpp
4368	1	| `std::swap_ranges` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
4368	2	#include <algorithm>\n#include <vector>\n\nint main()\n{\n    std::vector<long> numbers{1,2,3,4,5,6};\n    std::swap_ranges(numbers.begin(), numbers.begin()+2, numbers.rbegin());\n    // numbers: {6,5,3,4,2,1}\n}	code	cpp
4452	3	Use `std::ref()` when you really want a reference, or use a lambda as the\ncallable.	text	txt
4369	1	Customizing swap for user-defined types and correctly calling swap with a\nfallback can be tricky. If we are not using the C++20 range version, we need\nto correctly implement the customized version as a friend function (making it\nvisible only to ADL) and pull in the default swap when calling it (to get the\nfallback).	text	txt
4369	2	#include <algorithm>\n\nnamespace MyNamespace\n{\nstruct MyClass\n{\n    // Use inline friend function to implement custom swap.\n    friend void swap(MyClass&, MyClass&) { }\n};\n\nstruct MyOtherClass {};\n} // MyNamespace\n\nMyNamespace::MyClass a, b;\nMyNamespace::MyOtherClass x, y;\n\n// Fully qualified call, will always call std::swap\nstd::swap(a,b); // calls std::swap\nstd::swap(x,y); // calls std::swap\n\n// No suitable swap for MyOtherClass.\nswap(a,b); // calls MyNamespace::swap\n// swap(x,y); // would not compile\n\n// Pull std::swap as the default into local scope:\nswap(a,b); // calls MyNamespace::swap\nswap(x,y); // would not compile\n\n// Pull std::swap as the default into local scope:\n\nusing std::swap;\nswap(a,b); // calls MyNamespace::swap\nswap(x,y); // calls std::swap\n\n// C++20 std::ranges::swap which will do the correct thing:\nstd::ranges::swap(x,y); // default swap\nstd::ranges::swap(a,b); // calls MyNamespace::swap	code	cpp
4370	1	Implementing a `strict_weak_ordering` for a custom type, at minimum requires\nproviding an overload of `operator<`.	text	txt
4370	2	A good default for a `strict_weak_ordering` implementation is\n*lexicographical ordering*.	text	txt
4370	3	Since C++20 introduced the spaceship operator, user-defined types can easily\naccess the default version of *lexicographical ordering*.	text	txt
4370	4	struct Point {\n    int x;\n    int y;\n\n    // pre-C++20 lexicographical less-than\n    friend bool operator<(const Point& left, const Point& right)\n    {\n        if (left.x != right.x)\n            return left.x < right.x;\n        return left.y < right.y;\n    }\n\n    // default C++20 spaceship version of lexicographical comparison\n    friend auto operator<=>(const Point&, const Point&) = default;\n\n    // manual version of lexicographical comparison using operator <=>\n    friend auto operator<=>(const Point& left, const Point& right)\n    {\n        if (left.x != right.x)\n            return left.x <=> right.x;\n        return left.y <=> right.y;\n    }\n};	code	cpp
4370	5	The type returned for the spaceship operator is the common comparison\ncategory type for the bases and members, one of:	text	txt
4370	6	* `std::strong_ordering`\n* `std::weak_ordering`\n* `std::partial_ordering`	text	txt
4371	1	Lexicographical `strict_weak_ordering` for ranges is exposed through the\n`std::lexicographical_compare` algorithm.	text	txt
4371	2	| `std::lexicographical_compare` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
3717	1	name: Initial Workflow\non:\n  workflow_dispatch:\njobs:\n  first-job:\n    runs-on: ubuntu-latest\n    steps:\n      - id: random_generator\n        name: Generating random number\n        run: echo "number=${RANDOM}" >> "${GITHUB_OUTPUT}"\n    outputs:\n      random: ${{ steps.random_generator.outputs.number }}\n  second-job:\n    runs-on: ubuntu-latest\n    needs: first-job\n    steps:\n      - name: Reading random number\n        run: echo "${{ needs.first-job.outputs.random }}	code	yml
4371	3	#include <algorithm>\n#include <ranges>\n#include <vector>\n#include <string>\n\nint main()\n{\n    std::vector<long> range1{1, 2, 3};\n    std::vector<long> range2{1, 3};\n    std::vector<long> range3{1, 3, 1};\n\n    bool cmp1 = std::lexicographical_compare(range1.cbegin(), range1.cend(), range2.cbegin(), range2.cend());\n    // same as\n    bool cmp2 = range1 < range2;\n    // cmp1 = cmp2 = true\n\n    bool cmp3 = std::lexicographical_compare(range2.cbegin(), range2.cend(), range3.cbegin(), range3.cend());\n    // same as\n    bool cmp4 = range2 < range3;\n    // cmp3 = cmp4 = true\n\n    std::vector<std::string> range4{"Zoe", "Alice"};\n    std::vector<std::string> range5{"Adam", "Maria"};\n    auto compare_length = [](auto const& l, auto const& r) { return l.length() < r.length(); };\n\n    bool cmp5 = std::ranges::lexicographical_compare(range4, range5, compare_length);\n    // different than\n    bool cmp6 = range1 < range2;\n    // cmp5 = true, cmp6 = false\n}	code	cpp
4372	1	| `std::lexicographical_compare_three_way` | standard |\n| --- | --- |\n| introduced | C++20 |\n| constexpr | C++20 |\n| paralllel | N/A |\n| rangified | N/A |	text	txt
4372	2	The `std::lexicographical_compare_three_way` is the spaceship operator\nequivalent to `std::lexicographical_compare`. It returns one of:	text	txt
4372	3	* `std::strong_ordering`\n* `std::weak_ordering`\n* `std::partial_ordering`	text	txt
4372	4	The type depends on the type returned by the elements’ spaceship operator.	text	txt
5196	5	#include <Context.hpp>\n#include <StrategyA.hpp>\n#include <StrategyB.hpp>\n\nint main()\n{\n    std::shared_ptr<Context> context{std::make_shared<Context>()};\n    context->setStrategy(std::move(std::make_unique<StrategyA>()));\n    context->setStrategy(std::move(std::make_unique<StrategyB>()));\n    context->contextInterface();\n}	code	cpp
4372	5	#include <algorithm>\n#include <vector>\n#include <string>\n\nint main()\n{\n    std::vector<long> numbers1{1, 1, 1};\n    std::vector<long> numbers2{1, 2, 3};\n\n    auto cmp1 = std::lexicographical_compare_three_way(numbers1.cbegin(), numbers1.cend(), numbers2.cbegin(), numbers2.cend());\n    // cmp1 = std::strong_ordering::less\n\n    std::vector<std::string> strings1{"Zoe", "Alice"};\n    std::vector<std::string> strings2{"Adam", "Maria"};\n\n    auto cmp2 = std::lexicographical_compare_three_way(strings1.cbegin(), strings1.cend(), strings2.cbegin(), strings2.cend());\n    // cmp2 = std::strong_ordering::greater\n}	code	cpp
4373	1	The `std::sort` algorithm is the canonical `O(N log N)` sort (typically\nimplemented as *intro-sort*).	text	txt
4373	2	Due to the `O(N log N)` complexity guarantee, `std::sort` only operates on\n`random_access` ranges. Notably, `std::list` offers a method with an\napproximate `O(N log N)` complexity.	text	txt
4374	1	| `std::sort` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
4374	2	#include <algorithm>\n#include <ranges>\n#include <vector>\n#include <list>\n\nstruct Account\n{\n    long value() { return value_; }\n    long value_;\n};\n\nint main()\n{\n    std::vector<long> series1{6,2,4,1,5,3};\n    std::sort(series1.begin(), series1.end());\n\n    std::list<long> series2{6,2,4,1,5,3};\n    //std::sort(series2.begin(), series2.end()); // won't compile\n    series2.sort();\n\n    // With C++20, we can take advantage of projections to sort by a method or member\n    std::vector<Account> accounts{{6},{2},{4},{1},{5},{3}};\n    std::ranges::sort(accounts, std::greater<>{}, &Account::value);\n}	code	cpp
4375	1	The `std::sort` is free to re-arrange equivalent elements, which can be\nundesirable when re-sorting an already sorted range. The `std::stable_sort`\nprovides the additional guarantee of preserving the relative order of equal\nelements.	text	txt
4375	2	| `std::stable_sort` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | N/A |\n| rangified | C++20 |	text	txt
4375	3	If additional memory is available, `stable_sort` remains `O(n log n)`.\nHowever, if it fails to allocate, it will degrade to an `O(n log n log n)` algorithm.	text	txt
5458	1	Feature extractors mimic the human visual system by extracting the salient features from a given scene to remember it for retrieval later.	text	md
4375	4	#include <algorithm>\n#include <ranges>\n#include <vector>\n#include <string>\n\nstruct Record\n{\n    std::string label;\n    short rank;\n};\n\nint main()\n{\n    std::vector<Record> records{{"b", 2}, {"e", 1}, {"c", 2}, {"a", 1}, {"d", 3}};\n\n    std::ranges::stable_sort(records, {}, &Record::label);\n    // guaranteed order: a-1, b-2, c-2, d-3, e-1\n\n    std::ranges::stable_sort(records, {}, &Record::rank);\n    // guaranteed order: a-1, e-1, b-2, c-2, d-3\n}	code	cpp
4376	1	| `std::is_sorted` | standard |\n| --- | --- |\n| introduced | C++11 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
4376	2	#include <algorithm>\n#include <vector>\n#include <ranges>\n\nint main()\n{\n    std::vector<int> data1 = {1, 2, 3, 4, 5};\n    bool test1 = std::is_sorted(data1.begin(), data1.end());\n    // test1 == true\n\n    std::vector<int> data2 = {5, 4, 3, 2, 1};\n    bool test2 = std::ranges::is_sorted(data2);\n    // test2 == false\n\n    bool test3 = std::ranges::is_sorted(data2, std::greater<>{});\n    // test3 == true\n}	code	cpp
4378	1	| `std::partial_sort` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
4378	2	The `std::partial_sort` algorithm reorders the range’s elements such that the\nleading sub-range is in the same order it would when fully sorted. However,\nthe algorithm leaves the rest of the range in an unspecified order.	text	txt
4378	3	#include <algorithm>\n#include <ranges>\n#include <vector>\n\nint main()\n{\n    std::vector<int> data{9, 8, 7, 6, 5, 4, 3, 2, 1};\n\n    std::partial_sort(data.begin(), data.begin()+3, data.end());\n    // data == {1, 2, 3, -unspecified order-}\n\n    std::ranges::partial_sort(data, data.begin()+3, std::greater<>());\n    // data == {9, 8, 7, -unspecified order-}\n}	code	cpp
4378	4	The benefit of using a partial sort is faster runtime — approximately `O(N\nlog K)`, where `K` is the number of elements sorted.	text	txt
4379	1	| `std::partial_sort_copy` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
4379	2	The `std::partial_sort_copy` algorithm has the same behaviour as\n`std::partial_sort`; however, it does not operate inline. Instead, the\nalgorithm writes the results to a second range.	text	txt
4379	3	#include <algorithm>\n#include <ranges>\n#include <vector>\n\nint main()\n{\n    std::vector<int> top(3);\n\n    // input == "0 1 2 3 4 5 6 7 8 9"\n    auto input = std::istream_iterator<int>(std::cin);\n    auto cnt = std::counted_iterator(input, 10);\n\n    std::ranges::partial_sort_copy(cnt, std::default_sentinel, top.begin(), top.end(), std::greater<>{});\n    // top == { 9, 8, 7 }\n}	code	cpp
3725	5	name: Workflow\non:\n  workflow_dispatch:\njobs:\n  ci:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout source repository\n        uses: actions/checkout@v4\n      - name: Run project on a docker\n        uses: briansalehi/sample@v1.2.3\n        with:\n          actor: ${{ github.actor }}	code	yml
4380	1	#include <algorithm>\n#include <ranges>\n#include <vector>\n\nint main()\n{\n    std::vector<long> numbers{1,2,3,4,5};\n\n    auto last_sorted = std::is_sorted_until(numbers.begin(), numbers.end());\n\n    for (auto iter = numbers.begin(); iter != last_sorted; ++iter)\n        continue;\n\n    for (auto v: std::ranges::subrange(numbers.begin(), last_sorted))\n        continue;\n}	code	cpp
4381	1	| `std::partition` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
4381	2	The `std::partition` algorithm provides the basic partitioning functionality,\nreordering elements based on a unary predicate. The algorithm returns the\npartition point, an iterator to the first element for which the predicate\nreturned `false`.	text	txt
4381	3	#include <algorithm>\n#include <iostream>\n#include <vector>\n#include <string>\n\nstruct ExamResult\n{\n    std::string student_name;\n    int score;\n};\n\nint main()\n{\n    std::vector<ExamResult> results{{"Jane Doe", 84}, {"John Doe", 78}, {"Liz Clarkson", 68}, {"David Teneth", 92}};\n\n    auto partition_point = std::partition(results.begin(), results.end(), [threshold=80](auto const& e) { return e.score >= threshold; });\n\n    std::for_each(results.begin(), partition_point, [](auto const& e) { std::cout << "[PASSED] " << e.student_name << "\\\\n"; });\n    std::for_each(partition_point, results.end(), [](auto const& e) { std::cout << "[FAILED] " << e.student_name << "\\\\n"; });\n}	code	cpp
5273	1	rm -v <file>	code	sh
4382	1	| `std::stable_partition` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | N/A |\n| rangified | C++20 |	text	txt
4382	2	The `std::partition` algorithm is permitted to rearrange the elements with\nthe only guarantee that elements for which the predicate evaluated to true\nwill precede elements for which the predicate evaluated to false. But this\nbehaviour might be undesirable, for example, for UI elements.	text	txt
4382	3	The `std::stable_partition` algorithm adds the guarantee of preserving the\nrelative order of elements in both partitions.	text	txt
4382	4	auto& widget = get_widget();\nstd::ranges::stable_partition(widget.items, &Item::is_selected);	code	cpp
4384	1	| `std::partition_copy` | standard |\n| --- | --- |\n| introduced | C++11 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
4384	2	The `std::partition_copy` is a variant of `std::partition` that, instead of\nreordering elements, will output the partitioned elements to the two output\nranges denoted by two iterators.	text	txt
4384	3	#include <algorithm>\n#include <iterator>\n#include <cassert>\n#include <ranges>\n#include <vector>\n\nint main()\n{\n    std::vector<long> series{2, 4, 6, 7, 9, 11};\n    auto is_even = [](auto v) { return v % 2 == 0; };\n\n    std::vector<long> evens, odds;\n    std::ranges::partition_copy(series, std::back_inserter(evens), std::back_inserter(odds), is_even);\n\n    assert(evens.size() == 3);\n    assert(odds.size() == 3);\n}	code	cpp
4857	2	A few of these tasks are:	text	txt
4387	1	| `std::equal_range` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | N/A |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
4387	2	#include <algorithm>\n#include <vector>\n\nint main()\n{\n    std::vector<long> data{1,2,3,4,5,6,6,6,7,8,9};\n\n    auto [lower, upper] = std::equal_range(data.begin(), data.end(), 6);\n    // std::distance(data.begin(), lower) == 5\n    // std::distance(data.begin(), upper) == 8\n}	code	cpp
4388	1	| `std::partition_point` | standard |\n| --- | --- |\n| introduced | C++11 |\n| paralllel | N/A |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
4388	2	Despite the naming, `std::partition_point` works very similaryly to\n`std::upper_bound`, however instead of searching for a particular value, it\nsearches using a predicate.	text	txt
4388	3	This algorithm will return either an iterator to the first element that\ndoesn't satisfy the provided predicate or the end iterator of the input range\nif all elements do.	text	txt
5458	2	Popular algorithms are:	text	md
4388	4	The input range or the projected range must be partitioned with respect to\nthe predicate.	text	txt
5194	1	class Context {\n  - strategy: Strategy*\n  + ContextInterface()\n  + setStrategy(strategy: Strategy*)\n}\n\nAbstract Strategy {\n  # {abstract} algorithmInterface()\n}\n\nContext -|> Strategy\n\nclass StrategyA {\n  + algorithmInterface()\n}\n\nclass StrategyB {\n  + algorithmInterface()\n}\n\nclass StrategyC {\n  + algorithmInterface()\n}\n\nStrategy <|-- StrategyA\nStrategy <|-- StrategyB\nStrategy <|-- StrategyC	code	plantuml
5215	1	An expression as follows can only be used for one binary file, and if the binary file is moved, the rule will no longer apply:	text	md
4388	5	#include <algorithm>\n#include <vector>\n\nint main()\n{\n    std::vector<long> sorted{1,2,3,4,5,6,7,8,9};\n\n    auto point = std::partition_point(data.begin(), data.end(), [](long v) { return v < 6; });\n    std::assert(std::distance(data.begin(), point) == 5);\n\n    auto lower_five = std::lower_bound(sorted.begin(), sorted.end(), 5);\n    auto least_five = std::partition_point(sorted.begin(), sorted.end(), [](long v) { return v < 5; });\n    std::assert(*lower_five == *least_five);\n\n    auto square = std::ranges::partition_point(sorted,\n        [](long v) { return v < 16; },\n        [](long v) { return v * v; } // project to {1,4,9,16,25,...}\n    );\n    std::assert(*square == 16);\n}	code	cpp
4389	1	| `std::binary_search` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | N/A |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
4389	2	This function checks whether the requested value is present in the sorted\nrange or not.	text	txt
4389	3	#include <algorithm>\n#include <ranges>\n#include <vector>\n\nint main()\n{\n    std::vector<long> data{1,2,3,4,5,6};\n    std::binary_search(data.begin(), data.end(), 4);\n    // true\n    std::ranges::binary_search(data, 4);\n    // true\n}	code	cpp
4389	4	`std::binary_search` is equivalent to calling `std::equal_range` and checking\nwhether the returned is non-empty; however, `std::binary_search` offers a\nsingle lookup performance, where `std::equal_range` does two lookups to\ndetermine the lower and upper bounds.	text	txt
4390	1	| `std::includes` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
4390	2	#include <algorithm>\n#include <ranges>\n#include <vector>\n\nint main()\n{\n    std::ranges::includes({1,2,3,4,5}, {3,4});\n    // true\n}	code	cpp
4392	1	| `std::inplace_merge` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
4392	2	#include <algorithm>\n#include <vector>\n\nint main()\n{\n    std::vector<long> range{1,3,5,2,4,6};\n    std::inplace_merge(range.begin(), range.begin()+3, range.end());\n    // range == {1,2,3,4,5,6}\n}	code	cpp
4394	1	| `std::unique_copy` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | C++17 |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
4394	2	#include <algorithm>\n#include <ranges>\n#include <vector>\n\nint main()\n{\n    std::vector<long> range{1,2,2,3,3,3,4,4,4,4,5,5,5,5,5}, result;\n    std::ranges::unique_copy(range, std::back_inserter(result));\n    // range is untouched\n    // result == {1,2,3,4,5};\n}	code	cpp
5274	1	rmdir <directory>	code	sh
4408	1	| `std::prev_permutation` | standard |\n| --- | --- |\n| introduced | C++98 |\n| paralllel | N/A |\n| constexpr | C++20 |\n| rangified | C++20 |	text	txt
4408	2	The `std::next_permutation` and `std::prev_permutation` algorithms reorder\nelements of a range into the next/previous lexicographical permutation.	text	txt
4408	3	If no such permutation exists, both algorithms roll over and return `false`.	text	txt
4408	4	#include <algorithm>\n#include <vector>\n#include <bitset>\n\nstd::vector<int> data{1, 2, 3};\ndo {\n    // Iterate over:\n    // 123, 132, 213, 231, 312, 321\n} while(std::next_permutation(data.begin(), data.end()));\n// data == {1, 2, 3}\n\nstd::vector<bool> bits(4);\nbits[0] = 1;\nbits[1] = 1;\ndo {\n    // Iterate over all 4 bit numbers with 2 bits set to 1\n    // 1100, 1010, 1001, 0110, 0101, 0011\n} while (std::prev_permutation(bits.begin(), bits.end()));\n// bits == {1, 1, 0, 0}	code	cpp
5151	1	Text {\n    id: label	text	txt
5469	3	cmake_minimum_required(VERSION 4.0)\nproject(Example VERSION 1.0 LANGUAGES CXX)\n\ninclude(FetchContent)\n\nFetchContent_Declare(ftxui\n    GIT_REPOSITORY https://github.com/ArthurSonzogni/FTXUI\n    GIT_TAG v5.0.0\n)\nFetchContent_MakeAvailable(ftxui)\n\nadd_executable(program main.cpp)\ntarget_link_libraries(program PRIVATE ftxui::component ftxui::dom ftxui::screen)	code	cmake
4415	1	#include <string>\n\ntemplate<typename CharT>\nusing tstring = std::basic_string<CharT, std::char_traits<CharT>, std::allocator<CharT>>;\n\ntemplate<typename CharT>\ninline tstring<CharT> reverse(tstring<CharT> text)\n{\n    std::reverse(std::begin(text), std::end(text));\n    return text;\n}\n\ntemplate<typename CharT>\ninline tstring<CharT> reverse(tstring<CharT>&& text)\n{\n    std::reverse(std::begin(text), std::end(text));\n    return text;\n}	code	cpp
5197	1	When the strategy should only be set once and not change during the lifetime of the context object, we inject the strategy through the constructor. Otherwise, we use a setter method to set or change the strategy anytime.	text	md
4416	1	#include <string>\n#include <utility>\n\ntemplate<typename CharT>\nusing tstring = std::basic_string<CharT, std::char_traits<CharT>, std::allocator<CharT>>;\n\ntemplate<typename CharT>\ninline tstring<CharT> trim(tstring<CharT> const& text)\n{\n    tstring<CharT>::size first{text.find_first_not_of(' ')};\n    tstring<CharT>::size last{text.find_last_not_of(' ')};\n    return text.substr(first, (last - first + 1));\n}	code	cpp
4417	1	#include <string>\n#include <algorithm>\n\ntemplate<typename CharT>\nusing tstring = std::basic_string<CharT, std::char_traits<CharT>, std::allocator<CharT>>;\n\ntemplate<typename CharT>\ninline tstring<CharT> remove(tstring<CharT> text, CharT const character)\n{\n    auto last = std::remove_if(std::begin(text), std::end(text), [character](CharT const c) { return c == character; });\n    text.erase(last, std::end(text));\n    return text;\n}	code	cpp
4418	1	#include <string>\n#include <sstream>\n#include <vector>\n\ntemplate<typename CharT>\nusing tstring = std::basic_string<CharT, std::char_traits<CharT>, std::allocator<CharT>>;\n\ntemplate<typename CharT>\nusing tstringstream = std::basic_stringstream<CharT, std::char_traits<CharT>, std::allocator<CharT>>;\n\ntemplate<typename CharT>\ninline std::vector<tstring<CharT>> split(tstring<CharT> text, CharT const delimiter)\n{\n    auto sstream = tstringstream<CharT>{text};\n    auto tokens = std::vector<tstring<CharT>>{};\n    auto token = tstring<CharT>{};\n\n    while (std::getline(sstream, token, delimiter))\n    {\n        if (!token.empty())\n            tokens.push_back(token);\n    }\n\n    return tokens;\n}	code	cpp
4419	1	Following string operations are available in C++23:	text	txt
4419	2	- `std::basic_string<CharT,Traits,Allocator>::insert_range`\n- `std::basic_string<CharT,Traits,Allocator>::append_range`\n- `std::basic_string<CharT,Traits,Allocator>::replace_with_range`	text	txt
4420	1	Using C++23:	text	txt
5458	3	* Scale Invariant Feature Transform (SIFT)\n* Speeded Up Robust Features (SURF)\n* Features From Accelerated Segment Test (FAST)	text	md
4420	2	#include <iostream>\n#include <iterator>\n#include <string>\n\nint main() {\n    auto const missing = {'l', 'i', 'b', '_'};\n    std::string library_name{"__cpp_containers_ranges"};\n\n    auto const pos = library_name.find("container");\n    auto iter = std::next(library_name.begin(), pos);\n\n#ifdef __cpp_lib_containers_ranges\n    library_name.insert_range(iter, missing);\n#else\n    library_name.insert(iter, missing.begin(), missing.end());\n#endif\n\n    std::cout << library_name;\n}	code	cpp
4421	1	#include <iostream>\n#include <iterator>\n#include <algorithm>\n#include <ranges>\n#include <string>\n#include <vector>\n#include <map>\n\nint main()\n{\n    std::map<long, std::string> map{ {0, "first"}, {1, "second"}, {2, "third"} };\n\n    std::ranges::copy(std::views::keys(map), std::ostream_iterator<long>(std::cout, " "));\n    // 0 1 2\n\n    std::ranges::copy(std::views::values(map), std::ostream_iterator<long>(std::cout, " "));\n    // first second third\n}	code	cpp
4452	1	The callable and arguments are copied into storage local to the new thread.	text	txt
5277	1	rmdir -v <directory>	code	sh
5215	2	Allow the `httpd` processes to bind to TCP port 80.	code	md
4439	1	int do_something(int input)\npre(input > 0),\npost(ret: ret < input)\n{\nreturn input - 1;\n}	code	cpp
4440	1	g++ -std=c++23 -O2 -fcontracts -fcontracts-nonattr	code	sh
4441	1	The relationships between elements within a range cannot be directly stated.	text	txt
4442	1	Narrow and wide contracts.	text	txt
4443	1	A function that accepts any input has a wide contract.	text	txt
4443	2	A function that is limited in its acceptable input has a narrow contract.\nNarrow contracts limits the possible values of a type.	text	txt
4443	3	namespace std\n{\n    template <typename T, typename Allocator = allocator<T>>\n    class vector\n    {\n    public:\n        T& operator[](size_type pos);\n        // narrow: pos < size()\n\n        T& at(size_type pos);\n        // wide: throws if out of bound\n\n        T& front();\n        // narrow: 0 != empty()\n\n        vector(vector&&);\n        // wide\n    };\n} // std	code	cpp
4444	1	* Throwing exceptions, returning errors are part of the contract. Values or\n* states that are out of contract are bugs and they are not something to\n  handle.	text	txt
4445	1	Calling a function that is out of contracts results in undefined behavior.	text	txt
4445	2		code	txt
4446	1	This handler should be used for logging not handling a contract like nothing\nhappened.	text	txt
4446	2	You cannot call this function by yourself.	text	txt
4446	3	void ::handle_contract_violation(std::contracts::contract_violation const& cv);	code	cpp
4447	1	* enforce\n* observe\n* ignore	text	txt
4447	2		code	txt
4448	1	The compiler will compile contracts, checks for their correctness, and when\neverything is checked all the contracts will be wiped from the code.	text	txt
4448	2		code	txt
4449	1	When implementing contract for overriden functions, the contract cannot be\nwider than the contract already defined for the virtual function within base\nclass.	text	txt
4449	2	class base\n{\npublic:\n    virtual void do_something(int x)\n        pre(x < 100)\n    {\n    }\n};\n\nclass derived : public base\n{\npublic:\n    virtual void do_something(int x)\n        pre(x < 120)\n    {\n    }\n};	code	cpp
4450	1	#include <thread>\n#include <chrono>\n\nvoid do_something()\n{\n    using namespace std::chrono_literals;\n    std::this_thread::sleep_for(1s);\n}\n\nint main()\n{\n    std::thread worker{do_something};\n    worker.join();\n}	code	cpp
4451	1	void do_something() {}\nvoid do_something_else() {}\n\n#include <thread>\n\nint main()\n{\n    std::thread thread_f(do_something);\n    thread_f.join();\n\n    background_task callable;\n    std::thread thread_c(callable);\n    thread_c.join();\n\nstruct background_task\n{\n    void operator()()\n    {\n        do_something();\n        do_something_else();\n    }\n};\n\n    // no to mistakenly call a thread like this:\n    //   std::thread thread_x(background_task());\n    // which can be correctly expressed like:\n    //   std::thread thread_x((background_task()));\n    //   std::thread thread_x{background_task()};\n\n    std::thread thread_l([]{\n        do_something();\n        do_something_else();\n    });\n    thread_l.join();\n}	code	cpp
1459	1	template<typename T, typename = typename std::enable_if_t<std::is_standard_layout_v<T>, T>>\nclass pod_wrapper\n{\n    T value;\n};\n\nstruct point\n{\n    int x;\n    int y;\n};\n\npod_wrapper<int> w1; // OK\npod_wrapper<point> w2; // OK\npod_wrapper<std::string> w3; // error: too few template arguments\n\ntemplate<typename T, typename = typename std::enable_if_t<std::is_integral_v<T>, T>>\nauto mul(T const a, T const b)\n{\n    return a * b;\n}\n\nauto v1 = mul(1, 2); // OK\nauto v2 = mul(1.0, 2.0); // error: no matching overloaded function found	code	cpp
4452	4	#include <thread>\n#include <memory>\n#include <string>\n#include <string_view>\n\nvoid rvalue_write(std::string&&) { } // rvalue only\nvoid lvalue_write(std::string&) { } // lvalue only\nvoid pointer_write(std::string_view) { } // pointer only\nvoid smart_write(std::unique_ptr<std::string>) { } // non-copyable object only\n\nstruct X\n{\n    void do_lengthy_work(std::string&) {}\n};\n\nint main()\n{\n    // implicit cast from const char* to std::string\n    std::thread write_thread(rvalue_write, "text");\n    write_thread.join();\n\n    char text[1024];\n    sprintf(text, "%i", 1);\n\n    // use of local object in joinable thread\n    std::thread pointer_thread(pointer_write, text);\n    pointer_thread.join();\n\n    // use of copied local object before background thread invokation\n    std::thread local_thread(rvalue_write, std::string{text});\n    local_thread.detach();\n\n    // pass by lvalue reference to avoid copy\n    std::string str{text};\n    std::thread ref_thread(lvalue_write, std::ref(str));\n    ref_thread.join();\n\n    // bind method to thread\n    X some_work;\n    std::thread binding_thread(&X::do_lengthy_work, &some_work, std::ref(str));\n    binding_thread.join();\n\n    // explicitly move non-copyable objects\n    std::unique_ptr<std::string> non_copyable{new std::string{str}};\n    std::thread smart_thread(smart_write, std::move(non_copyable));\n    smart_thread.join();\n}	code	cpp
4453	1	#include <thread>\n#include <chrono>\n\nvoid do_something()\n{\n    std::this_thread::sleep_for(std::chrono::seconds{1});\n}\n\nint main()\n{\n    std::jthread t0{do_something};\n}	code	cpp
4454	1	For `std::thread`, the `joinable()` member function is checked first. If the\nthread is still joinable program will be terminated by calling\n`std::abort()`. All threads need to be joined before the destructor gets\ncalled, unless they are detached.	text	txt
4454	2	For `std::jthread`, the `std::stop_source` member will be used to request a\nstop. Then, the thread will be joined.	text	txt
4454	3	#include <thread>\n\nint main()\n{\n    std::jthread worker{[]{ return; }};\n    // destructor requests stop and joins\n}	code	cpp
5459	1	Object delection refers to detecting the location of an object in a given image.	text	md
4455	1	#include <thread>\n#include <stdexcept>\n\nvoid do_something() { }\nvoid do_something_impossible() { throw std::runtime_error("fatal"); }\n\nint main()\n{\n    std::thread t(do_something);\n\n    try\n    {\n        do_something_impossible();\n    }\n    catch (std::exception const& exp)\n    {\n        t.join(); // reaches due exceptional exit but joins anyway\n        throw;\n    }\n\n    t.join();\n}	code	cpp
4456	1	#include <thread>\n\nvoid do_something() { }\n\nclass thread_guard\n{\n    std::thread& _t;\n\npublic:\n    explicit thread_guard(std::thread& t): _t{t} {}\n    virtual ~thread_guard() { if (_t.joinable()) _t.join(); }\n    thread_guard(thread_guard const&) = delete;\n    thread_guard& operator =(thread_guard const&) = delete;\n};\n\nint main()\n{\n    std::thread t(do_something);\n    thread_guard joining_thread{t};\n}	code	cpp
4457	1	#include <thread>\n#include <cassert>\n\nvoid do_background_work() { }\n\nint main()\n{\n    std::thread task{do_background_work};\n    task.detach();\n    assert(!task.joinable());\n}	code	cpp
4458	1	#include <thread>\n\nvoid do_work() { }\n\nint main()\n{\n    std::thread t1{do_work}; // t1 joinable\n    std::thread t2{std::move(t1)}; // t1 empty, t2 joinable\n    t1 = std::thread{do_work}; // t1 joinable\n    std::thread t3 = std::move(t2); // t3 joinable, t2 empty\n    t2 = std::move(t1); // t2 joinable, t1 empty\n\n    // t1 is already empty\n    t2.join();\n    t3.join();\n}	code	cpp
4459	1	Operating systems provide us with horrible killing mechanisms of stopping a\nthread, but that prevents us from cleaning up.	text	txt
4460	1	- Create a `std::stop_source`\n- Obtain a `std::stop_token` from the `std::stop_source`\n- Pass the `std::stop_token` to a new thread or task\n- When you want the operation to stop call `source.request_stop()`\n- Periodically call `token.stop_requested()` to check	text	txt
4460	2	#include <iostream>\n#include <format>\n#include <thread>\n#include <chrono>\n\nbool state{false};\n\nbool preconditions_apply()\n{\n    return state;\n}\n\nvoid do_something(std::stop_token caller)\n{\n    while (!caller.stop_requested())\n    {\n        /* process something */\n    }\n    std::cerr << std::format("{}\\\\n", "Halting worker");\n}\n\nvoid thread_controller(std::stop_source source)\n{\n    while (preconditions_apply())\n    {\n        std::this_thread::sleep_for(std::chrono::milliseconds{100});\n    }\n    source.request_stop();\n}\n\nint main()\n{\n    state = true; // preconditions apply\n    std::stop_source source_controller;\n    std::jthread worker{do_something, source_controller.get_token()};\n    std::jthread controller{thread_controller, std::ref(source_controller)};\n    std::this_thread::sleep_for(std::chrono::milliseconds{1000});\n    state = false; // break the contract\n}	code	cpp
4461	1	std::jthread x{[]{}};\nx.get_stop_source();	code	cpp
4462	1	#include <thread>\n#include <chrono>\n\nint main()\n{\n    std::jthread t{[](std::stop_token token) {\n        while (token.stop_requested())\n            break;\n        std::this_thread::sleep_for(std::chrono::milliseconds(100));\n    }};\n\n    std::this_thread::sleep_for(std::chrono::milliseconds(500));\n    t.request_stop();\n}	code	cpp
4463	1	Callee function can optionally accept a `std::stop_token`. For backward\ncompatibility with existing code, functions without `std::stop_token`\nargument will be called regularly as with `std::thread`.	text	txt
4463	2	#include <thread>\n\nint main()\n{\n    std::stop_source caller_source;\n    auto callable = [](std::stop_token caller) { while (!caller.stop_requested()); };\n    std::jthread stoppable_thread{callable, caller_source.get_token()};\n    std::jthread regular_thread{[]{ return; }};\n    caller_source.request_stop();\n}	code	cpp
4464	1	std::jthread x{[]{}};\nx.get_stop_token();	code	cpp
4465	1	std::thread x{[]{}};\nx.request_stop();\n// ^ equivalent v\nx.get_stop_source().request_stop();	code	cpp
4466	1	`std::stop_callback{std::stop_token, Args... args}` class template can be\nused to trigger a cancellation function when stop requested on a thread.	text	txt
5469	4	#include <ftxui/component.hpp>\n#include <ftxui/dom.hpp>\n#include <ftxui/screen.hpp>\n\nint main()\n{\n}	code	cpp
5480	1	Each cell in the screen grid is a `ftxui::Pixel`, which holds a `character` of type `std::string` containing a Unicode codepoint, color properties `foreground_color` and `background_color` of type `ftxui::Color`, and a bitfield of characteristics like `blink`, `bold`, `dim`, `inverted`, `underlined`, `underlined_double`, and `strikethrough`.	text	md
5527	1	#include <ftxui/dom/elements.hpp>\n\nint main()\n{\n    ftxui::Element text{ftxui::text("Flashback, for experts like you")};\n    ftxui::dim(text);\n}	code	cpp
4466	2	#include <filesystem>\n#include <fstream>\n#include <thread>\n#include <chrono>\n\nint main(int argc, char** argv)\n{\n    std::stop_source worker_controller{};\n\n    std::jthread worker{\n        [](std::stop_token const& caller_token, std::filesystem::path file_path)\n        {\n            bool readable{};\n            std::ifstream file_stream{file_path};\n\n            if (file_stream.is_open())\n                readable = true;\n\n            std::stop_callback close_stream{caller_token, [&]{ readable = false; }};\n            while (readable)\n            {\n                /* do something with the file */\n            }\n\n            file_stream.close();\n        }, worker_controller.get_token(), argv[0]\n    };\n\n    worker.detach();\n    std::this_thread::sleep_for(std::chrono::seconds{5});\n    worker_controller.request_stop();\n    std::this_thread::sleep_for(std::chrono::seconds{5});\n}	code	cpp
4467	1	#include <thread>\n#include <vector>\n\nvoid task() { }\n\nint main()\n{\n    unsigned int const min_threads = 2;\n    unsigned int const hw_threads = std::thread::hardware_concurrency();\n    unsigned int const num_threads = hw_threads ? hw_threads : min_threads;\n\n    std::vector<std::thread> threads(num_threads-1); // count main thread as well\n\n    for (std::thread& t: threads)\n        t = std::thread{task};\n\n    for (std::thread& t: threads)\n        t.join();\n}	code	cpp
4468	1	#include <thread>\n#include <iostream>\n\nint main()\n{\n    std::thread::id main_thread_id = std::this_thread::get_id();\n    std::cout << main_thread_id << std::endl;\n}	code	cpp
4470	1	- `std::atomic`\n- `std::mutex`\n- `std::future` and `std::promise`\n- `std::condition_variable`\n- `std::semaphore` <sup>(C++20)</sup>\n- `std::latch` <sup>(C++20)</sup>\n- `std::barrier` <sup>(C++20)</sup>	text	txt
4472	1	- `void lock()`: blocks until the lock is acquired\n- `bool try_lock()`: returns immediately; `true` if lock acquired, `false` if not\n- `void unlock()`: release the lock; undefined behavior if current thread doesn't own the lock	text	txt
4473	1	When exceptions thrown after a mutex is locked, that mutex will remain\nlocked. To avoid that, we use `std::lock_guard<>` class template to\nautomatically lock and unlock the mutex.	text	txt
4473	2	#include <iostream>\n#include <thread>\n#include <mutex>\n\nstd::mutex exclusive{};\n\nint main()\n{\n    exclusive.lock();\n    std::thread t{[&](){\n        std::lock_guard guard{exclusive};\n        std::puts("do this later");\n    }};\n    std::puts("do this first");\n    exclusive.unlock();\n    t.join();\n}	code	cpp
4474	1	#include <initializer_list>\n#include <vector>\n#include <thread>\n#include <mutex>\n\ntemplate<typename T>\nclass some_task\n{\npublic:\n    some_task(std::initializer_list<T> range): tokens{range} {}\n    void append(some_task<T> const& other) noexcept\n    {\n        std::scoped_lock guard{exclusive, other.exclusive};\n        tokens.insert(tokens.end(), other.tokens.begin(), other.tokens.end());\n    }\n    std::size_t size() const noexcept\n    {\n        std::lock_guard guard{exclusive};\n        return tokens.size();\n    }\n\nprivate:\n    std::vector<T> tokens;\n    std::mutex exclusive;\n};\n\ntemplate<typename T>\nvoid merge_tasks(some_task<T>& a, some_task<T>& b)\n{\n    a.append(b);\n}\n\nint main()\n{\n    some_task<long> A{1,2,3,4}, B{5,6,7,8};\n    std::thread t1{&some_task<long>::size, A};\n    std::thread t2{merge_tasks<long>, A, B};\n}	code	cpp
5245	1	One of the functionalities resulting from using categories is to support multitenancy.	text	md
4475	1	Almost whenever possible, use `std::scoped_lock` instead of `std::lock_guard`\nwhen C++17 can be used. `std::scoped_lock` takes multiple mutexes and handles\nthe proper locking sequence to avoid deadlock.	text	txt
4475	2		code	txt
4476	1	#include <thread>\n#include <string>\n#include <mutex>\n#include <shared_mutex>\n#include <map>\n\nclass some_task\n{\npublic:\n    void set(std::string key, std::string value)\n    {\n        std::unique_lock<std::shared_mutex> guard(shared_exclusive);\n        config.insert_or_assign(key, value);\n    }\n    std::string get(std::string const& key) const\n    {\n        std::shared_lock<std::shared_mutex> guard(shared_exclusive);\n        return config.at(key);\n    }\nprivate:\n    std::map<std::string, std::string> config;\n    mutable std::shared_mutex shared_exclusive;\n};\n\nint main()\n{\n    some_task task;\n    std::thread t1{&some_task::set, &task, "pgdata", "/opt/pgroot/data"};\n    t1.join();\n    std::string storage_path = task.get("pgdata");\n}	code	cpp
4477	1	Constructor takes one shared mutex and calls `lock_shared()` on the mutex.	text	txt
4477	2	The API of shared lock is similar to unique lock.	text	txt
4477	3		code	txt
4478	1	- `try_lock_for(duration)`\n- `try_lock_until(time_point)`\n- `try_lock_shared_for(duration)`\n- `try_lock_shared_until(time_point)`	text	txt
4478	2		code	txt
4479	1	Recursive mutexes can be used when a function requires locking multiple\ntimes.	text	txt
4479	2	Number of `lock()` calls must match exactly the number of `unlock()` calls.	text	txt
4479	3	Only one thread can have exclusive ownership, or write access:	text	txt
4479	4	m.lock();	code	cpp
4479	5	Many threads can get shared ownership, or read access:	text	txt
4479	6	m.lock_shared();	code	cpp
4479	7	Calls to `lock_shared()` from other threads will succeed; calls to `lock()`\nwill block.	text	txt
4480	1	Conditional variables are complicated to use correctly.	text	txt
4480	2	Useful when some threads are waiting for a condition and other threads make\nthat condition true.	text	txt
4480	3		code	txt
4481	1	#include <condition_variable>\n#include <thread>\n#include <vector>\n#include <mutex>\n\ntemplate<typename T>\nclass bag\n{\npublic:\n    void append(T value)\n    {\n        std::unique_lock<std::mutex> guard{exclusive};\n        container.push_back(std::move(value));\n        guard.unlock();\n        condition.notify_one();\n    }\n\n    T get() const\n    {\n        std::unique_lock<std::mutex> guard{exclusive};\n        while (container.empty())\n            condition.wait(guard);\n        T value = std::move(container.back());\n        return value;\n    }\n\nprivate:\n    mutable std::mutex exclusive;\n    mutable std::condition_variable condition;\n    std::vector<T> container;\n};\n\nint main()\n{\n    bag<long> numbers{};\n    numbers.append(42);\n    long n = numbers.get(); // 42\n}	code	cpp
4482	1	Primitive types.	text	txt
4483	1	Without atomic type, we need to use a locking mechanism like mutual\nexclusions to avoid data races on the shared value. But using atomic types,\nthey are guaranteed to be accessed only by one thread at a time.	text	txt
4483	2	#include <atomic>\n#include <thread>\n\nstd::atomic<long> shared_value{};\n\nvoid increment_shared()\n{\n    shared_value++;\n}\n\nint main()\n{\n    std::thread t1{increment_shared};\n    std::thread t2{increment_shared};\n    t1.join();\n    t2.join();\n}	code	cpp
4484	1	`static` local variables are guaranteed to only initialize once.	text	txt
4484	2		code	txt
4485	1	The first thread to arrive will start initializing the static instance.	text	txt
4485	2	#include <iostream>\n#include <thread>\n\ntemplate<typename T>\nT do_something(T initial = {})\n{\n    static T instance{std::move(initial)};\n    return instance;\n}\n\ntemplate<typename T>\nclass box\n{\npublic:\n    explicit box(T initial = {}): value{std::move(initial)} {}\n    box(box<T> const& other): value{other.value} {}\n    box<T>& operator=(box<T> const& other) { value = other.value; return *this; }\n    static inline box<T>& get_instance(T initial = {})\n    {\n        static box<T> instance{std::move(initial)};\n        std::cout << "initializing\\\\n";\n        return instance;\n    }\n    T value;\n};\n\ntemplate<typename T>\nvoid initialize(box<T>& instance)\n{\n    instance = box<long>::get_instance(73);\n}\n\nint main()\n{\n    long fvalue = do_something<long>(42);\n    box<long> instance;\n    std::thread t1{initialize<long>, std::ref(instance)};\n    std::thread t2{initialize<long>, std::ref(instance)};\n    t1.join();\n    t2.join();\n    std::cout << instance.value << std::endl;\n}	code	cpp
4486	1	#include <optional>\n#include <thread>\n#include <mutex>\n\ntemplate<typename T>\nclass some_task\n{\npublic:\n    void initialize(T init = {}) { std::call_once(execution, [&]{ value = std::move(init); }); }\n    std::optional<T> get() const { return value; }\nprivate:\n    std::once_flag execution;\n    std::optional<T> value;\n};\n\ntemplate<typename T>\nvoid initialize(some_task<T>& task, T value)\n{\n    task.initialize(std::move(value));\n}\n\nint main()\n{\n    some_task<long> number;\n    std::thread t1{initialize<long>, std::ref(number), 42};\n    std::thread t2{initialize<long>, std::ref(number), 73};\n    t1.join();\n    t2.join();\n    long value = *number.get(); // either 42 or 73 without data race\n}	code	cpp
4487	1	Future provides a mechanism for a one-shot transfer of data between threads.	text	txt
4487	2	|Method|Description|\n|---|---|\n|`std::future<T>`|Default constructor creates an empty object with no state|\n|`valid()`|Check if the future has state|\n|`get()`|Wait for the data and retrieve it|\n|`wait()`|Wait for the data to be ready|\n|`std::future_status status = wait_for(duration)`|Wait for the data to be ready for the specified duration|\n|`std::future_status status = wait_until(time_point)`|Wait for the data to be ready until the specified time|	text	txt
4487	3		code	txt
4488	1	If you require simple one-shot signalling between threads, the `void`\nspecializations of `std::future` and `std::shared_future` can serve as solid\nhigh-level choices for 1:1 and 1:N signalling.	text	txt
5460	1	The machine learning module provides many algorithms including:	text	md
4488	2	#include <thread>\n#include <future>\n\n// executes first stage eagerly, but wait for signal to continue the second stage\nauto wait_for_signal = [](auto future) {\n    // first stage\n    future.wait(); // wait for signal\n    // second stage\n};\n\n{ // 1:1 example\n    std::promise<void> sender;\n\n    auto t = std::jthread(wait_for_signal, sender.get_future());\n\n    // first stage eagerly executing\n    sender.set_value(); // unblock the second stage by sending a signal\n}\n\n{ // 1:N example\n    std::promise<void> sender;\n\n    // promise::get_future() can only be called once\n    std::shared_future<void> receiver(sender.get_future());\n\n    // start four threads, each running two-stage runner\n    std::vector<std::jthread> runners;\n\n    // eagerly execute first stage for all four threads\n    std::generate_n(std::back_inserter(runners), 4, [&]{ return std::jthread(wait_for_signal, receiver); });\n\n    sender.set_value(); // unblock the second stage by sending a signal\n}	code	cpp
4489	1	Launches a task that returns a value.	text	txt
4489	2		code	txt
4490	1	|Method|Description|\n|---|---|\n|`std::promise<T>`|Default constructor creates an object with an empty state|\n|`valid()`|Check if the promise has state|\n|`set_value()`|Set the value in the state|\n|`set_exception(exception_pointer)`|Set the exception in state|\n|`get_future()`|Get the `std::future<T>` for the state|	text	txt
4490	2		code	txt
4491	1	#include <iostream>\n#include <format>\n#include <thread>\n#include <future>\n\nint main()\n{\n    std::promise<long> value_source;\n    std::future<long> value_target{value_source.get_future()};\n\n    std::jthread provider{[&value_target]{\n        std::cout << std::format("{}\\\\n", value_target.get());\n    }};\n\n    std::jthread consumer{[&value_source]{\n        value_source.set_value(42);\n    }};\n}	code	cpp
4492	1	std::promise<long> value_source;\nstd::future<long> value_target{value_source.get_future()};\n\nstd::jthread provider{[&value_target]{\nstd::cout << std::format("{}\\\\n", value_target.get());\n// throws exception\n}};\n\nstd::jthread consumer{[&value_source]{\nvalue_source.set_exception(\nstd::make_exception_ptr(std::exception{"reason"})\n)\n}};	code	cpp
4494	1	A mutex must be locked and unlocked in the same thread. But a semaphore can\nbe acquired in one thread, and released in another.\nstd::ptrdiff_t least_max_value = std::counting_semaphore::max();	code	cpp
4495	1	Counting semaphore is much more flexible than mutexes.	text	txt
4495	2	Maintains an internal counter. `release()` increments the counter, and\n`acquire()` decrements the counter, or block if `counter = 0`.	text	txt
4495	3		code	txt
4496	1	|Method|\n|---|\n|`std::counting_semaphore::max()`|\n|`release(std::ptrdiff_t update = 1)`|\n|`acquire()`|\n|`try_acquire()`|\n|`try_acquire_for(duration)`|\n|`try_acquire_until(timepoint)`|	text	txt
4497	1	In this sample, the counting semaphore is initialized with 0. Because of this\ninitialization, the `secondary_initialization()` method cannot acquire semaphore,\ntherefore the thread blocks. On the other hand, the `primary_initialization()` method\nreleases the semaphore, therefore its counter is incremented and the\n`secondary_initialization()` method continues to run.	text	txt
4497	2	#include <iostream>\n#include <semaphore>\n#include <thread>\n#include <vector>\n\ntemplate<typename T>\nclass data_structure\n{\nprivate:\n    std::vector<T> underlying_container;\n    std::counting_semaphore<1> underlying_synchronization;\n\npublic:\n    data_structure():\n        underlying_container{},\n        underlying_synchronization{0}\n    {\n    }\n\n    void prepare()\n    {\n        std::jthread t0{&data_structure::secondary_initialization, this};\n        std::jthread t1{&data_structure::primary_initialization, this};\n    }\n\n    std::vector<T> get() const { return underlying_container; }\n\nprivate:\n    void secondary_initialization()\n    {\n        underlying_synchronization.acquire();\n        underlying_container[1] = 2;\n    }\n\n    void primary_initialization()\n    {\n        underlying_container = {1, 0, 3};\n        underlying_synchronization.release();\n    }\n};\n\nint main()\n{\n    data_structure<long> data{};\n    data.prepare();\n    for (auto element: data.get())\n        std::cout << element << " ";\n    std::cout << "\\\\n";\n}	code	cpp
4498	1	#include <thread>\n#include <chrono>\n#include <semaphore>\n\nstd::binary_semaphore signal_main2thread{0}, signal_thread2main{0};\n\nvoid thread_task()\n{\n    signal_main2thread.acquire();\n    std::this_thread::sleep_for(std::chrono::seconds{1});\n    signal_thread2main.release();\n}\n\nint main()\n{\n    std::jthread thread_worker{thread_task};\n    signal_main2thread.release();\n    signal_thread2main.acquire();\n}	code	cpp
4499	1	`std::latch` is a single-use counter that allows threads to wait for the\ncounter to reach zero.	text	txt
4499	2	`std::latch` is useful for managing one task leveraged by multiple threads.	text	txt
4500	1	A thread waits at a synchronization point until the internal counter becomes\nzero. So latches are almost opposites of the semaphore in counting.	text	txt
4500	2	- Create the latch with a **non-zero** counter\n- One or more threads decrease the count\n- Other threads may wait for the latch to be signalled\n- When the count reaches zero it is permanently signalled and all waiting\n  threads are woken.	text	txt
4501	1	|Method|Description|\n|---|---|\n|`std::latch{std::ptrdiff_t count}`|Create a latch with the specified count|\n|`count_down(std::ptrdiff_t update = 1)`|Decrements internal counter `update` times without blocking the caller|\n|`try_wait()`|Returns `true` if internal counter equals zero|\n|`wait()`|Immediately returns if internal counter equals zero, blocks otherwise|\n|`arrive_and_wait(std::ptrdiff_t update = 1)`|Equivalent to subsequent call to `count_down(update)` and `wait()`|	text	txt
4502	1	#include <thread>\n#include <latch>\n#include <mutex>\n#include <vector>\n\nstd::size_t thread_max{std::thread::hardware_concurrency()};\nstd::mutex exclusive{};\nstd::latch works{static_cast<std::ptrdiff_t>(thread_max)};\nstd::vector<long> shared_storage(thread_max);\n\nvoid set_data(std::size_t index, long value)\n{\n    std::lock_guard<std::mutex> automatic_locker{exclusive};\n    shared_storage.at(index) = value;\n    works.count_down();\n}\n\nint main()\n{\n    std::vector<std::jthread> thread_pool(thread_max);\n\n    for (std::size_t thread_index{}; thread_index != thread_max; ++thread_index)\n    {\n        thread_pool.emplace_back(set_data, thread_index, thread_index);\n    }\n\n    works.wait();\n    // blocks until all <thread_max> threads have set data\n    // {0, 1, 2, 3, 4, 5, 6, 7} on a machine with 8 cores\n}	code	cpp
4503	1	`std::barrier<>` is helpful to manage repetitive task leveraged by multiple\nthreads.	text	txt
4503	2	Shortly, `std::barrier<>` is a reusable `std::latch`.	text	txt
4504	1	The constructor of a barrier takes a callable as the **completion function**.\nIn the completion phase, the callable is executed by an arbitrary thread.	text	txt
5460	2	* Bayes classifier\n* k-nearest neighbors (KNN)\n* support vector machines (SVM)\n* decision trees\n* neural networks\n* Fast Approximate Nearest Neighbor Search Library (FLANN)	text	md
4504	2	|Method|Description|\n|---|---|\n|`std::barrier<task_type>{count, task}`|Create a barrier with the specified count and completion function|\n|`auto arrival_token = x.arrive()`|Decrease the count. Trigger completion phase if count reaches zero|\n|`arrive(std::ptrdiff_t update = 1)`|Decrement internal counter `update` times|\n|`wait(arrival_token)`|Blocks at the synchronization point until the completion phase is done|\n|`arrive_and_wait()`|Equivalent to subsequent call to `auto arrival_token = arrive()` and `wait(arrival_token)`|\n|`arrive_and_drop()`|Decrease the internal counter permanently and potentially trigger the completion phase without waiting|	text	txt
4504	3	- Construct a `std::barrier`, with a non-zero count and a completion\n  function.\n- One or more threads arrive at the barrier.\n- Some of these threads wait for the barrier to be signalled.\n- When the counter reaches zero, the barrier is signalled, the completion\n  function is called and the counter is reset.	text	txt
5200	2	#pragma once\n\n#include <memory>\n#include <Strategy.hpp>\n\nclass Context: public std::enable_shared_from_this<Context>\n{\n    std::unique_ptr<Strategy> m_strategy;\npublic:\n    Context();\n    void setStrategy(std::unique_ptr<Strategy> strategy) noexcept;\n    void contextInterface();\n    [[nodiscard]] std::string getData() const&;\n};	code	hpp
5278	1	mkdir <name>	code	sh
4505	1	#include <iostream>\n#include <thread>\n#include <mutex>\n#include <barrier>\n#include <vector>\n\nstd::barrier works{6};\nstd::mutex exclusive{};\nstd::vector<long> shared_storage(6);\n\nvoid part_time_job(std::size_t index, long value)\n{\n    std::lock_guard<std::mutex> automatic_locker{exclusive};\n    shared_storage.at(index) = value;\n    works.arrive_and_drop();\n    // decrement internal counter when done\n}\n\nvoid full_time_job(std::size_t index, long value)\n{\n        std::lock_guard<std::mutex> automatic_locker{exclusive};\n\n        shared_storage.at(index) = value;\n        works.arrive_and_wait();\n\n        shared_storage.at(index) = value;\n        works.arrive_and_wait();\n}\n\nint main()\n{\n    std::vector<std::jthread> thread_pool(6);\n\n    for (std::size_t index{}; index != 6; ++index)\n        thread_pool.emplace_back(full_time_job, index, index);\n}	code	cpp
4506	1	A function is a coroutine if its function body encloses a\ncoroutine-return-statement, an await-expression, or a yield-expression.	text	txt
4507	1	The Monostate pattern (not to be confused with `std::monostate`) is a pattern\nwith similar goals to a Singleton. Where a Singleton only permits a single\ninstance, the Monostate pattern can be instantiated many times while ensuring\nonly one instance of its internal state.	text	txt
4507	2	#include <mutex>\n#include <string>\n\nstruct MonoConfig\n{\n    MonoConfig()\n    {\n        // ensure a single initialization outside of the static chain, if we\n        // don't need multi-threaded safety we can downgrade to a boolean flag\n        std::call_once(flag_, populate_config);\n    }\n\n    // interface to acess the monostate\n    std::uint64_t get_id() const { return field1; }\n    const std::string& get_label() const { return field2; }\n\nprivate:\n    static std::once_flag flag_;\n    static std::uint64_t field1;\n    static std::string field2;\n\n    static void populate_config()\n    {\n        /* read the fields from config source */\n        field1 = 42;\n        field2 = "Hello World";\n    };\n};\n\n// All static members left default initialized\nstd::once_flag MonoConfig::flag_;\nstd::uint64_t MonoConfig::field1;\nstd::string MonoConfig::field2;\n\n// create instance of the monostate object\nMonoConfig config;\n\n// access the global state\nconfig.get_label();\n\n// creating additional instances is a no-op. note that when stored as a member,\n// it will still take up minimum 1 byte unless we use [[no_unique_address]].\nMonoConfig a, b, c, d, e, f, g, i, j, k;	code	cpp
4507	3	A Monostate with all the downsides of a global state can be a better fit for\ntestability.	text	txt
4507	4	#include <memory>\n\n// when combined with the PIMPL pattern we can mock/fake the global state\nstruct ImplIface {};\n\nstruct Actual : ImplIface\n{\n    static std::unique_ptr<ImplIface> make()\n    {\n        return std::make_unique<Actual>();\n    }\n};\n\nstruct Testing : ImplIface\n{\n    static std::unique_ptr<ImplIface> make()\n    {\n        return std::make_unique<Testing>();\n    }\n};\n\n// Switch active type based on testing/production\nusing ActiveType = Testing;\n\nstruct MonoPIMPL\n{\n    MonoPIMPL()\n    {\n        std::call_once(flag_, [] { impl_ = ActiveType::make(); });\n    }\n\n    /* expose ImplIface as any other PIMPL */\nprivate:\n    static std::once_flag flag_;\n    static std::unique_ptr<ImplIface> impl_;\n};\n\nstd::once_flag MonoPIMPL::flag_;\nstd::unique_ptr<ImplIface> MonoPIMPL::impl_;	code	cpp
5215	3	But with labels, the rule can be applied to any binary file that has the `httpd_t` type, regardless of its path:	text	md
5267	1	seq <begin> <step> <end>	code	sh
5152	5	import QtQuick	text	txt
5268	1	rm <file>	code	sh
4603	1	**since:** Same as above, but returns images created after the specified\nimage.	text	txt
5245	2	For example, systems hosting applications for multiple customers within a Linux system.	text	md
4602	1	**before:** Requires an image name or ID as argument, and returns all images\ncreated before it.	text	txt
4603	2	docker image list --filter since=container_name	code	txt
4583	1	#include <source_location>\n#include <string_view>\n#include <iostream>\n\nvoid log(std::string_view const message, std::source_location const location = std::source_location::current)\n{\n    std::cerr << location.file_name() << ": " << location.line() << "\\\\n\\\\t"\n        << location.function_name() << ": " << message << "\\\\n";\n}\n\nvoid do_something()\n{\n    log("something is done here");\n}\n\nint main()\n{\n    do_something();\n}	code	cpp
4584	1	- Creational Patterns\n- Behavioral Patterns\n- Structural Patterns	text	txt
4585	1	- Factory Method\n- Abstract Factory\n- Builder\n- Prototype\n- Singleton	text	txt
4586	1	- Encapsulates object creation in one method\n- Provides interface to create subclasses	text	txt
4587	1	When there are different products sharing similar properties and there might\nbe more products later to be added to the program. In that case, an abstract\nproduct generalizing all similar products should be created. And then, all\nvariations of concrete products inherit from abstract product.	text	txt
4587	2	@startuml\nabstract Product {\n}\nconcrete ProductVariation1 {\n}\nconcrete ProductVariation2 {\n}\nabstract Creator {\n}\nconcrete ConcreteCreator {\n    + getProduct(): Product\n}\n@enduml	code	plantuml
4587	3	On the other hand, There should be an abstract creator class that provides\nproduct generation methods. Then, there should be a concrete factory which\ncomposes a factory method returning abstract product.	text	txt
5200	8	#include <Context.hpp>\n#include <StrategyA.hpp>\n#include <StrategyB.hpp>\n#include <DefaultStrategy.hpp>\n\nint main()\n{\n    std::shared_ptr<Context> context{std::make_shared<Context>()};\n    context->contextInterface();\n}	code	cpp
4588	1	*main.cpp*\n#include <streamer.hpp>\n#include <mpeg.hpp>\n\n#include <iostream>\n#include <memory>\n\nint main()\n{\n    dp::streamer streamer;\n    std::shared_ptr<dp::video> video{streamer.record("mpeg")};\n    std::cout << video->length().count() << std::endl;\n}	code	cpp
4588	2	*mpeg.cpp*\n#include <mpeg.hpp>\n\nusing namespace dp;\n\nmpeg::mpeg(std::chrono::seconds const& length)\n    : _length{length}\n{\n}\n\nstd::chrono::seconds mpeg::length() const noexcept\n{\n    return _length;\n}	code	cpp
4588	3	*mpeg.hpp*\n#pragma once\n\n#include <video.hpp>\n\nnamespace dp\n{\nclass mpeg : public video\n{\npublic:\n    explicit mpeg(std::chrono::seconds const& length);\n    std::chrono::seconds length() const noexcept override;\n\nprivate:\n    std::chrono::seconds _length;\n};\n} // dp	code	cpp
4588	4	*streamer.cpp*\n#include <streamer.hpp>\n#include <mpeg.hpp>\n\n#include <cstring>\n\nusing namespace dp;\n\nstd::shared_ptr<video> streamer::record(char const type[4])\n{\n    std::shared_ptr<video> stream_buffer{};\n\n    if (strcmp(type, "mpeg") == 0)\n    {\n        stream_buffer = std::make_shared<mpeg>(std::chrono::seconds{120});\n    }\n\n    return stream_buffer;\n}	code	cpp
4588	5	*streamer.hpp*\n#pragma once\n\n#include <video_stream.hpp>\n\nnamespace dp\n{\nclass streamer : public video_stream\n{\npublic:\n    std::shared_ptr<video> record(char const type[4]) override;\n};\n} // dp	code	cpp
4588	6	*video.hpp*\n#pragma once\n\n#include <chrono>\n\nnamespace dp\n{\nstruct video\n{\n    virtual std::chrono::seconds length() const noexcept = 0;\n};\n} // dp	code	cpp
4588	7	*video_stream.hpp*\n#pragma once\n\n#include <memory>\n\nnamespace dp\n{\nclass video;\n\nclass video_stream\n{\npublic:\n    virtual std::shared_ptr<video> record(char const type[4]) = 0;\n};\n}	code	cpp
4589	1	With builder pattern, we can build a product one component at a time.	text	txt
4590	1	@startuml\nabstract practice {\n    # question(): string\n    # answer(): string\n    # origins(): string[]\n    # references(): string[]\n    # hash(): string\n}\n\nclass markdown_practice {\n    - question: string\n    - answer: string\n    - origins: string[]\n    - references: string[]\n    - id: hash\n    # question(): string\n    # answer(): string\n    # origins(): string[]\n    # references(): string[]\n    # hash(): string\n}\n\npractice <|-- markdown_practice\n\nclass html_practice {\n    - question: string\n    - answer: string\n    - origins: string[]\n    - references: string[]\n    - id: hash\n    # question(): string\n    # answer(): string\n    # origins(): string[]\n    # references(): string[]\n    # hash(): string\n}\n\npractice <|-- html_practice\n\nabstract builder {\n    # create_title(string): void\n    # write_answer(string): void\n    # list_origins(string[]): void\n    # list_references(string[]): void\n    # get_practice(): practice*\n}\n\npractice ..right..> builder\n\nclass markdown_builder {\n    # create_title(string): void\n    # write_answer(string): void\n    # list_origins(string[]): void\n    # list_references(string[]): void\n    # get_practice(): markdown_practice*\n}\n\nbuilder <|-- markdown_builder\n\nclass html_builder {\n    # create_title(string): void\n    # write_answer(string): void\n    # list_origins(string[]): void\n    # list_references(string[]): void\n    # get_practice(): html_practice*\n}\n\nbuilder <|-- html_builder\n\nclass director {\n    + html_practice(): html_practice*\n    + markdown_practice(): markdown_practice*\n}\n\nmarkdown_builder ..> director\nhtml_builder ..> director\n@enduml	code	plantuml
4594	1	Checking docker version should retrieve both client and server versions.	text	txt
4594	2	docker version	code	txt
4594	3	In case docker client is not connected to the daemon, users should add\nthemselves to the `docker` group.	text	txt
4594	4	sudo usermod -aG docker $USER	code	txt
4594	5	Logging out and then logging in is required for this change to take effect.\nHowever, user can temporarily apply changes to their active shell:	text	txt
4594	6	su -l $USER	code	txt
4596	1	docker info	code	txt
4600	1	docker image ls\ndocker image list	code	txt
4601	1	A dangling image is an image that is no longer tagged, and appears in\nlistings as `<none>:<none>`. A common way they occur is when building a new\nimage giving it a tag that already exists.	text	txt
4601	2	**dangling:** Accepts true or false	text	txt
4601	3	docker image list --filter dangling=true	code	txt
4602	2	docker image list --filter before=container_name	code	txt
4604	1	**label:** Filters images based on the presence of a label or label and\nvalue. This command does not display labels in its output.	text	txt
4604	2	docker image list --filter reference="*:latest"	code	txt
4605	1	You can use the `--format` flag to format output using Go templates. For\nexample, the following command will only return the size property of images\non a Docker host.	text	txt
4605	2	docker image list --format "{{.Size}}"	code	txt
4605	3	Use the following command to return all images, but only display repo, tag\nand size.	text	txt
4605	4	docker image list --format "{{.Repository}}: {{.Tag}}: {{.Size}}"	code	txt
4606	1	The “NAME” field is the repository name. This includes the Docker ID, or\norganization name, for unofficial repositories.	text	txt
4606	2	docker search nigelpoulton	code	txt
4607	1	By default, Docker will only display 25 lines of results. However, you can\nuse the `--limit` flag to change that.	text	txt
4608	1	Use `--filter is-official=true` so that only official repos are displayed.	text	txt
4608	2	docker search alpine --filter is-official=true	code	txt
4609	1	docker search alpine --filter is-automated=true --limit 100	code	txt
4610	1	docker image pull mongo:4.2.6	code	txt
4611	1	Pulling images from an unofficial repository is essentially the same as\npulling from official ones. You just need to prepend the repository name with\na DockerHub username or organization name.	text	txt
4611	2	The following example shows how to pull the *v2* image from the *tu-demo*\nrepository owned by a not-to-be-trusted person whose DockerHub account name\nis *nigelpoulton*.	text	txt
4611	3	docker image pull nigelpoulton/tu-demo:v2	code	txt
4612	1	If you want to pull images from 3rd party registries (not DockerHub), you\nneed to prepend the repository name with the DNS name of the registry. For\nexample, the following command pulls the `3.1.5` image from the\n`google-containers/git-sync` repo on the **Google Container Registry**\n(gcr.io).	text	txt
4612	2	docker image pull gcr.io/google-containers/git-sync:v3.1.5	code	txt
4613	1	This command will show you detailed configuration and runtime information\nabout a container. It accepts container names and container IDs as its main\nargument.	text	txt
4613	2	docker image inspect ubuntu:latest	code	txt
4614	1	The `history` command is another way of inspecting an image and seeing layer\ndata. However, it shows the build history of an image and is not a strict\nlist of layers in the final image.	text	txt
4614	2	docker history	code	txt
4614	3	The image is always the combination of all layers stacked in the order they\nwere added.	text	txt
4615	1	docker image pull alpine:latest\ndocker image list --digests alpine:latest	code	txt
4616	1	Assume you are running Docker on a Raspberry Pi (Linux running on ARM\narchitecture). When you pull an image, your Docker client makes the relevant\ncalls to the Docker Registry API exposed by DockerHub. If a manifest list\nexists for the image, it will be parsed to see if an entry exists for Linux\non ARM. If an ARM entry exists, the manifest for that image is retrieved and\nparsed for the crypto ID’s of the layers that make up the image. Each layer\nis then pulled from DockerHub.	text	txt
4616	2	docker manifest inspect golang	code	txt
4617	1	You can create your own builds for diff erent platforms and architectures\nwith:	text	txt
4617	2	docker buildx	code	txt
4617	3	and then use:	text	txt
4617	4	docker manifest create	code	txt
4617	5	to create your own manifest lists.	text	txt
4617	6	The following command builds an image for ARMv7 called myimage:arm-v7 from\nthe contents of the current directory. It’s based on code in the code in\nhttps://github.com - https://github.com/nigelpoulton/psweb.	text	txt
4617	7	docker buildx build --platform linux/arm/v7 -t myimage:arm-v7 .	code	txt
4617	8	The beauty of the command is that you don’t have to run it from an ARMv7\nDocker node.	text	txt
4617	9	At the time of writing, buildx is an experimental feature and requires\n`experimental=true` setting in your ∼/.docker/config.json file as follows.	text	txt
4617	10	{ "experimental": true }	code	txt
4619	1	You can delete all dangling images on a system with the following command:	text	txt
4619	2	docker image prune	code	txt
4619	3	If you add the `-a` flag, Docker will also remove all unused images (those\nnot in use by any containers).	text	txt
4619	4	docker image prune --all	code	txt
4641	4	Will run the following in the container:	text	txt
4642	1	A *swarm* consists of one or more Docker nodes.\nUsing **Docker Swarm** these nodes can be orchestrated.	text	txt
4624	1	The image is used to create the container and the command is the application\nthe container will run when it starts. This example will start an Ubuntu\ncontainer in the foreground, and tell it to run the Bash shell:	text	txt
4624	2	docker container run --interactive --tty ubuntu /bin/bash	code	txt
4624	3	The `-it` flags tell Docker to make the container interactive and to attach\nthe current shell to the container’s terminal.	text	txt
4625	1	If you’re logged on to the container and type exit, you’ll terminate the Bash\nprocess and the container will exit (terminate). This is because a container\ncannot exist without its designated main process.	text	txt
4625	2	Press `Ctrl-P` then `Ctrl-Q` to exit the container without terminating its\nmain process. Doing this will place you back in the shell of your Docker host\nand leave the container running in the background.	text	txt
4626	1	This command runs a new process inside of a running container. It’s useful\nfor attaching the shell of your Docker host to a terminal inside of a running\ncontainer. For this to work, the image used to create the container must\ninclude the Bash shell.	text	txt
4626	2	docker container exec --interactive --tty container_name /usr/bin/bash	code	txt
4627	1	This command will stop a running container and put it in the Exited (0)\nstate. It does this by issuing a `SIGTERM` to the process with `PID 1` inside\nof the container. If the process has not cleaned up and stopped within 10\nseconds, a `SIGKILL` will be issued to forcibly stop the container. This\ncommand accepts container IDs and container names as arguments.	text	txt
4627	2	docker container stop my-container	code	txt
4628	1	This command will restart a stopped (Exited) container. You can give this\ncommand the name or ID of a container.	text	txt
4628	2	docker container start my-container	code	txt
4629	1	This command will delete a stopped container. You can specify containers by\nname or ID. It is recommended that you stop a container before deleting it.	text	txt
4629	2	docker container stop container_name\ndocker container rm container_name	code	txt
4630	1	Restart policies are applied per-container, and can be configured\nimperatively on the command line, or declaratively in YAML files for use with\nhigher-level tools such as Docker Swarm, Docker Compose, and Kubernetes.	text	txt
4630	2	The following restart policies exist:	text	txt
4630	3	* always\n* unless-stopped\n* on-failure	text	txt
4630	4	docker container run --interactive --tty --restart on-failure alpine /bin/bash	code	txt
4631	1	The `always` policy always restarts a stopped container unless it has been\nexplicitly stopped. However, if you restart the Docker daemon, the container\nwill be automatically restarted when the daemon comes back up.	text	txt
4631	2	docker container run --interactive --tty --restart always alpine /bin/bash	code	txt
4631	3	Be aware that Docker has restarted the same container and not created a new\none. In fact, if you inspect it you can see there **startCount** has been\nincremented.	text	txt
4632	1	The main difference between the `always` and `unless-stopped` policies is\nthat containers with the `unless-stopped` policy will not be restarted when\nthe daemon restarts if they were in the `Stopped (Exited)` state.	text	txt
4632	2	docker container run --interactive --tty --restart unless-stopped ubuntu /usr/bin	code	txt
4633	1	The `on-failure` policy will restart a container if it exits with a non-zero\nexit code. It will also restart containers when the Docker daemon restarts,\neven containers that were in the `stopped` state.	text	txt
4633	2	docker container run --interactive --tty --restart on-failure ubuntu /usr/bin	code	txt
4634	1	Lists all containers in the running (UP) state. If you add the `-a` flag you\nwill also see containers in the stopped (Exited) state.	text	txt
4634	2	docker container list --all	code	txt
4635	1	FROM alpine\nLABEL maintainer="maintainer@domain.tld"\nLABEL description="Web service"\nLABEL version="0.1"	code	txt
4636	1	The `RUN` instruction uses the Alpine apk package manager to install node js\nand nodejs-npm into the image. It creates a new image layer directly above\nthe Alpine base layer, and installs the packages in this layer.	text	txt
4636	2	Then the `RUN` npm install instruction creates a new layer and uses `npm` to\ninstall application dependencies listed in the `package.json` file in the\nbuild context. It runs within the context of the `WORKDIR` set in the\nprevious instruction, and installs the dependencies into the newly created\nlayer.	text	txt
4636	3	FROM alpine\nRUN apk add --update nodejs nodejs-npm	code	txt
4637	1	The `COPY . /src` instruction creates another new layer and copies in the\napplication and dependency files from the build context.	text	txt
4637	2	It's important that you understand containers are persistent in nature.\nContainers are designed to be immutable objects and it’s not a good practice\nto write data to them. For this reason, Docker provides volumes that exist\nseparately from the container, but can be mounted into the container at\nruntime.	text	txt
4637	3	COPY . /src	code	txt
4638	1	The `WORKDIR` instruction sets the working directory inside the image\nfilesystem for the rest of the instructions in the file. This instruction\ndoes not create a new image layer.	text	txt
4638	2	COPY . /src\nWORKDIR /src	code	txt
4639	1	The application exposes a web service on TCP port 8080, so the Dockerfile\ndocuments this with the `EXPOSE 8080` instruction. This is added as image\nmetadata and not an image layer.	text	txt
4639	2	EXPOSE 8080	code	txt
4640	1	Finally, the `ENTRYPOINT` instruction is used to set the main application\nthat the image (container) should run. This is also added as metadata and not\nan image layer.	text	txt
4640	2	ENTRYPOINT ["node", "./app.js"]	code	txt
4641	1	When building a Docker image, you can embed an instruction that lists the\ndefault app for any containers that use the image. You can inspect an image\nto see this.	text	txt
4641	2	The entries after `Cmd` specify the arguments that will be fed to the\nexecutable that the container will run unless you override it with a\ndifferent one when you launch the container.	text	txt
4641	3	Cmd ["/bin/cat", "/etc/hosts"]	code	txt
4644	1	The configuration and state of a *swarm* is held in a distributed *etcd*\ndatabase located on all *managers*. It's installed as part of the swarm and\njust takes care of itself.	text	txt
4645	1	Docker nodes that are not part of a *swarm* are said to be in a\n**single-engine** mode. Once they're added to a *swarm* they're automatically\nswitched into **swarm mode**.	text	txt
4645	2	Joining a Docker host to an existing *swarm* switches them into *swarm mode*\nas part of the operation.	text	txt
4646	1	docker swarm init --advertise-addr 10.0.0.1:2377 --listen-addr 10.0.0.1:2377	code	txt
4647	1	The default port that *swarm mode* operates on is `2377/tcp`. This is\ncustomizable, but it's convention to use the default for secured\nclient-to-swarm connections.	text	txt
4648	1	docker node ls	code	txt
4648	2	Nodes with nothing in the `MANAGER STATUS` column are *workers*. The asterisk\nafter the `ID` column indicates the node you are logged on to and executing\ncommands from.	text	txt
4649	1	In a *manager* node extract tokens required to add new *workers* and\n*managers* to the swarm:	text	txt
4649	2	docker swarm join-token worker\ndocker swarm join-token manager	code	txt
4650	1	In a *worker* node use extracted token to join to the swarm:	text	txt
4650	2	docker swarm join --token <token> 10.0.0.1:2377 --advertise-addr 10.0.0.1:2377 --listen-addr 10.0.0.1:2377	code	txt
4650	3	The `--advertise-addr` and `--listen-addr` flags are optional, but it's best\npractice to be as specific as possible when it comes to network\nconfiguration.	text	txt
4651	1	Swarm implements a form of active-passive multi-manager high availability\nmechanism. This means that although you have multiple *managers*, only one of\nthem is *active* at any given moment. This active *manager* is called the\n*leader*, and is the only *manager* that will ever issue live commands\nagainst the *swarm*. So, it's only ever the *leader* that changes the config,\nor issues tasks to workers. If a *follower manager* (passive) receives\ncommands for the swarm, it proxies them across the *leader*.	text	txt
4652	1	1. Deploy an odd number of managers.\n2. Don't deploy too many managers (3 or 5 is recommended)	text	txt
5470	1	#include <ftxui/screen.hpp>\n#include <ftxui/dom.hpp>\n#include <ftxui/component.hpp>\n\nint main()\n{\n}	code	cpp
5480	2	struct Pixel\n{\n  bool blink : 1;\n  bool bold : 1;\n  bool dim : 1;\n  bool inverted : 1;\n  bool underlined : 1;\n  bool underlined_double : 1;\n  bool strikethrough : 1;\n  bool automerge : 1;\n\n  uint8_t hyperlink = 0;\n\n  std::string character = " ";\n\n  Color background_color = Color::Default;\n  Color foreground_color = Color::Default;\n};	code	cpp
4652	2	Having an odd number of *managers* reduced the chance of split-brain\ncondition. For example, if you had 4 *managers* and the network partitioned,\nyou could be left with two managers on each side of the partition. This is\nknown as a split brain, each side knows there used to be 4 but can now only\nsee 2. But crucially, neither side has any way of knowing if the other are\nstill alive and whether it holds a majority (quorum). A swarm cluster\ncontinues to operate during split-brain condition, but you are no longer able\nto alter the configuration, or add and manage application workloads. However,\nif you have 3 or 5 managers and the same network partition occurs, it is\nimpossible to have an equal number of managers on both sides of the parition,\nthen one side achieves quorum and full cluster management services remain\navailable.	text	txt
4654	1	To apply a lock directly to a new swarm:	text	txt
4654	2	docker swarm init --autolock	code	txt
4654	3	However, to lock an already initialized swarm, run the following command on a\nswarm *manager*:	text	txt
4654	4	docker swarm update --autolock true	code	txt
4655	1	docker swarm unlock-key	code	txt
4656	1	Restart docker daemon one of the *manager* nodes:	text	txt
4656	2	sudo systemctl restart docker	code	txt
4656	3	Try to list the nodes in the swarm on restarted *manager* to confirm that it\nhas not been allowed to re-join the swarm:	text	txt
4656	4	docker node ls	code	txt
4656	5	Unlock the swarm on restarted *manager*:	text	txt
4656	6	docker swarm unlock	code	txt
4656	7	Confirm that *manager* has re-joined by listing swarm nodes.	text	txt
4657	1	1. Imperatively on the command line with `docker service create`\n2. Declaratively with a stack ﬁle	text	txt
4658	1	docker service create --name my-service --publish 80:80 --replicas 5 repository/project:v1	code	txt
4659	1	docker service ls	code	txt
4660	1	docker service ps my-service	code	txt
4661	1	docker service inspect --pretty my-service	code	txt
4662	1	The default replication mode of a service is *replicated*. This deploys a\ndesired number of replicas and distributes them as evenly as possible across\nthe cluster.	text	txt
4662	2	The other mode is *global*, which runs a single replica on every node in\nswarm. To deploy a *global service* you need to pass the `--mode global` flag\nto the `docker service create` command.	text	txt
4663	1	docker service scale my-service=10\ndocker service scale my-service=2\ndocker service ls\ndocker service ps my-service	code	txt
4664	1	docker service rm my-service	code	txt
4665	1	docker network create --driver overlay my-network	code	txt
4665	2	An overlay network creates a new layer 2 network that we can place containers\non, and all containers on it will be able to communicate.	text	txt
4666	1	docker network ls	code	txt
4667	1	docker service create --name my-service --network my-network --publish 80:80 --replicas 10 repository/project:v1	code	txt
4669	1	docker service create --name my-service --network my-network --publish published=80,target=80,mode=host --replicas 12	code	txt
4669	2	Open a web browser and point it to the IP address of any of the nodes in the\nswarm on port 80 to see the service running.	text	txt
4670	1	docker service update --image repository/project:v2 --update-parallelism 2 --update-delay 20s my-project\ndocker service inspect --pretty my-project	code	txt
4671	1	docker service logs my-project	code	txt
5068	3	\\\\begin{document}\nSample text.\n\\\\end{document}	code	txt
4671	2	You can follow the logs (`--follow`), tail them (`--tail`), and get extra\ndetails (`--details`).	text	txt
4672	1	By using flags to override configuration file:	text	txt
4672	2	docker service create --name my-service --publish 80:80 --replicas 10 --log-driver journald	code	txt
4672	3	Or by configuring `docker.json` file:	text	txt
4672	4	{\n  "log-driver": "syslog"\n}	code	txt
4673	1	Managing your swarm and applications declaratively is a great way to prevent\nthe need to recover from a backup. For example, storing conﬁguration objects\noutside of the swarm in a source code repository will enable you to redeploy\nthings like networks, services, secrets and other objects. However, managing\nyour environment declaratively and strictly using source control repos\nrequires discipline.	text	txt
4674	1	Swarm conﬁguration and state is stored in `/var/lib/docker/swarm` on every\nmanager node. A swarm backup is a copy of all the ﬁles in this directory.	text	txt
4675	1	You have to stop the Docker daemon on the node you are backing up. It’s a\ngood idea to perform the backup from non-leader managers. This is because\nstopping Docker on the leader will initiate a leader election.	text	txt
4675	2	The following commands will create the following two objects:	text	txt
4675	3	* An overlay network\n* A Secret	text	txt
4675	4	docker network create --driver overlay my-network\nprintf "Salt" | docker secret create my-secret -\nsudo systemctl stop docker\ntar -czf swarm.gzip /var/lib/docker/swarm	code	txt
4675	5	To restore the backup:	text	txt
4675	6	tar -xzf swarm.gzip -C /\nsudo systemctl start docker	code	txt
4675	7	The `--force-new-cluster` ﬂag tells Docker to create a new cluster using the\nconﬁguration stored in `/var/lib/docker/swarm/` that you recovered.	text	txt
4675	8	docker swarm init --force-new-cluster\ndocker network ls\ndocker secret ls\ndocker swarm ls\ndocker service ls\ndocker service ps\ndocker node ls	code	txt
4675	9	Add new manager and worker nodes and take fresh backups.	text	txt
4695	1	docker volume prune	code	txt
4695	2	`prune` will delete all volumes that are not mounted into a container or\nservice replica.	text	txt
4700	1	1. Board Bring-Up\n2. System Architecture and Design Choice\n3. Writing Embedded Applications\n4. Debugging and Optimizing Performance	text	txt
4701	1	1. Toolchain\n2. Bootloader\n3. Kernel\n4. Root filesystem\n5. Embedded Applications	text	txt
4702	1	1. CPU architecture\n2. Reasonable amout of RAM\n3. Non-volatile storage\n4. Serial port\n5. Debugging interface (e.g. JTAG)	text	txt
4705	1	* CPU Architecture + Endianness (e.g. `x86_64`, `mipsel`, `armeb`)\n* Vendor (e.g. `buildroot`)\n* Kernel (e.g. `linux`)\n* Operating System + ABI (e.g. `gnueabi`, `gnueabihf`, `musleabi`,\n  `musleabihf`)	text	txt
4708	1	${CROSS_COMPILE}gcc -mcpu=cortex-a5 main.c -o app	code	txt
4709	1	${CROSS_COMPILE}gcc --target-help	code	txt
4710	1	${CROSS_COMPILE}gcc -print-sysroot	code	txt
5153	1		code	txt
4731	1	git clone https://github.com - https://github.com/crosstool-ng/crosstool-ng.git\ncd crosstool-ng\ngit checkout <latest>\n./bootstrap\n./configure --enable-local\nmake -j<cores>\n./ct-ng --version	code	txt
4732	1	./ct-ng list-samples	code	txt
4733	1	./ct-ng show-<sample>\n./ct-ng show-armv6-unknown-linux-gnueabihf\n./ct-ng show-arm-cortex_a8-linux-gnueabi\n./ct-ng show-arm-unknown-linux-gnueabi	code	txt
4734	1	Considering the processor used in this device which is `bmc2835` having an\narmv6 core, we should use the following target:	text	txt
4734	2	./ct-ng distclean\n./ct-ng show-armv6-unknown-linux-gnueabihf\n./ct-ng armv6-unknown-linux-gnueabihf	code	txt
4734	3	Change following kernel configurations and set their values accordingly:	text	txt
4734	4	* Tarbal path\n* Build path\n* Vendor tuple	text	txt
4734	5	./ct-ng build	code	txt
4735	1	./ct-ng distclean\n./ct-ng show-arm-cortex_a8-linux-gnueabi\n./ct-ng arm-cortex_a8-linux-gnueabi	code	txt
4735	2	Change the following kernel configurations and set their values accordingly:	text	txt
4735	3	* **Paths and misc options** >> **Render the toolchain read-only**: disable\n* **Target options** >> **Floating point**: **hardware (FPU)**\n* **Target options** >> **Use specific FPU**: neon	text	txt
4735	4	./ct-ng build	code	txt
4736	1	./ct-ng distclean\n./ct-ng show-arm-unknown-linux-gnueai\n./ct-ng arm-unknown-linux-gnueai	code	txt
4736	2	Change the following kernel configurations and set their values accordingly:	text	txt
4736	3	* **Paths and misc options** >> disable **Render the toolchain read-only**	text	txt
4736	4	./ct-ng build	code	txt
4738	1	${CROSS_COMPILE}readelf -a app | grep "Shared library"	code	txt
4739	1	${CROSS_COMPILE}readelf -a app | grep "program interpreter"	code	txt
4740	1	${CROSS_COMPILE}gcc -static main.c -o app	code	txt
4741	1	SYSROOT=$(${CROSS_COMPILE}gcc -print-sysroot)\ncd $SYSROOT\nls -l usr/lib/libc.a	code	txt
4742	1	${CROSS_COMPILE}gcc -c test1.o\n${CROSS_COMPILE}gcc -c test2.o\n${CROSS_COMPILE}ar rc libtest1.a test1.o test2.o\n${CROSS_COMPILE}gcc main.c -ltest -L../libs -I../include -o app	code	txt
4743	1	${CROSS_COMPILE}gcc -fPIC -c test1.c\n${CROSS_COMPILE}gcc -fPIC -c test2.c\n${CROSS_COMPILE}gcc -shared -o libtest.so test1.o test2.o\n${CROSS_COMPILE}gcc main.c -ltest -L../libs -I../include -o app\n${CROSS_COMPILE}readelf -a app | grep library\n${CROSS_COMPILE}readelf -a app | grep interpreter	code	txt
4744	1	${CROSS_COMPILE}readelf -a /usr/lib/x86_64-linux-gnu/libjpeg.so.8.2.2 | grep SONAME\nlibjpeg.so.8	code	txt
4745	1	By using environment variables to specify toolchains:	text	txt
4745	2	export CROSS_COMPILE=armv6-rpi-linux-gnueabihf-\nmake	code	txt
4745	3	Or by specifying behind the `make` command directly:	text	txt
4745	4	make CROSS_COMPILE=armv6-rpi-linux-gnueabihf-	code	txt
4746	1	CC=armv6-rpi-linux-gnueabihf-gcc ./configure --host=armv6-rpi-linux-gnueabihf	code	txt
4747	1	wget http://www.sqlite.org/2020/sqlite-autoconf-3330000.tar.gz\ntar xf sqlite-autoconf-3330000.tar.gz\ncd sqlite-autoconf-3330000\nCC=armv6-rpi-linux-gnueabihf-gcc ./configure --host=armv6-rpi-linux-gnueabihf --prefix=/usr\nmake\nmake DESTDIR=$(armv6-rpi-linux-gnueabi-gcc -print-sysroot) install	text	txt
4747	2	armv6-rpi-linux-gnueabihf main.c -o sqlite-test -lsqlite3	code	txt
4748	1	In order for `pkg-config` to address library and header files belonging to\n*sqlite3*, it should be able to see `<sysroot>/usr/lib/pkgconfig/sqlite3.pc`:	text	txt
4748	2	export CROSS_COMPILE="xtools/armv6-rpi-linux-gnueabihf-"\nexport PKG_CONFIG_LIBDIR=$(${CROSS_COMPILE}gcc -print-sysroot)/usr/lib/pkgconfig\n${CROSS_COMPILE}gcc $(pkg-config sqlite3 --cflags --libs) main.c -o sqlite-test	code	txt
4749	1	export CROSS_COMPILE="xtools/armv6-rpi-linux-gnueabihf-"\ncmake -S . -B build -D CMAKE_INSTALL_PREFIX:PATH=sysroot -D CMAKE_C_COMPILER:PATH=${CROSS_COMPILE}gcc\ncmake --build build --parallel 8 --target all\ncmake --build build --parallel 8 --target install	code	txt
5154	2	import QtQuick	text	txt
4751	1	The official `raspbberypi` repository holds the `boot` directory where\n`start.elf` file and the device tree files can be found:	text	txt
4751	2	wget -c 'https://github.com - https://github.com/raspberrypi/firmware/blob/master/boot/start.elf'\nwget -c 'https://github.com - https://github.com/raspberrypi/firmware/blob/master/boot/bcm2708-rpi-zero.dtb'	code	txt
4752	1	1. Boot loader (Raspberry Pi specific SPL)\n2. Kernel image\n3. Device trees	text	txt
4752	2	First download Raspberry Pi device specific SPL and device tree binary files.	text	txt
5246	1	At least two categories are used to differentiate between tenants.	text	md
4752	3	wget -c 'https://github.com - https://github.com/raspberrypi/firmware/blob/master/boot/start.elf'\nwget -c 'https://github.com - https://github.com/raspberrypi/firmware/blob/master/boot/bcm2708-rpi-zero.dtb'	code	txt
4752	4	Then partition the SD card which is used to attach to the device:	text	txt
4752	5	fdisk /dev/sda	code	txt
4752	6	Create a 100M sized partition and set the bootable flag.\nThen format that bootable partition with vfat filesystem:	text	txt
4752	7	mkfs -t vfat /dev/sda1	code	txt
4752	8	Mount it and then copy `u-boot.bin`, `start.elf` (raspberrypi repository), `bcm2708-rpi-zero.dtb` (raspbberypi repository) files into the filesystem:	text	txt
4752	9	mount /dev/sda1 /mnt\ncp * /mnt\numount /mnt	code	txt
4778	1	The Yocto Project has a release every six months, in April and October.	text	txt
4778	2	The support for the stable release is for 7 months, offering 1 month of\noverlapped support for every stable release. The LTS release has a minimal\nsupport period of 2 years, optionally extended. After the official support\nperiod ends, it moves to Community support and finally reaches End Of Life\n(EOL).	text	txt
4778	3	`Initial Release -> Stable Release -> Community -> End of Life`	text	txt
4781	1	Poky is the default Yocto Project reference distribution, which uses\nOpenEmbedded build system technology.	text	txt
4784	1	BitBake is a task scheduler and execution system that parses Python and Shell\nScript code. The code that is parsed generates and runs tasks, which are a\nset of steps ordered per the code’s dependencies.	text	txt
5470	2	g++ -o program -lftxui-screen -lftxui-dom -lftxui-component main.cpp	code	sh
4784	2	BitBake evaluates all available metadata, managing dynamic variable\nexpansion, dependencies, and code generation. In addition, it keeps track of\nall tasks to ensure their completion, maximizing the use of processing\nresources to reduce build time and predictability.	text	txt
4784	3	The source code is in the `bitbake` subdirectory of Poky.	text	txt
4785	1	The OpenEmbedded Core metadata collection provides the engine of the Poky\nbuild system. It provides the core features and aims to be generic and as\nlean as possible. It supports seven different processor architectures (ARM,\nARM64, x86, x86-64, PowerPC, PowerPC 64, MIPS, MIPS64, RISC-V32, and RISC-V\n64), only supporting platforms to be emulated by QEMU.	text	txt
4785	2	The OpenEmbedded Core houses its metadata inside the `meta` subdirectory of\nPoky.	text	txt
4786	1	The metadata includes recipes and configuration files. It is composed of a\nmix of Python and Shell Script text files, providing a tremendously flexible\ntool. Poky uses this metadata to extend OpenEmbedded Core.	text	txt
4786	2	BitBake uses these scripts to inform the steps needed to build, download the\nsource code and other tasks related to a specific software application or\nlibrary.	text	txt
4790	1	To debug with `gdb`, compile with `-g`.\nThis generates *DWARF* information, which is used by the debugger to understand what the program is doing.	text	txt
4790	2	gcc -g -o program source.c	code	txt
4790	3	Use `-O` to compile with optimizations, but this can adversely affect the debug experience i.e. `-O` and `-g` are orthogonal and independent.\nTo get a reasonable level of performance and a good debug experience, use `-Og`.\nAnd to get an even better debug experience, use `-g3` rather than just `-g`.	text	txt
4790	4	gcc -g3 -Og -o program source.c	code	txt
4790	5	You can use the readelf utility to look at the debug info.	text	txt
4791	1	TUI (Text User Interface) mode allows you to see the context of what you’re debugging!	text	txt
4791	2	gdb -tui ./executable	code	txt
4791	3	You can also type `layout src` to switch to the TUI mode.	text	txt
4791	4	layout src	code	txt
4791	5	The shortcut `ctrl–x a` will also start the TUI.	text	txt
4791	6	`ctrl+l` to redraw the screen reset in TUI mode.	text	txt
4792	1	Press `ctrl-x s` in TUI mode to enable SingleKey mode. In this mode you can\nuse `r` to `run`, `c` to `continue`, `s` for `step`, and `q` to leave\nSingleKey mode, without pressing enter.	text	txt
4793	1	`ctrl-x 2`	text	txt
4794	1	(gdb) focus src\n(gdb) focus cmd	code	txt
4795	1	- `ctrl-p` for previous commands\n- `ctrl-n` for next commands	text	txt
4797	1	- `start`: starts debugging session by running program line-by-line.\n- `run`: starts debugging session running program as usual.\nAttaching to a process requires root privileges.	text	txt
4797	2	After debugger gets attached to the process, the program will freeze as if it\nis on a breakpoint.	text	txt
4797	3	sudo gdb\n(gdb) attach 12345	code	txt
4798	1	(gdb) detach	code	txt
4798	2	After detaching, the program will continue its normal flow as there was no\ndebugger attached to it at first place.	text	txt
4801	1	1. Hardware watchpoints: `watch foo`\n2. Software watchpoints: `watch $rax`\n3. Location watchpoints: `watch -l foo`\n4. Read-only watchpoint: `rwatch foo`\n5. Access watchpoints: `awatch foo`	text	txt
4801	2	(gdb) info breakpoints	code	txt
4804	1	Use `start` to put temporary breakpoint on main and then run the program or\n`starti` to stop at the very first instruction of the program.\n(gdb) rbreak std::sto[ifd]	code	txt
4806	1	(gdb) condition 3 e == 42\n(gdb) break func(long) if e == 42	code	txt
4807	1	(gdb) break source.cpp:10 if index == 3	code	txt
4808	1	To ignore the next 10000000 times that breakpoint 1 is hit.	text	txt
4808	2	(gdb) ignore 1 10000000\n(gdb) info break 1	code	txt
4808	3	breakpoint already hit 1000 times	text	txt
4808	4	(gdb) ignore 1 999\n(gdb) run	code	txt
4809	1	(gdb) disable <breakpoint index>	code	txt
4810	1	(gdb) enable <breakpoint index>	code	txt
4811	1	(gdb) save breakpoints program.gdb	code	txt
4812	1	(gdb) source program.gdb	code	txt
4813	1	(gdb) break source.cpp:8\n(gdb) break source.cpp:22	code	txt
4813	2	Note that lines might have been changed during sessions.	text	txt
4814	1	`(gdb) watch foo[90].number if bar[90].number == 255`	text	txt
4815	1	(gdb) watch -l expression	code	txt
4815	2	Convinience variables also work nicely with location watchpoints:	text	txt
4815	3	(gdb) print * __errno_location()\n$2 = 0\n(gdb) watch -l $2	code	txt
4857	1	By running maintainance, git starts a cron job running tasks reguarly.	text	txt
5156	1		code	txt
4817	1	Display the memory contents at a given address using `x [address]` short for\n`examine`. You can customise the output with an optional format and length\nargument.	text	txt
4817	2	(gdb) x/[length][format] [address]\n(gdb) x/2x 0x0ffffffff7c544f0\n(gdb) x/2x $rsp	code	txt
4818	1	To get information about the spawned threads:	text	txt
4818	2	(gdb) info threads	code	txt
4818	3	This will show thread ID, how the OS sees them, and the name the thread was\ngiven by the program.	text	txt
4818	4	Stepping through a thread that releases other threads, gets all threads out\nof sync. This can be changed with `set scheduler-locking on`, meaning only\nthe current thread will run. Beware of deadlock through, the thread you're\nrunning might block on a lock held by another not running thread.	text	txt
4818	5	A middle ground can be found with `set scheduler-locking step`, which has\nscheduler-locking on when using `step`, but disables it when you use\n`continue`, allowing you to travel between breakpoints without having to\nconstantly switch between the threads.	text	txt
5215	4	Allow the processes with the `httpd_t` type to bind to TCP ports labeled with `http_port_t`.	code	md
4819	1	If you want to examine the backtrace of multiple frames but you're very deep\nin the stack, you can use `backtrace n` to show the n innermost frames.\nSimilarly, you can use `stacktrace -n` to show the n outermost frames.	text	txt
4819	2	(gdb) bt full\n(gdb) bt 1\n(gdb) bt -1	code	txt
4820	1	coredumpctl list	code	txt
4821	1	coredumpctl dump $PWD/program --output program.core	code	txt
4822	1	(gdb) target core program.core	code	txt
4823	1	When frame is selected from a core dump, program will be set to the\ncorresponding state.	text	txt
4823	2	(gdb) frame 0\n(gdb) p variable_causing_trouble	code	txt
4824	1	(gdb) gcore program.core	code	txt
4829	1	If you have commands you want to run every time you debug, or if you want to\ndefinne a function to pretty print a specific data structure, you can put\nthem in `.gdbinit` file on the top project directory, or in your home\ndirectory.	text	txt
4829	2	*.gdbinit*\nset logging enabled on	code	txt
4829	3	You may need to enable auto-loading for the directory by adding the following line in `~/.config/gdb/gdbinit` file.	text	txt
4829	4	set auto-load-safe-path /path/to/dir	code	txt
4829	5	You can also enable it for all directories with `set auto-load-safe-path /`.	text	txt
4830	1	There are 145 commands in git in total, 82 porcelain commands and 63 plumbing\ncommands.	text	txt
4830	2	- 44 main commands `add`, `commit`, `push`, ...\n- 11 manipulators `config`, `reflog`, `replace`, ...\n- 17 interrogators `blame`, `fsck`, `rerere`, ...\n- 10 interactors `send-email`, `p4`, `svn`, ...	text	txt
4831	1	There are 145 commands in git in total, 82 porcelain commands and 63 plumbing\ncommands.	text	txt
4831	2	- 19 manipulators `apply`, `commit-tree`, `update-ref`, ...\n- 21 interrogators `cat-file`, `for-each-ref`, ...\n- 5 syncing `fetch-pack`, `send-pack`, ...\n- 18 internal `check-attr`, `sh-i18n`, ...	text	txt
4832	1	A sample use case is to use different git config when you are in work and\nopen source software directory.	text	txt
4832	2	[includeIf "gitdir:~/projects/work/"]\n    path = ~/projects/work/.gitconfig	text	txt
4832	3	[includeIf "gitdir:~/projects/oss/"]\n    path = ~/projects/oss/.gitconfig	code	txt
4833	1	git config --global gpg.format ssh\ngit config --global user.signingkey ~/.ssh/id_rsa.pub\ngit commit -S	code	txt
4833	2	You can see that your signature is appended to your commit files:	text	txt
4833	3	git cat-file -p HEAD	code	txt
4834	1	git config --global alias.bb better-branch.sh	code	txt
4835	1	Command `branch` will list branches each in a row.	text	txt
4835	2	git branch	code	txt
4835	3	Newer `--column` option will put branches on columns to avoid using a pager.	text	txt
4835	4	git branch --column	code	txt
4836	1	git config --global column.ui auto\ngit config --global branch.sort -committerdate	code	txt
4837	1	git stash --all	code	txt
4837	2	It is suggested by the community to have this alias:	text	txt
4837	3	git config --global alias.staash 'stash --all'	code	txt
4838	1	git log -L 25,34:src/main.cpp	code	txt
4839	1	git log -S regex_match -p	code	txt
4840	1	Forcing push will remove all the changes that others have made since that\nlast common change you have made. The option `--force-with-lease` will only\npushes the rebased changes when there is no other changes pushed by other\nsince your last common changes.	text	txt
4840	2	git push --force-with-lease	code	txt
4841	1	This feature is not supported by GitHub or GitLab.	text	txt
4841	2	git push --signed	code	txt
4842	1	By partially cloning the repository and skipping the blobs:	text	txt
4842	2	git clone --filter=blob:none\ngit clone --filter=true:0	code	txt
4843	1	Graphs and blames will download the rest of required data on demand to\ngenerate results which will take time.	text	txt
4843	2	git clone --filter=blob:none\ngit blame lib/nlattr.c	code	txt
4844	1	git ls-remote	code	txt
4845	1	git config remote.origin.fetch '+refs/pull/*:refs/remotes/origin/pull/*'\ngit fetch	code	txt
4846	1	git blame -L 25,34:src/main.cpp	code	txt
4847	1	git blame -w	code	txt
4848	1	git blame -w -C	code	txt
4849	1	git blame -w -C -C	code	txt
4850	1	git blame -w -C -C -C -L 24,35:src/main.cpp	code	txt
4851	1	Reflog is a log of your references.	text	txt
4851	2	Whenever the `HEAD` is pointing at something, it has a log of that in reflog.	text	txt
4851	3	git reflog	code	txt
4852	1	git diff	code	txt
4853	1	git diff --word-diff	code	txt
4854	1	This feature records how you had a conflict and how you fixed it, so that it\nwill solve your conflicts automatically next time you hit similar conflict.	text	txt
4855	1	git config --global rerere.enabled true	code	txt
4856	1	It adds following lines to `.git/config` file:	text	txt
4856	2	[maintainance]\n    auto = false\n    strategy = incremental	code	txt
4857	3	- `gc: disabled`\n- `commit-graph: hourly`\n- `prefetch: hourly`\n- `loose-objects: daily`\n- `incremental-repack: daily`\n- `pack-refs: none`	text	txt
4858	1	Commit graph creates a graph of commits stored separately on disk and makes\ngit commands very faster to run for large projects.	text	txt
4858	2	git commit-graph write	code	txt
4859	1	This command should be done manually once, and then let git update the graph\nover next fetches.	text	txt
4859	2	git config --global fetch.writecommitgraph true	code	txt
4860	1	Launches a daemon that looks at the filesystem and watches for inode events\nand updates the cache in memory and tells git which files was changed every\ntime git tries to stat the files.	text	txt
4860	2	git config core.untrackedcache true\ngit config core.fsmonitor true	code	txt
4860	3	First status command launches this mechanism, so it would make more time to\nfinish, but subsequent calls will be fast.	text	txt
4861	1		code	txt
4862	1	git sparse-checkout	code	txt
4863	1	Follow up overviews of each kernel release on **KernelNewbies** to see changes.	text	txt
4864	1	The source can be downloaded as an archive but without any git history:	text	txt
4864	2	wget https://cdn.kernel.org - https://cdn.kernel.org/pub/linux/kernel/v5.4/linux-v5.4.tar.xz	code	txt
4864	3	Using git, the source can be cloned:	text	txt
4864	4	git clone https://git.kernel.org - https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git	code	txt
4864	5	The cloning process can be trimmed by setting `--depth 1` option.	text	txt
4864	6	It is best practice to use **LTS** kernel releases for production, so\ncheckout to the latest stable tag:	text	txt
4864	7	git checkout v5.4	code	txt
4865	1	To follow kernel mainline, below repository should be used:	text	txt
4865	2	git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git	code	txt
4865	3	To use long-term releases of the kernel, below repository should be used\ninstead:	text	txt
4865	4	git clone git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git	code	txt
4867	1	The configuration mechanism is called `Kconfig`, and the build system that it\nintegrates with it is called `Kbuild`.	text	txt
4868	1	Cross-compiler prefix and the architecture of the target must be specified.	text	txt
4868	2	ARCH=<XXXX> CROSS_COMPILE=<YYYY> make help	code	txt
4868	3	If these variables are not specified, the native host machine is going to be\ntargeted.	text	txt
4868	4	make help	code	txt
4868	5	When `ARCH` is omitted or not set, it will default to the host where `make`\nis executed. It will default to `$(uname -m)`.  When `CROSS_COMPILE` is\nomitted or not set, `$(CROSS_COMPILE)gcc` will result in `gcc`, and will be\nthe same for other tools, for example `$(CROSS_COMPILE)ld` will result in\n`ld`.	text	txt
4869	1	`ARCH` environment variable needs to be set for almost all `make` targets:	text	txt
4869	2	make ARCH=arm menuconfig	code	txt
4869	3	The value you put into `ARCH` is one of the subdirectories you find in the\n`arch` directory in the kernel source tree.	text	txt
4870	1	make menuconfig   # ncurses-based interface\nmake xconfig      # X-based interface\nmake gconfig      # GTK-based interface	code	txt
4871	1	Selected options will be stored in `.config` file, at the root of the source tree.	text	txt
4872	1	It is very difficult to know which configuration is going to work on your\nplatform. In most cases, there will be no need to start a configuration from\nscratch. There are default and functional configuration files available in\neach arch directory that you can use as a starting point (it is important to\nstart with a configuration that already works):	text	txt
4872	2	ls arch/<arch>/configs/	code	txt
4873	1	There is a set of known working configuration files in `arch/$ARCH/configs`,\neach containing suitable configuration values for a single SoC or a group of\nSoCs.	text	txt
4873	2	The kernel configuration command, given a default configuration file, is as\nfollows:	text	txt
4873	3	ARCH=<arch> make <defconfig>	code	txt
4873	4	To configure for `x86_64` build:	text	txt
4873	5	ARCH=x86_64 make defconfig	code	txt
4873	6	To configure for `arm64` cross-compilation:	text	txt
4873	7	ARCH=arm64 CROSS_COMPILE=aarch64-unknown-linux-gnueabi- make defconfig	code	txt
4873	8	To configure for `arm` cross-compilation:	text	txt
4873	9	ARCH=arm CROSS_COMPILE=armv6-unknown-linux-gnueabihf- make bcm2835_defconfig	code	txt
4874	1	Assuming that host is a 64bit machine, `ARCH` is set to `x86`:	text	txt
4874	2	make x86_64_defconfig	code	txt
4875	1	To make configuration for SoC of `raspberry pi zero`, considering its\n`bcm2835` 32-bits processor:	text	txt
4875	2	make ARCH=arm CROSS_COMPILE=arm-unknown-linux-gnueabihf- bcm2835_defconfig	code	txt
4876	1	make ARCH=arm64 CROSS_COMPILE=aarch64-unknown-linux-gnueabihf- defconfig	code	txt
4877	1	Running `make defconfig` or any alternatives will generate a new `.config`\nfile in the main (root) directory, while the old `.config` will be renamed\n`.config.old`.	text	txt
4879	1	Following target prompts for every new configuration options:	text	txt
4879	2	make oldconfig	code	txt
4879	3	You can avoid prompting new configuration options by setting their default\nvalues:	text	txt
4879	4	make olddefconfig	code	txt
4879	5	Or you can say no to every new option by:	text	txt
4879	6	make oldnoconfig	code	txt
4880	1	Debian and Ubuntu Linux distributions save the `.config` file in the `/boot`\ndirectory:	text	txt
4880	2	cp /boot/config-$(uname -r) ${KERNEL_SRC}/.config	code	txt
4880	3	The other distributions may not do this.	text	txt
4880	4	When `IKCONFIG` and `IKCONFIG_PROC` kernel configuration options enabled, the\nconfiguration file can also be found in `/proc/configs.gz` file:	text	txt
4880	5	zcat /proc/configs.gz > ${KERNEL_SRC}/.config	code	txt
4882	1	* `IKCONFIG`: This is a boolean option to enable this feature.\n* `IKCONFIG_PROC`: Boolean option, when set to `y` the `config.gz` file\n  becomes available in `/proc`.\n* `CMDLINE_EXTEND`: This is a boolean option to enable this feature.\n* `CMDLINE`: This options is a string containing the actual command-line\n  extension value.	text	txt
4882	2	For example:	text	txt
4882	3	```\nCMDLINE="noinitrd usbcore.authorized_default=0"\n``````	text	txt
4883	1	`CONFIG_KALLSYMS`: This is very useful for tracers and other tools that need\nto map kernel symbols to addresses. It is used while you're printing oops\nmessages. Without this, oops listings would produce hexadecimal output, which\nis difficult to interpret.	text	txt
4891	1	make ARCH=arm kernelversion	code	txt
4891	2	Release value can be changed in kernel configuration:	text	txt
4891	3	make ARCH=arm kernelrelease	code	txt
4892	1	`CONFIG_LOCALVERSION` option is the release information string to be appended\nto kernel release.  Kernel version can never be appended.	text	txt
4893	1	Header file `include/generated/autoconf.h` contains `#define` preprocessors\nto be included in the kernel source.	text	txt
4894	1	`Kbuild` takes configurations from `.config` file and follows below pattern\nin make files such as `drivers/char/Makefile`:	text	txt
4894	2	obj-y += mem.o random.o\nobj-$(CONFIG_TTY_PRINTK) += ttyprintk.o	code	txt
4895	1	* `CONFIG_DEBUG_INFO`	text	txt
4901	1	* `bool`: either `y` or not defined.\n* `tristate`: feature can be built as a kernel module or built into the main kernel image.\n* `int`: integer value using decimal notation.\n* `hex`: unsigned integer value using hexadecimal notation.\n* `string`: string value.	text	txt
4902	1	Dependencies can be expressed by `depends on` construct:	text	txt
4902	2	config EXAMPLE\n    tristate "config inline description"\n    depends on DEPENDENCY	code	txt
5471	1	The module `screen` handles the low-level rendering.	text	md
4903	1	`EXAMPLE` will not be shown in menu if `DEPENDENCY` is not set.	text	txt
4903	2	Reverse dependencies can be expressed by `select` construct, as an example in	text	txt
4903	3	`arch/arm`\nconfig ARM\n    bool\n    default y\n    select ARCH_KEEP_MEMBLOCK\n    ...	code	txt
4903	4	Selecting any config as reverse dependency, sets its value as `y`.	text	txt
4905	1	`make` can leverage the host's CPU performance by running multiple jobs in\nparallel:	text	txt
4905	2	make -j8	code	txt
5200	5	#pragma once\n\n#include <string>\n#include <memory>\n#include <print>\n#include <Strategy.hpp>\n\nclass Context;\n\nclass DefaultStrategy: public Strategy\n{\npublic:\n    ~DefaultStrategy() override = default;\n    void execute(std::weak_ptr<Context> context) override;\n};	code	hpp
4914	1	However, an embedded installation usually uses a single file kernel.	text	txt
4914	2	make modules\nsudo make modules_install	code	txt
4914	3	The resulting modules will be installed in `/lib/modules/$(uname\n-r)/kernel/`, in the same directory structure as their corresponding source.	text	txt
4916	1	The resulting modules will be installed in `/lib/modules/$(uname\n-r)/kernel/`, in the same directory structure as their corresponding source.	text	txt
4916	2	ARCH=arm CROSS_COMPILE=armv6-unknown-linux-gnueabihf- make modules	code	txt
4916	3	However, this can be changed by specifying modules path with `INSTALL_MOD_PATH`:	text	txt
4916	4	ARCH=arm CROSS_COMPILE=armv6-unknown-linux-gnueabihf- INSTALL_MOD_PATH=<dir> make modules_install	code	txt
4945	1	/include/ "vexpress-v2m.dtsi"	code	txt
5069	1	\\\\documentclass[11pt]{article}	text	txt
5252	1	alias | which -i <command>\nalias | which --read-alias <command>	code	sh
5269	1	rm -f <file>	code	sh
4918	1	- `clean`: remove object files and most intermediates.\n- `mrproper`: remove all intermediate files and `.config` file.\n- `distclean`: remove all, also delete editor backup files, patch files, and\n  other artifacts.	text	txt
4919	1	lsmod	code	txt
4920	1	modinfo btusb	code	txt
4921	1	modinfo -p btusb	code	txt
4922	1	/sys/module/btusb/parameters/	code	txt
4923	1	This command requires privileged access and does not resolve module\ndependencies.	text	txt
4923	2	sudo insmod sample.ko	code	txt
4924	1	insmod sample.ko param1=value param2=value	code	txt
4925	1	sudo modprobe sample	code	txt
4926	1	During build, kernel module signing facility signs modules and during module\nloading the signature is checked.	text	txt
4926	2	```.config\nCONFIG_MODULE_SIG = 'y'\nCONFIG_MODULE_SIG_ALL='y'\nCONFIG_MODULE_SIG_SHA512='y'\nCONFIG_MODULE_SIG_FORCE='y'\n``````	text	txt
4926	3	You must create the signing authority or SubCA certificate. For that you need\nto first create the asymmetric keys and CSR. The CSR will get signed from\nroot CA or upper level signing authority. The signed CSR will call it as\nsigning authority for kernel module signing. All the root CA and signing\nauthority must be aligned with the organization or product group who is going\nto protect their assets.	text	txt
4927	1	Above signing setup is one time process. You should have a script to take\ncare of your kernel module signing.\nIt probes all modules by running `depmod` utility and writes the results into\n`/usr/lib/modules/$(uname -r)/modules.dep` file and its binary counterpart\n`/usr/lib/modules/$(uname -r)/modules.dep.bin`. Each entry consists of a\nmodule name followed by its dependencies in front of a colon.	text	txt
4927	2	grep 'btusb.ko' /usr/lib/modules/$(uname -r)/modules.dep	code	txt
4928	1	`depmod` command probes all modules by default when no kernel object file is\ngiven. Try `-n` for dry run.	text	txt
4928	2	depmod -n	code	txt
4929	1	This command requires privileged access to the system. It also does not\nunload dependencies.	text	txt
4929	2	sudo rmmod sample	code	txt
4930	1	sudo modprobe -r sample	code	txt
4931	1	/etc/modules.d	code	txt
4932	1		code	txt
4933	1		code	txt
4934	1	Initialization function names usually include `init` or `module`.	text	txt
4934	2	static int __init sample_module(void);\nmodule_init(sample_module);	code	txt
4935	1	static void __exit module_cleanup(void);\nmodule_exit(module_cleanup);	code	txt
4936	1	The least a module should have is initial and cleanup functions, and the\nlicensing of the module. Specifying license is mandatory for modules to be\nloadable into the kernel.	text	txt
4936	2	#include <linux/module.h>	text	txt
4936	3	static int __init sample_module(void)\n{\n}	text	txt
4936	4	static void __exit sample_cleanup(void)\n{\n}	text	txt
4936	5	module_init(sample_module);\nmodule_exit(sample_cleanup);	text	txt
4936	6	MODULE_LICENSE("GPL");	code	txt
4937	1	Empty device nodes can be created by `mknod <node_name> <c|b> <major> <minor>	text	txt
4937	2	mknod sample-char c 1 1\nmknod sample-block b 1 1	code	txt
4938	1	`linux-headers-$(uname -r)` package is required for `make` command to build a\nloadable module. This package makes the `build/` directory in\n`/usr/lib/modules/$(uname -r)/` where headers are located, and the kernel\nconfiguration file exists.	text	txt
4938	2	make -C /usr/lib/modules/$(uname -r)/build M=$PWD modules	code	txt
4939	1	obj-m += sample.o	text	txt
4939	2	default all: modules\ninstall: modules_install	text	txt
4939	3	KERNEL_SRC ?= /usr/lib/modules/$(shell uname -r)/build	text	txt
4939	4	modules modules_install clean:\n    $(MAKE) -C $(KERNEL_SRC) M=$(PWD) $@	code	txt
4940	1	multifile-objs := callsub.o mysub.o\nobj-m += multifile.o	text	txt
4940	2	default all: modules\ninstall: modules_install	text	txt
4940	3	KERNEL_SRC ?= /usr/lib/modules/$(shell uname -r)/build	text	txt
4940	4	modules modules_install clean:\n    $(MAKE) -C $(KERNEL_SRC) M=$(PWD) $@	code	txt
4941	1	#include <linux/module.h>\n#include <linux/moduleparam.h>	text	txt
4941	2	static int value = 0;	text	txt
4941	3	module_param(value, int, S_IRWXU);\nMODULE_PARM_DESC(value, "Sample parameter");	text	txt
4941	4	static int __init sample_module(void)\n{\n    pr_info("sample module loaded\\\\n");\n    return 0;\n}	text	txt
4941	5	static void __exit sample_cleanup(void)\n{\n}	text	txt
4941	6	module_init(sample_module);\nmodule_exit(sample_cleanup);\nMODULE_LICENSE("GPL");	code	txt
4948	1	dtc beaglebone-black.dts -o beaglebone-black.dtb	code	txt
5253	1	declare -f | which --read-functions <command>	code	sh
5270	1	rm -d <directory>	code	sh
4964	1	To configure `udev`, you have to write a new rule for it in\n`/etc/udev/rules.d/` directory.	text	txt
4964	2	*/etc/udev/rules.d/70-persistent-ipoib.rules*\nSUBSYSTEM="net", ACTION="add", DRIVERS="?*", ATTR{address}="" ATTR{type}="1", KERNEL="enp33", NAME="eth0"	code	txt
4964	3	Reboot is required in order to apply new rules, but there is a short hand for\napplying them on live system.	text	txt
4964	4	udevadm control --reload-rules\nudevadm trigger	code	txt
4967	1	A spinlock operates by disabling the scheduler on the local CPU.	text	txt
4967	2	This also means that a task currently running on that CPU cannot be preempted\nexcept by **interrupt requests (IRQs)** if they are not disabled on the local\nCPU. In other words, spinlocks protect resources that only one CPU can\ntake/access at a time.	text	txt
4967	3	This makes spinlocks suitable for **symmetrical multiprocessing (SMP)**\nsafety and for executing atomic tasks.	text	txt
4968	1	A spinlock is created either statically using a `DEFINE_SPINLOCK` macro:	text	txt
4968	2	static DEFINE_SPINLOCK(my_spinlock);	code	txt
4968	3	This macro is defined in `include/linux/spinlock_types.h`.	text	txt
4968	4	For dynamic (runtime) allocation, it's better to embed the spinlock into a\nbigger structure, allocating memory for this structure and then calling\n`spin_lock_init()` on the spinlock element:	text	txt
4968	5	struct bigger_struct {\n    spinlock_t lock;\n    unsigned int foo;\n    [...]\n};\nstatic struct bigger_struct *fake_init_function()\n{\n    struct bigger_struct *bs;\n    bs = kmalloc(sizeof(struct bigger_struct), GFP_KERNEL);\n    if (!bs)\n        return -ENOMEM;\n    spin_lock_init(&bs->lock);\n    return bs;\n}	code	txt
5202	1	Unlike its Discretionary Access Control (DAC) counterpart, SELinux gives the system administrator full control over what is allowed on the system by enforcing policies through the Linux kernel over what processes are allowed to do.	text	md
5197	2	For example, when the context operates concurrently, we can define two strategies for locking policy, one which does not use any locks because the system is single threaded, and another which uses mutex locks because the system is multithreaded. In this case, we can inject the strategy through the constructor because the locking policy will not change during the lifetime of the context object.	text	md
5157	1	import QtQuick	text	txt
5108	1	Because CA private key is so sensitive, and anyone obtaining it has access to\ngenerate new certificates, you should encrypt the key with an AES encryption.	text	txt
5108	2	openssl genrsa -aes256 -out ca-key.pem 4096	code	txt
5109	1	openssl req -new -x509 -sha256 -days 3650 -key ca-key.pem -out ca.pem	code	txt
5110	1	openssl x509 -in ca.pem -text	code	txt
5111	1	openssl genrsa -out cert-key.pem\nopenssl req -new -sha256 -subj "/CN=customsubject" -key cert-key.pem -out cert.csr	code	txt
5112	1	echo "subjectAllName=DNS:*.sampleproject.com,IP:10.0.0.2" > extfile.cnf\nopenssl x509 -req -sha256 -days 3560 -in cert.csr -CA ca.pem -CAkey ca-key.pem -out cert.pem -extfile extfile.cnf -CAcreateserial	code	txt
5112	2	Now combine the pem files:	text	txt
5112	3	cat cert.pem > fullchain.cert\ncat ca.pem >> fullchain.cert	code	txt
5113	1	perf record -o /tmp/perf.data --call-graph dwarf --event instructions,cpu-cycles,cache-misses,branches,branch-misses --aio --sample-cpu <exec>	code	txt
5139	1	A runtime called the QmlEngine which loads the initial QML code. The\ndeveloper can register C++ types with the runtime to interface with the\nnative code. The `qml` tool is a pre-made runtime which is used directly.	text	txt
5140	2	Window {\n    width: 640\n    height: 480\n    visible: true\n    title: qsTr("Sample")\n}	code	txt
5141	1	- `Item`\n- `Rectangle`\n- `Text`\n- `Image`\n- `MouseArea`	text	txt
5142	1	`Item` is the base element for all visual elements as such all other visual\nelements inherits from `Item`. It doesn’t paint anything by itself but\ndefines all properties which are common across all visual elements.	text	txt
5142	2	The `Item` element is often used as a container for other elements, similar\nto the `div` element in HTML.	text	txt
5143	1	- **Geometry**: `x`, `y`, `width`, `height`, `z`\n- **Layouts**: `anchors`, `margins`\n- **Keys**: `Key`, `KeyNavigation`, `focus`\n- **Transformation**: `scale`, `rotate`, `transform`, `transformOrigin`\n- **Visual**: `opacity`, `visible`, `clip`, `smooth`\n- **State**: `states`, `state`, `transitions`	text	txt
5144	1	- `visible`\n- `visibilitity`\n- `title`	text	txt
5145	2	Window {\n    id: window\n    width: 300\n    height: 600\n    visible: true\n    visibility: Window.Maximized\n    title: qsTr("Image Viewer")\n}	code	txt
5146	1	`Rectangle` extends `Item` and adds following properties:	text	txt
5146	2	- `color`\n- `border`: `border.radius`, `border.color`\n- `radius`	text	txt
5147	2	Rectangle {\n    id: root\n    width: 600\n    height: 400\n    color: 'lightsteelblue'\n}	code	txt
5148	2	Window {\n    id: window\n    width: 640\n    height: 480\n    visible: true\n    title: qsTr("Image Viewer")	text	txt
5148	3	    Text {\n        id: text\n        anchors.centerIn: parent\n        width: 100\n        height: 30\n        color: 'black'\n        horizontalAlignment: Text.AlignHCenter\n        verticalAlignment: Text.AlignVCenter\n        font.family: 'Ubuntu'\n        font.pixelSize: 18\n        text: 'Sample Text'\n        KeyNavigation.tab: other_text\n        focus: true\n        onHeightChanged: console.log('height: ', height)\n    }\n}	code	txt
5149	1	The alias keyword allows us to forward a property of an object or an object\nitself from within the type to an outer scope. A property alias does not need\na type, it uses the type of the referenced property or object.	text	txt
5149	2	property alias <name>: <reference>	code	txt
5150	1	For every property, you can provide a signal handler. This handler is called after the property changes.	text	txt
5151	2	    onTextChanged: function(text) {\n        console.log("text changed to:", text)\n    }	text	txt
5151	3	    Keys.onSpacePressed: {\n        log()\n    }	text	txt
5151	4	    Keys.onEscapePressed: {\n        log()\n    }	text	txt
5151	5	    function log() {\n        console.log('key pressed')\n    }\n}	code	txt
5152	1	First, create a qrc resource file and add the image `assets/sample.png` as a\nresource.	text	txt
5152	2	Then, modify `CMakeLists.txt` file to include `.qrc` file in your project.	text	txt
5152	3	qt_add_resources(RESOURCE_FILES assets.qrc)\nqt_add_executable(appsample\n    main.cpp\n    ${RESOURCE_FILES}\n)	code	txt
5152	4	Finally, add the image in an `Image` component:	text	txt
5152	6	Window {\n    id: window\n    width: 680\n    height: 460	text	txt
5152	7	    Image {\n        id: image\n        anchors.centerIn: parent\n        source: 'qrc:/assets/sample.png'\n    }\n}	code	txt
5154	1	The mouse area is often used together with a visible item to execute commands\nwhen the user interacts with the visual part.	text	txt
5154	3	Rectangle {\n    id: button\n    width: 60\n    height: 25\n    color: 'lightsteelblue'\n    MouseArea {\n        id: clickable_area\n        anchors.fill: parent\n        onClicked: image.visibility = !image.visilibity\n    }\n}	code	txt
5155	1	QML provides different ways to create components:	text	txt
5155	2	- File-based component\n-	text	txt
5157	2	Rectangle {\n    id: root\n    width: 100\n    height: 300\n    color: 'lightsteelblue'	text	txt
5157	3	    property alias text: label.text\n    signal clicked	text	txt
5157	4	    Text {\n        id: label\n        anchors.centerIn: parent\n        text: 'start'\n    }	text	txt
5157	5	    MouseArea {\n        anchors.fill: parent\n        onClicked: { root.clicked() }\n    }\n}	code	txt
5174	1	touch ~/.tmux.conf	code	txt
5175	1	Default prefix key is `Ctrl-b`.	text	txt
5175	2	set-option -g prefix C-n\nset-option -g prefix2 C-f	code	txt
5176	1	tmux keeps all its state in a single main process, called the tmux server.\nThis runs in the background and manages all the programs running inside tmux\nand keeps track of their output. The tmux server is started automatically\nwhen the user runs a tmux command and by default exits when there are no\nrunning programs.	text	txt
5176	2	Users attach to the tmux server by starting a client.	text	txt
5177	1	tmux new-session -s session-name	code	txt
5177	2	Shortcut: `C-s`	text	txt
5178	1	tmux new-window -n window-name	code	txt
5178	2	Shortcut: `C-c`	text	txt
5179	1	Shortcut:\n- vertically split by `C-%`\n- horizontally split by `C-"`	text	txt
5180	1	Valgrind is capable of checking for memory leaks on a binary file.	text	txt
5180	2	gcc -o program main.c\nvalgrind ./program	code	txt
5180	3	To have a better output from Valgrind, compile with debug info:	text	txt
5180	4	gcc -o program main.c -g3\nvalgrind ./program	code	txt
5181	1	valgrind --track-origins ./program	code	txt
5182	1	valgrind --leak-check full ./program	code	txt
5271	1	rm -r <directory>	code	sh
5183	1	valgrind --tool callgrind ./program	code	txt
5184	1		code	txt
5185	1	kcachegrind callgrind-dump.out.123	code	txt
5186	1	gdb ./program\n(gdb) set remote exec-file ./program\n(gdb) set sysroot /\n(gdb) target extended-remote | vgdb --multi --vargs -q\n(gdb) start\n(gdb) help valgrind\n(gdb) help memcheck\n(gdb) help helgrind	code	txt
2173	1	#include <algorithm>\n#include <vector>\n\ntemplate<typename T, typename S = std::size_t>\nstruct sum_predicate\n{\n    S count;\n    T sum;\n    void operator()(T const& e)\n    {\n        count++;\n        sum += e;\n    }\n};\n\nint main()\n{\n    std::vector<long> numbers{1, 2, 3, 4, 5};\n    auto [count, sum] = std::for_each(numbers.begin(), numbers.end(), sum_predicate<long>{});\n    // count: 5, sum: 15\n}	code	cpp
2174	1	#include <algorithm>\n#include <vector>\n\nint main()\n{\n    std::size_t count{};\n    long sum{};\n    std::vector<long> numbers{1, 2, 3, 4, 5};\n    std::for_each(numbers.begin(), numbers.end(), [&](auto const& e){ count++; sum += e; });\n    // count: 5, sum: 15\n}	code	cpp
2175	1	Note that variables are now shared state and need to be `std::atomic<>` or protected by a `std::mutex<>`.	text	txt
2175	2	#include <algorithm>\n#include <execution>\n#include <atomic>\n#include <vector>\n\nint main()\n{\n    std::atomic<std::size_t> count{};\n    std::atomic<long> sum{};\n    std::vector<long> numbers{1, 2, 3, 4, 5};\n    std::for_each(std::execution::par_unseq, numbers.begin(), numbers.end(), [&](auto const& e){ count++; sum += e; });\n    // count: 5, sum: 15\n}	code	cpp
2176	1	#include <algorithm>\n#include <ranges>\n#include <vector>\n\nint main()\n{\n    std::size_t count{};\n    long sum{};\n    std::vector<long> numbers{1, 2, 3, 4, 5};\n    std::ranges::for_each(numbers, [&](auto const& e){ count++; sum += e; });\n    // count: 5, sum: 15\n}	code	cpp
2177	3	#include <iostream>\n#include <algorithm>\n#include <vector>\n\nint main()\n{\n    std::vector<int> numbers{1,2,3,4,5};\n\n    auto iter1 = numbers.begin();\n    auto iter2 = numbers.end();\n\n    std::for_each(iter1, iter2, [](auto e) { std::cout << e << " "; });\n}	code	cpp
2177	5	#include <iostream>\n#include <algorithm>\n#include <ranges>\n#include <vector>\n\ntemplate<typename T>\nstruct sentinel\n{\n    using iter_t = typename std::vector<T>::iterator;\n    iter_t begin;\n    std::iter_difference_t<iter_t> count;\n    bool operator==(iter_t const& other) const { return std::distance(begin, other) >= count; }\n};\n\nint main()\n{\n    std::vector<long> numbers{1,2,3,4,5};\n    std::vector<long>::iterator iter = numbers.begin();\n    std::ranges::for_each(iter, sentinel<long>{iter, 3}, [](auto e) { std::cout << e << " "; });\n}	code	cpp
2178	1	#include <algorithm>\n#include <vector>\n#include <list>\n\nint main()\n{\n    std::vector<long> random_access{1,2,3,4,5};\n    std::list<long> bidirectional{1,2,3,4,5};\n\n    auto random_access_iterator = random_access.begin();\n    random_access_iterator += 3; // OK\n    random_access_iterator++; // OK\n    ssize_t random_difference = random_access_iterator - random_access.begin(); // OK: 4\n\n    auto bidirectional_iterator = bidirectional.begin();\n    //bidirectional_iterator += 5; // ERROR\n    std::advance(bidirectional_iterator, 3); // OK\n    bidirectional_iterator++; // OK, all iterators provide advance operation\n    //ssize_t bidirectional_difference = bidirectional_iterator - bidirectional.begin(); // ERROR\n    ssize_t bidirectional_difference = std::distance(bidirectional.begin(), bidirectional_iterator); // OK: 4\n}	code	cpp
2180	1	#include <algorithm>\n#include <ranges>\n#include <vector>\n\nint main()\n{\n    std::vector<long> numbers{1,2,3,4,5};\n\n    auto last_sorted = std::is_sorted_until(numbers.begin(), numbers.end());\n\n    for (auto iter = numbers.begin(); iter != last_sorted; ++iter)\n        continue;\n\n    for (auto v: std::ranges::subrange(numbers.begin(), last_sorted))\n        continue;\n}	code	cpp
2179	2	#include <algorithm>\n#include <ranges>\n#include <vector>\n\nint main()\n{\n    std::vector<long> in{1,2,3,4,5,6,7,8,9,10};\n    std::vector<long> out(10, 0);\n\n    std::copy(in.begin(), in.end(), out.begin());\n    // output range is implied as: std::next(out.begin(), std::distance(in.begin(), in.end()));\n}	code	cpp
2181	3	#include <algorithm>\n#include <vector>\n\nint main()\n{\n    std::vector<long> numbers{1,2,3,4,5};\n    std::size_t sum{};\n    std::for_each(numbers.begin(), numbers.end(), [&sum](auto const e) { sum += e; });\n    for (auto e: numbers) { sum += e; }\n}	code	cpp
2771	1	Running the `io_service` object's event processing loop will block the\nexecution of the thread and will run ready handlers until there are no more\nready handlers remaining or until the `io_service` object has been stopped.	text	txt
2771	3	The `boost::asio::io_service::work` class is responsible for telling the\n`io_service` object when the work starts and when it has finished. It will\nmake sure that the `io_service::run()` function will not exit during the time\nthe work is underway. Also, it will make sure that the `io_service::run()`\nfunction exits when there is no unfinished work remaining.	text	txt
2771	2	#include <iostream>\n#include <boost/asio.hpp>\n\nint main()\n{\n    boost::asio::io_service service;\n    boost::asio::io_service::work work{service};\n    service.run();\n    // will not be reached: blocking service\n}	code	cpp
2772	2	#include <iostream>\n#include <boost/asio.hpp>\n\nint main()\n{\n    boost::asio::io_service service;\n    boost::asio::io_service::work work{service};\n    service.poll();\n    // will be reached: non-blocking service\n}	code	cpp
2773	3	#include <thread>\n#include <chrono>\n#include <functional>\n#include <boost/asio.hpp>\n\nvoid finish_tasks(boost::asio::io_service& service)\n{\n    service.run();\n}\n\nvoid some_work(std::size_t s)\n{\n    std::this_thread::sleep_for(std::chrono::seconds(s));\n}\n\nint main()\n{\n    boost::asio::io_service service;\n    std::thread worker{finish_tasks, std::ref(service)};\n    service.post(std::bind(some_work, 2));\n    worker.join();\n}	code	cpp
2774	3	#include <thread>\n#include <chrono>\n#include <functional>\n#include <boost/asio.hpp>\n\nvoid some_work(std::size_t s)\n{\n    std::this_thread::sleep_for(std::chrono::seconds(s));\n}\n\nvoid finish_tasks(boost::asio::io_service& service)\n{\n    service.run();\n}\n\nint main()\n{\n    boost::asio::io_service service;\n    std::thread worker{finish_tasks, std::ref(service)};\n    boost::asio::dispatch(service, std::bind(some_work, 2));\n    worker.join();\n    service.stop();\n}	code	cpp
2775	2	#include <thread>\n#include <chrono>\n#include <functional>\n#include <boost/asio.hpp>\n\nvoid some_work(std::size_t s)\n{\n    std::this_thread::sleep_for(std::chrono::seconds(s));\n}\n\nvoid finish_tasks(boost::asio::io_service& service)\n{\n    service.run();\n}\n\nint main()\n{\n    boost::asio::io_context service;\n    boost::asio::io_context::strand strand{service};\n    std::thread worker{finish_tasks, std::ref(service)};\n    strand.post(std::bind(some_work, 2));\n    service.post(strand.wrap(std::bind(some_work, 2)));\n    worker.join();\n    service.stop();\n}	code	cpp
4144	3	consteval int f(int i) { return i; }\n\nconstexpr int g(int i)\n{\n    if consteval\n    {\n        return f(i) + 1; // immediate function context\n    }\n    else\n    {\n        return 42;\n    }\n}\n\nconsteval int h(int i)\n{\n    return f(i) + 1; // immediate function context\n}	code	cpp
5254	1	which --skip-dot <command>	code	sh
2776	1	#include <thread>\n#include <mutex>\n#include <iostream>\n#include <exception>\n#include <boost/asio.hpp>\n\nstd::mutex ostream_lock;\n\nvoid some_work()\n{\n    throw std::runtime_error("i/o failure");\n}\n\nvoid finish_tasks(boost::asio::io_service& service)\n{\n    try\n    {\n        service.run();\n    }\n    catch (std::runtime_error const& exp)\n    {\n        std::lock_guard<std::mutex> lock{ostream_lock};\n        std::cerr << exp.what() << "\\\\n";\n    }\n}\n\nint main()\n{\n    boost::asio::io_context service;\n    std::thread worker{finish_tasks, std::ref(service)};\n    service.post(some_work);\n    service.post(some_work); // no more io context to dispatch\n    worker.join();\n    service.stop();\n}	code	cpp
1438	1	#include <iostream>\n\nstruct base\n{\n    static void show() { std::cout << "base\\\\n"; }\n};\n\n// pre-c++20\nauto tshow = [](auto x)\n{\n    using T = std::decay_t<decltype(x)>;\n\n    T other;   // create instance\n    T::show(); // call static method\n};\n\n// post-c++20\nauto generic_show = []<typename T>(T const& x)\n{\n    T other;   // create instance\n    T::show(); // call static method\n};\n\nint main()\n{\n    base object;\n\n    tshow(object);\n    generic_show(object);\n}	code	cpp
1439	1	template<typename ...T>\nvoid do_something(T&& ...args) { /* ... */ }\n\nauto forward_something = [](auto&& ...args)\n{\n    return do_something(std::forward<decltype(args)>(args)...);\n};\n\nauto generic_forward = []<typename ...T>(T&& ...args)\n{\n    return do_something(std::forward<T>(args)...);\n};	code	cpp
1440	4	#include <functional>\n\nvoid sample()\n{\n    std::function<int(int const)> lfib = [&lfib](int const n)\n    {\n        return n <= 2 ? 1 : lfib(n - 1) + lfib(n - 2);\n    };\n\n    auto f10 = lfib(10);\n}	code	cpp
2777	1	#include <thread>\n#include <chrono>\n#include <boost/asio.hpp>\n\nvoid some_work()\n{\n    std::this_thread::sleep_for(std::chrono::seconds(2));\n}\n\nvoid finish_tasks(boost::asio::io_service& service)\n{\n    service.run();\n}\n\nvoid timer_handler(boost::system::error_code const&)\n{\n}\n\nint main()\n{\n    boost::asio::io_context service;\n    boost::asio::io_context::strand strand{service};\n    std::thread worker{finish_tasks, std::ref(service)};\n    service.post(some_work);\n\n    boost::asio::deadline_timer timer{service};\n    timer.expires_from_now(boost::posix_time::seconds(1));\n    timer.async_wait(strand.wrap(timer_handler));\n\n    worker.join();\n    service.stop();\n}	code	cpp
2778	1	#include <thread>\n#include <string>\n#include <boost/asio.hpp>\n\nvoid initialize_service(boost::asio::io_context& service)\n{\n    service.run();\n}\n\nint main()\n{\n    boost::asio::io_context service;\n    boost::asio::io_context::strand strand{service};\n\n    std::thread worker{initialize_service, std::ref(service)};\n\n    boost::asio::ip::tcp::socket socket{service};\n    boost::asio::ip::tcp::resolver resolver{service};\n    boost::asio::ip::tcp::resolver::query query{"127.0.0.1", std::to_string(9090)};\n    boost::asio::ip::tcp::resolver::iterator iterator = resolver.resolve(query);\n    boost::asio::ip::tcp::endpoint endpoint = *iterator;\n\n    socket.connect(endpoint);\n    socket.shutdown(boost::asio::ip::tcp::socket::shutdown_both);\n    socket.close();\n\n    worker.join();\n    service.stop();\n}	code	cpp
2779	1	#include <thread>\n#include <iostream>\n#include <functional>\n#include <boost/asio.hpp>\n\nvoid connection_worker(boost::asio::io_context& context)\n{\n    context.run();\n}\n\nvoid on_connect(boost::asio::ip::tcp::endpoint const& endpoint)\n{\n    std::cout << "connected to " << endpoint.address().to_string() << std::endl;\n}\n\nint main()\n{\n    boost::asio::io_context context{};\n    boost::asio::io_context::strand strand{context};\n    std::thread worker{connection_worker, std::ref(context)};\n\n    boost::asio::ip::tcp::socket socket{context};\n    boost::asio::ip::tcp::resolver resolver{context};\n\n    boost::asio::ip::tcp::resolver::query query{"127.0.0.1", "9000"};\n    boost::asio::ip::tcp::resolver::iterator endpoints = resolver.resolve(query);\n\n    boost::asio::ip::tcp::endpoint endpoint = *endpoints;\n    socket.async_connect(endpoint, std::bind(on_connect, std::ref(endpoint)));\n\n    socket.shutdown(boost::asio::ip::tcp::socket::shutdown_both);\n    socket.close();\n    worker.join();\n    context.stop();\n}	code	cpp
5528	1	#include <ftxui/dom/elements.hpp>\n\nint main()\n{\n    ftxui::Element text{ftxui::text("Flashback, for experts like you")};\n    ftxui::invert(text);\n}	code	cpp
1449	1	#include <functional>\n\nint add(int const a, int const b) { return a + b; }\n\nstruct base\n{\n    int x = 0;\n\n    void add(int const n) { x += n; }\n};\n\nint main()\n{\n    // free function\n    int r1 = std::invoke(add, 1, 2);\n\n    // free function through pointer to function\n    int r2 = std::invoke(&add, 1, 2);\n\n    // member functions through pointer to member function\n    base object;\n    std::invoke(&base::add, object, 3);\n\n    // data members\n    int r3 = std::invoke(&base::x, object);\n\n    // function objects\n    int r4 = std::invoke(std::plus<>(), std::invoke(&base::x, object), 3);\n\n    // lambda expressions\n    auto lambda = [](auto a, auto b) { return a + b; }\n    int r5 = std::invoke(lambda, 1, 2);\n}	code	cpp
2780	1	#include <iostream>\n#include <thread>\n#include <string>\n#include <functional>\n#include <boost/asio.hpp>\n\nstatic constexpr auto port{8888};\nstatic constexpr auto address{"127.0.0.1"};\n\nvoid connection_worker(boost::asio::io_context& context)\n{\n    context.run();\n}\n\nint main()\n{\n    boost::asio::io_context context{};\n    boost::asio::io_context::strand strand{context};\n    boost::asio::ip::tcp::socket socket{context};\n    boost::asio::ip::tcp::resolver resolver{context};\n    boost::asio::ip::tcp::acceptor acceptor{context};\n\n    std::thread worker(connection_worker, std::ref(context));\n\n    boost::asio::ip::tcp::resolver::query query{address, std::to_string(port)};\n    boost::asio::ip::tcp::resolver::iterator iterator{resolver.resolve(query)};\n    boost::asio::ip::tcp::endpoint endpoint{*iterator};\n\n    acceptor.open(endpoint.protocol());\n    acceptor.set_option(boost::asio::ip::tcp::acceptor::reuse_address(true));\n    acceptor.bind(endpoint);\n    acceptor.listen(boost::asio::socket_base::max_connections);\n\n    boost::asio::ip::address local_addr{endpoint.address()};\n    boost::asio::ip::port_type local_port{port};\n    std::clog << "listening " << local_addr << ":" << local_port << std::endl;\n\n    acceptor.accept(socket);\n\n    boost::asio::ip::tcp::endpoint client{socket.remote_endpoint()};\n    boost::asio::ip::address client_addr{client.address()};\n    boost::asio::ip::port_type client_port{client.port()};\n    std::clog << "client " << client_addr << ":" << client_port << std::endl;\n\n    acceptor.close();\n    socket.shutdown(boost::asio::ip::tcp::socket::shutdown_both);\n    socket.close();\n    context.stop();\n    worker.join();\n}	code	cpp
5461	1	Computational photography is an advanced processing technique to improve image quality captured by cameras. The common use case is to capture the same scene at multiple exposures, register those images with each other and blend them nicely to create a high dynamic range image.	text	md
1359	2	#include <iostream>\n#include <initializer_list>\n#include <string>\n#include <vector>\n#include <map>\n\nvoid func(int const a, int const b, int const c)\n{\n    std::cout << a << b << c << '\\\\n';\n}\n\nvoid func(std::initializer_list<int> const list)\n{\n    for (auto const& e: list)\n        std::cout << e;\n    std::cout << '\\\\n';\n}\n\nint main()\n{\n    std::string s1("text"); // direct initialization\n    std::string s2 = "text"; // copy initialization\n    std::string s3{"text"}; // direct list-initialization\n    std::string s4 = {"text"}; // copy list-initialization\n\n    std::vector<int> v{1, 2, 3};\n    std::map<int, std::string> m{{1, "one"}, {2, "two"}};\n\n    func({1, 2, 3}); // call std::initializer_list<int> overload\n\n    std::vector v1{4}; // size = 1\n    std::vector v2(4); // size = 4\n\n    auto a = {42}; // std::initializer_list<int>\n    auto b{42}; // int\n    auto c = {4, 2}; //std::initializer_list<int>\n    auto d{4, 2}; // error, too many elements	code	cpp
5202	2	Users and processes do not have permission to change the security rules, so they cannot work around the access control rules.	text	md
1360	1	struct base\n{\n    // default member initialization\n    const int height = 14;\n    const int width = 80;\n\n    v_align valign = v_align::middle;\n    h_align halign = h_align::left;\n\n    std::string text;\n\n    // constructor initialization list\n    base(std::string const& t): text{t}\n    {}\n\n    base(std::string const& t, v_align const va, h_align const ha): text{t}, valign{va}, halign{ha}\n    {}\n};	code	cpp
2781	1	#include <iostream>\n#include <memory>\n#include <thread>\n#include <string>\n#include <functional>\n#include <boost/asio.hpp>\n\nstatic constexpr auto port{8888};\nstatic constexpr auto address{"127.0.0.1"};\n\nvoid connection_worker(boost::asio::io_context& context)\n{\n    context.run();\n}\n\nvoid on_accept(boost::asio::ip::tcp::socket& socket, std::shared_ptr<boost::asio::io_context::work> work)\n{\n    boost::asio::ip::tcp::endpoint client{socket.remote_endpoint()};\n    boost::asio::ip::address client_addr{client.address()};\n    boost::asio::ip::port_type client_port{client.port()};\n    std::clog << "client " << client_addr << ":" << client_port << std::endl;\n\n    socket.shutdown(boost::asio::ip::tcp::socket::shutdown_both);\n    socket.close();\n    work.reset();\n}\n\nint main()\n{\n    boost::asio::io_context context{};\n    boost::asio::io_context::strand strand{context};\n    auto work{std::make_shared<boost::asio::io_context::work>(context)};\n    boost::asio::ip::tcp::socket socket{context};\n    boost::asio::ip::tcp::resolver resolver{context};\n    boost::asio::ip::tcp::acceptor acceptor{context};\n\n    std::thread worker(connection_worker, std::ref(context));\n\n    boost::asio::ip::tcp::resolver::query query{address, std::to_string(port)};\n    boost::asio::ip::tcp::resolver::iterator iterator{resolver.resolve(query)};\n    boost::asio::ip::tcp::endpoint endpoint{*iterator};\n\n    acceptor.open(endpoint.protocol());\n    acceptor.set_option(boost::asio::ip::tcp::acceptor::reuse_address(true));\n    acceptor.bind(endpoint);\n    acceptor.listen(boost::asio::socket_base::max_connections);\n\n    boost::asio::ip::address local_addr{endpoint.address()};\n    boost::asio::ip::port_type local_port{port};\n    std::clog << "listening " << local_addr << ":" << local_port << std::endl;\n\n    acceptor.async_accept(socket, std::bind(on_accept, std::ref(socket), std::move(work)));\n\n    worker.join();\n    acceptor.close();\n    context.stop();\n}	code	cpp
5187	1	A GPU core is capable of performing arithmetic and logica operations, such as calculations, but it cannot be used for program control.	text	txt
5188	1	A **stream multiprocessor** is responsible for controlling instruction execution among many cores. A streaming multiprocessor has one control unit that works with many processing cores, whiel a CPU core has one control unit for each processing core.	text	txt
5189	1	1. Shared memory is the cache L1 inside each streaming multiprocessors\n2. Registers are specific to each core\n3. Control unit managing execution of all cores inside the streaming multiprocessor\n4. CUDA cores\n5. High speed interconnection between the memory and stream multiprocessors	text	txt
5190	1	1. Global memory which is the slowest memory but the easiest memory to access to\n2. L2 cache\n3. Streaming multiprocessors\n4. Interprocess between memory and streaming multiprocessors	text	txt
5191	1	Single Instruction, Multiple Data (SIMD) is an operation that is performed on vectors or matrices, which makes GPUs faster than CPUs	text	txt
5471	2	This module represents the `ftxui::Screen` type, which is a 2D grid of styled characters, the `ftxui::Pixel` type which is the unit of rendering, the `ftxui::Color` type which is used to define foreground and background colors for each `ftxiu::Pixel`, and the `ftxui::Dimension` type which is taken by `ftxui::Screen` to control screen sizing.	text	md
1369	1	#include <vector>\n#include <map>\n\nstd::vector<int> get_numbers()\n{\n    return std::vector<int>{1, 2, 3, 4, 5};\n}\n\nstd::map<int, double> get_doubles()\n{\n    return std::map<int, double>{\n        {0, 0.0},\n        {1, 1.1},\n        {2, 2.2}\n    };\n}\n\nint main()\n{\n    auto numbers = std::vector<int>{1, 2, 3, 4, 5};\n    auto copies = std::vector<int>(numbers.size() * 4);\n\n    for (int element: numbers)\n        copies.push_back(element);\n\n    for (int& element: numbers)\n        copies.push_back(element);\n\n    for (auto&& element: get_numbers())\n        copies.push_back(element);\n\n    for (auto&& [key, value]: get_doubles())\n        copies.push_back(key);\n}	code	cpp
1483	2	module;               // global module fragment\n\n#define X\n#include "code.h"\n\nexport module geometry;   // module declaration\n\nimport std;      // module preamble\n\n// module purview\n\nexport template<typename T, typename = typename std::enable_if_t<std::is_arithmetic_v<T>, T>>\nstruct point\n{\n    T x;\n    T y;\n};\n\nexport using int_point = point<int>;\n\nexport constexpr int_point int_point_zero{0, 0};\n\nexport template<typename T>\ndouble distance(point<T> const& p1, point<T> const& p2)\n{\n    return std::sqrt((p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y));\n}	code	cpp
1356	1	Benefits of using `auto`:	text	txt
1356	2	* It is not possible to leave a variable uninitialized with `auto`.\n* It prevents narrowing conversion of data types. (?)\n* It makes generic programming easy.\n* It can be used where we don't care about types.	text	txt
1356	3	Preconditions of using `auto`:	text	txt
1356	4	* `auto` does not retain cv-ref qualifiers.\n* `auto` cannot be used for non-movable objects.\n* `auto` cannot be used for multi-word types like long long.	text	txt
1356	5	#include <string>\n#include <vector>\n#include <memory>\n\nint main()\n{\n    auto i = 42; // int\n    auto d = 42.5; // double\n    auto c = "text"; // char const*\n    auto z = {1, 2, 3}; // std::initializer_list<int>\n\n    auto b = new char[10]{0}; // char*\n    auto s = std::string{"text"}; // std::string\n    auto v = std::vector<int>{1, 2, 3}; // std::vector<int>\n    auto p = std::make_shared<int>(42); // std::shared_ptr<int>\n\n    auto upper = [](char const c) { return toupper(c); };\n    auto add = [](auto const a, auto const b) { return a + b; };\n\n    template<typename F, typename F>\n    auto apply(F&& f, T value)\n    {\n        return f(value);\n    }\n}\n\nclass foo\n{\n    int _x;\npublic:\n    foo(int const x = 0): _x{x} {}\n    int& get() { return _x; }\n};\n\ndecltype(auto) proxy_gen(foo& f) { return f.get(); }\n// ^__ decltype() preserves cv-ref qualification of return type	code	cpp
1357	1	#include <bitset>\n\nusing byte = std::bitset<8>;\nusing fn = void(byte, double);\nusing fn_ptr = void(*)(byte, double);\n\nvoid func(byte b, double d) { /* ... */ }\n\nint main()\n{\n    byte b{001101001};\n    fn* f = func;\n    fn_ptr fp = func;\n}	code	cpp
1358	3	#include <vector>\n\ntemplate<typename T>\nclass custom_allocator { /* ... */ };\n\ntemplate<typename T>\nusing vec_t = std::vector<T, custom_allocator<T>>;\n\nint main()\n{\n    vec_t<int> vi;\n    vec_t<std::string> vs;\n}	code	cpp
1483	3	import std;\nimport geometry;\n\nint main()\n{\n    int_point p{3, 4};\n    std::cout << distance(int_point_zero, p) << std::endl;\n}	code	cpp
1487	3	modulename:partitionname;`.\n\n*geometry-details.cppm*\nmodule geometry:details;\n\nimport std.core;\n\nstd::pair<int, int> split(char const* ptr, std::size_t const size)\n{\n    int x{}, y{};\n    ...\n    return {x, y};\n}	code	cpp
1487	4	*geometry-literals.cppm*\nexport module geometry:literals;\n\nimport :core;\nimport :details;\n\nnamespace geometry_literals\n{\n    export point<int> operator ""_p(const char* ptr, std::size_t size)\n    {\n        auto [x, y] = split(ptr, size);\n        return {x, y};\n    }\n}	code	cpp
1486	3	*geometry-core.cppm*\nexport module geometry:core;\n\nimport std.core;\n\nexport template<typename T, typename = typename std::enable_if_t<std::is_arithmetic_v<T>, T>>\nstruct point\n{\n    T x;\n    T y;\n};	code	cpp
1486	4	*geometry-literals.cppm*\nexport module geometry.literals;\n\nimport std.core;\n\nnamespace geometry_literals\n{\n    export point<int> operator ""_p(const char* ptr, std::size_t const size)\n    {\n        int x{}, y{};\n        ...\n        return {x , y};\n    }\n}	code	cpp
1488	2	This snippet uses module interface partition and module implementation partition.	text	txt
1488	3	*sample-core.cppm*\nexport module sample:core;\n\nexport constexpr double fraction{7 / 5};	code	cpp
1488	7	Next snippet is the same implementation but with modules instead of partitions:	text	txt
1486	6	*geometry.cppm*\nexport module geometry;\n\nexport import :core;\nexport import :literals;	code	cpp
1486	8	import std.core;\nimport geometry;\n\nint main()\n{\n    point<int> p{4, 2};\n\n    {\n        using namespace geometry_literals;\n        point<int> origin{"0,0"_p};\n    }\n}	code	cpp
1488	4	*sample-details.cppm*\nmodule sample:details;\n\nimport :core;\n\nconstexpr double power{fraction * fraction};	code	cpp
1488	5	*sample.cppm*\nexport module sample;\n\nexport import :core;	code	cpp
1488	12	So far, we have two modules: `sample.core` and `sample`. Here `sample`\nimports and then re-exports the entire content of `sample.core`. Because of\nthis, the core in the `consumer.cpp` does not need to change. By solely\nimporting the `sample` module, we get access to the content of the\n`sample.core` module.	text	txt
1488	13	However, if we do not define the `sample` module anymore, then we need to explicitly import `sample.core` module:	text	txt
1370	1	#include <iostream>\n#include <stdexcept>\n#include <iterator>\n\ntemplate<typename T, std::size_t const S>\nclass dummy_array\n{\n    T data[S] = {};\n\npublic:\n    T const& at(std::size_t const index) const\n    {\n        if (index < S) return data[index];\n        throw std::out_of_range("index out of range");\n    }\n\n    void insert(std::size_t const index, T const& value)\n    {\n        if (index < S) data[index] = value;\n        else throw std::out_of_range("index out of range");\n    }\n\n    std::size_t size() const { return S; }\n};\n\ntemplate<typename T, typename C, std::size_t const S>\nclass dummy_array_iterator_type\n{\npublic:\n    dummy_array_iterator_type(C& collection, std::size_t const index):\n        index{index}, collection{collection}\n    {}\n\n    bool operator !=(dummy_array_iterator_type const& other) const\n    {\n        return index != other.index;\n    }\n\n    T const& operator *() const\n    {\n        return collection.at(index);\n    }\n\n    dummy_array_iterator_type& operator ++()\n    {\n        ++index;\n        return *this;\n    }\n\n    dummy_array_iterator_type operator ++(int)\n    {\n        auto temp = *this;\n        ++*temp;\n        return temp;\n    }\n\nprivate:\n    std::size_t index;\n    C& collection;\n};\n\ntemplate<typename T, std::size_t const S>\nusing dummy_array_iterator = dummy_array_iterator_type<T, dummy_array<T, S>, S>;\n\ntemplate<typename T, std::size_t const S>\nusing dummy_array_const_iterator = dummy_array_iterator_type<T, dummy_array<T, S> const, S>;\n\ntemplate<typename T, std::size_t const S>\ninline dummy_array_iterator<T, S> begin(dummy_array<T, S>& collection)\n{\n    return dummy_array_iterator<T, S>(collection, 0);\n}\n\ntemplate<typename T, std::size_t const S>\ninline dummy_array_iterator<T, S> end(dummy_array<T, S>& collection)\n{\n    return dummy_array_iterator<T, S>(collection, collection.size());\n}\n\ntemplate<typename T, std::size_t const S>\ninline dummy_array_const_iterator<T, S> begin(dummy_array<T, S> const& collection)\n{\n    return dummy_array_const_iterator<T, S>(collection, 0);\n}\n\ntemplate<typename T, std::size_t const S>\ninline dummy_array_const_iterator<T, S> end(dummy_array<T, S> const& collection)\n{\n    return dummy_array_const_iterator<T, S>(collection, collection.size());\n}\n\nint main()\n{\n    dummy_array<int, 5> numbers;\n    numbers.insert(0, 1);\n    numbers.insert(1, 2);\n    numbers.insert(2, 3);\n    numbers.insert(3, 4);\n    numbers.insert(4, 5);\n\n    for (auto&& element: numbers)\n        std::cout << element << ' ';\n    std::cout << '\\\\n';\n}	code	cpp
1371	1	#include <memory>\n\nclass string_buffer\n{\npublic:\n    explicit string_buffer() {}\n    explicit string_buffer(std::size_t const size) {}\n    explicit string_buffer(char const* const ptr) {}\n    explicit operator bool() const { return false; }\n    explicit operator char* const () const { return nullptr; }\n};\n\nint main()\n{\n    std::shared_ptr<char> str;\n    string_buffer b1;            // calls string_buffer()\n    string_buffer b2(20);        // calls string_buffer(std::size_t const)\n    string_buffer b3(str.get()); // calls string_buffer(char const*)\n\n    enum item_size { small, medium, large };\n\n    // implicit conversion cases when explicit not specified\n    string_buffer b4 = 'a';      // would call string_buffer(std::size_t const)\n    string_buffer b5 = small;    // would call string_buffer(std::size_t const)\n}	code	cpp
5472	1	The module `dom` handles layout and composition.	text	md
1372	2	*file1.cpp*\n#include <iostream>\n\nnamespace\n{\n    void print()\n    {\n        std::cout << "file1" << std::endl;\n    }\n}\n\nprint(); // external linkage, local visibility	code	cpp
1372	3	*file2.cpp*\n#include <iostream>\n\nnamespace\n{\n    void print()\n    {\n        std::cout << "file2" << std::endl;\n    }\n}\n\nprint(); // external linkage, local visibility	code	cpp
1373	2	template <int const& Size>\nclass test {};\n\nstatic int Size1 = 10;\n\nnamespace\n{\n    int Size2 = 10;\n}\n\ntest<Size1> t1; // error only on VC++\ntest<Size2> t2; // okay	code	cpp
1374	8	    #ifndef _lib_version_2\n    inline namespace v2\n    {\n        template<typename T>\n        int test(T value) { return 2; }\n    }\n    #endif\n}	text	txt
1374	9	namespace working_client_code\n{\n    // okay\n    auto x = correct_implementation::test(42);	text	txt
1374	10	    struct foo { int a; };	text	txt
1374	11	    namespace correct_implementation\n    {\n        template <>\n        int test(foo value) { return value.a; }\n    }	text	txt
1374	12	    // okay\n    auto y = correct_implementation::test(foor{42});\n}	code	txt
1374	3	    #ifndef _lib_version_1\n    using namespace v1;\n    #endif\n\n    namespace v2\n    {\n        template<typename T>\n        int test(T value) { return 2; }\n    }\n\n    #ifndef _lib_version_2\n    using namespace v2;\n    #endif\n}\n\nnamespace broken_client_code\n{\n    // okay\n    auto x = incorrect_implementation::test(42);\n\n    struct foo { int a; };\n\n    // breaks\n    namespace incorrect_implementation\n    {\n        template <>\n        int test(foo value) { return value.a; }\n    }	text	cpp
1375	2	#include <iostream>\n#include <set>\n\nint main()\n{\n    std::set<int> numbers;\n\n    if (auto const [iter, inserted] = numbers.insert(1); inserted)\n        std::cout << std::distance(numbers.cbegin(), iter);\n}	code	cpp
1378	1	auto i1 = std::stoi("42");\nauto i2 = std::stoi("101010", nullptr, 2);\nauto i3 = std::stoi("052", nullptr, 8);\nauto i7 = std::stoi("052", nullptr, 0);\nauto i4 = std::stoi("0x2A", nullptr, 16);\nauto i9 = std::stoi("0x2A", nullptr, 0);\nauto i10 = std::stoi("101010", nullptr, 2);\nauto i11 = std::stoi("22", nullptr, 20);\nauto i12 = std::stoi("-22", nullptr, 20);\n\nauto d1 = std::stod("123.45"); // d1 = 123.45000000000000\nauto d2 = std::stod("1.2345e+2"); // d2 = 123.45000000000000\nauto d3 = std::stod("0xF.6E6666p3"); // d3 = 123.44999980926514	code	cpp
1379	2	template<typename T, typename = typename T = std::is_integral_v<T>>\nT stoi(std::string const& str, std::size_t* pos = 0, T base = 10);\n\ntemplate<typename F, typename = typename F = std::is_floating_point_v<F>>\nF stof(std::string const& str, std::size_t* pos = 0);	code	cpp
1381	2	try\n{\nauto i1 = std::stoi("");\n}\ncatch (std::invalid_argument const& exp)\n{\nstd::cerr << exp.what() << '\\\\n';\n}\n\ntry\n{\nauto i2 = std::stoi("12345678901234");\nauto i3 = std::stoi("12345678901234");\n}\ncatch (std::out_of_range const& exp)\n{\nstd::cerr << exp.what() << '\\\\n';\n}	code	cpp
1383	2	#include <limits>\n\nauto min_int = std::numeric_limits<int>::min();\nauto max_int = std::numeric_limits<int>::max();\n\nauto min_double = std::numeric_limits<double>::min();\nauto low_double = std::numeric_limits<double>::lowest();\nauto max_double = std::numeric_limits<double::lowest();	code	cpp
1384	2	#include <limits>\n\ntemplate<typename T, typename Iter>\nT minimum(Iter const start, Iter const end)\n{\n    T latest_minimum = std::numeric_limits<T>::max();\n\n    for (autp i = start; i < end; ++i)\n        if (*i < latest_minimum)\n            latest_minimum = *i;\n\n    return latest_minimum;\n}	code	cpp
1385	2	#include <limits>\n\nauto s = std::numeric_limits<short>::digits;\nauto d = std::numeric_limits<double>::digits;	code	cpp
1386	1	#include <limits>\n\nauto s = std::numeric_limits<short>::digits10;\nauto d = std::numeric_limits<double>::digits10;	code	cpp
1387	1	#include <limits>\n\nauto value_is_signed = std::numeric_limist<T>::is_signed;	code	cpp
1388	1	#include <limits>\n\nauto value_is_integer = std::numeric_limist<T>::is_integer;	code	cpp
1389	1	#include <limits>\n\nauto value_is_exact = std::numeric_limist<T>::is_exact;	code	cpp
1390	1	#include <limits>\n\nauto value_has_infinity = std::numeric_limist<T>::has_infinity;	code	cpp
1391	2	#include <random>\n\nauto min = std::mt19937::min();\nauto max = std::mt19937::max();	code	cpp
1392	2	#include <random>\n\nstd::random_device seeder;\nstd::mt19937 generator1{seeder()};\n\nstd::mt19937 generator2;\ngenerator2.seed(seeder());	code	cpp
1393	2	#include <random>\n\nstd::random_device seeder;\nstd::mt19937 generator{seeder()};\nauto number = generator();	code	cpp
1394	1	#include <random>\n\nstd::mt19937 generator{};\ngenerator.discard(4); // discard 4 numbers	code	cpp
2782	1	#include <iostream>\n#include <algorithm>\n#include <numeric>\n#include <memory>\n#include <thread>\n#include <string>\n#include <vector>\n#include <list>\n#include <functional>\n#include <boost/asio.hpp>\n\nstatic constexpr auto port{8888};\nstatic constexpr auto address{"127.0.0.1"};\n\nstd::vector<std::uint8_t> receive_buffer(4096);\nstd::size_t receive_buffer_index{};\nstd::list<std::vector<std::uint8_t>> send_buffer;\n\nvoid connection_worker(boost::asio::io_context&);\nvoid on_send(boost::asio::ip::tcp::socket&, std::list<std::vector<std::uint8_t>>::iterator);\nvoid send(boost::asio::ip::tcp::socket&, void const*, std::size_t);\nvoid on_receive(boost::asio::ip::tcp::socket&, std::size_t);\nvoid receive(boost::asio::ip::tcp::socket&);\nvoid on_accept(boost::asio::ip::tcp::socket&, std::shared_ptr<boost::asio::io_context::work>);\n\nvoid connection_worker(boost::asio::io_context& context)\n{\n    context.run();\n}\n\nvoid on_send(boost::asio::ip::tcp::socket& socket, std::list<std::vector<std::uint8_t>>::iterator node)\n{\n    send_buffer.erase(node);\n\n    if (!send_buffer.empty())\n    {\n        boost::asio::async_write(\n            socket,\n            boost::asio::buffer(send_buffer.front()),\n            std::bind(on_send, boost::asio::placeholders::error, send_buffer.begin())\n        );\n    }\n}\n\nvoid send(boost::asio::ip::tcp::socket& socket, void const* buffer, std::size_t length)\n{\n    std::vector<std::uint8_t> output;\n    std::copy((std::uint8_t const*)buffer, (std::uint8_t const*)buffer + length, std::back_inserter(output));\n\n    send_buffer.push_back(output);\n\n    boost::asio::async_write(\n        socket,\n        boost::asio::buffer(send_buffer.front()),\n        std::bind(on_send, boost::asio::placeholders::error, send_buffer.begin())\n    );\n}\n\nvoid on_receive(boost::asio::ip::tcp::socket& socket, std::size_t bytes_transferred)\n{\n    receive_buffer_index += bytes_transferred;\n\n    for (std::size_t index{}; index < receive_buffer_index; ++index)\n    {\n        std::cout << (char)receive_buffer[index] << " ";\n    }\n    std::cout << std::endl;\n    receive_buffer_index = 0;\n\n    receive(socket);\n}\n\nvoid receive(boost::asio::ip::tcp::socket& socket)\n{\n    socket.async_read_some(\n        boost::asio::buffer(\n            &receive_buffer[receive_buffer_index],\n            receive_buffer.size() - receive_buffer_index\n        ),\n        std::bind(on_receive, std::ref(socket), 1)\n    );\n}\n\nvoid on_accept(boost::asio::ip::tcp::socket& socket, std::shared_ptr<boost::asio::io_context::work> work)\n{\n    boost::asio::ip::tcp::endpoint client{socket.remote_endpoint()};\n    boost::asio::ip::address client_addr{client.address()};\n    boost::asio::ip::port_type client_port{client.port()};\n    std::clog << "client " << client_addr << ":" << client_port << std::endl;\n\n    send(socket, "payload", 7);\n    receive(socket);\n\n    socket.shutdown(boost::asio::ip::tcp::socket::shutdown_both);\n    socket.close();\n    work.reset();\n}\n\nint main()\n{\n    boost::asio::io_context context{};\n    boost::asio::io_context::strand strand{context};\n    auto work{std::make_shared<boost::asio::io_context::work>(context)};\n    boost::asio::ip::tcp::socket socket{context};\n    boost::asio::ip::tcp::resolver resolver{context};\n    boost::asio::ip::tcp::acceptor acceptor{context};\n\n    std::thread worker(connection_worker, std::ref(context));\n\n    boost::asio::ip::tcp::resolver::query query{address, std::to_string(port)};\n    boost::asio::ip::tcp::resolver::iterator iterator{resolver.resolve(query)};\n    boost::asio::ip::tcp::endpoint endpoint{*iterator};\n\n    acceptor.open(endpoint.protocol());\n    acceptor.set_option(boost::asio::ip::tcp::acceptor::reuse_address(true));\n    acceptor.bind(endpoint);\n    acceptor.listen(boost::asio::socket_base::max_connections);\n\n    boost::asio::ip::address local_addr{endpoint.address()};\n    boost::asio::ip::port_type local_port{port};\n    std::clog << "listening " << local_addr << ":" << local_port << std::endl;\n\n    acceptor.async_accept(socket, std::bind(on_accept, std::ref(socket), std::move(work)));\n\n    worker.join();\n    acceptor.close();\n    context.stop();\n}	code	cpp
2786	1	break 50`\nbreak *main\nbreak *main+50\nbreak source.cpp:main+50	code	gdb
1361	2	struct foo1         // size = 1, alignment = 1\n{                   // foo1:    +-+\n    char a;         // members: |a|\n};\n\nstruct foo2         // size = 2, alignment = 1\n{                   // foo1:    +-+-+\n    char a;         // members: |a|b|\n    char b;\n};\n\nstruct foo3         // size = 8, alignment = 4\n{                   // foo1:    +----+----+\n    char a;         // members: |a...|bbbb|\n    int  b;\n};\n\nstruct foo3_\n{\n    char a;         // 1 byte\n    char _pad0[3];  // 3 bytes\n    int  b;         // 4 byte\n};\n\nstruct foo4         // size = 24, alignment = 8\n{                   // foo4:    +--------+--------+--------+--------+\n    int a;          // members: |aaaa....|cccc....|dddddddd|e.......|\n    char b;\n    float c;\n    double d;\n    bool e;\n};\n\nstruct foo4_\n{\n    int a;          // 4 bytes\n    char b;         // 1 byte\n    char _pad0[3];  // 3 bytes\n    float c;        // 4 bytes\n    char _pad1[4];  // 4 bytes\n    double d;       // 8 bytes\n    bool e;         // 1 byte\n    char _pad2[7];  // 7 bytes\n};	code	cpp
1362	2	struct alignas(4) foo\n{\n    char a;\n    char b;\n};\n\nalignof(foo);   // 4\nalignof(foo&);  // 4\nalignof(char);  // 1\nalignof(int);   // 4\nalignof(int*);  // 8 (64-bit)\nalignof(int[4]);// 4 (natural alignment of element is 4)	code	cpp
1363	3	alignas(8) int a;       // size = 4, alignment = 8\nalignas(256) long b[4]; // size = 32, alignment = 256	code	txt
1395	2	#include <random>\n#include <functional>\n\nint main()\n{\n    std::random_device seeder;\n\n    std::array<int, std::mt19937::state_size> seed_data{};\n    std::generate(std::begin(seed_data), std::end(seed_data), std::ref(seeder));\n    std::seed_seq seeds(std::begin(seed_data), std::end(seed_data));\n    std::mt19937 generator{seeds};\n    std::uniform_int_distribution<> dist{0, 10}; // [0, 10)\n    int random_number = dist(generator);\n}	code	cpp
1397	1	namespace units\n{\n    inline namespace literals\n    {\n        inline namespace units_literals\n        {\n            constexpr size_t operator ""_KB(unsigned long long const size)\n            {\n                return static_cast<size_t>(size * 1024);\n            }\n        }\n    }\n}\n\nint main()\n{\n    using namespace units::units_literals;\n\n    size_t bytes = "1024"_KB;\n}	code	cpp
1398	1	#include <string>\n\nusing namespace std::string_literals;\n\nauto s1{ "text"s }; // std::string\nauto s2{ L"text"s }; // std::wstring\nauto s3{ u8"text"s }; // std::u8string\nauto s3{ u"text"s }; // std::u16string\nauto s4{ U"text"s }; // std::u32string\n\nusing namespace std::string_view_literals;\n\nauto s5{ "text"sv }; // std::string_view	code	cpp
1399	1	#include <chrono>\n\nusing namespace std::chrono_literals;\n\nauto timer {2h + 42min + 15s}; // std::chrono::duration<long long>\n\nauto year { 2035y }; // std::chrono::year (c++20)\nauto day { 15d }; // std::chrono::day (c++20)	code	cpp
1400	1	#include <complex>\n\nusing namespace std::complex_literals;\n\nauto c{ 12.0 + 4.2i }; // std::complex<double>	code	cpp
1401	2	T operator ""_suffix(char const*);\n\ntemplate <char...>\nT operator ""_suffix();	code	cpp
5462	1	Shape analysis is crucial in computer vision. The common use cases are identifying shapes in an image, for example a logo. The shape module provides algorithms to extract shapes, measure similarities and transform the shape of objects, and more.	text	md
1363	2	// alignas specifier applied to struct\nstruct alignas(4) foo1  // size = 4, aligned as = 4\n{                       // foo1:    +----+\n    char a;             // members: |a.b.|\n    char b;\n};\n\nstruct foo1_            // size = 4, aligned as = 1\n{\n    char a;             // 1 byte\n    char b;             // 1 byte\n    char _pad0[2];      // 2 bytes\n};\n\n// alignas specifier applied to member data declarations\nstruct foo2             // size = 16, aligned as = 8\n{                       // foo2:    +--------+--------+\n    alignas(2) char a;  // members: |aa......|bbbb....|\n    alignas(8) int b;\n};\n\nstruct foo2_            // size = 16, aligned as = 4\n{\n    char a;             // 2 bytes\n    char _pad0[6];      // 6 bytes\n    int b;              // 4 bytes\n    char _pad1[4];      // 4 bytes\n};\n\n// the alignas specifier applied to the struct is less than alignas\n// specifier applied to member data declaration, thus will be ignored.\nstruct alignas(4) foo3  // size = 16, aligned as = 8\n{                       // foo3:    +--------+--------+\n    alignas(2) char a;  // members: |aa......|bbbbbbbb|\n    alignas(8) int b;\n};\n\nstruct foo3_            // size = 16, aligned as = 4\n{\n    char a;             // 2 byte\n    char _pad0[6];      // 6 bytes\n    int b;              // 4 bytes\n    char _pad1[4];      // 4 bytes\n};	text	cpp
1364	2	enum class status: unsigned int; // forward declared\n\nstatus do_something(); // function declaration/prototype\n\nenum class status : unsigned int\n{\n    success = 0,\n    failed = 1,\n    unknown = 0xffff0000U\n};\n\nstatus do_something() { return status::success; }	code	cpp
1365	1	#include <string>\n\nenum class status : unsigned int\n{\n    success = 0,\n    failure = 1,\n    unknown = 0xffff0000U\n};\n\nstd::string_view to_string(status const s)\n{\n    switch (s)\n    {\n        using enum status;\n        case success: return "success";\n        case failure: return "failure";\n        case unknown: return "unknown";\n    }\n}	code	cpp
5198	1	Instead of constructing a concrete strategy and setting it in the context, we can take the strategy as a parameter in the `contextInterface()` method.	text	md
1366	1	class base\n{\n    virtual void foo() = 0;\n    virtual void bar() {}\n    virtual void baz() = 0;\n};\n\nclass alpha: public base\n{\n    virtual void bar() override {}\n    virtual void baz() override {}\n};\n\nclass beta: public alpha\n{\n    virtual void foo() override {}\n};\n\nbeta object;	code	cpp
1367	1	class base\n{\n    virtual void foo() = 0;\n    virtual void bar() {}\n    virtual void baz() = 0;\n};\n\nclass alpha: public base\n{\n    virtual void foo() override {}\n    virtual void baz() override final {}\n};\n\nclass beta: public alpha\n{\n    // won't compile\n    virtual void baz() override {}\n};\n\nint main()\n{\n    beta object;\n}	code	cpp
1368	1	class base\n{\n    virtual void foo() = 0;\n    virtual void bar() {}\n    virtual void baz() = 0;\n};\n\nclass derived final: public base\n{\n    virtual void foo() override {}\n    virtual void baz() override {}\n};\n\n// won't compile\nclass prime: public derived\n{\n};	code	cpp
1488	6	*consumer.cpp*\nimport std.core;\nimport sample;\n\nstd::cout << power << "\\\\n";	code	cpp
1488	11	*consumer.cpp*\nimport std.core;\nimport sample;\n\nstd::cout << power << "\\\\n";	code	cpp
1488	14	*consumer.cpp*\nimport std.core;\nimport sample.core;\n\nstd::cout << power << "\\\\n";	code	cpp
1488	15	Choosing between using partitions or multiple modules for componentizing your\nsource code should depend on the particularities of your project. If you use\nmultiple smaller modules, you provide better granularity for imports. This\ncan be important if you're developing a large library because users should\nonly import things they use.	text	txt
4469	1	- Thread construction point\n- Thread joining point\n\n	text	txt
1405	1	#include <string>\n\ntemplate<typename CharT>\nusing tstring = std::basic_string<CharT, std::char_traits<CharT>, std::allocator<CharT>>;\n\ntemplate<typename CharT>\ninline tstring<CharT> to_upper(tstring<CharT> text)\n{\n    std::transform(std::begin(text), std::end(text), std::begin(text), toupper);\n    return text;\n}\n\ntemplate<typename CharT>\ninline tstring<CharT> to_upper(tstring<CharT>&& text)\n{\n    std::transform(std::begin(text), std::end(text), std::begin(text), toupper);\n    return text;\n}\n\ntemplate<typename CharT>\ninline tstring<CharT> to_lower(tstring<CharT> text)\n{\n    std::transform(std::begin(text), std::end(text), std::begin(text), tolower);\n    return text;\n}\n\ntemplate<typename CharT>\ninline tstring<CharT> to_lower(tstring<CharT>&& text)\n{\n    std::transform(std::begin(text), std::end(text), std::begin(text), tolower);\n    return text;\n}	code	cpp
1406	1	#include <string>\n\ntemplate<typename CharT>\nusing tstring = std::basic_string<CharT, std::char_traits<CharT>, std::allocator<CharT>>;\n\ntemplate<typename CharT>\ninline tstring<CharT> reverse(tstring<CharT> text)\n{\n    std::reverse(std::begin(text), std::end(text));\n    return text;\n}\n\ntemplate<typename CharT>\ninline tstring<CharT> reverse(tstring<CharT>&& text)\n{\n    std::reverse(std::begin(text), std::end(text));\n    return text;\n}	code	cpp
1407	1	#include <string>\n#include <utility>\n\ntemplate<typename CharT>\nusing tstring = std::basic_string<CharT, std::char_traits<CharT>, std::allocator<CharT>>;\n\ntemplate<typename CharT>\ninline tstring<CharT> trim(tstring<CharT> const& text)\n{\n    tstring<CharT>::size first{text.find_first_not_of(' ')};\n    tstring<CharT>::size last{text.find_last_not_of(' ')};\n    return text.substr(first, (last - first + 1));\n}	code	cpp
1408	1	#include <string>\n#include <algorithm>\n\ntemplate<typename CharT>\nusing tstring = std::basic_string<CharT, std::char_traits<CharT>, std::allocator<CharT>>;\n\ntemplate<typename CharT>\ninline tstring<CharT> remove(tstring<CharT> text, CharT const character)\n{\n    auto last = std::remove_if(std::begin(text), std::end(text), [character](CharT const c) { return c == character; });\n    text.erase(last, std::end(text));\n    return text;\n}	code	cpp
1488	8	*sample-core.cppm*\nexport module sample.core;\n\nexport constexpr double fraction{7 / 5};	code	cpp
1488	9	*sample-details.cppm*\nmodule sample.details;\n\nimport sample.core;\n\nconstexpr double power{fraction * fraction};	code	cpp
1488	10	*sample.cppm*\nexport module sample;\n\nexport import sample.core;	code	cpp
1402	1	namespace binary\n{\n    using numeric = unsigned int;\n\n    inline namespace binary_literals\n    {\n        namespace binary_internals\n        {\n            template<typename T, char... bits>\n            struct bit_seq;\n\n            template<typename T, '0', char... bits>\n            struct bit_seq\n            {\n                static constexpr T value { bit_seq<T, bits...>::value };\n            };\n\n            template<typename T, '1', char... bits>\n            struct bit_seq\n            {\n                static constexpr T value {\n                    bit_seq<T, bits...>::value | static_cast<T>(1 << sizeof...(bits))\n                };\n            };\n\n            template<typename T>\n            struct bit_seq<T>\n            {\n                static constexpr T value{0};\n            };\n        }\n\n        template <char... bits>\n        constexpr numeric operator ""_byte()\n        {\n            static_assert(sizeof...(bits) <= 32, "binary literals only holds 32 bits");\n\n            return binary_internals::bit_seq<numeric, bits...>::value;\n        }\n    }\n}	code	cpp
1403	1	#include <string>\n\nusing namespace std::string_literals;\n\nauto filename { R"(C:\\\\Users\\\\Brian\\\\Documents\\\\)"s };\nauto pattern { R"((\\\\w[\\\\w\\\\d]*)=(\\\\d+))"s };	code	cpp
1404	1	#include <string>\n\nusing namespace std::string_literals;\n\nauto s1{ R"(text)"s }; // std::string\nauto s2{ LR"(text)"s }; // std::wstring\nauto s3{ u8R"(text)"s }; // std::u8string\nauto s3{ uR"(text)"s }; // std::u16string\nauto s4{ UR"(text)"s }; // std::u32string\n\nusing namespace std::string_view_literals;\n\nauto s5{ R"text"sv }; // std::string_view	code	cpp
1409	1	#include <string>\n#include <sstream>\n#include <vector>\n\ntemplate<typename CharT>\nusing tstring = std::basic_string<CharT, std::char_traits<CharT>, std::allocator<CharT>>;\n\ntemplate<typename CharT>\nusing tstringstream = std::basic_stringstream<CharT, std::char_traits<CharT>, std::allocator<CharT>>;\n\ntemplate<typename CharT>\ninline std::vector<tstring<CharT>> split(tstring<CharT> text, CharT const delimiter)\n{\n    auto sstream = tstringstream<CharT>{text};\n    auto tokens = std::vector<tstring<CharT>>{};\n    auto token = tstring<CharT>{};\n\n    while (std::getline(sstream, token, delimiter))\n    {\n        if (!token.empty())\n            tokens.push_back(token);\n    }\n\n    return tokens;\n}	code	cpp
1410	1	#include <string>\n#include <regex>\n\nusing namespace std::string_literals;\n\nstd::string pattern{R"(...)"};\n\nstd::regex srx{pattern};\nstd::regex lrx{R"(...)"s};	code	cpp
1412	1	#include <string>\n#include <regex>\n\ntemplate<typename CharT>\nusing tstring = std::baisc_string<CharT, std::char_traits<CharT>, std::allocator<CharT>>;\n\ntemplate<typename CharT>\nusing tregex = std::basic_regex<CharT>;\n\ntemplate<typename CharT>\nbool matches(tstring<CharT> const& text, tstring<CharT const& pattern)\n{\n    std::basic_regex<CharT> rx{pattern, std::regex_constants::icase};\n    return std::regex_match(text, rx);\n}\n\nint main()\n{\n    std::string text{R"(https://github.com - https://github.com/briansalehi/references)"};\n    std::string pattern{R"((\\\\w+)://([\\\\w.]+)/([\\\\w\\\\d._-]+)/([\\\\w\\\\d._-]+)[.git]?)"};\n\n    if(matches(text, pattern))\n        std::cout << text << '\\\\n';\n    else\n        std::cerr << "invalid repository link!\\\\n";\n}	code	cpp
1413	7	#include <string>\n#include <regex>\n\nint main()\n{\n    std::string text{R"(https://github.com - https://github.com/briansalehi/references)"};\n    std::string pattern{R"((\\\\w+)://([\\\\w.]+)/([\\\\w\\\\d._-]+)/([\\\\w\\\\d._-]+)[.git]?)"};\n\n    std::regex rx{pattern, std::regex_constants::icase};\n    std::smatch matches;\n    bool matched = std::regex_match(text, matches, rx);\n\n    if (auto [match, protocol, domain, username, project] = matches; matched)\n        std::cout << project << " owned by " << username\n                  << " hosted on " << domain\n                  << " using " << protocol << " protocol\\\\n";	code	cpp
1414	3	#include <regex>\n\nstd::regex pattern{R"(...)", std::regex_constants::egrep};	code	cpp
1415	1	#include <string>\n#include <regex>\n\nstd::string text {\nR"(\n# server address\naddress = 123.40.94.215\nport=22\n\n# time to live\nttl = 5\n)"};\n\nint main()\n{\n    std::string pattern{R"(^(?!#)(\\\\w+)\\\\s*=\\\\s*([\\\\w\\\\d]+[\\\\w\\\\d._,:-]*)$)"};\n    std::regex rx{pattern, std::regex_constants::icase};\n    std::smatch match{};\n\n    if (std::string variable, value; std::regex_search(text, match, rx))\n    {\n        variable = match[1];\n        value = match[2];\n    }\n}	code	cpp
1424	2	struct foo\n{\n    foo(foo const&) = delete;\n};\n\nvoid func(int) = delete;	code	cpp
1427	2	template<typename ResourceT>\nclass movable\n{\nprivate:\n    ResourceT resource;\n\npublic:\n    movable(ResourceT const& resource): resource{resource} {}\n\n    ~movable() { resource.free(); }\n\n    movable(movable const&) = delete;\n    movable& operator =(movable const&) = delete;\n\n    movable(movable&& other): resource{std::move(resource)} {}\n    movable& operator =(movable&& other) {\n        if (this != std::addressof(other))\n            resource = std::move(resource);\n        return *this;\n    }\n};	code	cpp
1428	2	class base\n{\npublic:\n    base() = default;\n\n    inline base& operator =(base const&);\n};\n\ninline base& base::operator =(base const&) = default;	code	cpp
1429	1	#include <algorithm>\n#include <vector>\n\nint main()\n{\n    std::vector<int> numbers{12,3,84,93,7,40,35,5,74,8,22};\n    int minimum = 0;\n    int maximum = 9;\n\n    int single_digits = std::count_if(\n        std::begin(numbers), std::end(numbers), [minimum, maximum](int const n)\n        { return minimum <= n && n <= maximum; });\n}	code	cpp
1430	1	#include <algorithm>\n#include <vector>\n\nint main()\n{\n    std::vector<int> numbers{-1,2,-4,8,3,-7,5};\n    auto is_positive = [](int const n) { return n > 0; };\n    int positives = std::count_if(std::begin(numbers), std::end(numbers), is_positive);\n}	code	cpp
1431	2	#include <algorithm>\n#include <string>\n#include <vector>\n\nint main()\n{\n    auto lsum = [](auto const n, ) { return n > 0; };\n\n    std::vector<int> numbers{-1,2,-4,8,3,-7,5};\n    std::string words{"stl", " is ", " cool"};\n\n    int sum = std::accumulate(std::begin(numbers), std::end(numbers), 0, lsum);\n    std::string sentence = std::accumulate(std::begin(words), std::end(words), 0, lsum);\n}	code	cpp
1434	1	#include <memory>\n\nstd::make_unique<int> ptr(42);\nauto lambda = [p = std::move(ptr)]() { return ++*p; };	code	cpp
1435	2	#include <iostream>\n\nstruct base\n{\n    int id;\n\n    void show()\n    {\n        return [*this] { std::cout << id << '\\\\n'; };\n    }\n};\n\nint main()\n{\n    // base is destroyed at the time of show() execution\n    auto lambda = base{42}.show();\n}	code	cpp
1436	1	#include <vector>\n\nint main()\n{\n    std::vector<int> numbers{0,1,2,3,4,5,6,7,8,9};\n    auto vsize = []<typename T>(std::vector<T> const& v) { return std::size(v); };\n    vsize(v); // 10\n    vsize(42); // error\n}	code	cpp
1437	1	int main()\n{\n    auto generic_sum = []<typename T>(T&& x, T&& y) nothrow { return x + y; }\n\n    int result = generic_sum(40, 2);\n}	code	cpp
1416	2	* `std::regex_interator`: A constant forward iterator used to iterate through the occurrences of a pattern in a string. It has a pointer to an `std::basic_regex` that must live until the iterator is destroyed. Upon creation and when incremented, the iterator calls `std::regex_search()` and stores a copy of the `std::match_results` object returned by the algorithm.\n* `std::regex_token_iterator`: A constant forward iterator used to iterate through the submatches of every match of a regular expression in a string. Internally, it uses a `std::regex_iterator` to step through the submatches. Since it stores a pointer to an `std::basic_regex` instance, the regular expression object must live until the iterator is destroyed.	text	txt
1416	3	The token iterators can return the unmatched parts of the string if the index of the subexpressions is -1, in which case it returns an `std::match_results` object that corresponds to the sequence of characters between the last match and the end of the sequence:	text	txt
5463	1	Optical flow algorithms are used in videos to track features across successive frames. Running a feature extractor on each frame would be computationally expensive. Instead, we extract the features from the current frame, and then track those features in successive frames.	text	md
1416	4	#include <string>\n#include <regex>\n\nstd::string text {\nR"(\n# server address\naddress = 123.40.94.215\nport=22\n\n# time to live\nttl = 5\n)"};\n\nint main()\n{\n    std::string pattern{R"(^(?!#)(\\\\w+)\\\\s*=\\\\s*([\\\\w\\\\d]+[\\\\w\\\\d._,:-]*)$)"};\n    std::regex rx{pattern, std::regex_constants::icase};\n    std::sregex_iterator end{};\n\n    // iterate through regex matches\n    for (auto it = std::sregex_iterator{std::begin(text), std::end(text), rx};\n            it ! end; ++it)\n    {\n        std::string variable = (*it)[1];\n        std::string value = (*it)[2];\n    }\n\n    // iterate through unmatched tokens\n    for (auto it = std::sregex_iterator{std::begin(text), std::end(text), rx, -1};\n            it ! end; ++it)\n    {\n        std::string variable = (*it)[1];\n        std::string value = (*it)[2];\n    }\n\n    // iterate through tokens of regex matches\n    std::sregex_token_iterator tend{};\n    for (auto it = std::sregex_token_iterator{std::begin(text), std::end(text), rx};\n            it ! tend; ++it)\n    {\n        std::string token = *it;\n    }\n}	code	cpp
1417	1	#include <string>\n#include <regex>\n\nint main()\n{\n    std::string text{"this is a example with a error"};\n    std::regex rx{R"(\\\\ba ((a|e|i|o|u)\\\\w+))"};\n    std::regex_replace(text, rx, "an $1");\n}	code	cpp
1418	2	#include <string>\n#include <regex>\n\nint main()\n{\n    std::string text{"current date: 3 10 2022"};\n    std::regex pattern{R"((\\\\d{1,2})\\\\s*(\\\\d{1,2})\\\\s*(\\\\d{2,4}))"};\n    std::string reformatted = std::regex_replace(text, pattern, R"([$`] $2 $1 $3 [$'])");\n}	code	cpp
1419	2	#include <string_view>\n\nstd::string_view trim_view(std::string_view str)\n{\n    auto const pos1{ str.find_last_not_of(" ") };\n    auto const pos2{ str.find_first_not_of(" ") };\n    str.remove_suffix(str.length() - pos2 - 1);\n    str.remove_prefix(pos1);\n    return str;\n}\n\nauto sv1{ trim_view("sample") };\nauto sv2{ trim_view(" sample") };\nauto sv3{ trim_view("sample ") };\nauto sv4{ trim_view(" sample ") };\n\nstd::string s1{ sv1 };\nstd::string s2{ sv2 };\nstd::string s3{ sv3 };\nstd::string s4{ sv4 };	code	cpp
1420	1	#include <string_view>\n\nstd::string_view message{"  something to show  "};\n\nstd::size_t suffix{ str.find_last_not_of(" ") };\nstd::size_t prefix{ str.find_first_not_of(" ") };	code	cpp
1421	1	#include <string_view>\n\nstd::string_view message{"  something to show  "};\n\nstd::size_t suffix{ str.find_last_not_of(" ") };\nstd::size_t prefix{ str.find_first_not_of(" ") };\n\nstr.remove_suffix(str.length() - pos2 - 1);\nstr.remove_prefix(pos1);	code	cpp
5244	2	This is configurable and set when the SELinux policy is built.	text	md
5281	1	mkdir -v <directory>...	code	sh
1440	3	The lambda must have a name; an unnamed lambda cannot be captured so that it can be called again.\nA lambda can only capture variables from a function scope; it cannot capture any variable that has a static storage duration. Objects defined in a namespace scope or with the static or external specifiers have static storage duration. If the lambda was defined in a namespace scope, its closure would have static storage duration and therefore the lambda would not capture it.\nThe type of the lambda closure cannot remain unspecified; that is, it cannot be declared with the auto specifier. It is not possible for a variable declared with the auto type specifier to appear in its own initializer.\nThe lambda closure must be captured by reference. If we capture by copy (or value), then a copy of the function wrapper is made, but the wrapper is uninitialized when the capturing is done. We end up with an object that we are not able to call. Even though the compiler will not complain about capturing by value, when the closure is invoked, an `std::bad_function_call` is thrown.	text	txt
1441	5	#include <iostream>\n\ntemplate<typename T>                   // [1]\nconstexpr T add(T value) { return value; }\n\ntemplate<typename T, typename ...Ts>   // [2]\nconstexpr auto add(T head, Ts ...rest)  // [3]\n{\n    std::cout << __PRETTY_FUNCTION__ << '\\\\n';\n    return head + add(rest...);         // [4]\n}\n\nint main()\n{\n    int result = add(0,1,2,3,4,5,6,7,8,9);\n}	code	cpp
1442	1	template<typename ...Ts>\nauto add(Ts ...args) { return (... + args); }\n\ntemplate<typename ...Ts>\nauto add(Ts ...args) { return ( 1 + ... + args); }\n\ntemplate<typename ...Ts>\nauto add(Ts ...args) { return (args + ...); }\n\ntemplate<typename ...Ts>\nauto add(Ts ...args) { return (args + ... + 1); }	code	cpp
1443	2	template<typename T>\nstruct less_pack\n{\n    T const& value;\n\n    friend constexpr auto operator <(less_pack<T> const& lhs, less_pack<T> const& rhs)\n    {\n        return less_pack<T>{lhs.value < rhs.value ? lhs.value : rhs.value};\n    }\n};\n\ntemplate<typename ...Ts>\nconstexpr auto min_incorrect(Ts&& ...args)\n{\n    return (args < ...);\n}\n\ntemplate<>\ninline constexpr bool min_incorrect_compiler_generated(int, int, int>(\n    int&& __args0,\n    int&& __args1,\n    int&& __args2)\n{\n    return __args0 < (static_cast<int>(__args1 < __args2));\n}\n\ntemplate<typename ...Ts>\nconstexpr auto min_correct(Ts&& ...args)\n{\n    return (less_pack<Ts>{args} < ...).value;\n}\n\ntemplate <>\ninline constexpr int min_correct_compiler_generated(\n    int&& __args0,\n    int&& __args1,\n    int&& __args2)\n{\n    return operator <(less_pack<int>{__args0},\n            operator <(less_pack<int>{__args1},\n                less_pack<int>{__args2})).value;\n}	code	cpp
1444	4	#include <algorithm>\n#include <functional>\n#include <map>\n#include <queue>\n\ntemplate<typename F, typename R>\nR mapping(F&& callable, R const& range)\n{\n    std::transform(std::begin(range), std::end(range), std::begin(range), std::forward<F>(callable));\n    return range;\n}\n\ntemplate<typename F, typename K, typename V>\nstd::map<K, V> mapping(F&& callable, std::map<K, V> const& range)\n{\n    std::map<K, V> mapped;\n\n    for (auto const kvpair: range)\n        mapped.insert(callable(kvpair));\n\n    return mapped;\n}\n\ntemplate <typaname F, typename T>\nstd::queue<T> mapping(F&& callable, std::queue<T> const& range)\n{\n    std::queue<T> mapped;\n\n    while (!range.empty())\n    {\n        mapped.push(callable(range.front()));\n        range.pop();\n    }\n\n    return mapped;\n}	code	cpp
1445	1	#include <algorithm>\n#include <functional>\n#include <vector>\n#include <cmath>\n\ntemplate<typename F, typename R>\nR mapping(F&& callable, R const& range)\n{\n    std::transform(std::begin(range), std::end(range), std::begin(range), std::forward<F>(callable));\n    return range;\n}\n\nint main()\n{\n    std::vector<int> numbers{-3, 8, -5, -9, 2, -1, 0, -7};\n    std::vector<int> absolutes = mapping(std::abs<>(), numbers);\n}	code	cpp
1446	2	* Use `std::accumulate()` on containers that support iterating\n* Use other means to explicitly process containers that do not support iterating, such as `std::queue`	text	txt
1446	3	#include <algorithm>\n#include <queue>\n\ntemplate<typename F, typename R, typename T>\nconstexpr T folding(F&& callable, R&& range, T init)\n{\n    return std::accumulate(std::begin(range), std::end(range), std::move(init), std::forward<F>(callable));\n}\n\ntemplate<typename F, typename T>\nconstexpr T folding(F&& callable, std::queue<T> range, T init)\n{\n    while (!range.empty())\n    {\n        init = callable(init, q.front());\n        q.pop();\n    }\n\n    return init;\n}	code	cpp
5464	1	Face recognition module provides algorithms to identify a person in a picture. This is different from face detection which helps you to locate a face in a given image.	text	md
1501	2	git clone https://github.com/yoctoproject/poky	code	sh
1447	1	#include <algorithm>\n#include <cmath>\n\ntemplate<typename F, typename R, typename T>\nconstexpr T folding(F&& callable, R&& range, T init)\n{\n    return std::accumulate(std::begin(range), std::end(range), std::move(init), std::forward<F>(callable));\n}\n\nint main()\n{\n    std::vector<int> numbers{0,1,2,3,4,5,6,7,8,9};\n    int sum = folding(std::plus<>(), numbers, 0);\n}	code	cpp
1448	1	#include <algorithm>\n#include <string>\n#include <map>\n\ntemplate<typename F, typename R, typename T>\nconstexpr T folding(F&& callable, R&& range, T init)\n{\n    return std::accumulate(std::begin(range), std::end(range), std::move(init), std::forward<F>(callable));\n}\n\nint main()\n{\n    std::map<std::string, int> occurances{{"one", 1}, {"two", 2}, {"three", 3}};\n    auto counter = [](int const s, std::pair<std::string, int> const kvpair) { return s + kvpair.second; };\n    int sum = folding(counter, occurances, 0);\n}	code	cpp
1450	1	#include <functional>\n#include <tuple>\n\nnamespace details\n{\n    template<typename F, typename P, std::size_t ...I>\n    auto apply(F&& callable, T&& parameter, std::index_sequence<I...>)\n    {\n        return std::invoke(std::forward<F>(callable), std::get<I>(std::forward<P>(paramter))...);\n    }\n}\n\ntemplate<typename F, typename P>\nauto apply(F&& callable, P&& parameter)\n{\n    return details::apply(std::forward<F>(callable), std::forward<P>(parameter), std::make_index_sequence<std::tuple_size_v<std::decay_t<P>>>{});\n}\n\nint add(int const a, int const b) { return a + b; }\n\nstruct base\n{\n    int x = 0;\n\n    void add(int const n) { x += n; }\n};\n\nint main()\n{\n    // direct call\n    int r1 = add(1, 2);\n\n    // call through function pointer\n    int(*fadd)(int const, int const) = &add;\n    int r2 = fadd(1, 2);\n\n    // direct member function call\n    base object;\n    object.add(3);\n    int r3 = object.x;\n\n    // member function call through function pointer\n    void(base::*fadd)(int const) = &base::add;\n    (object.*fadd)(3);\n    int r4 = object.x;\n}	code	cpp
1452	1	#include <iostream>\n\nvoid show_compiler()\n{\n#if defined _MSC_VER_\n    std::cout << "Visual C++\\\\n";\n#elif defined __clang__\n    std::cout << "Clang\\\\n";\n#elif defined __GNUG__\n    std::cout << "GCC\\\\n";\n#else\n    std::cout << "Unknown compiler\\\\n";\n#endif\n}	code	cpp
1453	1	void show_architecture()\n{\n#if defined _MSC_VER\n\n#if defined _M_X64\n    std::cout << "AMD64\\\\n";\n#elif defined _M_IX86\n    std::cout << "INTEL x86\\\\n";\n#elif defined _M_ARM\n    std::cout << "ARM\\\\n";\n#else\n    std::cout << "unknown\\\\n";\n#endif\n\n#elif defined __clang__ || __GNUG__\n\n#if defined __amd64__\n    std::cout << "AMD64\\\\n";\n#elif defined __i386__\n    std::cout << "INTEL x86\\\\n";\n#elif defined __arm__\n    std::cout << "ARM\\\\n";\n#else\n    std::cout << "unknown\\\\n";\n#endif\n\n#else\n    #error Unknown compiler\n#endif\n}	code	cpp
1455	1	#define MAKE_STR2(x) #x\n\n#define MAKE_STR(x) MAKE_STR2(x)	code	cpp
1456	1	#define MERGE2(x, y) x##y\n\n#define MERGE(x, y) MERGE2(x, y)	code	cpp
5282	1	man <command>	code	sh
1460	1	// using SFINAE\ntemplate<typename T, typename = typename std::enable_if_t<std::is_pointer_v<T>, T>>\nauto value_of(T value) { return *value; }\n\ntemplate<typename T, typename = typename std::enable_if_t<!std::is_pointer_v<T>, T>>\nT value_of(T value) { return value; }\n\n// simplified by if constexpr\ntemplate<typename T>\nauto value_of(T value)\n{\n    if constexpr (std::is_pointer_v<T>)\n        return *value;\n    else\n        return value;\n}\n\ntemplate<typename CharT, char d, char... bits>\nconstexpr CharT binary_eval()\n{\n    if constexpr(sizeof...(bits) == 0)\n        return static_cast<CharT>(d-'0');\n    else if constexpr(d == '0')\n        return binary_eval<CharT, bits...>();\n    else if constexpr(d == '1')\n        return static_cast<CharT>((1 << sizeof...(bits)) | binary_eval<CharT, bits...>());\n}\n\ntemplate<char... bits>\nconstexpr byte8 operator""_b8()\n{\n    static_assert(sizeof...(bits) <= 8, "binary literal b8 must be up to 8 digits long");\n    return binary_eval<byte8, bits...>();\n}	code	cpp
1461	1	[[nodiscard]] int get_value() { return 42; }\n\nget_value(); // warning	code	cpp
1462	1	enum class [[nodiscard]] ReturnCodes{ OK, NoData, Error };\n\nReturnCodes get_error() { return ReturnCodes::OK; }\n\nstruct [[nodiscard]] Item{};\n\nItem get_item() { return Item{}; }	code	cpp
1463	1	[[deprecated("Use func2()")]] void func() { }\n\n// warning: 'func' is deprecated : Use func2()\nfunc();\n\nclass [[deprecated]] foo\n{\n};\n\n// warning: 'foo' is deprecated\nfoo f;	code	cpp
1464	1	double run([[maybe_unused]] int a, double b)\n{\n    return 2 * b;\n}\n\n[[maybe_unused]] auto i = get_value1();	code	cpp
1465	1	void option1() {}\nvoid option2() {}\n\nint alternative = get_value();\n\nswitch (alternative)\n{\n    case 1:\n        option1();\n        [[fallthrough]]; // this is intentional\n    case 2:\n        option2();\n}	code	cpp
1482	2	Headers can also be imported:	text	txt
1482	1	import std;\n\nint main()\n{\n    std::cout << std::format("{}\\\\n", "modules are working");\n}	code	cpp
1482	3	import std;\nimport "geometry.hpp"	code	cpp
5494	1	#include <ftxui/dom/elements.hpp>\n\nconstexpr auto content{"Flashback, for experts like you."};\n\nint main()\n{\n    ftxui::Element text{ftxui::text(content)};\n}	code	cpp
4175	2	#include <expected>\n#include <system_error>\n#include <string>\n\nstd::expected<std::string, std::error_condition> read_input();\nstd::expected<int, std::error_condition> to_int(const std::string& s);\nint increase(int v);\nstd::expected<int, std::error_condition> log_error(const std::error_condition& err);\n\nauto result = read_input()\n    .and_then(to_int) // - invoked if the expected contains a value\n                      // - the callable has to return a std::expected, but can change the type:\n                      // std::expected<T, Err> -> std::expected<U, Err>\n    .transform(increase) // - invoked if the expected contains a value\n                         // - the callable has to return the same type\n                         // U -> U\n    .or_else(log_error); // - invoked if the expected contains an error\n                         // - the callable has to return a std::expected, but can change the type:\n                         // std::expected<T, Err> -> std::expected<V, Err>	code	cpp
4173	3	#include <variant>\n#include <string>\n#include <iostream>\n\nstd::variant<int, double, std::string> v{"sample string"};\n\nstd::visit([](auto&& x) {\n    std::cout << x << '\\n';\n}, v);\n// prints "sample string"	code	cpp
5196	1	#pragma once\n\n#include <memory>\n#include <Strategy.hpp>\n\nclass Context: public std::enable_shared_from_this<Context>\n{\n    std::unique_ptr<Strategy> m_strategy;\n\npublic:\n    Context(): m_strategy{nullptr} {}\n\n    void setStrategy(std::unique_ptr<Strategy> strategy) noexcept\n    {\n        m_strategy = std::move(strategy);\n    }\n\n    void contextInterface()\n    {\n        if (m_strategy)\n        {\n            m_strategy->execute(std::weak_ptr<Context>{shared_from_this()});\n        }\n        else\n        {\n            std::println("Default Strategy: {}", getData());\n        }\n    }\n\n    [[nodiscard]] std::string getData() const&\n    {\n        return "Context Data";\n    }\n};	code	cpp
5196	3	#pragma once\n\n#include <string>\n#include <memory>\n#include <print>\n#include <Strategy.hpp>\n#include <Context.hpp>\n\nclass StrategyA: public Strategy\n{\npublic:\n    ~StrategyA() override = default;\n\n    void execute(std::weak_ptr<Context> context) override\n    {\n        if (auto ctx{context.lock()})\n        {\n            std::string data = ctx->getData();\n            std::println("Strategy A: {}", data);\n        }\n    }\n};	code	cpp
5199	1	* The null object pattern is an alternative to manual null checks\n* Null object is a default strategy that the context class uses automatically when no strategy is set\n* Null object can be a singleton because it does not have any state\n* Null class implements the strategy interface but either does nothing or has a default behavior	text	md
5200	3	#include <Context.hpp>\n#include <DefaultStrategy.hpp>\n\nContext::Context()\n    : m_strategy{std::make_unique<DefaultStrategy>()}\n{\n}\n\nvoid Context::setStrategy(std::unique_ptr<Strategy> strategy) noexcept\n{\n    m_strategy = std::move(strategy);\n}\n\nvoid Context::contextInterface()\n{\n    m_strategy->execute(shared_from_this());\n}\n\n[[nodiscard]] std::string Context::getData() const&\n{\n    return "Context Data";\n}	code	cpp
5200	6	#include <string>\n#include <memory>\n#include <print>\n#include <DefaultStrategy.hpp>\n#include <Context.hpp>\n\nvoid DefaultStrategy::execute(std::weak_ptr<Context> context)\n{\n    if (std::shared_ptr<Context> ctx{context.lock()})\n    {\n        std::string data = ctx->getData();\n        std::println("Default Strategy: {}", data);\n    }\n}	code	cpp
5255	1	This option will also exclude the home directory.	text	md
5195	1	* There exists a context class which has a functionality that can be done with different strategies\n* We want to be able to change the strategy of that functionality on runtime\n* We define an interface for that strategy, because implementing the functionality directly inside the context class violates the Open-Closed principle\n* We implement each strategy in a separate class that implements the strategy interface, otherwise implementing each strategy by extending the context class will leave strategies tightly coupled to the context class by only overriding one method which does not make the strategies a kind of context class, which violates the Liskov Substitution principle\n* The relationship between the context and strategy is composition\n* The context class contains a pointer to the strategy interface, using a concrete strategy class violates the Dependency Inversion principle\n* When context calls on the functionality, it delegates the call to the strategy class, or it can have a default behavior if no strategy is set	text	md
5196	2	#pragma once\n\n#include <memory>\n\nclass Context;\n\nclass Strategy\n{\npublic:\n    virtual void execute(std::weak_ptr<Context> context) = 0;\n    virtual ~Strategy() = default;\n};	code	cpp
5196	4	#pragma once\n\n#include <string>\n#include <memory>\n#include <print>\n#include <Strategy.hpp>\n#include <Context.hpp>\n\nclass StrategyB: public Strategy\n{\npublic:\n    ~StrategyB() override = default;\n\n    void execute(std::weak_ptr<Context> context) override\n    {\n        if (auto ctx{context.lock()})\n        {\n            std::string data{ctx->getData()};\n            std::println("Strategy B: {}", data);\n        }\n    }\n};	code	cpp
5200	1	The `contextInteraface()` method does not need to check if the strategy is null anymore.	text	md
5200	4	#pragma once\n\n#include <memory>\n\nclass Context;\n\nclass Strategy\n{\npublic:\n    virtual void execute(std::weak_ptr<Context> context) = 0;\n    virtual ~Strategy() = default;\n};	code	cpp
5200	7	The null object can only be injected to the context through the constructor, because it is a default strategy that the context uses automatically when no strategy is set.	text	md
5201	1	* Strategy is defined at compile time, whereas dynamic strategy is defined at runtime\n* Static strategy is implemented using templates by passing the type of the strategy as a template parameter to the context class, whereas dynamic strategy is implemented using inheritance and polymorphism by setting the strategy through a setter method or constructor of the context class\n* Static strategy does not have the overhead of virtual function calls, whereas dynamic strategy has the overhead\n* Static strategy is less flexible but should be preferred when the strategy does not change during the lifetime of the context object	text	md
5203	1	SELinux integrates with the Linux Security Modules (LSM) framework in the Linux kernel. LSM provides a way to implement various security policies, including SELinux, AppArmor, and others.	text	md
5205	1	If the policies are not written in a least-privilege model, then SELinux might consider this non-standard behavior and allow the actions to continue. For policy writers, this means that their policy rules have to be very fine-grained. This makes writing policies very time-consuming. With more than 130 classes and 250 permissions known to SELinux, policy rules need to take all these classes and permissions into account for each interaction.	text	md
5206	1	* The SELinux kernel subsystem implemented through the LSM framework\n* Libraries used by user-space applications to interact with SELinux\n* Utilities to manage and configure SELinux\n* A set of SELinux policies that define the access control rules	text	md
5495	1	#include <ftxui/dom/elements.hpp>\n\nconstexpr auto content{"Flashback, for experts like you."};\n\nint main()\n{\n    ftxui::Element text{ftxui::vtext(content)};\n}	code	cpp
5210	1	Since SELinux is integrated into the Linux kernel, it is essential to ensure that the kernel has SELinux support enabled. Most modern Linux distributions come with SELinux support enabled by default, e.g. Fedora and Red Hat. But some distributions, such as Ubuntu and Debian, do not have SELinux enabled by default but document how to enable it.	text	md
5211	1	SELinux decides wether to allow or deny a particular action based on the context on both the subject (process or user) initiating the action and the object (file, socket, etc.) which is the target of the action. A context is a label that is attached to every subject and object in the system.	text	md
5212	1	SELinux has no notion of Linux process ownership and does not care how the process is called, which process ID it has, and what account the process runs as. SELinux identifies a process by its security context, which is a label that includes the user, role, type, and level of the process. The context is used to determine what actions the process is allowed to perform on various objects in the system.	text	md
5215	5	With this context, the binary can be called `apache2` or `nginx`, as long as the process is labeled `httpd_t`, the rule will apply without changing the policy. The same applies to the port 80 or 8080 that can be labeled `http_port_t`.	text	md
5216	2	Note that the `level` component is optional and is only used when Multi-Level Security (MLS) is enabled. `level` may also contain semicolons, which are used to separate multiple levels.	text	md
5217	2	All these files, if read, display either nothing or an SELinux context. If it is empty, then it means the process has not explicitly set a context for that particular purpose, and the SELinux context will be deduced either from the policy or inherited from its parent.	text	md
5218	1	* `current`: The current SELinux context of the process.\n* `exec`: The SELinux context that will be applied when the process executes a new binary.\n* `fscreate`: The SELinux context that will be applied to newly created files and directories\n* `sockcreate`: The SELinux context that will be applied to newly created sockets.\n* `keycreate`: The SELinux context that will be applied to newly created IPC keys.\n* `prev`: The previous SELinux context of the process before the last context change.	text	md
1501	1	git clone https://git.yoctoproject.org/poky	code	sh
5220	1	With type enforcement, SELinux controls processes behavior based on how it got executed in the first place. A web server launched by a user will run with a different type than the same web server launched by the init system.	text	md
5221	3	name: Annotations\non:\n  workflow_dispatch:\njobs:\n  log:\n    runs-on: ubuntu-latest\n    steps:\n      - run: |\n          echo "::debug::Running annotated logs "\n          echo "::notice file=.github/workflows/annotations.yml,line=15,endline=20,title=Abnormal Action::Scripts usually do not perform this action"\n          echo "::warning file=.github/workflows/annotations.yml,line=32,endline=32,col=15,endcolumn=50,title=Script Injection::Potential script injection"\n          echo "::error file=.github/workflows/annotations.yml,line=84,endline=84,col=30,endcolumn=45,title=Invalid Name::Invalid character inside step name"	code	yml
5234	1	from alpine:latest\nrun apk add openssl\ncopy generator.sh /usr/local/src/\nrun chmod u+x /usr/local/src/generator.sh\nentrypoint ["/usr/local/src/generator.sh"]	code	Dockerfile
5235	1	SELinux roles define which types can be accessed from the current context. These types on their parts define the permissions. As such, roles are a way to group types, and help define what a user can do in the system.	text	md
5283	1	/usr/share/man	code	sh
5223	2	name: Sample Workflow\non:\n  workflow_dispatch:\njobs:\n  random-generator:\n    name: Random Generator\n    runs-on: container\n    container:\n      image: ubuntu:24.04\n    steps:\n      - name: Generate Random Number\n        id: random\n        shell: bash {0}\n        run: echo "number=$RANDOM" >> "$GITHUB_OUTPUT"\n    outputs:\n      random: ${{ steps.random.outputs.number }}\n  random-consumer:\n    name: Random Consumer\n    needs: random-generator\n    runs-on: container\n    container:\n      image: ubuntu:24.04\n    steps:\n      - name: Take Random Number\n        shell: bash {0}\n        run: echo "::notice::${{ needs.random-generator.outputs.random }}"	code	yml
5234	2	name: Generate Random Action\nauthor: Brian Salehi\ndescription: Generates a random number\ninputs:\n  length:\n    description: Number of bytes the generated random should have\n    required: true\n    default: 10\noutputs:\n  random:\n    description: Generated random number to be taken from this action\nruns:\n  using: docker\n  image: Dockerfile\n  args:\n    - ${{ inputs.length }}	code	yml
5234	4	name: Show Random Number\non:\n  workflow_dispatch:\njobs:\n  generate:\n    runs-on: ubuntu-latest\n    container:\n      image: ubuntu:24.04\n    steps:\n      - uses: actions/checkout@v4\n      - name: Generate Random\n        id: generator\n        uses: ./\n        with:\n          length: 4\n    outputs:\n      random: ${{ steps.generator.outputs.random }}\n  show:\n    runs-on: ubuntu-latest\n    needs: generate\n    container:\n      image: ubuntu:24.04\n    steps:\n      - run: echo "${{ needs.generate.outputs.random }}"	code	yml
5237	1	* `user_r`: for restricted user, for unprivileged users. This role is only allowed to have processes with types specific to end-user applications. Privileged types, including those to switch to another user are not allowed for this role.\n* `staff_r`: for non-critical operations. This role is restricted, but it has the ability to switch roles. Suitable for operators to keep them in their least privileged role.\n* `sysadm_r`: for system administrators. This role is very privileged but certain end-user applications might not be accessible, especially with types that are used for potentially vulnerable or untrusted applications, to keep the system free from infections.\n* `secadm_r`: for security administrators. This role allows changing the SELinux policy and manipulating the SELinux controls.\n* `system_r`: for daemons and background processes. This role is quite privileged, supporting various daemon and system process types. But end-user applications are not allowed in this role.\n* `unconfined_r`: for end users. This role allows a limited number of types, but those types are very privileged as they allow running any application launched by a user or another unconfined process. This role is available to protect certain processes with other roles while keeping the rest of the system operations untouched by SELinux.	text	md
5239	1	Unlike Linux users that can switch to one another, the SELinux policy can enforce that the SELinux user remains the same even when the Linux user itself has changed. Because of the immutable state of the SELinux user, we can implement specific access controls to ensure that users cannot work around the set of permissions granted to them, even when they get privileged access.	text	md
5240	1	The SELinux user defines which roles the Linux user can assume, and the role defines which types the user can access. The types define the permissions that are granted to the user.	text	md
5241	1	An SELinux user is mapped to a Linux user, and this mapping can be one-to-one or one-to-many. A Linux user can only be mapped to a single SELinux user.	text	md
5241	2	A Linux user is first assigned to an SELinux user. Then, that user cannot switch to an SELinux role not associated with that SELinux user.	text	md
5242	1	Sensitivity labels are used to classify resources and restrict access to those resources based on a security clearance. This is often used in government and military environments where data classification is essential.	text	md
5242	2	Sensitivity labels consist of two parts: a confidentiality value (prefixed with `s`) and a category value (prefixed with `c`).	text	md
5243	1	With MLS, we can configure SELinux to follow the *Bell-LaPadula* model, a security model characterized by no read up, no write down: based on a process's clearance level, that process cannot read anything with a higher confidentiality level nor write to or communicate with any resource with a lower confidentiality level.	text	md
5244	1	SELinux does not use internal, confidential, and other labels. Instead, it uses numbers from zero as the lowest confidentiality, to whatever the system administrator has defined as the highest value.	text	md
5245	3	Multitenancy is provided by assigning a set of categories to the processes and resources of one tenant, whereas the processes and resources of another tenant get a different set of categories.	text	md
5245	4	When a process does not have the proper categories assigned, it cannot touch the resources or other processes that have other categories assigned.	text	md
5245	5	As multilevel security is not often used, the benefits of only using categories are persisted in what is called multi-category security (MCS). This is a special MLS case, which only supports a single confidentiality level (`s0`).	text	md
5246	2	By having services randomly pick two categories for a tenant out of a predefined set of categories, while ensuring each tenant has a unique combination, these services receive proper isolation. 	text	md
5246	3	In that sense, categories are like tags, allowing us to grant access only when the tags of the process and the target resource match.	text	md
5255	2	which --skip-tilde <command>	code	sh
5272	1	The prompt can always appear:	text	md
5272	3	Or it can only appear once when removing recursively:	text	md
5275	1	rmdir --ignore-fail-on-non-empty <directory>...	code	sh
5276	1	rmdir -p <directory>/...\nrmdir --parent <directory>/...	code	sh
5279	1	mkdir -p <directory>/...\nmkdir --parents <directory>/...	code	sh
5280	1	mkdir -m <role>=<permissions> <directory>...	code	sh
5284	1	man -f <command>	code	sh
5285	1	man <section> <command>	code	sh
5286	1	man --html=firefox <command>	code	sh
5287	1	man -w <command>	code	sh
5288	1	man -k <command>	code	sh
5289	1	man --locale <locale> <command>	code	sh
5290	1	man -P <pager> <command>\nman --pager <pager> <command>	code	sh
5291	1	mv <file> <file>	code	sh
5292	1	mv -n <file> <file>	code	sh
5293	1	man -f <file> <file>	code	sh
5294	1	man -i <file> <file>	code	sh
5295	1	cp <file> <file>	code	sh
5296	1	cp -r <file> <file>	code	sh
5297	1	cp -u <file> <file>	code	sh
5298	1	cd <path>	code	sh
5299	1	cd ~	code	sh
5300	1	cd /	code	sh
5301	1	cd ..	code	sh
5302	1	ls	code	sh
5303	1	ls <directory>	code	sh
5304	1	ls -lh	code	sh
5305	1	ls -lt	code	sh
5306	1	ls -lS	code	sh
5306	2	To sort the list by size in descending:	text	md
5306	3	ls -lrS	code	sh
5307	1	ls -l --group-directories-first	code	sh
5308	1	shuf <file>	code	sh
5308	2	<command> | shuf	code	sh
5309	1	shuf -i <begin>-<end>\nshuf --input-range <begin>-<end>	code	sh
5310	1	shuf -i 0-100 -n 1	code	sh
5311	1	shuf -i <begin>-<end> -n <count> -r\nshuf --input-range <begin>-<end> --head-count <count> --repeat	code	sh
5312	1	sort <file>	code	sh
5312	2	<command> | sort	code	sh
5313	1	sort -r <file>	code	sh
5313	2	<command> | sort -r	code	sh
5314	1	sort -n <file>	code	sh
5314	2	<command> | sort -n	code	sh
5315	1	sort -R <file>	code	sh
5315	2	<command> | sort -R	code	sh
5315	3	In this scenario, `shuf` is than `sort`.	text	md
5316	1	sort -k <column> <file>	code	sh
5316	2	<command> | sort -k <column>	code	sh
5317	1	In this case, `uniq` can also be used after `sort`.	text	md
5317	2	sort -u <file>	code	sh
5317	3	<command> | sort -u	code	sh
5318	1	Grep uses basic regular expressions by default.	text	md
5318	2	grep -G <pattern> <file>\ngrep <pattern> <file>	code	sh
5318	3	<command> | grep <pattern>	code	sh
5319	1	grep -E <pattern> <file>	code	sh
5319	2	<command> | grep -E <pattern>	code	sh
5320	1	grep -F <string> <file>	code	sh
5320	2	<command> | grep -F <string>	code	sh
5321	1	grep -v <pattern> <file>	code	sh
5321	2	<command> | grep -v <pattern>	code	sh
5322	1	grep -r <pattern> <directory>	code	sh
5323	1	grep -rI <pattern> <directory>	code	sh
5324	1	grep -rl <pattern> <directory>	code	sh
5325	1	grep -i <pattern> <file>	code	sh
5326	1	grep -rn <pattern> <directory>	code	sh
5327	1	grep -s <pattern> <file>	code	sh
5328	1	grep -q <pattern> <file>	code	sh
5329	1	grep -w <pattern> <file>	code	sh
5330	1	grep -x <pattern> <file>	code	sh
5331	1	grep -c <pattern> <file>	code	sh
5332	1	grep -m <limit> <pattern> <file>	code	sh
5472	2	In this module, the `ftxui::Element` is a tree structure for layout and UI. This module also provides composable and responsive elements. The `ftxui::Render` is also responsible to draw layouts onto a `ftxui::Screen`.	text	md
5333	1	Many learners are excited to get started, and can't wait to compromise their first targeted system. Some would be too eager and forget to perform an important step during a process. Hence, various penetration testing methodologies exist to help ethical hackers and penetration testers take a specific course of action during security assessments to ensure all aspects are thoroughly tested for security vulnerabilities.	text	md
5334	1	* Penetration Testing Execution Standard (PTES)\n* Payment Card Industry Data Security Standard (PCI DSS)\n* Penetration Testing Framework (PTF)\n* Technical Guide to Information Security Testing and Assessment\n* Open Source Security Testing Methodology Manual\n* OWASP Web Security Testing Guide\n* OWASP Mobile Security Testing Guide\n* OWASP Firmware Security Testing Methodology	text	md
5335	1	1. Obtain Legal Permission: obtain a written legal permission from persons in authority\n2. Rules of Engagement: define the scope of the penetration test\n3. Non-Disclosure Agreement (NDA): a legally signed agreement between client and provider that specifies that a penetration tester and their employer will not share or hold onto any sensitive or proprietary information that is encountered during assessment.\n4. Begin Penetration Testing	text	md
5336	1	Threat modeling is a process used to assist penetration testers to better understand the threats that applications are most prone to and to help them address the most common threats that a target faces.	text	md
5337	1	* **STRIDE**: Spoofing identity, tampering with data, repudiation threats, information disclosure, denial of service, and elevation of privilege\n* **PASTA**: Process for attack simulation and threat analysis	text	md
5338	1	A threat actor can impersonate the identity of a legitimate user to gain unauthorized access to a service. As a mitigation, multi-factor authentication (MFA) can be used to improve the verification process of legitimate users.	text	md
5339	1	A threat actor can intercept and alter sensitive data that is being transmitted, causing unauthorized transfer of data on behalf of victims. As a mitigation, an end-to-end encryption such as digital certificates and signatures to protect data and its integrity during transmission.	text	md
5340	1	A threat actor can perform a Denial of Service (DoS) attack on a service to deny any legitimate requests from authorized and trusted users. This would create a potential financial loss. As a mitigation technique, each user's activity should be recorded and each activity should be validated that is associated with a unique identifier, where a user cannot deny their action on a system.	text	md
1518	1	conf/layer.conf	code	sh
865	1	.config	code	sh
5341	1	Sensitive data can be exposed to unauthorized persons, either through a security vulnerability within a database or insecure APIs and implementations. As a mitigation, access controls should be used and data encryption technologies should be applied to services.	text	md
5342	1	A threat actor can flood unsolicited request messages to a system, causing the resources of the hosting server to be overwhelmed and become unavailable to process legitimate requests from authorized users. As a mitigation, intrusion prevention systems (IPS) should be applied to detect and prevent malicious network traffic.	text	md
5343	1	A threat actor may exploit a service to escalate their privileges and obtain unauthorized access to administrative areas of system. As a mitigation, implementing the principle of least privileges helps ensure that users have only the minimum level of access needed to perform their tasks. Furthermore, regular auditing of users’ privileges helps in recognizing suspicious activities.	text	md
5344	1	After a threat actors compromise targeted systems, they attempt to expand their foothold on the network by compromising additional systems and setting up backdoor access.	text	md
5344	2	After successfully detecting threads and exploiting them, reporting is one of the most important elements of any penetration test.	text	md
5356	3	Future and promises are a more elegant way of returning values from threads.	text	md
5379	1	sed -n '1,10p' <file>	code	sh
5345	1	* **White Box:** in this approach penetration tester is provided with full information about the targets, and is usually given credentials with varying degrees of access to quickly and thoroughly identify vulnerabilities.\n* **Black Box:** the most common form of penetration testing and most typical among external network penetration tests and social engineering penetration tests. Penetration testers are given very little or no information about the target.\n* **Gray Box:** penetration testers are given enough information to only reduce assessment time.	text	md
5346	1	In a vulnerability assessment, the cybersecurity professional uses a vulnerability scanner to perform authenticated and unauthenticated scans. There are downsides to using only automation tests when performing penetration tests and it is highly unethical to only report the result of vulnerability scanning tools. The most effective security assessment involves the combination of manual and automation tests.	text	md
5347	1	1. Reconnaissance\n2. Scanning and Enumeration\n3. Gaining Access\n4. Maintaining Access\n5. Covering Tracks	text	md
5347	2	---	text	md
5348	1	Metasploit is available on https://metasploit.com.	text	md
5348	2	curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb > msfinstall\nchmod u+x msfinstall\n./msfinstall	code	sh
5348	3	Once installed, the binary can be found in `/opt/metasploit-framework/bin`.	text	md
5349	1	#include <string>\n#include <thread>\n\nvoid take_value(std::string value)\n{\n}\n\nint main()\n{\n    std::string message{"big object"};\n    std::jthread worker{take_value, message};\n}	code	cpp
5350	1	#include <string>\n#include <thread>\n#include <functional>\n\nvoid take_ref(std::string &ref)\n{\n}\n\nint main()\n{\n    std::string message{"big object"};\n    std::jthread worker{take_ref, std::ref(message)};\n}	code	cpp
5351	1	#include <string>\n#include <thread>\n#include <function>\n\nvoid take_cref(std::string const& cref)\n{\n}\n\nint main()\n{\n    std::string message{"big object"};\n    std::jthread worker{take_cref, std::cref(message)};\n}	code	cpp
5352	1	#include <string>\n#include <thread>\n\nvoid take_value(std::string value)\n{\n}\n\nint main()\n{\n    std::string message{"big object"};\n    std::jthread worker{take_value, message};\n}	code	cpp
5353	1	#include <string>\n#include <thread>\n#include <functional>\n\nvoid take_ref(std::string &ref)\n{\n}\n\nint main()\n{\n    std::string message{"big object"};\n    std::jthread worker{take_ref, std::ref(message)};\n}	code	cpp
5354	1	#include <string>\n#include <thread>\n#include <function>\n\nvoid take_cref(std::string const& cref)\n{\n}\n\nint main()\n{\n    std::string message{"big object"};\n    std::jthread worker{take_cref, std::cref(message)};\n}	code	cpp
5473	1	The module `component` provides functionalities for user interaction.	text	md
5355	1	#include <string>\n#include <thread>\n#include <utility>\n\nvoid take_rvalue(std::string&& rvalue)\n{\n}\n\nint main()\n{\n    std::string message{"big object"};\n    std::jthread worker{take_rvalue, std::move(message)};\n}	code	cpp
5356	1	Threads cannot directly return values. Therefore, to take computed values from threads, we should pass an non-const lvalue as output parameter to the thread and expect a value after the thread has joined.	text	md
5356	2	#include <print>\n#include <thread>\n#include <functional>\n\ntemplate<typename T, typename R>\nvoid sum(T const& lhs, T const& rhs, R& result)\n{\n    result = lhs + rhs;\n}\n\nint main()\n{\n    long percentage{};\n    std::jthread worker{sum<long>, 42, 58, std::ref(percentage)};\n    worker.join();\n    std::println("%{}", percentage);\n}	code	cpp
5357	1	Threads can only be moved, but not copied.	text	md
5357	2	#include <thread>\n#include <chrono>\n\nvoid do_something()\n{\n    std::this_thread::sleep_for(std::chrono::seconds{3});\n}\n\nint main()\n{\n    std::jthread short_living{do_something};\n    std::jthread long_living{std::move(short_living)};\n}	code	cpp
5358	1	Joining a thread blocks the current thread while waiting for the completion of the joining thread.	text	md
5358	2	#include <thread>\n\nvoid do_something()\n{\n}\n\nint main()\n{\n    std::thread worker{do_something);\n    worker.join();\n}	code	cpp
5358	3	Because it is easy to forget joining a `std::thread`, we should instead use `std::jthread` that will automatically join when the execution reaches the end of scope.	text	md
5359	1	#include <thread>\n\nvoid do_something()\n{\n}\n\nint main()\n{\n    std::jthread worker{do_something};\n\n    if (!worker.joinable())\n    {\n        worker.join();\n    }\n}	code	cpp
5360	1	A thread must join or detach before the main thread terminates, otherwise the program will abort its execution.	text	md
5360	2	#include <thread>\n\nvoid do_something()\n{\n}\n\nint main()\n{\n    std::jthread daemon{do_something};\n    daemon.detach();\n}	code	cpp
5361	1	* When there are two coupled objects and they are directly invoking calls on the other via callbacks\n* When can also use this pattern when we want to implement undo and redo behavior\n* When we want to create a macro of multiple commands	text	md
5362	1	class Invoker {\n  - command: Command\n}\n\nclass Receiver {\n  + action()\n}\n\nabstract Command {\n  # execute()\n}\n\nclass ConcreteCommand {\n  - receiver: Receiver*\n  + execute()\n}\nnote bottom: receiver->action()\n\nInvoker <.. Receiver\nInvoker -> Command\nCommand <|-- ConcreteCommand\nReceiver <- ConcreteCommand	code	plantuml
5464	2	Similar to how humans perceive visual data, saliency module provides algorithms that can detect salient regions in static image and videos.	text	md
1013	1	build/CMakeFiles	code	sh
5363	1	#pragma once\n\n#include <Command.hpp>\n\nclass Invoker\n{\nprivate:\n    std::shared_ptr<Command> command;\npublic:\n    Invoker(std::shared_ptr<Command> command): command{command}\n    {\n    }\n\n    virtual ~Invoker() = default;\n\n    void execute()\n    {\n        command->execute();\n    }\n};	code	hpp
5363	2	#pragma once\n\n#include <iostream>\n\nclass Receiver\n{\npublic:\n    void action()\n    {\n        std::cout << "performing action" << std::endl;\n    }\n};	code	hpp
5363	3	#pragma once\n\nclass Command\n{\npublic:\n    virtual ~Command() = default;\n    virtual void execute() = 0;\n};	code	hpp
5363	4	#pragma once\n\n#include <Receiver.hpp>\n\nclass ConcreteCommand: public Command\n{\nprivate:\n    std::shared_ptr<Receiver> receiver;\npublic:\n    ConcreteCommand(std::shared_ptr<Receiver> receiver): receiver{receiver}\n    {\n    }\n\n    void execute() override\n    {\n        receiver->action();\n    }\n};	code	hpp
5363	5	#include <memory>\n#include <Invoker.hpp>\n#include <Receiver.hpp>\n#include <ConcreteCommand.hpp>\n\nint main()\n{\n    std::shared_ptr<Receiver> receiver{std::make_shared<Receiver>()};\n    std::shared_ptr<Command> command{std::make_shared<ConcreteCommand>(receiver)};\n    std::unique_ptr<Invoker> invoker{std::make_unique<Invoker>(command)};\n\n    invoker->execute();\n}	code	cpp
5364	1	Sometimes we may need to store and restore the state of an object (`Originator`) either in memory or a permanent storage, but implementing state management inside the same object violates the Single Responsibility principle.	text	md
5365	2	`Memento` does not expose the internal state of `Originator` to the public.	text	md
5365	3	The `Caretaker` will not and should not be able to modify the state of the `Memento`.	text	md
5364	2	With Memento pattern, we can give this responsibility to an external object (`Caretaker`) without exposing the internal state of the object (`Originator`) to the public interface, thus avoids violating encapsulation.	text	md
5365	1	* `Originator`: the object that we want to store its properties so that later we can restore them in order to take the object in its previous state\n* `Memento`: the object that holds the state of the `Originator`, which can be a class inside the `Originator` encapsulating all of its properties\n* `Caretaker`: the object that takes `Memento` to store and restore the state of the `Originator`.	text	md
5365	4	class Originator {\n  - property\n  # getState(): Memento*\n  # setState(memento: Memento*): void\n\n  + setProperty(property): void\n  + getProperty(): property\n}\n\nclass Memento {\n  - property\n  + friend Originator\n  + Memento()\n}\n\nclass Caretaker {\n  + store(state: Memento*): void\n  + restore(): Memento*\n}\n\nOriginator .> Memento\nMemento *.. Caretaker	code	plantuml
5365	5	`Memento` has a wide interface to the `Originator`, and a narrow interface to the `Caretaker`. Only the narrow interface should be public.	text	md
5366	1	* If the `Originator` object has a large amount of properties, storing its state with `Memento` will consumes too much memory.\n* Restricting access to `Originator` properties will make code harder to read.\n* Since `Caretaker` does not know much state the `Memento` holds, it might incur storage costs while storing `Memento`.	text	md
5367	1	#pragma once\n\n#include <string>\n#include <memory>\n#include <Memento.hpp>\n\nclass Originator\n{\npublic:\n    [[nodiscard]] std::string getText() const;\n    void setText(std::string edited);\n    [[nodiscard]] std::shared_ptr<Memento> getState() const;\n    void setState(std::weak_ptr<Memento> state);\nprivate:\n    std::string text;\n};	code	hpp
5367	2	#include <utility>\n#include <Originator.hpp>\n\nstd::string Originator::getText() const\n{\n    return text;\n}\n\nvoid Originator::setText(std::string edited)\n{\n    text = std::move(edited);\n}\n\nstd::shared_ptr<Memento> Originator::getState() const\n{\n    std::shared_ptr<Memento> state{std::make_shared<Memento>()};\n    state->text = text;\n    return state;\n}\n\nvoid Originator::setState(std::weak_ptr<Memento> state)\n{\n    if (std::shared_ptr<Memento> capturedState{state.lock()})\n    {\n        text = capturedState->text;\n    }\n}	code	cpp
5367	3	#pragma once\n\n#include <string>\n\nclass Originator;\n\nclass Memento\n{\nprivate:\n    std::string text;\n    friend Originator;\n};	code	hpp
5367	4	#pragma once\n\n#include <memory>\n#include <Memento.hpp>\n\nclass Caretaker\n{\npublic:\n    void store(std::shared_ptr<Memento> state);\n    [[nodiscard]] std::weak_ptr<Memento> restore() const;\nprivate:\n    std::shared_ptr<Memento> state;\n};	code	hpp
5367	5	#include <Caretaker.hpp>\n\nvoid Caretaker::store(std::shared_ptr<Memento> state)\n{\n    this->state = state;\n}\n\nstd::weak_ptr<Memento> Caretaker::restore() const\n{\n    return state;\n}	code	cpp
5367	6	#include <memory>\n#include <print>\n#include <Originator.hpp>\n#include <Memento.hpp>\n#include <Caretaker.hpp>\n\nint main()\n{\n    std::shared_ptr<Originator> originator{std::make_shared<Originator>()};\n    std::shared_ptr<Caretaker> caretaker{std::make_shared<Caretaker>()};\n\n    originator->setText("Initial text");\n    caretaker->store(originator->getState());\n    std::println("{}", originator->getText());\n\n    originator->setText("Edited text");\n    std::println("{}", originator->getText());\n\n    originator->setState(caretaker->restore());\n    std::println("{}", originator->getText());\n}	code	cpp
5368	1	class Context {\n  - handler: Handler*\n  + request(): bool\n}\n\nabstract Handler {\n  # {abstract} next(): Handler*\n  # {abstract} execute(): bool\n}\n\nclass ConcreteHandler {\n  + next(): Handler*\n  + execute(): bool\n}\n\nHandler <|-- ConcreteHandler\nContext o- Handler	code	plantuml
5369	1	* Decorator adds more behavior to an object at runtime, but chain of responsibility handles a request without specifying an explicit handler\n* All decorators perform actions while in chain of responsibility not all handlers may handle the request	text	md
5370	1	#pragma once\n\nclass example\n{\npublic:\n    example();\n};	code	hpp
5370	2	#include <example.hpp>\n\nexample::example() { }	code	cpp
5370	3	#include <example.hpp>\n#include <boost/system.hpp>\n\nint main()\n{\n    example object{};\n}	code	cpp
5370	4	gcc -O3 -Wall -Wextra -Werror -pedantic -I. main.cpp example.cpp -o program -l boost_system	code	sh
5371	1	constexpr double pi{3.1415};\n\ndouble pi_times(double const value)\n{\n    return value * pi;\n}	code	cpp
5372	1	#include <memory>\n\nclass Heavy { };\n\nclass Owner\n{\nprivate:\n    std::shared_ptr<Heavy> heavy;\npublic:\n    Owner(std::unique_ptr<Heavy> init): heavy{std::move(init)}\n    {\n    }\n    \n    std::weak_ptr<Heavy> getObject() const\n    {\n        return heavy;\n    }\n};\n\nint main()\n{\n    std::unique_ptr<Heavy> heavy;\n    Owner owner{std::move(heavy)};\n    std::weak_ptr<Heavy> object{owner.getObject()};\n    std::shared_ptr<Heavy> shared{object.lock()};\n    // use shared\n}	code	cpp
5373	1	sed 's/<pattern>/<substitute>/g' <file>	code	sh
5374	1	sed 's/<pattern>/<substitute>/gi' <file>	code	sh
5375	1	sed -E 's/<pattern>/<substitute>/g' <file>	code	sh
5376	1	sed -E 's/(<pattern>)/\\U\\1/g' <file>	code	sh
5377	1	sed -e '<command>' -e '<command>' ... <file>	code	sh
5378	1	sed -i '<command>' <file>	code	sh
5379	2	This command is similar to what `head` does.	text	md
5380	1	sed -n '/<pattern>/p' <file>	code	sh
5380	2	This command is similar to what `grep` does.	text	md
5381	1	sed '/<pattern>/d' <file>	code	sh
5382	1	sed -i.bak '<command>' <file>	code	sh
5382	2	The `<file>.bak` holds unchanged content of the `<file>`.	text	md
5383	1	sed '/^[[:space:]]*$/d" <file>	code	sh
5384	1	sed -i '1i <line>' <file>	code	sh
5385	1	sed -i '/<pattern>/a <line>' <file>	code	sh
5386	1	A logical backup interacts directly with the database and its running transactions. A physical backup is a copy of the underlying filesystem and the WALs so that the last known clear state of the database can be restored.	text	md
5387	1	PostgreSQL does not require a special backup permission to dump the content of a database. But, in order to restore data, the user must obtain sufficient permission to write data into tables. There are two predefined roles, `pg_read_all_data` and `pg_write_all_data`, that can be granted to the user who performs restore.	text	md
5388	1	* Performing a logical backup is simple\n* It is consistent\n* It can be restored easily\n* This method works between database versions	text	md
5392	1	* This kind of backup is much more complex to set up\n* On the other hand, physical backups will only work between the very same major versions of PostgreSQL instances and operating system architecture	text	md
5393	1	pg_dump <database> 	code	sh
5389	1	* It slows down other active concurrent transactions\n* It requires the database to keep track of the ongoing backup process without corrupting the snapshot as long as the backup is running\n* The produced backup set is consistent at the time the backup has started and data changes that occurred in the meantime might not be present in the backup	text	md
5390	1	* plain text: backup file contains SQL statements\n* directory format: backup is placed into a directory, and database objects are placed into a compressed file\n* tar format: archived version of directory format\n* custom format: PostgreSQL specific format suitable for selective restore via `pg_restore` utility	text	md
5391	1	* Physical backup requires a file-level copy of `PGDATA`, therefore it is invasive with regard to other connections and transactions\n* the restore will proceed as if the database has crashed and will redo all the transactions in order to achieve a consistent state\n* It allows for point-in-time recovery (PITR), which allows a database administrator to recover the database to any instance since the original backup	text	md
5394	1	pg_dump <database> -f <file>.sql\npg_dump <database> --file <file>.sql	code	sh
5395	1	pg_dump <database> -v\npg_dump <database> --verbose	code	sh
5396	1	Both `pg_dump` and `pg_dumpall` commands can work locally and remotely on the cluster.	text	md
5396	2	pg_dump -h <host> <database>\npg_dump --host <host> <database>	code	sh
5397	1	After restoration, the user will not be able to find any not fully qualified objects by their names.	text	md
5398	1	`pg_dump` defaults to using `COPY` to bulk load data into single tables. However, this may not compatible between across different database engines. So if your aim is to dump database content to migrate it to another engine, you should use insert backup instead:	text	md
5398	2	pg_dump --inserts <database>	code	sh
5398	3	But, the list of columns every field value maps to is still missing with this option. To make backup fully compatible:	text	md
5398	4	pg_dump --column-inserts <database>	code	sh
5399	1	pg_dump -C --column-inserts -f <database>.sql <database>\npg_dump --create --column-inserts --file <database>.sql <database>	code	sh
5400	1	In case you already have the database schema in place, and you only need the database content:	text	md
5400	2	pg_dump -s -f <database>.sql <database>\npg_dump --schema-only --file <database>.sql <database>	code	sh
5401	1	pg_dump -a -f <database>.sql <database>\npg_dump --data-only --file <database>.sql <database>	code	sh
5402	1	pg_dump -t <database>.<table> -f <database>.sql <database>\npg_dump --table <database>.<table> --file <database>.sql <database>	code	sh
5403	1	pg_dump -T <database>.<table> -f <database>.sql <database>\npg_dump --exclude-table <database>.<table> --file <database>.sql <database>	code	sh
5404	1	Compression option accepts an integer from 0 to 9 indicating compression level.	text	md
5404	2	pg_dump -f <database>.sql.gz -Z <0-9> <database>\npg_dump --file <database>.sql.gz --compress <0-9> <database>	code	sh
5405	1	pg_dump --column-inserts -f <database>.sql <database>	code	sh
5405	2	By default, `pg_dump` does not issue database creation statement. This is intentional but can be dangerous if you mistakenly import the backup into an incorrect database.	text	md
5405	3	psql -U postgres -c "drop database if exists <database>"\npsql --username postgres --command "drop database if exists <database>"	code	sh
5405	4	psql -U postgres -c "create database <database> with owner <owner>"	code	sh
5405	5	psql -U <owner> -f <database>.sql <database>	code	sh
5406	1	select pg_catalog.set_config('search_path', 'public', '"$user"', false);	code	postgres
5407	1	Plain text is the default format and can be omitted:	text	md
5407	2	pg_dump -F p -f <database>.sql <database>\npg_dump --format p --file <database>.sql <database>	code	sh
5407	3	Custom format:	text	md
5407	4	pg_dump -F c -C -f <database>.bak <database>\npg_dump --format c --create --file <database>.bak <database>	code	sh
5407	5	Directory format:	text	md
5407	6	pg_dump -F d -f <directory> <database>\npg_dump --format d --file <directory> <database>	code	sh
5407	7	Tar format:	text	md
5407	8	pg_dump -F t -f <database>.tar <database>\npg_dump --format t --file <database>.tar <database>	code	sh
5408	1	`pg_dump` will open parallel connections to the database in number equal to the parallelism, plus\none connection to rule them all, and will force every connection to dump a separate table.	text	md
5408	2	pg_dump -F d -j 2 -f <database>.sql -v <database>\npg_dump --format d --parallel 2 --file <database>.sql --verbose <database>	code	sh
5408	3	Since all the processes will dump a single table, parallel mode is only available for the directory format, where every table is stored in a separate file so that processes don’t mix their writes together.	text	md
1013	2	build/CMakeCache.txt	code	sh
5409	1	pg_restore --list <database>.bak\npg_restore --list <directory>\npg_restore --list <database>.tar	code	sh
5410	1	pg_restore -C -d postgres <database>.bak\npg_restore -C -d postgres <directory>\npg_restore -C -d postgres <database>.tar	code	sh
5410	2	The `-C` option indicates recreating database before restoring objects into it.\nThe `-d` option takes the role to connect to and issue a database creation.	text	md
5411	1	Backup will only be stored in the output file and will not be executed on the database.	text	md
5411	2	pg_restore -f <database>.sql <database>.bak	code	sh
5412	1	If you move or delete lines from the ToC, you can instruct pg_restore to change its execution:	text	md
5412	2	pg_restore -C -d postgres -L <toc>.txt <database>.bak\npg_restore -C -d postgres -L <toc>.txt <directory>\npg_restore -C -d postgres -L <toc>.txt <database>.tar	code	sh
5413	1	Unlike `pg_dump`, `pg_restore` can work in parallel for both the directory format and the custom format.	text	md
5413	2	pg_restore -C d postgres -j 2 -v <database>.bak\npg_restore -C d postgres -j 2 -v <directory>	code	sh
5414	1	`pg_dumpall` loops over all the databases available in the cluster and performs a single pg_dump on each, and then it dumps the specific objects that are at a cluster level, such as roles.	text	md
5414	2	pg_dumpall -f <cluster>.sql\npg_dumpall --file <cluster>.sql	code	sh
5415	1	#!/usr/bin/env bash\n\nbackup_root=/srv/postgres/backup\n\nreadarray databases < <(psql -U postgres -d postgres -At -c "select datname from pg_database where datname <> 'template0'")\n\nfor database in "${databases[@]}"\ndo\n    backup_directory="$backup_root/$database/$(date +%Y-%m-%d)"\n    \n    if [ ! -d "$backup_directory" ]\n    then\n        mkdir --parents "$backup_directory"\n        if pg_dump -U postgres -d "$database" -F c\n        then\n            echo "$(date +%Y-%m-%d): $database backup successful"\n        else\n            echo "$(date +%Y-%m-%d): $database backup failed"\n        fi\n    fi\ndone	code	sh
5415	2	The script can be used by crontab or systemd for scheduling.	text	md
5415	3	30 0 * * * backup-cluster.sh	code	crontab
5416	1	copy <database>.<table> to '/srv/postgres/<database>.<table>.txt';	code	postgres
5417	1	Output can be customized:	text	md
5417	2	copy <database>.<table> to '/srv/postgres/<database>.<table>.txt' with (header on, delimiter ';');	code	postgres
5417	3	But for known formats, we can use `format` option:	text	md
5417	4	copy <database>.<table> to '/srv/postgres/<database>.<table>.txt' with (format csv);	code	postgres
5440	2	A better programmatic way of checking for MLS policy is:	text	md
5418	1	copy (select * from <database>.<table> where pk % 2 = 1)\nto '/srv/postgres/<database>.<table>.txt'\nwith (format csv);	code	postgres
5419	1	create table <table>_reloaded (like <table>);	code	postgres
5419	2	copy <database>.<table> from '/srv/postgres/<database>.<table>.txt';	code	postgres
5420	1	copy <database>.<table>\nfrom '/srv/postgres/<database>.<table>.txt'\nwhere pk % 2 = 1;	code	postgres
5421	1	#!/usr/bin/env bash\n\nfor id in {1..10}\ndo\n    echo "$id,$RANDOM"\ndone	code	sh
5421	2	chmod u+x random-generator	code	sh
5421	3	copy <database>.<table>\nfrom program $code$ ./random-generator $code$\nwith (format csv);	code	postgres
5422	1	copy <database>.<table>\nto program $code$ awk '{print $2}' > /tmp/col2.txt $code$;	code	postgres
5423	1	Running `copy` requires `pg_write_server` privilege, but unprivileged users can run `\\copy` as an alternative:	text	md
5423	2	\\copy <database>.<table> to '/srv/postgres/<database>.<table>.txt' with (format csv);	code	postgres
5497	1	#include <ftxui/dom/elements.hpp>\n\nconstexpr auto content{"Flashback, for experts like you."};\n\nint main()\n{\n    ftxui::Element text{ftxui::paragraph(content)};\n}	code	cpp
5424	1	A database cluster requires both the data files contained in `PGDATA/base` and the WALs contained in `PGDATA/wal`, as well as a few other files, because they can make the cluster self-healing and recover from a crash.	text	md
5424	2	Therefore, a physical backup performs a copy of all the cluster files and then, when the restore is required, it simulates a database crash and makes the cluster self-heal with the WALs in place.	text	md
5424	3	The physical backup can be taken pretty much at every moment without impacting the database with a huge transaction.	text	md
5425	1	You cannot restore a physically backed-up cluster on a different PostgreSQL version and, you need essentially no interaction at all with the cluster during the backup phase.	text	md
5426	1	You are free to use any filesystem-specific command, such as `cp`, `scp`, `rsync`, or `tar`. But `pg_basebackup` is the specific tool shipped with PostgreSQL for physical backups.	text	md
5426	2	But essentially, there is no difference between `pg_basebackup`, because it performs a set of steps that can be performed manually by any system administrator, so the tool is a convenient and well-tested way of doing a physical backup.	text	md
5427	1	In order to do the backup, the target directory must exist, and if the database has tablespaces, every single directory for a tablespace must be remapped to another directory. The latter is required because we make a backup on the very same host, so PostgreSQL prevents directory clashes.	text	md
5428	1	In order to work properly, the cluster that needs to be cloned must be set up accordingly. Since `pg_basebackup` asks the cluster to provide the WALs, it is important that the cluster has at least two WAL Sender processes active.	text	md
5428	2	Therefore, the first step is to check that the `max_wal_senders` configuration parameter has at least the value of 2.	text	md
5428	3	grep max_wal_senders $PGDATA/postgresql.conf	code	sh
5428	4	Then we can perform a backup as follows:	text	md
5428	5	pg_basebackup -D /srv/postgres/backup -l 'Physical Backup' -v -h localhost -p 5432 -U postgres -T $PGDATA/tablespaces/ts_a=/srv/postgres/ts_a -T $PGDATA/tablespaces/ts_b=/srv/postgres/ts_b -T $PGDATA/tablespaces/ts_c=/srv/postgres/ts_c	code	sh
5428	6	The repeated `-T` flag tells PostgreSQL how to remap every single directory that is used as a tablespace.	text	md
5429	1	pg_verifybackup /srv/postgres/backup/data	code	sh
5430	1	You must be careful when starting the cloned cluster, since it could clash with the original one.	text	md
5430	2	You need to overwrite the original `PGDATA` directory with the cloned copy produced by `pg_basebackup`. This is a very risky operation because you will lose all the content of the `PGDATA` directory and replace it with the backup copy, which means the risk of errors occurring is high.	text	md
1133	1	include/linux/spinlock_types.h	code	sh
1150	1	include/linux/spinlock.h	code	sh
5430	3	For that reason, instead of performing an online restoration, the best practice is that you start a cloned cluster somewhere else in order to extract the data you need with a logical backup process and restore it only that data on the target cluster.	text	md
5430	4	pg_ctl -D /srv/postgres/backup/data/ -o '-p 5432' start	code	sh
5431	1	PITR is a technique to restore your database at a specific point in the past, and it is only possible on a physical backup.	text	md
5431	2	You should initially perform a physical backup, and then continuously store the database WAL segments locally or send to a remote backup machine, a process called *WAL archiving*. Having the physical backup and the stream of WALs, the database cluster can be instructed to replay all the transactions until the expected restore time is reached.	text	md
5431	3	PostgreSQL recycles the WALs once the modified data is safely stored on the disk; therefore, in order to get a continuous stream of WALs, you need to keep all of them. PostgreSQL provides a specific configuration setting, named `archive_command`, that can be tuned to execute an external command like `scp` to transfer WALs. `archive_command` is executed on every single WAL segment as soon as PostgreSQL has completed the WAL file and switches to a new segment.	text	md
5432	1	PITR requires some time and effort for the cluster to be restored to a given time. Moreover, if a single WAL segment is missing in the stream, the cluster will not be able to recover at all.	text	md
5433	1	Policies are first written, then compiled into modules, after which they are bundled and distributed.	text	md
5434	1	* SELinux Source Format: human-readable format\n* Reference Policy Style: extended source format used mostly by distributions\n* Common Intermediate Language (CIL): computer-readable format	text	md
5435	1	* `.te`: type enforcement rules\n* `.if`: interface and template definitions\n* `.fc`: file context expressions that assign labels to resources on the filesystem\n* `.pp`: compiled policy module	text	md
5436	1	When distributing SELinux policy modules, they are normally placed in `/usr/share/selinux`, usually within a subdirectory named after the policy store.	text	md
5437	1	When activating a module, SELinux place them in `/var/lib/selinux/mcs/active/modules`. When all modules are aggregated in a single location, the final policy binary is compiled in `/etc/selinux/targeted/policy/policy.00` or other number and loaded in memory.	text	md
5438	1	A policy store contains a single policy, and only one policy can be active on a system at any point in time.	text	md
5438	2	sestatus | grep "Loaded policy name"	code	sh
5439	1	The policy name that SELinux will use upon its next reboot is defined in the `/etc/selinux/config` file, set as `SELINUXTYPE` parameter.	text	md
5440	1	sestatus | grep 'Policy MLS status'	code	sh
5440	3	cat /sys/fs/selinux/mls	code	sh
5440	4	By which, 1 stands for enabled, and 0 otherwise.	text	md
5441	1	Policy stores are usually named `targeted`, `mcs`, `mls`, and `strict`.	text	md
5441	2	Generally, `targeted`, `mcs`, and `mls` policy stores have MLS enabled, while `strict` has that policy disabled.	text	md
5442	1	SELinux can perform any of the following actions:	text	md
5442	2	* `allow`\n* `deny`\n* `reject`	text	md
5442	3	This can be configured through `deny_unknown` value.\nTo see the state for unknown permissions:	text	md
5442	4	sestatus | grep 'Policy deny_unknown status'	code	sh
5443	1	Administrators can `handle-unknown` variable to `allow`, `deny`, or `reject` values in `/etc/selinux/semanage.conf`.	text	md
5444	1	seifo -t unconfined_t	code	sh
1734	1	#include <boost/asio.hpp>\n\nint main()\n{\n    boost::asio::ip::address_v4 address{boost::asio::ip::address_v4::from_string("127.0.0.1")};\n    boost::asio::ip::address_v6 address{boost::asio::ip::address_v6::any()};\n    boost::asio::ip::address address{boost::asio::ip::address::from_string("127.0.0.1")};\n    boost::asio::ip::port_type port{80};\n}	code	cpp
1735	3	1. Obtain the server application's IP address and port number. The IP address\n   should be specified as a string in the dot-decimal (IPv4) or hexadecimal\n   (IPv6) notation.\n2. Represent the raw IP address as an object of the `asio::ip::address`\n   class.\n3. Instantiate the object of the `asio::ip::tcp::endpoint` class from the\n   address object created in step 2 and a port number.\n4. The endpoint is ready to be used to designate the server application in\n   Boost.Asio communication related methods.	text	txt
1735	4	The server application uses an endpoint to specify a local IP address and a\nport number on which it wants to receive incoming messages from clients. If\nthere is more than one IP address on the host, the server application will\nwant to create a special endpoint representing all IP addresses at once.	text	txt
1735	5	1. Obtain the protocol port number on which the server will listen for\n   incoming requests.\n2. Create a special instance of the `asio::ip::address` object representing\n   all IP addresses available on the host running the server.\n3. Instantiate an object of the `asio::ip::tcp::endpoint` class from the\n   address object created in step 2 and a port number.\n4. The endpoint is ready to be used to specify to the operating system that\n   the server wants to listen for incoming messages on all IP addresses and a\n   particular protocol port number.	text	txt
1736	2	The IP-protocol-version-agnostic class `asio::ip::address` does not provide\nthe `any()` method. The server application must explicitly specify whether it\nwants to receive requests either on IPv4 or on IPv6 addresses by using the\nobject returned by the `any()` method of either the `asio::ip::address_v4` or\n`asio::ip::address_v6` class correspondingly.	text	txt
1736	1	#include <boost/asio.hpp>\n\nint main()\n{\n    unsigned short port{8080};\n    auto address{boost::asio::ip::address_v6::any()};\n    boost::asio::ip::tcp::endpoint endpoint{address, port};\n}	code	cpp
1737	2	#include <boost/asio.hpp>\n\nboost::asio::ip::tcp::socket{}; // active socket\nboost::asio::ip::tcp::acceptor{}; // passive socket	code	cpp
1738	4	In Boost.Asio, opening a socket means associating it with full set of\nparameters describing a specific protocol over which the socket is intended\nto be communicating. When the Boost.Asio socket object is provided with these\nparameters, it has enough information to allocate a real socket object of the\nunderlying operating system.	text	txt
1738	2	#include <boost/asio.hpp>\n\nint main()\n{\n    boost::asio::io_context service;\n    boost::asio::ip::tcp::socket socket{service};\n    boost::asio::ip::tcp protocol{boost::asio::ip::tcp::v4()};\n    socket.open(protocol);\n    socket.close();\n}	code	cpp
1739	6	#include <boost/asio.hpp>\n\nint main()\n{\n    boost::asio::io_context service;\n    boost::asio::ip::tcp::acceptor acceptor{service};\n    boost::asio::ip::tcp protocol{boost::asio::ip::tcp::v6()};\n    acceptor.open(protocol);\n    acceptor.close();\n}	code	cpp
1735	6	#include <string>\n#include <boost/asio.hpp>\n\nint main()\n{\n    boost::asio::ip::address address{boost::asio::ip::address::from_string("localhost")};\n    boost::asio::ip::port_type port{80};\n    boost::asio::ip::tcp::endpoint endpoint{address, port};\n}	code	cpp
5445	1	When a change to an object requires changing other objects as well, but we don't know how many objects need to be changed.	text	md
5446	1	abstract Subject {\n  # {abstract} attach(observer: Observer*)\n  # {abstract} detach(observer: Observer*)\n  # {abstract} notify()\n}\nnote left: notify() {\\n  for (auto observer: observers)\\n    observer->update();\\n}\n\nabstract Observer {\n  # update(): void\n}\n\nclass ConcreteSubject {\n  - property\n  + attach(observer: Observer*)\n  + detach(observer: Observer*)\n  + notify()\n}\n\nclass ConcreteObserver {\n  - subject: Subject*\n  + update(): void\n}\nnote bottom: update() {\\n  auto property = subject->getProperty();\\n}\n\nSubject <|-- ConcreteSubject\nObserver <|-- ConcreteObserver\nSubject "1" o. "n" Observer\nSubject ..o ConcreteObserver	code	plantuml
5447	1	In observer there are two objects involved. The subject and NPCs. There is a one to many connection between subject and its dependencies so that when the subject changes state, all of its dependencies are notified.	text	md
5447	2	#pragma once\n\n#include <memory>\n\nclass Subject;\n\nclass Observer\n{\npublic:\n    virtual ~Observer() = default;\n    virtual void update(std::weak_ptr<Subject> subject) = 0;\n};	code	hpp
5447	3	#pragma once\n\n#include <memory>\n#include <string>\n#include <list>\n\nclass Observer;\n\nclass Subject: public std::enable_shared_from_this<Subject>\n{\npublic:\n    Subject() = default;\n    virtual ~Subject() = default;\n    void attach(std::shared_ptr<Observer> observer);\n    void detach(std::shared_ptr<Observer> observer);\n    [[nodiscard]] std::string getValue() const noexcept;\n    void setValue(std::string value);\nprotected:\n    void notify();\nprivate:\n    std::list<std::shared_ptr<Observer>> m_observers;\n    std::string m_value;\n};	code	hpp
5447	4	#include <Subject.hpp>\n#include <Observer.hpp>\n\nvoid Subject::attach(std::shared_ptr<Observer> observer)\n{\n    m_observers.insert(m_observers.end(), observer);\n}\n\nvoid Subject::detach(std::shared_ptr<Observer> observer)\n{\n    m_observers.remove(observer);\n}\n\nvoid Subject::notify()\n{\n    for (std::shared_ptr<Observer> observer: m_observers)\n    {\n        observer->update(shared_from_this());\n    }\n}\n\nstd::string Subject::getValue() const noexcept\n{\n    return m_value;\n}\n\nvoid Subject::setValue(std::string value)\n{\n    m_value = std::move(value);\n    notify();\n}	code	cpp
5447	5	#pragma once\n\n#include <memory>\n#include <Observer.hpp>\n\nclass Subject;\n\nclass ConcreteObserver: public Observer\n{\npublic:\n    void update(std::weak_ptr<Subject> subject) override;\n};	code	hpp
5447	6	#include <print>\n#include <ConcreteObserver.hpp>\n#include <Subject.hpp>\n\nvoid ConcreteObserver::update(std::weak_ptr<Subject> subject)\n{\n    if (std::shared_ptr<Subject> s{subject.lock()})\n    {\n        std::println("ConcreteObserver: {}", s->getValue());\n    }\n}	code	cpp
5447	7	#include <Subject.hpp>\n#include <ConcreteObserver.hpp>\n\nint main()\n{\n    std::shared_ptr<Subject> subject{std::make_shared<Subject>()};\n    std::shared_ptr<Observer> observer{std::make_shared<ConcreteObserver>()};\n\n    subject->attach(observer);\n    subject->setValue("something changed");\n}	code	cpp
5448	1	#pragma once\n\n#include <memory>\n\nclass Notifier;\n\nclass Observer\n{\npublic:\n    virtual ~Observer() = default;\n    virtual void update(std::weak_ptr<Notifier> notifier) = 0;\n};	code	hpp
5448	2	#pragma once\n\n#include <memory>\n\nclass ConnectionManager;\n\nclass Notifier: public std::enable_shared_from_this<Notifier>\n{\npublic:\n    virtual ~Notifier() = default;\nprotected:\n    virtual void notify() = 0;\n};	code	hpp
5522	1	Aside from the default constructor, there are two overloaded constructors for this type. One that takes two colors as `ftxui::LinearGradient(ftxui::Color, ftxui::Color)`:	text	md
5448	3	#pragma once\n\n#include <string>\n#include <Notifier.hpp>\n\nclass ConcreteNotifier: public Notifier\n{\npublic:\n    explicit ConcreteNotifier(std::shared_ptr<ConnectionManager> manager);\n    ~ConcreteNotifier() override = default;\n\n    [[nodiscard]] std::string getValue() const noexcept;\n    void setValue(std::string value);\nprotected:\n    void notify() override;\nprivate:\n    std::shared_ptr<ConnectionManager> m_manager;\n    std::string m_value;\n};	code	hpp
5448	4	#include <ConcreteNotifier.hpp>\n#include <ConnectionManager.hpp>\n\nConcreteNotifier::ConcreteNotifier(std::shared_ptr<ConnectionManager> manager)\n    : m_manager{manager}\n{\n}\n\nvoid ConcreteNotifier::notify()\n{\n    m_manager->notify(shared_from_this());\n}\n\nstd::string ConcreteNotifier::getValue() const noexcept\n{\n    return m_value;\n}\n\nvoid ConcreteNotifier::setValue(std::string value)\n{\n    m_value = std::move(value);\n    notify();\n}	code	cpp
5448	5	#pragma once\n\n#include <memory>\n#include <unordered_map>\n#include <list>\n\nclass Notifier;\nclass Observer;\n\nclass ConnectionManager\n{\npublic:\n    void connect(std::shared_ptr<Notifier> notifier, std::shared_ptr<Observer> observer);\n    void disconnect(std::shared_ptr<Notifier> notifier, std::shared_ptr<Observer> observer);\n    void notify(std::shared_ptr<Notifier> notifier);\nprivate:\n    std::unordered_map<std::shared_ptr<Notifier>, std::list<std::shared_ptr<Observer>>> m_notifiers;\n};	code	hpp
5448	6	#include <ConnectionManager.hpp>\n#include <Notifier.hpp>\n#include <Observer.hpp>\n\nvoid ConnectionManager::connect(std::shared_ptr<Notifier> notifier, std::shared_ptr<Observer> observer)\n{\n    m_notifiers[notifier].push_back(observer);\n}\n\nvoid ConnectionManager::disconnect(std::shared_ptr<Notifier> notifier, std::shared_ptr<Observer> observer)\n{\n    m_notifiers[notifier].remove(observer);\n}\n\nvoid ConnectionManager::notify(std::shared_ptr<Notifier> notifier)\n{\n    for (std::shared_ptr<Observer> observer: m_notifiers[notifier])\n    {\n        observer->update(notifier);\n    }\n}	code	cpp
5448	7	#pragma once\n\n#include <memory>\n#include <Observer.hpp>\n\nclass Notifier;\n\nclass ConcreteObserver: public Observer\n{\npublic:\n    void update(std::weak_ptr<Notifier> notifier) override;\n};	code	hpp
5448	8	#include <print>\n#include <ConcreteObserver.hpp>\n#include <ConcreteNotifier.hpp>\n\nvoid ConcreteObserver::update(std::weak_ptr<Notifier> notifier)\n{\n    if (std::shared_ptr<Notifier> n{notifier.lock()})\n    {\n        if (std::shared_ptr<ConcreteNotifier> c{std::dynamic_pointer_cast<ConcreteNotifier>(n)})\n        {\n            std::println("ConcreteObserver: {}", c->getValue());\n        }\n    }\n}	code	cpp
5448	9	#include <ConnectionManager.hpp>\n#include <ConcreteNotifier.hpp>\n#include <ConcreteObserver.hpp>\n\nint main()\n{\n    std::shared_ptr<ConnectionManager> manager{std::make_shared<ConnectionManager>()};\n    std::shared_ptr<ConcreteNotifier> notifier{std::make_shared<ConcreteNotifier>(manager)};\n    std::shared_ptr<ConcreteObserver> observer{std::make_shared<ConcreteObserver>()};\n\n    manager->connect(notifier, observer);\n\n    notifier->setValue("something changed"); // registered observers will be notified\n}	code	cpp
5465	1	`surface_matching` module provides 3D object recognition algorithms and pose estimation algorithms to process 2D images with depth information.	text	md
5466	1	`text` module contains algorithms for text detection and recognition, commonly used for number plate recognition, recognizing road signs, book scanning, and more.	text	md
1151	1	include/linux/mutex.h	code	sh
5467	1	git clone https://github.com/opencv/opencv.git\ngit clone https://github.com/opencv/opencv-contrib.git\ncmake -S opencv -B custom-opencv-release -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local -D OPENCV_EXTRA_MODULES_PATH=$PWD/opencv-contrib/modules\ncmake --build custom-opencv-release\nsudo cmake --install custom-opencv-release	code	sh
5468	1	cmake_minimum_required(VERSION 4.0)\nproject(ComputerVision VERSION 1.0 LANGUAGES CXX)\nfind_package(OpenCV 4.0 REQUIRED COMPONENTS imgcodecs imgproc highgui)\nadd_executable(program)\ntarget_sources(program PRIVATE main.cpp)\ntarget_link_libraries(program PRIVATE opencv_imgcodecs opencv_imgproc opencv_highgui)	code	cmake
3633	1	\n\ngit clone https://github.com/opencv/opencv.git\n\ncmake -S opencv -B build-opencv-release -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=~/.local/bin -D WITH_OPENGL=ON -D WITH_OPENMP=ON -D WITH_QT=ON -D WITH_VULKAN=ON -D WITH_WAYLAND=ON\n\ncmake --build build-opencv-release --parallel 16\n\ncmake --install build-opencv-release	code	sh
1524	1	build/conf/bblayers.conf	code	sh
1546	1	build/conf/local.conf	code	sh
1548	1	build/conf/local.conf	code	sh
1556	3	<architecture>/<recipe>/<software-version>	code	sh
1557	1	build/conf/local.conf	code	sh
1561	2	build/conf/local.conf	code	sh
1578	2	build/conf/local.conf	code	sh
1605	2	build/conf/local.conf	code	sh
1609	1	build/tmp/deploy/sdk/	code	sh
1641	1	build/conf/local.conf	code	sh
3320	1	conf/distro/<distro>.conf	code	sh
3322	1	conf/distro/poky.conf	code	sh
3345	1	poky/meta/classes/rootfs_${IMAGE_FSTYPE}.bbclass	code	sh
3346	1	poky/meta/classes/image_types.bbclass	code	sh
3353	1	meta/recipes-core/packagegroups/packagegroup-core-tools-debug.bb	code	sh
3357	1	${WORKDIR}/recipe-sysroot	code	sh
3357	2	${WORKDIR}/recipe-sysroot-native	code	sh
3358	1	${WORKDIR}/sysroot-destdir	code	sh
3390	1	${BUILDDIR}/tmp/deploy/licenses/<image>/license.manifest	code	sh
3396	1	${BUILDDIR}/tmp/deploy/sdk/	code	sh
3401	3	/opt/poky/<version>/	code	sh
1491	6	- **Metadata** tool is a collection of Shell and Python scripts, and a custom\n  configuration language, informing the steps needed to build, download the\n  source code and other tasks related to a specific software application or\n  library.\n- **BitBake** is the build orchastration tool, responsible to generate, order\n  and run the tasks based on the information gathered from the metadata\n  files.	text	txt
2663	2	Use following command to check if library is built into the executable:	text	txt
2663	1	cmake_minimum_required(VERSION 3.20 FATAL_ERROR)\nproject(Sample LANGUAGES CXX)\n\nset(USE_LIBRARY OFF)\nset(BULID_SHARED_LIBS OFF)\n\nif(USE_LIBRARY)\n    add_library(message message.hpp message.cpp)\n    add_executable(program main.cpp)\n    target_link_libraries(program message)\nelse()\n    add_executable(program main.cpp ${message_files})\nendif()	code	cmake
2663	3	objdump --syms build/program	code	sh
5473	2	In this module, `ftxui::Component` represents stateful and interactive widgets, provides built-in `ftxui::Checkbox`, `ftxui::Input`, `ftxui::Menu`, and `ftxui::Button`. This module supports keyboard and cursor input and composition.	text	md
2658	1	cmake_minimum_required(VERSION 3.20 FATAL_ERROR)\nproject(Sample LANGUAGES CXX)\nadd_executable(program main.cpp)\nadd_library(message-object OBJECT message.hpp message.cpp)\nset_target_properties(message-object PROPERTIES POSITION_INDEPENDENT_CODE 1)\nadd_library(message-shared SHARED $<TARGET_OBJECTS:message-object>)\nset_target_properties(message-shared PROPERTIES OUTPUT_NAME "message")\nadd_library(message-static STATIC $<TARGET_OBJECTS:message-object>)\nset_target_properties(message-static PROPERTIES OUTPUT_NAME "message")\ntarget_link_libraries(program message-shared)	code	cmake
2657	1	cmake_minimum_required(VERSION 3.20 FATAL_ERROR)\nproject(Sample LANGUAGES CXX)\nadd_executable(program main.cpp)\nadd_library(message-shared SHARED message.hpp message.cpp)\nadd_library(message-static STATIC message.hpp message.cpp)\ntarget_link_libraries(program message-shared)	code	cmake
2653	1	cmake --build <build_dir> --target help	code	sh
2652	1	cmake --build <build_dir> --target <target>	code	sh
2664	2	cmake_minimum_required(VERSION 3.20 FATAL_ERROR)\nproject(Sample LANGUAGES CXX)\n\noption(USE_LIBRARY "Compile sources into a library" OFF)\nlist(APPEND message_files message.hpp message.cpp)\n\nif(USE_LIBRARY)\n    add_library(message ${message_files})\n    add_executable(program main.cpp)\n    target_link_libraries(program message)\nelse()\n    add_executable(program main.cpp ${message_files})\nendif()	code	cmake
2666	1	include(CMakeDependentOption)\n\ncmake_dependent_option(MAKE_STATIC_LIBRARY "Compile sources into a static library" OFF "USE_LIBRARY" ON)\ncmake_dependent_option(MAKE_SHARED_LIBRARY "Compile sources into a shared library" ON "USE_LIBRARY" ON)	code	cmake
3736	2	cmake -S ~/.local/src/project -B ~/.local/share/build-project-release	code	sh
499	1	#include <opencv2/imgproc.hpp>\n#include <opencv2/highgui.hpp>\n\nstatic constexpr auto window_name{"Original Image"};\n\ncv::Mat image = cv::imread("sample.bmp", cv::IMREAD_COLOR);\n\nif (image.empty())\n{\n    /* error handling */\n}\n\ncv::namedWindow(window_name);\ncv::imshow(window_name, image);\ncv::waitKey(0); // wait indefinitely for key press\ncv::destroyWindow(window_name);	code	cpp
500	1	#include <opencv2/imgproc.hpp>\n\ncv::Mat image = cv::imread("untouched.jpg", cv::IMREAD_COLOR);\ncv::imwrite("filename.jpg", image);	code	cpp
501	1	#include <opencv2/imgproc.hpp>\n#include <opencv2/highgui.hpp>\n\nconstexpr auto image_path{"sample.png"};\nconstexpr auto write_path{"flipped.png"};\n\nint main()\n{\n    cv::Mat image = cv::imread(image_path, cv::IMREAD_COLOR);\n    cv::Mat flipped{};\n    cv::flip(image, flipped, 1);\n    cv::imwrite(write_path, flipped);\n}	code	cpp
502	1	#include <opencv2/imgproc.hpp>\n\ncv::Mat image = cv::imread("sample.png", cv::IMREAD_COLOR);\nstd::cout << image.channels() << '\\\\n';	code	cpp
503	1	#include <iostream>\n#include <opencv2/core.hpp>\n#include <opencv2/highgui.hpp>\n#include <opencv2/imgcodecs.hpp>\n\nstatic constexpr auto image_path{"sample.png"};\nstatic constexpr auto window{"Preview"};\n\nvoid on_mouse(int event, int x, int y, int, void*)\n{\n    switch (event)\n    {\n        case cv::EVENT_LBUTTONDOWN:\n            std::cerr << '(' << x << "," << y << ')' << std::endl;\n            break;\n        case cv::EVENT_LBUTTONUP:\n        case cv::EVENT_RBUTTONDOWN:\n        case cv::EVENT_RBUTTONUP:\n        case cv::EVENT_MOUSEMOVE:\n        default:\n            break;\n    };\n}\n\nint main()\n{\n    cv::Mat image = cv::imread(image_path);\n    cv::namedWindow(window);\n    cv::setMouseCallback(window, on_mouse, reinterpret_cast<void*>(&image));\n    cv::imshow(window, image);\n    cv::waitKey(0);\n    cv::destroyWindow(window);\n}	code	cpp
504	1	#include <opencv2/core.hpp>\n#include <opencv2/imgcodecs.hpp>\n#include <opencv2/imgproc.hpp>\n#include <opencv2/highgui.hpp>\n\nstatic constexpr auto image_path{"sample.png"};\nstatic constexpr auto window{"Preview"};\n\nint main()\n{\n    cv::Mat image = cv::imread(image_path, cv::IMREAD_COLOR);\n    cv::namedWindow(window);\n    cv::Point center{670, 400};\n    int radius{200};\n    int thickness{3};\n    cv::Scalar color{0, 0, 255, 0};\n\n    cv::circle(image, center, radius, color, thickness);\n    cv::imshow(window, image);\n    cv::waitKey(0);\n    cv::destroyWindow(window);\n}	code	cpp
505	1	#include <opencv2/core.hpp>\n#include <opencv2/imgcodecs.hpp>\n#include <opencv2/imgproc.hpp>\n#include <opencv2/highgui.hpp>\n\nstatic constexpr auto image_path{"sample.png"};\nstatic constexpr auto window{"Preview"};\n\nint main()\n{\n    cv::Mat image = cv::imread(image_path, cv::IMREAD_COLOR);\n    cv::namedWindow(window);\n    cv::Point topleft{500, 200};\n    cv::Point bottomright{800, 600};\n    int thickness{2};\n    cv::Scalar color{0, 0, 255, 0};\n\n    cv::rectangle(image, topleft, bottomright, color, thickness);\n    cv::imshow(window, image);\n    cv::waitKey(0);\n    cv::destroyWindow(window);\n}	code	cpp
506	1	#include <opencv2/core.hpp>\n#include <opencv2/imgcodecs.hpp>\n#include <opencv2/imgproc.hpp>\n#include <opencv2/highgui.hpp>\n\nstatic constexpr auto image_path{"sample.png"};\nstatic constexpr auto window{"Preview"};\nstatic constexpr auto name{"Object"};\n\nint main()\n{\n    cv::Mat image = cv::imread(image_path, cv::IMREAD_COLOR);\n    cv::namedWindow(window);\n    cv::Point topleft{500, 200};\n    cv::Point bottomright{800, 600};\n    int thickness{2};\n    cv::Scalar color{0, 0, 255, 0};\n    double scale{2.0};\n\n    cv::rectangle(image, topleft, bottomright, color, thickness);\n    cv::putText(image, name, position, cv::FONT_HERSHEY_PLAIN, scale, color, thickness);\n    cv::imshow(window, image);\n    cv::waitKey(0);\n    cv::destroyWindow(window);\n}	code	cpp
507	2	`CV_8U`: 1-byte pixel image with a single channel.\n`CV_8UC3`: 1-byte pixel image with 3 channels.\n`CV_16SC3`: 2-byte pixel image with 3 channels.\n`CV_32F`: 4-byte floating point pixel image.	text	txt
507	3	#include <opencv2/core.hpp>\n\nint main()\n{\n    cv::Mat image{cv::Size{500, 500}, CV_8U, cv::Scalar{50, 50, 50}}; // gray single channel\n}	code	cpp
508	1	#include <opencv2/core.hpp>\n\nint main()\n{\n    cv::Mat image{cv::Size{500, 500}, CV_8U, cv::Scalar{50, 50, 50}}; // gray single channel\n    image.create(cv::Size{800, 800}, CV_8UC3, cv::Scalar{0, 0, 255}); // colored 3 channel\n}	code	cpp
509	1	#include <opencv2/core.hpp>\n\nint main()\n{\n    cv::Mat image{cv::Size{500, 500}, CV_8U, cv::Scalar{50, 50, 50}}; // gray single channel\n    cv::Mat copied{image.clone()};\n    image.copyTo(copied);\n}	code	cpp
510	1	#include <opencv2/core.hpp>\n#include <opencv2/imgproc.hpp>\n\ncv::Mat colored{cv::Size{500, 500}, CV_8UC3, cv::Scalar{50, 50, 50}};\ncv::Mat gray{cv::Size{500, 500}, CV_8U, cv::Scalar{50}};\ncolored.convertTo(gray, CV_8U);	code	cpp
511	1	#include <opencv2/core.hpp>\n#include <opencv2/imgproc.hpp>\n\nint main()\n{\n    cv::Mat background{cv::Size{500, 500}, CV_8UC3, cv::Scalar{0, 0, 0}};\n    cv::Mat foreground{cv::Size{50, 50}, CV_8UC3, cv::Scalar{0, 0, 255}};\n    cv::Rect frame{\n        background.cols - foreground.cols,\n        background.rows - foreground.rows,\n        foreground.cols,\n        foreground.rows};\n    cv::Mat region{background, frame};\n    foreground.copyTo(region);\n}	code	cpp
5474	1	#include <ftxui/screen/screen.hpp>\n\nint main()\n{\n    ftxui::Dimension size{ftxui::Dimension::Full()};\n}	code	cpp
5522	2	#include <ftxui/dom/elements.hpp>\n\nint main()\n{\n    ftxui::LinearGradient gradient{ftxui::Color::Black, ftxui::Color::Red};\n}	code	cpp
512	1	#include <opencv2/core.hpp>\n#include <opencv2/imgproc.hpp>\n\nint main()\n{\n    cv::Mat background{cv::Size{500, 500}, CV_8UC3, cv::Scalar{0, 0, 0}};\n    cv::Mat foreground{cv::Size{50, 50}, CV_8UC3, cv::Scalar{0, 0, 255}};\n    cv::Mat region{\n        cv::Range{background.rows - foreground.rows, background.rows},\n        cv::Range{background.cols - foreground.cols, background.cols}\n    };\n    cv::Mat region{background, frame};\n    foreground.copyTo(region);\n}	code	cpp
5475	1	#include <ftxui/screen/screen.hpp>\n\nint main()\n{\n    ftxui::Dimension size{ftxui::Dimension::Fixed(5)};\n}	code	cpp
5478	1	* Default terminal color by `ftxui::Color::Default`\n* Palette 16 colors by `ftxui::Color::<Color>`:\n  * `ftxui::Color::Black`\n  * `ftxui::Color::Red`\n  * `ftxui::Color::Green`\n  * `ftxui::Color::Yellow`\n  * `ftxui::Color::Blue`\n  * `ftxui::Color::Magenta`\n  * `ftxui::Color::Cyan`\n  * `ftxui::Color::GrayLight`\n  * `ftxui::Color::GrayDark`\n  * `ftxui::Color::RedLight`\n  * `ftxui::Color::GreenLight`\n  * `ftxui::Color::YellowLight`\n  * `ftxui::Color::BlueLight`\n  * `ftxui::Color::MagentaLight`\n  * `ftxui::Color::CyanLight`\n  * `ftxui::Color::White`\n* Palette 256 colors by `ftxui::Color::<Palette>`:\n  * `ftxui::Color::CadetBlue`\n  * `ftxui::Color::Tan`\n  * `ftxui::Color::Violet`\n  * `ftxui::Color::BlueViolet`\n  * `ftxui::Color::DarkViolet`\n  * `ftxui::Color::DarkBlue`\n  * `ftxui::Color::LightGreen`\n  * `ftxui::Color::DarkGreen`\n  * `ftxui::Color::DarkSeaGreen`\n  * `ftxui::Color::DarkKhaki`\n  * `ftxui::Color::DarkMagenta`\n  * `ftxui::Color::DarkOrange`\n  * `ftxui::Color::DarkRed`\n  * `ftxui::Color::HotPink`\n  * `ftxui::Color::MediumOrchid`\n  * ...\n* RGB color space by `ftxui::Color::RGB(uint8_t red, uint8_t green, uint8_t blue)`\n* RGBA color space by `ftxui::Color::RGBA(uint8_t red, uint8_t green, uint8_t blue, uint8_t alpha)`\n* HSV color space by `ftxui::Color::HSV(uint8_t hue, uint8_t saturation, uint8_t value)`\n* HSVA color space by `ftxui::Color::HSVA(uint8_t hue, uint8_t saturation, uint8_t value, uint8_t alpha)`\n* Interpolate by `ftxui::Color::Interpolate(float t, Color a, Color b)`\n* Blend two colors using alpha channel by `ftxui::Color::Blend(Color lhs, Color rhs)`	text	md
5481	1	The `ftxui::Screen` type provides two overloaded constructors. When one `ftxui::Dimensions` type is passed, it sets both width and height of the screen. When two dimensions given, the first represents the width and the second represents the height of screen.	text	md
5484	3	#include <ftxui/screen/screen.hpp>\n#include <ftxui/screen/color.hpp>\n\nint main()\n{\n    ftxui::Screen screen{ftxui::Screen::Create(ftxui::Dimension::Full(), ftxui::Dimension::Fixed(10))};\n    ftxui::Pixel& pixel = screen.PixelAt(10, 5);\n    pixel.character = U'X';\n    screen.Print();\n}	code	cpp
5485	1	#include <ftxui/screen/screen.hpp>\n#include <ftxui/screen/color.hpp>\n\nint main()\n{\n    ftxui::Screen screen{ftxui::Screen::Create(ftxui::Dimension::Full(), ftxui::Dimension::Fixed(10))};\n    ftxui::Pixel& pixel = screen.PixelAt(10, 5);\n    pixel.character = U'X';\n    pixel.foreground_color = ftxui::Color::Black;\n    pixel.background_color = ftxui::Color::RGB(255, 0, 0);\n    pixel.bold = true;\n    screen.Print();\n}	code	cpp
5486	1	#include <ftxui/screen/screen.hpp>\n#include <ftxui/screen/color.hpp>\n\nint main()\n{\n    ftxui::Screen screen{ftxui::Screen::Create(ftxui::Dimension::Full(), ftxui::Dimension::Fixed(10))};\n    screen.at(10, 5) = U'X';\n    screen.Print();\n}	code	cpp
5487	1	#include <ftxui/screen/screen.hpp>\n#include <ftxui/screen/color.hpp>\n\nint main()\n{\n    ftxui::Screen screen{ftxui::Screen::Create(ftxui::Dimension::Full(), ftxui::Dimension::Fixed(10))};\n    screen.RegisterHyperlink("https://flashback.eu.com");\n    screen.Print();\n}	code	cpp
5489	1	#include <ftxui/screen/screen.hpp>\n#include <ftxui/screen/color.hpp>\n#include <iostream>\n#include <iomanip>\n#include <thread>\n#include <chrono>\n\nvoid refresh(ftxui::Screen& screen)\n{\n    while (true)\n    {\n        ftxui::Pixel& pixel{screen.PixelAt(10, 0)};\n        pixel.character = U'X';\n        std::cout << screen.ResetPosition(true);\n        std::cout << screen.ToString();\n        std::flush(std::cout);\n        std::this_thread::sleep_for(std::chrono::milliseconds{300});\n    }\n}\n\nint main()\n{\n    ftxui::Screen screen{ftxui::Screen::Create(ftxui::Dimension::Full(), ftxui::Dimension::Fixed(1))};\n    refresh(screen);\n}	code	cpp
5491	1	#include <ftxui/screen/screen.hpp>\n#include <ftxui/dom/elements.hpp>\n\nint main()\n{\n    ftxui::Element content{ftxui::text("Flashback, for experts like you.")};\n    ftxui::Screen screen{ftxui::Screen::Create(ftxui::Dimension::Full(), ftxui::Dimension::Fit(content))};\n    ftxui::Render(screen, content);\n    screen.Print();\n}	code	cpp
5496	1	`ftxui::paragraph` is similar to `ftxui::text` but the paragraph wraps along multiple lines depending on the width of its container, while `ftxui::text` splits when space is not enough.	text	md
5498	1	#include <ftxui/dom/elements.hpp>\n\nconstexpr auto content{"Flashback, for experts like you."};\n\nint main()\n{\n    ftxui::Element leftAligned{ftxui::paragraphAlignLeft(content)};\n    ftxui::Element rightAligned{ftxui::paragraphAlignRight(content)};\n    ftxui::Element centered{ftxui::paragraphAlignCenter(content)};\n    ftxui::Element justified{ftxui::paragraphAlignJustify(content)};\n}	code	cpp
5499	2	#include <ftxui/screen/screen.hpp>\n#include <ftxui/dom/elements.hpp>\n\nconstexpr auto content{"Flashback, for experts like you."};\n\nint main()\n{\n    ftxui::Element paragraph{ftxui::paragraph(content) | ftxui::border};\n    ftxui::Screen screen{ftxui::Screen::Create(ftxui::Dimension::Fit(paragraph))};\n    ftxui::Render(screen, paragraph);\n    screen.Print();\n}	code	cpp
5500	2	#include <ftxui/screen/screen.hpp>\n#include <ftxui/dom/elements.hpp>\n\nconstexpr auto content{"Flashback, for experts like you."};\n\nint main()\n{\n    ftxui::Element paragraph{ftxui::paragraph(content) | ftxui::borderLight};\n    ftxui::Screen screen{ftxui::Screen::Create(ftxui::Dimension::Fit(paragraph))};\n    ftxui::Render(screen, paragraph);\n    screen.Print();\n}	code	cpp
5501	2	#include <ftxui/screen/screen.hpp>\n#include <ftxui/dom/elements.hpp>\n\nconstexpr auto content{"Flashback, for experts like you."};\n\nint main()\n{\n    ftxui::Element paragraph{ftxui::paragraph(content) | ftxui::borderDashed};\n    ftxui::Screen screen{ftxui::Screen::Create(ftxui::Dimension::Fit(paragraph))};\n    ftxui::Render(screen, paragraph);\n    screen.Print();\n}	code	cpp
5502	2	#include <ftxui/screen/screen.hpp>\n#include <ftxui/dom/elements.hpp>\n\nconstexpr auto content{"Flashback, for experts like you."};\n\nint main()\n{\n    ftxui::Element paragraph{ftxui::paragraph(content) | ftxui::borderHeavy};\n    ftxui::Screen screen{ftxui::Screen::Create(ftxui::Dimension::Fit(paragraph))};\n    ftxui::Render(screen, paragraph);\n    screen.Print();\n}	code	cpp
5503	2	#include <ftxui/screen/screen.hpp>\n#include <ftxui/dom/elements.hpp>\n\nconstexpr auto content{"Flashback, for experts like you."};\n\nint main()\n{\n    ftxui::Element paragraph{ftxui::paragraph(content) | ftxui::borderHeavy};\n    ftxui::Screen screen{ftxui::Screen::Create(ftxui::Dimension::Fit(paragraph))};\n    ftxui::Render(screen, paragraph);\n    screen.Print();\n}	code	cpp
5506	2	#include <ftxui/dom/elements.hpp>\n\nconstexpr auto content{"Flashback, for experts like you."};\n\nint main()\n{\n    ftxui::Element paragraph{ftxui::window("header", ftxui::paragraph(content))};\n    ftxui::Element paragraph{ftxui::paragraph(content) | ftxui::window("header")};\n}	code	cpp
5504	2	#include <ftxui/screen/screen.hpp>\n#include <ftxui/dom/elements.hpp>\n\nconstexpr auto content{"Flashback, for experts like you."};\n\nint main()\n{\n    ftxui::Element paragraph{ftxui::paragraph(content) | ftxui::borderEmpty | ftxui::border};\n    ftxui::Screen screen{ftxui::Screen::Create(ftxui::Dimension::Fit(paragraph))};\n    ftxui::Render(screen, paragraph);\n    screen.Print();\n}	code	cpp
5505	2	#include <ftxui/screen/screen.hpp>\n#include <ftxui/dom/elements.hpp>\n\nconstexpr auto content{"Flashback, for experts like you."};\n\nint main()\n{\n    ftxui::Pixel borderStyle{};\n    borderStyle.character = "x";\n    ftxui::Element paragraph{ftxui::paragraph(content) | ftxui::borderWith(borderStyle)};\n    ftxui::Screen screen{ftxui::Screen::Create(ftxui::Dimension::Fit(paragraph))};\n    ftxui::Render(screen, paragraph);\n    screen.Print();\n}	code	cpp
5507	3	#include <ftxui/screen/screen.hpp>\n#include <ftxui/dom/elements.hpp>\n\nint main()\n{\n    ftxui::Element group{\n        ftxui::border(\n            ftxui::hbox(\n                ftxui::text("Left"),\n                ftxui::separator(),\n                ftxui::text("Right")\n            )\n        )\n    };\n    ftxui::Screen screen(ftxui::Screen::Create(ftxui::Dimension::Full(), ftxui::Dimension::Fit(group)));\n    ftxui::Render(screen, group);\n    screen.Print();\n}	code	cpp
5508	1	#include <ftxui/screen/screen.hpp>\n#include <ftxui/dom/elements.hpp>\n\nint main()\n{\n    ftxui::Element group{\n        ftxui::border(\n            ftxui::hbox(\n                ftxui::text("Left"),\n                ftxui::separatorHeavy(),\n                ftxui::text("Right")\n            )\n        )\n    };\n    ftxui::Screen screen(ftxui::Screen::Create(ftxui::Dimension::Full(), ftxui::Dimension::Fit(group)));\n    ftxui::Render(screen, group);\n    screen.Print();\n}	code	cpp
5509	1	#include <ftxui/screen/screen.hpp>\n#include <ftxui/dom/elements.hpp>\n\nint main()\n{\n    ftxui::Element group{\n        ftxui::border(\n            ftxui::hbox(\n                ftxui::text("Left"),\n                ftxui::separatorDouble(),\n                ftxui::text("Right")\n            )\n        )\n    };\n    ftxui::Screen screen(ftxui::Screen::Create(ftxui::Dimension::Full(), ftxui::Dimension::Fit(group)));\n    ftxui::Render(screen, group);\n    screen.Print();\n}	code	cpp
5510	1	#include <ftxui/screen/screen.hpp>\n#include <ftxui/dom/elements.hpp>\n\nint main()\n{\n    ftxui::Element group{\n        ftxui::border(\n            ftxui::hbox(\n                ftxui::text("Left"),\n                ftxui::separatorEmpty(),\n                ftxui::text("Right")\n            )\n        )\n    };\n    ftxui::Screen screen(ftxui::Screen::Create(ftxui::Dimension::Full(), ftxui::Dimension::Fit(group)));\n    ftxui::Render(screen, group);\n    screen.Print();\n}	code	cpp
5511	1	#include <ftxui/screen/screen.hpp>\n#include <ftxui/dom/elements.hpp>\n\nint main()\n{\n    ftxui::Element group{\n        ftxui::border(\n            ftxui::hbox(\n                ftxui::text("Left"),\n                ftxui::separatorStyled(ftxui::BorderStyle{ftxui::ROUND}),\n                ftxui::text("Right")\n            )\n        )\n    };\n    ftxui::Screen screen(ftxui::Screen::Create(ftxui::Dimension::Full(), ftxui::Dimension::Fit(group)));\n    ftxui::Render(screen, group);\n    screen.Print();\n}	code	cpp
5512	1	#include <ftxui/screen/screen.hpp>\n#include <ftxui/dom/elements.hpp>\n\nint main()\n{\n    ftxui::Element group{\n        ftxui::border(\n            ftxui::hbox(\n                ftxui::text("Left"),\n                ftxui::separatorCharacter(" - "),\n                ftxui::text("Right")\n            )\n        )\n    };\n    ftxui::Screen screen(ftxui::Screen::Create(ftxui::Dimension::Full(), ftxui::Dimension::Fit(group)));\n    ftxui::Render(screen, group);\n    screen.Print();\n}	code	cpp
5513	1	#include <ftxui/screen/screen.hpp>\n#include <ftxui/dom/elements.hpp>\n\nint main()\n{\n    ftxui::Element group{\n        ftxui::border(\n            ftxui::hbox(\n                ftxui::text("Left"),\n                ftxui::separatorVSelector(1.0, 1.0, ftxui::Color::Red, ftxui::Color::Default),\n                ftxui::text("Right")\n            )\n        )\n    };\n    ftxui::Screen screen(ftxui::Screen::Create(ftxui::Dimension::Full(), ftxui::Dimension::Fit(group)));\n    ftxui::Render(screen, group);\n    screen.Print();\n}	code	cpp
5514	1	#include <ftxui/screen/screen.hpp>\n#include <ftxui/dom/elements.hpp>\n\nint main()\n{\n    ftxui::Element bar{ftxui::gauge(0.5)};\n    ftxui::Screen screen(ftxui::Screen::Create(ftxui::Dimension::Full(), ftxui::Dimension::Fit(bar)));\n    ftxui::Render(screen, bar);\n    screen.Print();\n}	code	cpp
5515	1	#include <ftxui/screen/screen.hpp>\n#include <ftxui/dom/elements.hpp>\n\nint main()\n{\n    ftxui::Element bar{ftxui::gaugeRight(0.5)};\n    ftxui::Screen screen(ftxui::Screen::Create(ftxui::Dimension::Full(), ftxui::Dimension::Fit(bar)));\n    ftxui::Render(screen, bar);\n    screen.Print();\n}	code	cpp
5516	1	#include <ftxui/screen/screen.hpp>\n#include <ftxui/dom/elements.hpp>\n\nint main()\n{\n    ftxui::Element bar{ftxui::gaugeLeft(0.5)};\n    ftxui::Screen screen(ftxui::Screen::Create(ftxui::Dimension::Full(), ftxui::Dimension::Fit(bar)));\n    ftxui::Render(screen, bar);\n    screen.Print();\n}	code	cpp
5517	1	#include <ftxui/screen/screen.hpp>\n#include <ftxui/dom/elements.hpp>\n\nint main()\n{\n    ftxui::Element bar{ftxui::gaugeUp(0.5)};\n    ftxui::Screen screen(ftxui::Screen::Create(ftxui::Dimension::Full(), ftxui::Dimension::Fit(bar)));\n    ftxui::Render(screen, bar);\n    screen.Print();\n}	code	cpp
5518	1	#include <ftxui/screen/screen.hpp>\n#include <ftxui/dom/elements.hpp>\n\nint main()\n{\n    ftxui::Element bar{ftxui::gaugeDown(0.5)};\n    ftxui::Screen screen(ftxui::Screen::Create(ftxui::Dimension::Full(), ftxui::Dimension::Fit(bar)));\n    ftxui::Render(screen, bar);\n    screen.Print();\n}	code	cpp
5519	1	#include <ftxui/screen/screen.hpp>\n#include <ftxui/dom/elements.hpp>\n\nint main()\n{\n    ftxui::Element bar{ftxui::gaugeDirection(0.5, ftxui::GaugeDirection::Right)};\n    ftxui::Screen screen(ftxui::Screen::Create(ftxui::Dimension::Full(), ftxui::Dimension::Fit(bar)));\n    ftxui::Render(screen, bar);\n    screen.Print();\n}	code	cpp
5521	2	#include <ftxui/dom/elements.hpp>\n#include <ftxui/screen/color.hpp>\n\nint main()\n{\n    ftxui::Element text{ftxui::text("Flashback, for experts like you.")};\n    text |= ftxui::color(ftxui::Color::White};\n    text |= ftxui::bgcolor(ftxui::Color::Black};\n}	code	cpp
5522	3	And one that takes an angle and two colors as `ftxui::LinearGradient(float, ftxui::Color, ftxui::Color)`:	text	md
5523	1	#include <ftxui/dom/elements.hpp>\n\nint main()\n{\n    ftxui::LinearGradient gradient{ftxui::LinearGradient().Angle(45.0).Stop(ftxui::Color::Red, 0.0).Stop(ftxui::Color::Black, 1.0)};\n}	code	cpp
5529	1	#include <ftxui/dom/elements.hpp>\n\nint main()\n{\n    ftxui::Element text{ftxui::text("Flashback, for experts like you")};\n    ftxui::underline(text);\n}	code	cpp
5530	1	#include <ftxui/dom/elements.hpp>\n\nint main()\n{\n    ftxui::Element text{ftxui::text("Flashback, for experts like you")};\n    ftxui::underlineDouble(text);\n}	code	cpp
5531	1	#include <ftxui/dom/elements.hpp>\n\nint main()\n{\n    ftxui::Element text{ftxui::text("Flashback, for experts like you")};\n    ftxui::strikethrough(text);\n}	code	cpp
5520	1	#include <ftxui/dom/elements.hpp>\n#include <ftxui/dom/node.hpp>\n#include <ftxui/screen/screen.hpp>\n#include <ftxui/screen/color.hpp>\n#include <functional>\n#include <iostream>\n#include <utility>\n#include <vector>\n#include <chrono>\n#include <string>\n#include <thread>\n#include <cmath>\n\nclass Graph\n{\npublic:\n    std::vector<int> operator()(int width, int height) const\n    {\n        std::vector<int> output(width);\n        for (int i = 0; i < width; ++i)\n        {\n            float v = 0;\n            v += 0.5f * sin((i + shift) * 0.2f);\n            v *= height;\n            v += 0.5f * height;\n            output[i] = static_cast<int>(v);\n        }\n        return output;\n    }\n    int operator ++() { return shift++; }\n    void operator ++(int) { ++shift; }\n    int shift = 0;\n};\n\nstd::vector<int> triangle(int width, int height)\n{\n    std::vector<int> output(width);\n\n    for (int i = 0; i < width; ++i)\n    {\n        output[i] = i % (height - 4) + 2;\n    }\n    return output;\n}\n\nint main() {\n    Graph my_graph;\n\n    for (int i = 0;; ++i)\n    {\n        std::ignore = i;\n        auto document{ftxui::graph(std::ref(my_graph))};\n\n        document |= ftxui::border;\n\n        const int min_width = 40;\n        document |= ftxui::size(ftxui::HEIGHT, ftxui::GREATER_THAN, min_width);\n\n        auto screen = ftxui::Screen::Create(ftxui::Dimension::Full(), ftxui::Dimension::Fixed(10));\n        ftxui::Render(screen, document);\n        std::cout << screen.ResetPosition() << screen.ToString() << std::flush;\n\n        const auto sleep_time = std::chrono::seconds{1};\n        std::this_thread::sleep_for(sleep_time);\n        my_graph++;\n    }\n}	code	cpp
5524	1	#include <ftxui/screen/screen.hpp>\n#include <ftxui/dom/elements.hpp>\n#include <iostream>\n\nint main()\n{\n    ftxui::LinearGradient gradient{ftxui::LinearGradient().Angle(0.0).Stop(ftxui::Color::Black, 0.0).Stop(ftxui::Color::Red, 0.5).Stop(ftxui::Color::Black, 1.0)};\n    ftxui::Element title{ftxui::text("Flashback, for experts like you")};\n    ftxui::Element document{title | ftxui::color(ftxui::Color::Default) | ftxui::border | ftxui::color(gradient)};\n    ftxui::Screen screen{ftxui::Screen::Create(ftxui::Dimension::Fit(document))};\n    ftxui::Render(screen, document);\n    std::cout << screen.ResetPosition(true) << screen.ToString() << std::endl;\n}	code	cpp
5532	1	#include <ftxui/dom/elements.hpp>\n\nint main()\n{\n    ftxui::Element text{ftxui::text("Flashback, for experts like you")};\n    ftxui::blink(text);\n}	code	cpp
5533	1	#include <ftxui/dom/elements.hpp>\n\nint main()\n{\n    ftxui::Element document{\n        ftxui::hbox(\n            ftxui::text("left"),\n            ftxui::text("right")\n        ) | ftxui::border\n    };\n}	code	cpp
5534	1	#include <ftxui/dom/elements.hpp>\n\nint main()\n{\n    ftxui::Element document{\n        ftxui::vbox(\n            ftxui::text("top"),\n            ftxui::text("bottom")\n        ) | ftxui::border\n    };\n}	code	cpp
5536	1	#include <ftxui/dom/elements.hpp>\n\nint main()\n{\n    ftxui::Element document{\n        ftxui::vbox(\n            ftxui::text("top"),\n            ftxui::filler(),\n            ftxui::text("bottom")\n        ) | ftxui::border\n    };\n}	code	cpp
5537	1	#include <ftxui/dom/elements.hpp>\n#include <ftxui/screen/screen.hpp>\n\nint main()\n{\n    ftxui::Screen screen{ftxui::Screen::Create(ftxui::Dimension::Fixed(50), ftxui::Dimension::Fixed(10))};\n    ftxui::Element document{\n        ftxui::vbox(\n            ftxui::hbox(ftxui::text("north-west"), ftxui::filler(), ftxui::text("north-east")),\n            ftxui::filler(),\n            ftxui::hbox(ftxui::filler(), ftxui::text("center"), ftxui::filler()),\n            ftxui::filler(),\n            ftxui::hbox(ftxui::text("south-west"), ftxui::filler(), ftxui::text("south-east"))\n        ) | ftxui::border\n    };\n    ftxui::Render(screen, document);\n    screen.Print();\n}	code	cpp
5549	1	#include <ftxui/screen/screen.hpp>\n#include <ftxui/dom/elements.hpp>\n#include <ftxui/component/component.hpp>\n\nint main()\n{\n    ftxui::Screen screen{ftxui::ScreenInteractive::TerminalOutput()};\n    ftxui::Renderer renderer{[] { return ftxui::text("Flashback"); }};\n    ftxui::CatchEvent component{renderer, [&](ftxui::Event event) {\n        if (event == ftxui::Event::Character('q'))\n        {\n            screen.ExitLoopClosure()();\n            return true;\n        }\n        return false;\n    }};\n    screen.Loop(component);\n}	code	cpp
5550	2	bool show = true;\nftxui::Renderer renderer{[] { return "Hello World!"; }};\nftxui::Element component{ftxui::Maybe(renderer, &show)};	code	cpp
5550	3	ftxui::Renderer renderer{[] { return "Hello World!"; }};\nftxui::Element component{ftxui::Maybe(renderer, [&] { return time > 10; })};	code	cpp
5551	1	This is useful for visual elements whose visibility can be toggled on or off by the user. Essentially, this is the combination of the `ftxui::Checkbox()` and `ftxui::Maybe()` components.	text	md
5559	1	#include <ftxui/screen.hpp>\n#include <ftxui/component.hpp>\n\nint main()\n{\n    ftxui::ScreenInteractive screen{ftxui::ScreenInteractive::FullScreen()};\n    screen.HandlePipedInput(true); // enabled by default\n    screen.Loop(component);\n}	code	cpp
\.


--
-- Data for Name: blocks_activities; Type: TABLE DATA; Schema: flashback; Owner: flashback
--

COPY flashback.blocks_activities (id, "user", card, action, "time", "position") FROM stdin;
\.


--
-- Data for Name: card_position; Type: TABLE DATA; Schema: flashback; Owner: flashback
--

COPY flashback.card_position ("coalesce") FROM stdin;
2
\.


--
-- Data for Name: cards; Type: TABLE DATA; Schema: flashback; Owner: flashback
--

COPY flashback.cards (id, heading, state) FROM stdin;
1	Use formatted messages in static assertion?	draft
2	Delete a function with giving reasons for it?	draft
3	Create a break point in code?	draft
4	Check if debugger is running the program?	draft
5	Use a name placeholder where naming an object is not necessary?	draft
6	Declare a structured binding as a condition?	draft
7	Apply attributes to members of structured bindings?	draft
8	Take a real and imaginary values from a complex?	draft
27	What are the main three components of the GNU toolchains?	draft
28	What components are used in the tuple used to prefixed in GNU toolchains?	draft
51	Build and install GNU Autotools?	draft
72	What is the first required action to aquire appropriate kernel source either for kernel development or embedded use?	draft
73	What is an appropriate path to keep track of kernel release changes?	draft
75	What is the name of the kernel configuration mechanism and how can it be used?	draft
76	What are possible values to the <code>ARCH</code> environment variable using in building the kernel source?	draft
78	What types can each <code>config</code> have in a <code>Kconfig</code> menu?	draft
79	What construct can be used to express dependencies or reverse dependencies for a <code>config</code> in a <code>Kconfig</code> menu?	draft
34	Inspect the configuration details of crosstool-ng targets?	review
33	Print the list of crosstool-ng sample configurations?	review
35	Build a cross-toolchain for Raspberry Pi Zero?	review
36	Build a cross-toolchain for BeagleBone Black?	review
37	Build a cross-toolchain for QEMU?	review
39	Override the default processor configuration options using GCC compiler?	review
40	List available architecture specific options in a project source tree using GCC compiler?	review
41	Print the <code>sysroot</code> path using GCC compiler?	review
43	Print the linked libraries of an executable using GNU toolchains?	review
44	Print the runtime linker used for an executable using GNU toolchains?	review
45	Compile by linking libraries statically using GNU GCC compiler?	review
46	Where are static libraries located in <code>sysroot</code> directory used by GNU toolchains?	review
47	Use GNU toolchains to create a static library containing two executable objects compiled from C source files?	review
48	Use GNU toolchains to create a shared library containing two executable objects compiled from C source files?	review
49	Use GNU cross-toolchains to print the <code>SONAME</code> of a shared library?	review
50	Use GNU toolchains to cross-compile for a specific target?	review
52	Override the toolchain in an autotools compatible project?	review
53	Use <code>crosstool-ng</code> to cross compile <i>SQlite</i> and add it to an existing toolchain?	review
54	Prepare <code>pkg-config</code> to look up library dependencies in a sysroot?	review
55	Use CMake to cross compile a project?	review
61	Use <code>include</code> in a device tree source?	review
63	Use <code>dtc</code> to compile a device tree source?	review
80	What configuration utilities are available to use for configuring kernel build?	draft
81	Use GNU <code>make</code> to find all possible kernel configuration targets?	draft
82	Use GNU <code>make</code> to configure kernel source tree for a specific architecture?	draft
30	What C libraries are commonly used in toolchains?	review
29	Print the tuple embedded in GNU GCC compiler?	review
42	What are the main C library components?	review
74	What is the basic layout of the kernel source tree?	review
77	What are the constructs of each menu in a <code>Kconfig</code> file?	review
58	What is a Device Tree and where is its specification?	review
59	What are the common properties of device tree specification?	review
60	Specify an interrupt controller in a device tree source?	review
64	Build and install <b>U-Boot</b> from source?	review
56	Describe the boot sequence in an embedded device?	review
57	Describe what parameters should be passed to the kernel on moving from the bootloader to a kernel?	review
65	Use U-Boot to read flash memory over serial console?	review
66	Set environment variables in U-Boot environment?	review
68	Load a kernel image in a U-Boot shell environment?	review
69	Boot a kernel image across network in a U-Boot shell environment?	review
70	Boot Linux kernel after loading it within U-Boot shell environment?	review
71	Automate the boot process in U-Boot shell environment?	review
9	What are the basic data types in OpenCV?	review
10	What operations are supported by <code>cv::Point<></code> template class?	review
11	What operations are supported by <code>cv::Scalar</code> class?	review
12	What operations are supported by <code>cv::Size</code> class?	review
13	What operations are supported by <code>cv::Rect</code> class?	review
14	What operations are supported by <code>cv::RotatedRect</code> class?	review
15	What operations are supported by <code>cv::Matx</code> template class?	review
16	What operations are supported by <code>cv::Vec</code> template class?	review
17	What operations are supported by <code>cv::Complex<></code> class template?	review
83	What configuration target takes an old <code>.config</code> file and asks for options added in new kernel?	draft
1054	How vector $v$ can be represented as a linear combination with standard basis vectors?	draft
24	Specify the elements of Embedded Linux?	review
25	Specify hardware requirements for Embedded Linux?	review
26	Build a fundamental ARM machine with QEMU?	review
19	What data type is used to specify color by convention?	review
20	What line types are used by drawing functions?	review
21	What values can be accepted as thickness parameter of drawing functions?	review
22	Draw a circle on an image?	review
84	What file holds configuration options generated by beginning the kernel build and where is the file?	draft
85	Identify which kernel version and kernel release do we have in kernel source tree?	draft
86	By which configuration option can kernel release be appended with release information?	draft
87	How does the <code>Kbuild</code> work with configuration options to properly build kernel?	draft
88	By assuming to have a complete <code>.config</code> file in the kernel source, what are the required environment variables to be given to <code>make</code> to build the kernel?	draft
89	Which kernel target should be used to generate kernel image?	draft
91	What are the build artifacts of <code>Kbuild</code>?	draft
92	Make debug symbols available in the <code>vmlinux</code> kernel image?	draft
95	How many cleaning <code>make</code> targets are available?	draft
100	Assuming kernel image and device tree blobs are built and put on the microSD already, what are the required boot instructions on Raspberry Pi 4?	draft
106	What are the required procedures to port Linux to a new board?	draft
113	Initialize a variable without narrowing?	draft
114	Initialize variables with automatic type deduction?	draft
120	Declare a type containing limited constants?	draft
121	Generate a string formatted with an integral value?	draft
122	Specify the order of replacement values in a formatted string?	draft
123	Align values to left, center, and right in a formatted string?	draft
124	Implement a simple <code>print()</code> function taking format parameters?	draft
125	Enable formatting for user defined types?	draft
126	Evaluate string and vector operations at compile time?	draft
127	What are the main data structure operations?	draft
128	How do we measure the speed of an operation in code?	draft
129	How many steps does each of four main operations take for an array?	draft
130	What's the difference between an array-based set and an array?	draft
131	How many steps does each of four main operations take for an array-based set?	draft
132	how many steps does each of four main operations take for an ordered array?	draft
133	What are the advantages and disadvantages of using ordered array over unordered array?	draft
134	What is the key question of Big O notation and what does it express?	draft
135	What are the order of main operations for arrays?	draft
136	What are the order of main operations for array-based sets?	draft
137	What are the order of main operations for ordered arrays?	draft
138	What does the constant time in <code>O(1)</code> mean?	draft
139	What does <code>O(log N)</code> mean in terms of number of steps taken in an algorithm?	draft
140	What are the steps taken to sort an array using <b>Bubble Sort</b> algorithm, and what is its efficiency in terms of Big O?	draft
141	What steps are taken in sorting an array using <b>Selection Sort</b> algorithm and what is its efficiency in terms of Big O?	draft
142	What are the general categories of algorithm speeds?	draft
143	How do algorithms are classified into different categories of Big O?	draft
144	How two algorithms in the same category can be compared?	draft
145	What steps are taken to sort an array using <b>Insertion Sort</b> algorithm and what is its efficiency?	draft
146	Having different orders of magnitude in the efficiency of an algorithm, how does Big O notation represents the efficiency?	draft
147	What are the wrost, average and best case scenarios of <b>Bubble Sort</b>, <b>Selection Sort</b>, and <b>Insertion Sort</b>?	draft
148	What considerations should be taken into account when choosing between <b>Insertion Sort</b> and <b>Selection Sort</b>?	draft
149	What is a hash table?	draft
150	What characteristics should a function have in order to be a valid hash function?	draft
151	What is the common value of <b>load factor</b> in implementation of hash tables?	draft
152	How hash tables can be used for non-paired objects instead of arrays in order to make look up operations efficient?	draft
153	What constraints do stacks have?	draft
154	What operations should stack data structures support?	draft
155	What is an <b>Abstract Data Type</b>?	draft
156	What constraints do queues have?	draft
157	What are the main operations of queues?	draft
111	Initialize scoped and global variables?	review
117	Initialize a constant?	review
110	Declare and define a function separately?	review
118	Declare a function evaluated at compile time?	review
119	Ensure compile time evaluation of a function?	review
109	Abbreviate namespaces to avoid repetition?	review
115	Define a new type based on predefined types?	review
112	Determine the size of an expression?	review
93	See the actual commands being executed in kernel build process in case build fails?	review
96	What are the steps required to build a kernel for the Raspberry Pi 4?	review
97	What are the steps required to build a kernel for the Raspberry Pi Zero?	review
98	What are the steps required to build a kernel for the BeagleBone Black?	review
99	What are the steps required to build a kernel for the QEMU?	review
94	What are the required steps after building a kernel image?	review
107	Assuming a new device is designed similar to BeagleBone Black and a new device tree needs to be ported for it, what are the necessary steps to make one?	review
101	What are the required boot instructions on BeagleBone Black?	review
102	What are the required boot instructions on QEMU?	review
104	What are the essential kernel command lines?	review
105	Reduce the time of calculating the constant <code>loops_per_jiffy</code> variable on boot time?	review
103	What is the early user space after kernel is booted?	review
158	What is base case and why all recursive calls should have one?	draft
159	How recursive code can be read?	draft
160	When does stack overflow occur in recursive calls?	draft
161	What is <b>Overlapping Subproblems</b> in recursion?	draft
499	Display an image on a window?	review
162	What is <b>Dynamic Programming</b> and how can it be an optimization to recursion?	draft
163	How does <b>Dynamic Programming</b> using <b>Memoization</b> helps in optimizing recursive calls?	draft
164	How does <b>Dynamic Programming</b> using <b>Iteration</b> helps in optimizing recursive calls?	draft
165	What is the concept of partitioning in <b>Quick Sort</b> algorithm?	draft
166	What is the implementation of <i>partition</i> algorithm?	draft
167	What steps are taken in <b>Quick Sort</b> algorithm?	draft
168	What is the efficiency of <b>Quick Sort</b> algorithm?	draft
169	Compared to <b>Insertion Sort</b>, what are the best and worst cases of <b>Quick Sort</b> algorithm?	draft
170	What is the <b>Quick Select</b> algorithm and where is it best known to be used?	draft
171	What the linked list data structure is contained of?	draft
172	What is a node in node-based data structures?	draft
173	How does a linked list data structure manages its nodes?	draft
174	What difference do arrays and node-based data structures have in four main operations of algorithms?	draft
175	What is Doubly Linked List?	draft
176	Where does doubly linked list can be used to optimize operations?	draft
177	What is a tree data structure?	draft
178	What is the structure of a tree?	draft
179	What is a Binary Search Tree?	draft
180	What steps are taken in searching a binary search tree?	draft
181	What steps are taken for inserting into a binary search tree?	draft
182	What steps are taken to delete a value in a binary search tree?	draft
183	How to find the successor node in a binary search tree when a node with two children is being deleted?	draft
184	What is the traversal algorithm for binary search tree?	draft
185	What is a priority queue?	draft
186	Why priority queues cannot be implemented by ordered arrays as their underlying data structure?	draft
187	What is a Binary Heap data structure?	draft
188	What conditions a Binary Max-Heap should meet to be valid?	draft
189	What conditions does a tree require to be a valid tree?	draft
190	What is a complete tree?	draft
191	What are the standard iterators?	draft
192	What iterator types are publically provided by standard data structures?	draft
193	What non-member functions are provided by standard to return supported iterators?	draft
194	What is the advantage of having argument dependent lookup supported?	draft
195	When does a function supports argument dependent lookup?	draft
196	Compute the distance between two iterators of a container?	draft
197	What iterator type traits are supported by the standard?	draft
198	What stream iterators are provided by the standard?	draft
199	Use output stream iterator to write values to an output stream?	draft
200	Use input stream iterator to read values from an input stream?	draft
201	What iterator adapters are supported by the standard?	draft
202	Use iterator adapters to populate containers only supporting <code>push_back()</code>?	draft
203	Use iterator adapters to populate containers only supporting <code>push_front()</code>?	draft
204	Use iterator adapters to populate containers only supporting <code>insert()</code>?	draft
205	What are the use cases of reverse iterators?	draft
206	Obtain the base iterator from a reverse iterator?	draft
207	What are the use cases of move iterators?	draft
208	What semantics do standard containers use to take values?	draft
209	What are the default template parameters of standard containers?	draft
210	What are the requirements on elements in standard containers?	draft
211	What are the sequential standard containers?	draft
212	What is the memory layout of a vector?	draft
235	What utility manages postgres clusters?	draft
236	What are the <code>pg_ctl</code> basic commands?	draft
237	What is the main process running postgres?	draft
238	How many stopping modes are possible for postgres?	draft
239	What user does postgres needs to operate?	draft
240	How does postgres know when the storage is?	draft
241	What are the names of template databases?	draft
242	Connect to an instance using psql?	draft
243	What command is used to quit the interactive terminal?	draft
244	List all available databases in an instance?	draft
214	How does PostgreSQL store data on storage?	review
215	How long is the life time of a PostgreSQL release?	review
216	What is a PostgreSQL cluster?	review
217	What is a schema?	review
218	What are the building blocks of an instance?	review
220	What schema do users belong to?	review
221	How many user categories exist in postgres?	review
222	How many superusers are allowed in a postgres instance?	review
223	Where are the internal postgres instance data stored?	review
224	Where does postgres store its data?	review
225	What is <code>PGDATA</code> contained of?	review
226	How is it possible to have multiple postgres installations?	review
227	When does postgres need the <code>PGDATA</code> directory?	review
228	What is the purpose of postgres's first process?	review
229	How does postgres handles connections?	review
230	Build postgres from source?	review
231	How to add systemd support to postgres installation?	review
232	Build postgres using pgenv?	review
233	Connect to a postgres instance?	review
245	What tool can be used to create a postgres cluster?	draft
246	Enable authentication on local connections?	draft
247	How does initdb create a cluster?	draft
248	Enter a SQL statement via psql?	draft
249	What is the secondary statement terminator in psql?	draft
250	What command opens an editor to edit psql query buffer?	draft
251	What psql command executes sql statements from a file?	draft
252	What command gives help information about psql?	draft
253	What command gives help with the psql commands?	draft
254	Query the name of current database?	draft
255	Query current date?	draft
256	Query current date and time?	draft
257	What user is created on postgres by default?	draft
258	What is a role?	draft
259	What is the difference between roles and permissions scopes?	draft
260	Create a new role having privileges to login in to the cluter?	draft
261	What are the general forms of role creation options?	draft
262	Create a role with superuser privileges?	draft
263	Create a role without a password?	draft
264	Limit the number of connections a role can make to the cluster?	draft
265	Create a role that will be expired within a year?	draft
266	Create a group?	draft
267	Join a role into a group when creating one?	draft
268	Join a role into a group after its creation?	draft
269	Specify an admin for a group when creating one?	draft
270	Specify an admin for a group after its creation?	draft
271	Remove a role?	draft
272	Inspect current role?	draft
273	Get a list of all available roles in the cluster?	draft
274	List the groups a role is a member of?	draft
275	Get a user information from roles catalog?	draft
276	Get sensitive information of roles in the cluster?	draft
277	Where is the host-based access firewall defined?	draft
278	Perform configuration reload on a cluster by means of an SQL statement?	draft
279	What is the structure of the host-based access file?	draft
280	What is the priority of the hba rules?	draft
281	Accept connections to a group of users except one of the members?	draft
282	Specify a file in hba rules?	draft
283	Inspect the hba rules of the cluster using SQL?	draft
284	What command line utility creates user in a postgres instance?	draft
285	What command line utility removes user in a postgres instance?	draft
286	What type of commands exist in database?	draft
288	Switch postgres to expanded mode?	draft
289	List databases present in the cluster?	draft
290	Connect to a database in psql?	draft
291	Create a new database?	draft
292	What database is used to clone as new ones?	draft
293	Why is there two template databases?	draft
295	What schema can be used by a normal user?	draft
296	What is the <code>search_path</code> variable?	draft
297	Allow a user to create database objects in a custom schema?	draft
298	List all available databases?	draft
299	Create a database from a user defined template?	draft
300	Drop a database?	draft
301	Drop a table from a database?	draft
302	Get the size of a database?	draft
303	Find the Object ID of a database on storage?	draft
304	Create a table?	draft
305	Create a table only when it doesn't already exist?	draft
306	How many table types exist?	draft
307	How temp tables can be dropped automatically?	draft
308	Get the object ID of a table on storage?	draft
309	How many ways are possible to insert into data a table?	draft
310	Insert data into a table with value expressions?	draft
311	Select data from a table out of order?	draft
312	Order the output of a select query?	draft
313	Insert multiple rows into a table in one insertion?	draft
314	Filter select query results?	draft
315	How many ordering directions exist?	draft
316	Write an order by clause with column positions?	draft
317	Sort result set by putting null values on top?	draft
318	Sort result set by putting null values at the bottom?	draft
319	Copy a table?	draft
320	Update values of a table?	draft
321	Delete rows from a table?	draft
322	Filter the resultset by arithmetic conditions?	draft
323	Filter the resultset to only records with a substring?	draft
324	Use case-insensitive filtering to match a substring?	draft
325	Use a function to return the non-null value?	draft
326	Change the null presentation in queries?	draft
327	Use a descriptive name for columns resulting of function calls?	draft
328	Filter out the duplicate results from a resultset?	draft
329	Limit the number of query results to specific rows?	draft
330	Limit the query results to a number of rows somewhere in the middle?	draft
331	Duplicate a table structure without copying rows?	draft
332	Filter query results by limiting a column only to a subset of values?	draft
333	Filter query results by matching a subquery?	draft
334	Filter query results by checking the existance of a subquery?	draft
335	What is a window function?	draft
336	What is the difference between window functions and aggregation functions?	draft
337	How the results of aggregation functions and window functions can become identical?	draft
338	Query a table to count the rows based on two different conditions?	draft
339	Write aliases for window functions?	draft
340	What aggregate functions can be used with window functions?	draft
341	Write a statement to generate a series of numbers?	draft
5405	Restore a plain text backup?	review
287	Connect to a postgres instance?	review
342	Write a statement to numberize each of the partitioned rows?	draft
343	Write a statement to numerize each row in the result set?	draft
344	Sort the values inside a window?	draft
345	Write a statement to show the first value of a partition on each row?	draft
346	Write a statement to show the last value of a partition on each row?	draft
347	Rank rows within partitions with gaps?	draft
348	Rank rows within partitions without gaps?	draft
349	Write a statement that returns the offset rows before the current row within a partition?	draft
350	Write a statement that returns the offset rows after the current row within a partition?	draft
351	Write a statement that returns computation of the fraction of partition rows that are neighbours to the current row?	draft
352	Write a statement to assign a bucket for each partition?	draft
353	What forms of boolean types exist in postgres?	draft
354	Add a boolean type column to a table?	draft
355	What are the two integral types in postgres?	draft
356	What floating types are supported by postgres?	draft
357	Write a numeric type to hold money amount?	draft
358	What character types exist in postgres?	draft
359	Count the number of characters in a string?	draft
360	Count the number of bytes in a string?	draft
361	Where in the database can we see the parameters in postgres configurations?	draft
362	Check the current date type of the server?	draft
363	Convert a string to date type?	draft
364	Convert a date type to string?	draft
365	What are the two types of timestamps in postgres?	draft
366	Check the timezone set in current session?	draft
367	Change timezone in current session?	draft
368	Create hstore rows in a query?	draft
369	Access to hstore data in a query?	draft
370	Create JSON rows in a query?	draft
371	Beautify the JSON output in a query?	draft
372	Search in a JSON data by matching to an object?	draft
373	What builtin languages are supported by postgres?	draft
374	Define a function?	draft
375	What components are responsible for optimized access of data?	draft
376	What is the meaning of declarative execution of database?	draft
377	What are the four stages of execution?	draft
378	What strategy does postgres optimizer use to choose between different access methods?	draft
379	When does optimizer avoids iterating over all the possible execution plans?	draft
380	What is a node?	draft
381	How nodes can interact with each other?	draft
382	What are the four stages of query execution?	draft
383	What is the responsibility of the parser?	draft
384	What is the responsibility of the rewriter?	draft
385	What is the responsibility of the optimizer?	draft
386	What is the responsibility of the executor?	draft
387	When does executor perform data access using parallel jobs?	draft
388	What is a node?	draft
389	What nodes does the optimizer use?	draft
390	What are the sequential nodes?	draft
391	When does the optimizer apply sequential scan?	draft
392	What are the characteristics of index nodes?	draft
393	How does index scan optimize queries?	draft
394	How does index-only scan optimize queries?	draft
395	How does bitmap index scan optimize queries?	draft
396	What are the characteristics of join nodes?	draft
397	When does the nested loop node applies by the optimizer?	draft
398	When does the hash join node applies by the optimizer?	draft
399	Check if <code>/usr/src/linux/version</code> file exists?	draft
400	Get the current path of executing program?	draft
401	Get the canonical form of a path?	draft
402	Get the canonical form of a path relative to another path?	draft
403	Get the absolute path of <code>./.local/bin</code>?	draft
404	Concatenate two paths?	draft
405	Check if two paths are addressing the same location?	draft
406	Get the type of a file from its path?	draft
407	Make the type checking of a file cheaper by not calling system calls?	draft
408	Check if the permission of a file includes user, group, and others access?	draft
409	Get the size of a regular file?	draft
411	Start learning about Vim:	draft
412	Start reading Vim reference manual:	draft
413	Also read the quick reference:	draft
414	Then study the Vim's user manual to learn essential commands:	draft
415	Repeat actions with dot command:	draft
416	Use compound commands:	draft
417	Find a character and repeat:	draft
418	Search word under cursor:	draft
419	Use counts to modify numbers:	draft
420	Change a number with different base like octal or binary:	draft
421	Change word behind cursor:	draft
422	Apply operations on a line by duplicating operators:	draft
423	Combine **operator + motion** to take action:	draft
424	Correct a character, a word, or a line in **Insert mode** by backspacing:	draft
425	Go back to normal mode from **Insert mode**:	draft
426	Temporarily go to insert-normal mode from **Insert mode** to enter a command:	draft
427	Redraw screen with the current line in the middle without being interrupted:	draft
428	Paste from register without leaving the **Insert mode**:	draft
429	Paste text in **Insert mode** literally with unindents indented:	draft
430	Calculate simple arithmatic using expression register in **Insert mode**:	draft
431	Insert unusual characters by character code in **Insert mode**:	draft
432	Find the numeric code of character under the cursor:	draft
433	Insert special symbols using digraph:	draft
434	Overwrite existing text with replace mode:	draft
435	Insert into **Visual mode** from normal mode and select text in character-wise, line-wise, and block-wise mode:	draft
436	Insert into **Select mode** from different modes:	draft
437	Reselect the last visual selection:	draft
438	Switch between visual modes:	draft
439	Toggle the free end of a visual selection:	draft
440	Prefer operators over visual commands where possible:	draft
441	Inspect the differences between repeating an operator and a visual section:	draft
442	Separate two columns of a text with | using visual block mode:	draft
443	Write a horizontal line using visual line mode:	draft
444	Enter into Command-line mode:	draft
445	Edit a file after entering into Vim:	draft
446	Write file contents into file:	draft
447	Create a tab:	draft
448	Split window:	draft
449	Inspect the list of Ex commands:	draft
450	Inspect the differences of Vi and Vim:	draft
451	Copy current line to the first line:	draft
452	Move next line to previous line:	draft
453	Repeat last Ex Command:	draft
454	Run normal mode commands across a range:	draft
455	Tab-complete Ex commands:	draft
456	Create a tab-complete behavior for custom Ex commands:	draft
457	Change tab-completion behavior:	draft
458	Insert current word under cursor to command promt:	draft
459	Recall persistent commands from history after vim relaunch:	draft
460	Use command line window to enter Ex commands:	draft
461	Switch from command prompt to command line window:	draft
462	Execute programs in shell from Vim:	draft
463	Use the shorthand for current filename in command prompt:	draft
464	Change current filename by filename modifiers:	draft
465	Start an interactive shell in Vim:	draft
466	Use the contents of a buffer for standard input or output:	draft
467	Filter the contents of a buffer through an external command:	draft
468	Use a {motion} to filter then contents of a buffer through an external command:	draft
469	Inspect buffer list:	draft
470	Switch to alternate buffer:	draft
471	Jump directly to a buffer using number:	draft
472	Open another file in vim to edit:	draft
473	Inspect current working directory in vim:	draft
474	Open a file in path relative to editing file:	draft
475	Configure `path` for finding files:	draft
476	Find a file by its filename in vim:	draft
477	Navigate file explorer in vim by opening a directory:	draft
478	Create a tag file in project directory:	draft
479	Configure Vim to work with ctags:	draft
480	Auto-generate tags file in Vim:	draft
481	Jump back from definition using the tag history:	draft
482	Specify jump to multi-match definitions:	draft
483	Select tag from matchlist after jumping to a wrong definition:	draft
484	Manual match with a tag:	draft
485	Compile a project inside Vim:	draft
486	Browse the Quickfix list:	draft
487	Jump through errors generated by make:	draft
488	Jump to the Nth error:	draft
489	Jump to the first error in next file:	draft
490	Use quickfix actions only for the active window:	draft
491	Refer back to previous or next quickfix results:	draft
492	Configure :make to invoke another program:	draft
493	Populate the quickfix list by program output:	draft
494	Setup makeprg and errorformat using compiler command:	draft
515	What mechanism should be used to prevent users from logging into <b>root</b> account on a Linux system when high privileges are needed?	draft
516	How to reduce the damage caused by privileged accessibilities on a system while these privileges are required?	draft
517	How can we add a user to <i>sudo</i> group?	draft
518	What file changes the default behavior of <i>useradd</i> command when creating accounts?	draft
519	How to disable remote root login to prevent full system access from users?	draft
520	How to change default SSH port on Linux system to prevent brute-force attacks on default port?	draft
521	How to restrict SSH connections only to a certain address family?	draft
522	What modules is used to enfore users from following strict password policies?	draft
523	How to use <b>Pluggable Authentication Modules (PAM)</b> to implement password policies and enforce users to follow strict rules for setting their passwords?	draft
612	Create a PTY:	draft
524	How to restrict SSH access to only users in <i>sshusers</i> group on a remote server?	draft
525	What is the name of firewall mechanism used in the Linux kernel and what is the common firewall interface used to interact with it?	draft
526	How to get all the zones from firewalld?	draft
527	How to list all the allowed services in a specific zone from firewalld?	draft
528	How to list all the allowed ports in a specific zone from firewalld?	draft
529	How to list all the information of the default zone from firewalld?	draft
530	How to list all the information of all the zones from firewalld?	draft
531	How to make changes permanently on firewalld?	draft
532	How to create a new zone on firewalld?	draft
495	Install OpenCV library?	review
496	Include OpenCV headers in source file?	review
497	Print the size of a matrix?	review
498	Open an image from file?	review
500	Save a processed image into a file?	review
502	Get the number of image channels?	review
501	Transform image by flipping an image horizontally?	review
503	Set a mouse callback to get notified when user clicks on image?	review
504	Draw a circle on an image?	review
505	Draw a rectangle on an image?	review
506	Draw a text on an image?	review
507	Create a single channel gray image?	review
508	Recreate an image object?	review
509	Copy an image object into another?	review
511	Occupy the region of interest in an image with a rectangle?	review
512	Occupy the region of interest in an image with ranges?	review
513	Specify columns and rows of an image as region of interest?	review
514	Mask an image so that only a part of it will be affected by operations?	review
533	How to reload firewalld so that new configuration is applied?	draft
534	How to add a service to the newly created zone in firewalld?	draft
535	How to identify the default zone used in firewalld?	draft
536	How to set a custom firewalld zone as default?	draft
537	How to list zones and the interfaces associated with them in firewalld?	draft
538	How to retrieve all the services available on the network to specify in firewalld?	draft
539	How to allow a service in the default zone of firewalld?	draft
540	How to remove a service from default zone in firewalld?	draft
541	How to allow a new port in the default zone of firewalld?	draft
542	How to remove a port in the default zone of firewalld?	draft
543	How to create a 4096-bits RSA encripted SSH key to securely connect to remote server with it?	draft
544	How to securely transfer locally generated SSH key to remote server?	draft
545	How to identify open and active ports on system?	draft
546	How to enable two factor authentication on a server to add an additional security layer for user logins?	draft
547	How to disable IPv4 or IPv6 on a server?	draft
548	What <b>Mandatory Access Control</b> modules are available for Linux systems?	draft
549	How to restrict the use of old passwords on Linux using <b>Pluggable Authentication Module (PAM)</b>?	draft
550	What tool can be used to prevent brute-force authentication attempts by blocking their IP addresses?	draft
551	How to list all the blocked addresses by fail2ban?	draft
552	What encryption tools are available on Linux?	draft
553	What tool is used to sign files, verify integrity, and encrypt or decrypt files in Linux systems?	draft
554	How to encrypt and decrypt files using GnuPG?	draft
555	What tool should be used to encrypt files by Blowfish cipher?	draft
556	How to encrypt or decrypt files using bcrypt?	draft
557	How to use ccrypt and cdecrypt to encrypt and decrypt files on Linux?	draft
558	How to encrypt and decrypt files with compression using zip on Linux?	draft
559	How to encrypt and decrypt files using 7za tool on Linux?	draft
560	How to encrypt and decrypt files using openssl tool on Linux?	draft
561	What kernel module can be used to encrypt block devices and what is the userspace interface for it?	draft
562	How to check if filesystem encryption module is available on kernel?	draft
563	How to use cryptsetup to encrypt or decrypt a partition on Linux systems?	draft
564	How ACL permissions of files on Linux systems?	draft
565	What tools are used to scan a system on network?	draft
566	Lookup system calls in manual pages:	draft
567	Get multiple numbers from user and sum:	draft
568	Parse command-line options:	draft
569	Terminate program execution when unrecoverable error occurs:	draft
570	Write to standard output using file stream and file descriptor:	draft
571	Invert user input character case:	draft
572	Make user input consists of a range of valid characters:	draft
573	Print shell environments and check if shell supports colored output:	draft
574	Link against a library, create a shared object, change C standard in compiler options:	draft
575	Write into the standard output by directly using the `write` system call:	draft
576	Get system resources and file system information:	draft
577	Posix documentations can be found by `apropos -s7 posix`:	draft
578	Use feature test macros:	draft
579	Inspect four stages of compilation:	draft
580	Use make to build programs:	draft
581	Check error numbers after system call:	draft
582	Create a file:	draft
583	Read inode information of a file:	draft
584	Create soft links and hard links:	draft
585	Update file timestamp:	draft
586	Delete a file:	draft
587	Get access rights and ownership of a file:	draft
588	Change access mode of a file:	draft
589	Change ownership of a file:	draft
590	Write to file with file descriptor:	draft
591	Read from file with file descriptor:	draft
592	Read from and write to file with file stream:	draft
593	Read/write binary data from/to file:	draft
594	Move around inside a file with file descriptor:	draft
595	Move around a file with file stream:	draft
596	Handle signals:	draft
597	Ignore signals:	draft
598	Fork a new process:	draft
599	Create a zombie process:	draft
600	Create an orphan process:	draft
601	Replace execution of a forked process with another program:	draft
602	Run an external program without replacing execution of the process:	draft
603	Create a SysV style daemon running in background:	draft
604	Write systemd(1) unit file for a daemon:	draft
605	Create a systemd style daemon:	draft
606	Use `libcurl` shared library to retrieve public IP:	draft
607	Inspect function names in shared objects:	draft
608	Create static and dynamic libraries:	draft
609	Install a dynamic library on system:	draft
610	Inspect terminal information:	draft
611	Check if process connected to terminal:	draft
613	Disable echo on PTY:	draft
614	Get terminal size:	draft
615	Send signals to a process given by user:	draft
616	Create a pipe between a parent and a forked child process:	draft
617	Create a message sender and receiver using FIFO:	draft
618	Create a message sender message queue:	draft
619	Create a message receiver using message queues:	draft
620	Create a shared memory between a parent process and its child:	draft
621	Create a shared memory between two distinct processes:	draft
622	Create a server communicating over Unix sockets:	draft
623	Create a server communicating over Unix sockets:	draft
624	Create two threads to handle two different jobs:	draft
625	Synchronize working threads using mutex locks:	draft
626	Use condition variables to synchronize threads:	draft
627	Start debugger:	draft
628	Start a program in debugger:	draft
629	Create a break in debugger:	draft
630	Watch a variable changing through program execution:	draft
631	Move forward next statement:	draft
632	Print variable content in each deubbing step:	draft
633	Step into function:	draft
634	Return from stepped in function:	draft
635	Examine memory in debugger:	draft
636	Modify variables during debugging:	draft
637	Follow a fork in program:	draft
638	Debug threads of program:	draft
639	Use Valgrind to check memory leaks:	draft
642	What is the downsides of declaring all comparison operators manually?	draft
643	What is the behavior of compilers when they cannot find a matching inequality operator for two objects?	draft
644	What is the behavior of compilers when they cannot find a matching relational operator for two objects?	draft
645	How does a defaulted member <code>operator<=></code> expand?	draft
646	What header should be included when defaulting spaceship operator?	draft
647	What qualifiers automatically apply to default generated operators?	draft
648	When should we define equality and spaceship operators manually?	draft
649	What expression does a compiler use to rewrite a relational operator when a matching definition is not found?	draft
650	What is the return type of spaceship operator?	draft
651	What is the precedence of spaceship operator compared to other comparison operators?	draft
652	Where can we directly call for comparison of two types with spaceship operator?	draft
653	What are the comparison category types?	draft
654	What is the best practice for defining the return value of spaceship operator?	draft
655	What type the spaceship operator does not support?	draft
656	What types are supported by spaceship operator?	draft
657	What comparison category type does comparing supported types generate?	draft
658	What comparison category type is safe to be used when comparing fundamental or standard library types?	draft
659	Which comparison category type should be used when returning a comparison result with multiple ordering criteria?	draft
660	What is the best practice when partial or weak ordering must be mapped to strong ordering?	draft
661	What are the requirements of defaulting spaceship and equality operators?	draft
662	When does the defaulted equality operator is automatically defined?	draft
663	What is the advantage of using <code>std::compare_three_way</code> function object?	draft
664	What type trait can be used to forward declare spaceship operator?	draft
665	What type is used to compare two ranges?	draft
666	What are the limitations of using lexicographical compare three way functions?	draft
667	Declare an abbreviated function template?	draft
668	What restrictions do abbreviated function templates have compared to generic lambdas?	draft
669	Pass an abbreviated function template as a parameter?	draft
670	What are the rules for abbreviated function template parameters?	draft
671	Partially specify abbreviated function template parameters?	draft
672	Combine template and <code>auto</code> parameters?	draft
673	Specify parameter types for a mixed template and <code>auto</code> parameters?	draft
674	How many ways constraints can be applied to a template?	draft
675	Constraint a template function with a requirement to not be available if raw pointers are passed?	draft
676	Implement a concept to constraint passing only raw pointers?	draft
677	Apply a concept restricting parameters only to take raw pointers to a template?	draft
678	Using overload resolution with concepts implement two function templates for pointers and non-pointers?	draft
679	How many ways concepts can be applied into templates?	draft
680	In how many ways a template can be constrained?	draft
681	What is the advantage of using trailing requires clause over regular requires clause?	draft
682	Constraint a template to take only two comparable types?	draft
683	Constraint a template to only accept objects supporting pointer deference operator?	draft
684	What difference does it take for constraints to declare parameters as value or reference?	draft
685	Constraint a template with a requires expression?	draft
686	What are the preconditions and requirements of <code>std::ranges::sort()</code> to accept a container?	draft
687	How to use ranges to sort a container?	draft
688	What object can be used to iterate over the elements of a range by filtering out some elements or performing some transformaions of their values?	draft
689	How to iterate over first 5 elements of a range using view adaptors?	draft
690	How to sort only the first 5 elements of a container using ranges?	draft
691	How to generate a sequence of values using views?	draft
692	How to use combination of ranges and views that don't generate values to make filtering blocks?	draft
781	Find the root node of an index?	draft
693	How to use a sentinel as an end of a range in iterating over a container?	draft
694	What web service gives free access to a postgres client?	draft
695	Create a table of cities holding name, country, population and area of each?	draft
696	Insert data into a table?	draft
697	Retrieve information from a table?	draft
698	Calculate the arithmetic operations of two columns from a table?	draft
699	Name the operational generated column in a query?	draft
700	What string operations are available in SQL?	draft
701	Limit the results of a query?	draft
702	What parts of a select query does the database read first?	draft
703	Filter query result by checking the existance of a column in a set of values?	draft
704	Reverse the filtering of a query by checking the none-existance of a column in a set of values?	draft
705	What comparison operators are supported by SQL?	draft
706	What compound operators are supported by SQL?	draft
707	Limit the results of a query by comparing the calculated values of two columns?	draft
708	Update a cell within a very big table?	draft
709	Delete a row from a table?	draft
710	Delete all rows of a table?	draft
711	How many relationships are possible between data?	draft
712	What are the characteristics of a primary key?	draft
713	What is the common way of making a primary key auto generate a unique id in postgres?	draft
714	What are the characteristics of a foreign key?	draft
715	What statement is used to create a foreign key?	draft
716	What happens when record gets inserted without foreign key?	draft
717	What constraints are supported by SQL when referencing record of a foreign key is deleted?	draft
718	What is the default behavior of postgres when deleting a record being referenced by foreign keys?	draft
719	Query two tables by associating them on foreign keys?	draft
720	What statement can be used to set default value for a foreign key when referenced record is deleted?	draft
721	How many joins are supported by SQL?	draft
722	Filter the records of a join query with a condition?	draft
723	What are the main characteristics of grouping operation?	draft
724	What steps are taken to group a table by a specific column?	draft
725	Group records of a table by one of its colums?	draft
726	What is the use case of having clause?	draft
727	Filter a set a groups of records grouped by a specific column?	draft
728	What are the main characterestics of aggregation operations?	draft
729	What are the common aggregate functions?	draft
730	Count how many comments each user have posted?	draft
731	What is the behavior of count aggregate function when grouped column has a null value?	draft
732	Find the most commented photo of a photo sharing app?	draft
733	Find the sum of all comments from each photo record in a photo sharing app?	draft
734	Reorder records of the result set with ascending and descending order?	draft
735	Set a second ordering rule for result set?	draft
736	What is the use case of limit?	draft
737	Where should the limit clause be located in query?	draft
738	What is the use case of offset?	draft
739	Where should the offset clause be located within a query?	draft
740	What is the use case of union clause?	draft
741	What is the prerequisite of a union?	draft
742	Combine two different result sets with and without duplicates?	draft
743	When would parenthesis be mandatory for union queries?	draft
744	Collect the intersection of two result sets?	draft
745	Find the records appearing in first result set and not in second result set?	draft
746	Where are subqueries mostly used?	draft
747	Use a subquery to give a single value in select clause?	draft
748	Use a subquery in from clause as a source of data?	draft
749	When creating a table define a column not taking null value?	draft
750	Modify a table after creation and set a column not to take null value?	draft
751	Update all null values of a column to set 0 instead?	draft
752	What input data validation constraints do we have in database side?	draft
753	Set a default value for a column?	draft
754	Alter a column to add default value?	draft
755	Define a column as having only unique values?	draft
756	Add a uniqueness constraint to a column?	draft
757	Remove uniqueness constraint on a column?	draft
758	Define a column to take unique values in combination of multiple columns?	draft
759	Add uniqueness value to multiple columns?	draft
760	Define a column with a check constraint on its value?	draft
761	Add a check constraint after column is created?	draft
762	Define multiple columns with a check on all of them?	draft
763	Name a few web services for drawing database diagrams?	draft
764	In case of associative constraints, check if either of two columns exist in a row?	draft
765	Find where the data directory is in an instance?	draft
766	Retrieve the name and identifier of databases in an instance?	draft
767	Retrieve information about the objects inside a database?	draft
768	What are the building blocks of a database file?	draft
769	What is the structure of each block in postgres?	draft
770	What is an index?	draft
771	Create an index for a table?	draft
772	Drop an index?	draft
773	Analyze a query?	draft
774	Estimate the overall size of an index on memory?	draft
775	Convert a size value to human readable memory size?	draft
776	What index types are supported by postgres?	draft
777	When do indexes are automatically created?	draft
778	Query all the auto generated indexes?	draft
779	What is the data structure behind an index?	draft
780	Create an extension that helps on examining pages?	draft
782	Find all the leaf nodes of an index?	draft
783	Inspect the ctid column of a table?	draft
784	What the first row in the page items table does?	draft
785	What are the stages of query execution in postgres?	draft
786	What is the difference between plain explain and explain analyze?	draft
787	Inspect the statistics of a table?	draft
788	How does postgres calculate the cost of page loading and rows?	draft
789	How does <code>eBPF</code> help us to learn application behavior?	draft
790	What does the <code>eBPF</code> verifier?	draft
791	What is the advantage of dynamic loading functionality in <code>eBPF</code>?	draft
792	How efficient is loading <code>eBPF</code> programs?	draft
793	How to load a simple <code>eBPF</code> code in python's BCC library as a simplified example?	draft
794	What capabilities are required for eBPF programs to run?	draft
795	Where does the <code>eBPF</code> trace printing function write output?	draft
796	What is the convenient alternative to trace output by <code>bpf_trace_printk</code> helper function?	draft
797	What is an <code>eBPF</code> map?	draft
5527	Make an element dim?	review
798	What mechanisms are required for user space applications to gain access to the underlying device drivers within the kernel?	draft
799	How does <b>Linux Device Model</b> expose device driver details to user space?	draft
800	What inode attributes are used to distinguish between device files?	draft
801	What is a device driver namespace?	draft
802	What is the difference between block and char devices in namespaces?	draft
803	What distinguishes device classes in the kernel?	draft
804	What are the major components of <b>Linux Device Model</b>?	draft
805	Where devices should be registered?	draft
806	What is the job of buses?	draft
807	What is the initial step of a device driver once a device binds?	draft
808	What is a good starting step to learn writing device drivers?	draft
809	Handle unsupported file operation method by propegating an error from kernel driver to user space proces?	draft
810	Handle unsupported <code>llseek</code> file operation?	draft
811	Register a misc driver in the kernel?	draft
812	What is the entry point of device drivers?	draft
813	Assign file operations on a misc driver?	draft
814	Implement open file operation function in device driver?	draft
815	Implement read file operation function in device driver?	draft
816	Try out the open, read, write, and close file operation methods of a driver?	draft
817	Copy data from kernel to user space?	draft
818	Copy data from user to kernel space?	draft
819	Use modules to import the entire standard library functionality?	draft
820	How to use <code>sparse</code> as the <b>static analyzer</b> in kbuild?	draft
821	What are the most commonly used <b>tracing</b> and <b>profiling</b> tools in the kernel development?	draft
822	What tool is commonly used to examine and interpret LTTng's output?	draft
823	What is the BPF frontend?	draft
824	What kernel version started supporting BPF?	draft
825	What is the important dependency of BPF on a Linux system?	draft
826	What tool is used as automated test suite and static and dynamic analysis for kernel modules?	draft
827	What is the name of cross toolchain required to build the kernel?	draft
828	What is the name of emulator required to run kernel on it?	draft
829	Use static analysis tools for Kernel source:	draft
830	Use sparce to analyze kernel source:	draft
831	Trace and profiling tools for kernel:	draft
832	Performance analysis tool for kernel:	draft
833	Linux Driver Verification (LDV) project:	draft
834	How to check the kernel version on host system?	draft
835	How to review the history of the kernel development process using git?	draft
836	What is the kernel development workflow?	draft
837	How many kernel release types exist?	draft
838	How to retrieve current list kernel releases?	draft
839	What script can be used to safely download and verify kernel source tree?	draft
840	What are the steps of building the kernel?	draft
841	Where can kernel archive be downloaded?	draft
842	Where can kernel source be cloned?	draft
843	How to make sure about the version of the cloned kernel source tree?	draft
844	Where is the list of kernel maintainers?	draft
845	What script can be used to find the maintainers of a specific module?	draft
846	What is the purpose of each directory in the kernel source tree?	draft
847	How to build kernel documentations from source?	draft
848	What code browsing tools are available to be used in kernel source tree?	draft
849	How to generate tags using code browsing tools in the kernel source tree?	draft
850	Where is the default kernel config file stored?	draft
851	What configuration targets are available in the kernel build system?	draft
852	Where can platform specific configuration files be found in the kernel source tree?	draft
853	How to configure kernel with the existing modules?	draft
854	How to use existing kernel configuration in the kbuild?	draft
855	What UI configuration options are available for the kbuild system?	draft
856	How many option types are available in <code>menuconfig</code> target?	draft
857	Shallow clone the kernel source?	draft
858	Unshallow the cloned kernel source?	draft
859	Clone the stable kernel?	draft
860	What does the <code>ARCH</code> environment variable point to when cross compiling?	draft
861	What is the role of <code>io_uring</code> in the kernel?	draft
862	What are the building blocks of Kconfig infrastructure?	draft
863	What symbol is used for each configurable kernel feature?	draft
864	Where the configuration options are stored?	draft
865	What is the final artifact of kernel configuration system?	draft
866	How toggling of a feature in the build system is defined?	draft
867	Where is the starting point of kernel build system?	draft
868	Clean up every configuration artifacts in kernel source?	draft
5196	Implement the strategy pattern?	review
869	Generate default kernel configuration?	draft
870	What is the order of fallback configuration files used by Kconfig as the default kernel config?	draft
871	How the <code>.config</code> file is produced?	draft
872	Save the currect configuration as the default configuration for an architecture?	draft
873	Use current distribution configuration?	draft
874	List the new configuration options when already having an old config?	draft
875	Use distribution configuration but preserve the original configurations for specific drivers?	draft
876	Fine tune kernel configuration with a graphical user?	draft
877	What kernel configuration options enable accessing to kernel configurations?	draft
878	What component turns configs into header files to be used by kernel build system?	draft
879	Check the difference of two kernel configuration files?	draft
5525	Make an element bold?	review
880	Toggle individual kernel configuration options without interacting with user interfaces?	draft
881	Make sure the kernel configuration has security options enabled?	draft
882	Enable GCC arch specific security features?	draft
883	Enable availability of kernel headers 	draft
884	Enable BPF Type Format metadata to enable kernel debugging information generation?	draft
885	Enable kernel build system to treat warnings as errors during the build process?	draft
886	Check for a configuration availability in code?	draft
887	Create a config file containing only the modules that are enabled on your system?	draft
888	Configure the kernel with your existing modules but exceptionally leave a few modules unchanged?	draft
889	Extract the kernel configurations from a kernel image that has embedded configurations?	draft
890	Locate the differences between two kernel config files?	draft
891	How to emulate raspberry pi on Linux?	draft
892	Choose between microprocessors for embedded Linux project:	draft
893	Deprecated things in kernel:	draft
894	External resources:	draft
929	Make arithmetic operations on integers?	draft
930	Monitor `rsp` register and watch the changes after pushing into and popping from the stack to reverse a string:	draft
932	Do arithmetic operations with floating point numbers in assembly:	draft
933	Abbreviate function epilogue by using `leave` instruction:	draft
934	Call a procedure enclosed with a stack frame?	draft
935	Return integral or floating-point values from functions:	draft
936	Use local sections in a function to declare local variables:	draft
937	Align the stack after function call with stack frame:	draft
945	How can it be verified if defined macros are replaced in executable object using `objdump` command?	draft
946	Write into standard output stream directly using system calls?	draft
947	Read from standard input stream directly using system calls?	draft
948	Count input string before printing so that stack overflow is prevented?	draft
949	Limit reading from standard input by a maximum length to prevent stack overflows?	draft
952	Specify an octal number?	draft
953	Use preprocessor directives to conditionally compile a part of x64 assembly program?	draft
903	List source lines in debugging?	review
904	Change the line number of source listing?	review
905	Set disassembly flavor in gdb?	review
906	Store gdb configurations in file for future use?	review
907	Disassemble a function or line of source in gdb?	review
908	Examine an address in memory in gdb?	review
909	Set breakpoints in gdb?	review
910	Start execution of the debugging program in gdb?	review
911	Inspect registers in gdb?	review
913	Manipulate breakpoints in gdb?	review
914	Change executation of the debugging program in gdb?	review
915	Print variables through debugging session?	review
916	Enable TUI in gdb:	review
926	Read the ELF header of an executable object?	review
927	Read symbols of an executable object?	review
928	Sort executable object symbols based on its memory locations?	review
897	Convert decimal, binary, and hexadecimal representations of integral and floating point numbers?	review
898	Name x64 registers?	review
899	What is the name of <b>Instruction Pointer</b> register?	review
900	Name the flag registers?	review
901	Name SIMD registers?	review
950	What header contains Linux system calls?	review
896	Write exit procedure in x64 Assembly?	review
919	Exit program without directly writing the exit syscall?	review
917	Create values in data section of memory?	review
923	Consecutively store a sequence of data into read-only memory section?	review
924	Preserve uninitialized variables in a writable memory section?	review
918	Use external functions from C in x64 assembly code?	review
931	Specify how many bits each floating point number occupies for exponent and fraction?	review
941	Evaluate bit-wise operations?	review
942	Set and reset specific bits of numeric variable?	review
943	Check if its 8th bit of a quadword variable is set?	review
920	Conditionally change the execution flow?	review
921	Repeat execution of a code section by manually counting down?	review
922	Repeat execution of a code section by automatically counting down?	review
925	Load the address of an array into a register to run operations on?	review
940	Use calling conventions to transfer variables from callee to caller functions?	review
938	Expose a function to external linkage?	review
939	Expose a variable to external linkage?	review
944	Use inline procedures to avoid runtime overhead of function calls?	review
951	What header contains file operation constants?	review
954	Open and close a file in x64 assembly?	review
957	Append into a file in x64 assembly?	draft
958	Write to a specific offset of a file in x64 assembly?	draft
959	Read from a file in x64 assembly?	draft
960	Read from a specific offset of a file in x64 assembly?	draft
961	Delete a file in x64 assembly?	draft
964	How command line arguments stored in registers can be inspected in debugger?	draft
966	How many of inline assembly types are available and why should they be used?	draft
969	Fill a buffer with a value using a simple loop in x64 assembly?	draft
970	Fill a buffer with a value using a simple loop and `stosb` instruction?	draft
971	Fill a buffer with a value without using a loop?	draft
972	Copy contents of a buffer into another without a loop?	draft
973	Reverse copy the content of a buffer into another without a loop?	draft
974	Compare two strings in x64 assembly without a loop? <span style="color:green">(needs work)</span>	draft
975	Scan a string if a character exists in it without a loop?	draft
982	How does alignment of data in `.data` and `.bss` sections can improve performance of a program?	draft
983	How can we align data in `.data` and `.bss` sections in specific byte sizes?	draft
984	What register is responsible for controlling the floating-point operations?	draft
994	How many ways exist to create a docker image?	draft
995	How to write a basic Dockerfile?	draft
996	How to build an image using a Dockerfile?	draft
997	How to tag an image after building it?	draft
998	How to run a container?	draft
999	How to terminate the process and the container?	draft
1000	How to list the running processes in docker?	draft
1001	How to restart a stopped container?	draft
1002	How to check what files have been affected since the image was instantiated as a container?	draft
1003	How to make docker daemon accessible from outside network?	draft
1004	How to run a container in background?	draft
1005	How to see the logs of a container?	draft
1006	How to recover a service when it stops in the background?	draft
1007	How to monitor docker API traffic using socat?	draft
1008	How to search for images on Docker Hub?	draft
1029	Where are the linux modules located?	draft
1030	How to load a loadable kernel module?	draft
1031	What modules does <code>lsmod</code> show?	draft
1032	Where does <code>lsmod</code> collects information about modules?	draft
1033	Remove a loaded module from the kernel?	draft
1034	Where are module dependencies stored?	draft
1035	Dynamically load a module and its dependencies?	draft
1036	Retrieve module information?	draft
1037	What is the constituents of a vector?	draft
1038	What is the notation of a vector coordinated 3 units to the right and 2 units above?	draft
1039	What is the location of a coordinated vector?	draft
1040	Where is the standard position of a vector?	draft
1041	What two vectors are considered equal?	draft
1042	What is zero vector?	draft
1043	What is the result of addition of two vectors $v = (v₁, v₂)$ and $w = (w₁, w₂)$?	draft
1044	What is the geometric representation of addition of two vectors $v$ and $w$?	draft
5223	Run a workflow locally?	review
965	Use an assembly function in a C source?	review
967	Write a basic inline assembly in C programs?	review
968	Write extended inline assembly in C programs? (needs work)	review
963	Read command line arguments from an x64 assembly program?	review
955	Write content to a file in x64 assembly?	review
956	Truncate a file in x64 assembly?	review
977	Obtain the CPU information of the processor in x64 assembly?	review
978	Check the processors which version of SSE extensions do they support?	review
979	How many registers of SSE are available on any processor supporting it?	review
980	What are the two types of data that can be stored on SSE registers?	review
981	What are AVX registers and how much data can they hold?	review
987	Where should we check regularly for deprecation of features and removal on recent updates?	review
988	Enable docker daemon to start on boot up?	review
993	Manually run docker daemon?	review
989	Connect docker client to a remote server?	review
991	List all the contexts available to client?	review
990	Configure client to permanently connect to a remote server?	review
992	Switch client context to make it connect to another remote server?	review
986	What facilities are available to extend the Docker functionality?	review
985	What communication channel is used by containers to talk to each other?	review
1045	What are the properties of vector addition?	draft
1046	Practice: Compute the following vector sums $(2, 5, −1) + (1, −1, 2)$ and $(1, 2) + (3, 1) + (2, -1)$?	draft
1047	What is the result of multiplication of scalar $c$ to vector $v = (v₁, v₂)$?	draft
1048	What are the properties of scalar to vector multiplication?	draft
1049	Practice: Solve the following equations $x − (3 , 2 , 1) = (1 , 2 , 3) − 3x$ and $x + 2(v + w) = −v − 3(x − w)$ for the vector $x$?	draft
1050	What is the result of subtraction of vector $v = (v₁, v₂)$ to vector $w = (w₁, w₂)$?	draft
1051	What is the geometric representation of subtraction of two vectors $v$ and $w$?	draft
1052	What are linear combinations of vectors $v_1 , v_2 , ... , v_k$?	draft
1053	What are the standard basis vectors?	draft
1055	Practice: compute $3e_1 - 2e_2 + e_3 \\in \\mathbb{R}^3$?	draft
1011	Install Cmake?	review
1012	Configure and build a project?	review
1013	What are the artifacts of CMake configuration stage?	review
1014	Write a minimal CMake listfile?	review
1015	What are the stages of building by cmake?	review
1016	Specify which generator should be used in build?	review
1017	Where is the source directory?	review
1018	What is the definition of a project in CMake?	review
1019	What variable holds the project name?	review
1020	Determine if the project is the top level project?	review
1021	What variable holds project description?	review
1022	What variables hold project version information?	review
1023	Declare and initialize a variable?	review
1024	Clear a variable?	review
1025	Reference a variable?	review
1026	Reference two nested variables?	review
1027	How many scopes exist?	review
1028	Make variable visible to its parent scope?	review
1056	Practice: Write $(3,5,-2,-1)$ as a linear combination of $e_1,e_2,e_3,e_4 \\in \\mathbb{R}^4$?	draft
1057	What is the result of dot product operation?	draft
1058	What is the geometric representation of the dot product of two vectors?	draft
1059	How does dot product work on higher dimensions?	draft
1060	What are the properties of the dot product?	draft
1061	Practice: compute $\\frac{1}{2}(-1,-3,2).(6,-4,2)$?	draft
1062	What is the Cauchy Schwarz inequality theorem?	draft
1063	What is the Triangle Inequality theorem?	draft
1064	Compute the length of a vector?	draft
1065	Practice: compute the length of $\\vec{v} = (3,4)$?	draft
1066	Practice: compute the length of $\\vec{v} = (\\cos{\\theta},\\sin{\\theta})$?	draft
1067	What are the properties of vector length?	draft
1068	What is the normalization of a vector?	draft
1069	Evaluate the unit vector of any non-zero vector?	draft
1070	Practice: Normalize the vector $(3,4) \\in \\mathbb{R}^2$?	draft
1071	What are the two properties of linear transformation functions?	draft
1072	Determine whether or not function $T(v_1, v_2) = (1+v_1, 2+v_2)$ when $T: R^2 → R^2$ is a linear transformation?	draft
1073	Determine whether or not function $T(v_1, v_2) = (v_1-v_2, v_1v_2)$ when $T: R^2 → R^2$ is a linear transformation?	draft
1074	Determine whether or not function $T(v_1, v_2) = (v_1-v_2, v_1+v_2)$ when $T: R^2 → R^2$ is a linear transformation?	draft
1075	Using the fact that linear transformation functions preserve linear combinations, write linear transformation T(v) as linear combination of its basis vectors when T: R^n → R^n?	draft
1076	Compute $T(2,3)$ supposing $T: R^2 → R^2$ is a linear transformation for which we have its standard basis vector transformations $T(e₁)=(1,1)$ and $T(e₂)=(-1,1)$.	draft
1077	Find a general formula for $T(v₁,v₂)$ when $T: R^2 → R^2$ is a linear transformation for which we have its standard basis vector transformations $T(e₁)=(1,1)$ and $T(e₂)=(-1,1)$.	draft
1078	What method is used to construct a matrix called the standard matrix of $T$ that does the linear transformation by matrix multiplication?	draft
1079	Find the standard matrix of linear transformation $T(v₁,v₂) = (v₁+2v₂, 3v₁+4v₂)$ when $v₁,v₂ \\in \\mathbb{R}^2$?	draft
1080	Find the standard matrix of linear transformation $T(v₁,v₂) = (3v₁-v₂+v₃, 2v₁+4v₂-2v₃)$ when $v₁,v₂ \\in \\mathbb{R}^2$?	draft
1081	What mathematical operations on standard matrix of linear transformations and scalars are allowed?	draft
1082	What is the result of multiplication of zero linear transformation function to any vector?	draft
1083	What is the result of multiplication of identify linear transformation function to any vector?	draft
1084	What is the main property of diagonal linear transformation function $T: R^n → R^n$?	draft
1085	How can we construct a linear transformation Pu that projects a vector onto a line?	draft
1086	Find the standard matrices of the linear transformations that project onto the lines in the direction of vector u = (1,0) \\in \\mathbb{R}^2?	draft
1087	Find the standard matrices of the linear transformations that project onto the lines in the direction of vector w = (1,2,3) \\in \\mathbb{R}^3?	draft
1088	What is the linear transformation of reflection of a space through a line in the direction of the unit vector u?	draft
1089	Find the standard matrices of the linear transformations that reflect through the lines in the direction of u = (0,1) \\in \\mathbb{R}^2?	draft
1090	Find the standard matrices of the linear transformations that reflect through the lines in the direction of w = (1,1,1) \\in \\mathbb{R}^2?	draft
1091	Find the entries of the vector that is obtained by reflecting v = (-1,3) through the line going through the origin at an angle of π/3 counter-clockwise from the x-axis.	draft
1092	What is the linear transformation of rotation in two dimensions?	draft
1093	Find the standard matrix of the linear transformation that rotates R^2 by π/4 radians counter-clockwise?	draft
1094	Find the standard matrix of the linear transformation that rotates R^2 by π/6 radians clockwise?	draft
1095	Rotate vector v = (1,3) by π/4 radians counter-clockwise?	draft
1096	Rotate vector w = (√3,3) by π/6 radians clockwise?	draft
1097	What is the linear transformation function of rotation in higher dimensions?	draft
1098	Rotate v = (3,-1,2) around the z-axis by an angle of θ = 2π/3 in the direction from the positive x-axis to the positive y-axis?	draft
1099	How can two linear transformation functions T: R^n → Rm and S: Rm → R^n  be in a composition operation S○T: R^n → Rp?	draft
1100	Find the standard matrix of the linear transformation T that reflects R^2 through the line y = ¾x and then stretches it in the x-direction by a factor of 2 and in the y-direction by a factor of 3?	draft
1101	Create a joinable thread.	draft
1102	code sample	draft
1103	Create a detached thread.	draft
5247	Locate the files of a command?	review
1106	How does spinlocks operate on a CPU?	review
1105	What is a spinlock?	review
1107	Define a spinlock in module source?	review
1108	Lock a previously defined spinlock in module source?	review
1122	When access to a resource should be synchronized?	draft
1123	How many synchronization mechanisms are available in the kernel?	draft
1124	What is the granularity of synchronization operations in the kernel?	draft
1125	What locking types are available in the kernel?	draft
1126	What conditional variable types are available in the kernel?	draft
1127	What are the use cases of conditional variables in the kernel?	draft
1128	What does the locking mechanism in the kernel depend on?	draft
1129	What is a simple workaround for a system to ensure atomicity of synchronization operations?	draft
1130	How does spinlocks operate?	draft
1131	How does preemption toggle in a CPU?	draft
1132	Why does changing of preemption status depends on atomic operations?	draft
1133	Create and initialize a spinlock using macro?	draft
1134	Dynamically create and initialize a spinlock?	draft
1135	Lock and unlock a spinlock?	draft
1136	What are the use cases of spin_lock_irq and spin_unlock variations?	draft
1137	What are the side effects of disabling and enabling interrupts by spinlocks?	draft
1138	What is the safe way of enabling and disabling spinlocks?	draft
1139	What can invoke a scheduler in critical section?	draft
1140	When is the consequence of calling the scheduler in a critical section?	draft
1141	What is the difference between a mutex and a spinlock?	draft
1142	What constructs a mutex?	draft
1143	Statically define and initialize a mutex?	draft
1144	Dynamically define and initialize a mutex?	draft
1145	How many functions exist to acquire a mutex?	draft
1146	Unlock a mutex?	draft
1147	Check if a mutex is locked?	draft
1148	What mutex locking function is recommended to be used?	draft
1149	What are the rules to using mutex in the kernel?	draft
1150	Where is spinlock defined in the kernel?	draft
1151	Where is mutex defined in the kernel?	draft
1152	What are the use cases of try-lock functions?	draft
1153	What are the try-lock functions for spinlock and mutex?	draft
1154	Try locking a spinlock without spinning?	draft
1155	Try locking a mutex without sleeping?	draft
1156	Specify the execution procedure of an executable?	draft
1157	Which direction each of the sections grow in binary files?	draft
1158	Specify register groups in assembly language?	draft
1159	When buffers become vulnerable to stack overflows?	draft
1160	Write past the array bounds in C?	draft
1161	What values does the calling convention put on the stack?	draft
1162	What happens when data is writen past the array boundaries on the stack?	draft
1163	Control the execution path of a program vulnerable to buffer overflow?	draft
1164	Translate a hexadecimal address into shellcode?	draft
1165	Get shell access by exploiting a program vulnerable to buffer overflow?	draft
1166	Inject an already prepared shellcode into a process?	draft
1167	What are the use cases of Curiously Recurring Template Pattern?	draft
1168	Use curiously recurring template pattern to use derived type functionalities inside the base type?	draft
1169	Use mixin inheritance pattern to implement a composition type?	draft
1170	Use static polymorphism pattern to implement multiple variations of a class ensuring all having the same interface?	draft
1171	Inspect the value of c++ standard number using predefined macro:	draft
1172	Prefer `nullptr` over `NULL`:	draft
1173	Use automatic type deduction with auto:	draft
1174	Initialize objects with uniform initialization:	draft
1175	Allow implicit conversion for member initializer list on constructor:	draft
1176	Use range-based for instead of raw for loops:	draft
1177	Use rvalue references where copy is not necessary:	draft
1178	Rvalue reference rules:	draft
1179	Use raw string literals to avoid escaping special characters:	draft
1180	Check whether *move assignment* for two passed types of a template function is possible:	draft
1181	Express possible usage of **noexcept**:	draft
1182	Make a function compile time expression:	draft
1183	Use parameter pack in variadic templates:	draft
1184	Use alias templates:	draft
1185	Use default template argument:	draft
1186	Define a lambda and call it directly:	draft
1187	Make lambda stateful with `mutable` operator:	draft
1188	Use decltype to evaluate the type of an expression:	draft
1189	Deduce function return type by decltype:	draft
1190	Use scoped enumerations:	draft
1191	Evaluate the underlying type of an enumeration type:	draft
1192	Use nontype template parameter:	draft
1193	Use `typename` keyword to specify followed expression a type:	draft
1194	Relax the rule of exact match in methods taking an argument with the same type of class, by providing a different template type for the member function:	draft
5266	Generate a sequence of numbers?	review
1111	How does spinlocks affect preemtion after locking and unlocking?	review
1112	Store and restore previous IRQs status when using spinlocks?	review
1113	How a critical section can be protected from being preemted by kernel?	review
1114	What is a mutex and how does it operate?	review
1115	Initialize a mutex in the kernel?	review
1116	Acquire a mutex in the kernel?	review
1117	Release an acquired mutex in the kernel?	review
1118	Check mutex locking availability before acquiring it?	review
1119	What are specific rules while using mutexes in the kernel?	review
1120	What is more efficient between spinlocks and mutexes compared in terms of CPU cycles?	review
1110	Prevent deadlock caused by IRQs when using spinlocks?	review
1195	Prevent implicitly declared copy constructor call when template constructor provided to enable implicit type conversions when objects are copied:	draft
1196	Explicitly initialize fundamendal types in template:	draft
1197	End program without returning from `main()`:	draft
1198	Use namespace to avoid name colision:	draft
1199	Use namespace alias to shorten nested namespaces:	draft
1200	Use using declaration to make namespace objects locally visible:	draft
1201	Use using directive to flatten a namespace:	draft
1202	Include header files for C++ standard library and backward compatible C headers:	draft
1203	Use exceptions to handle unexpected conditions:	draft
1204	Use error code and error conditions to handle errors:	draft
1205	What is <code>std::pair</code> type and where is it defined in C++ standard library?	draft
1206	How to construct a <code>std::pair</code> using its default constructors?	draft
1207	How to construct a <code>std::pair</code> using its copy constructor or copy assignment operator?	draft
1208	How to construct a <code>std::pair</code> using its move constructor or move assignment operator?	draft
4156	What C++ entities can be exported as module interface?	draft
1209	How <code>std::make\\_pair</code> can be used to create a <code>std::pair</code>?	draft
1210	How member variables of <code>std::pair</code> struct can be accessed?	draft
1211	What comparison operators does the <code>std::pair</code> support?	draft
1212	How two <code>std::pair</code> objects can be swapped?	draft
1213	Which containers use <code>std::pair</code> to manage their elements?	draft
4249	Evaluate alignment of structures considering the size of their members?	draft
1214	How to construct parameter types of a <code>std::pair</code> piecewise by using tuples as its parameters?	draft
1215	How a <code>std::tuple</code> can be constructed?	draft
1216	How to construct tuples using <code>make\\_tuple</code> function helper?	draft
1217	How to access elements of a tuple?	draft
1218	What comparison operators does a tuple support?	draft
1219	How to swap two tuple objects?	draft
1220	How to assign tuple elements directly on objects using <code>tie</code>?	draft
1221	How does explicit constructor of a tuple can be initialized with initializer lists?	draft
1222	How to identify how many types does a tuple hold?	draft
1223	How to retrieve the type of tuple elements?	draft
1224	How to concatanate elements of two tupples to create another?	draft
1225	How to convert between tuple and pair?	draft
1226	What ownership concepts do smart pointers implement in standard library?	draft
1227	What pointers implement shared ownership in standard library?	draft
1228	What pointers implement exclusive ownership in standard library?	draft
1229	What exception an empty <code>std::weak\\_ptr</code> would throw when dereferrenced?	draft
1230	What class should be inheritted to enable sharing this pointer?	draft
1231	What operations does std::shared\\_ptr support in standard library?	draft
1232	How std::shared\\_ptr can be constructed?	draft
1233	What is the advantage of using std::make\\_shared helper function?	draft
1234	How to assign a new pointer to <code>std::shared\\_ptr</code> when it was default constructed or previous object which the pointer was pointing to is destroyed?	draft
1235	How to count the references of a <code>std::shared\\_ptr</code> object?	draft
1236	How does the ownership of shared pointers get destroyed?	draft
1237	How to create a shared pointer with a custom deleter?	draft
1238	Use asynchronous call to a function and retrieve return value as result?	draft
1239	Why is it necessary to take the returning future object from the async call?	draft
1240	What are the possible executions when calling a function asynchronously?	draft
1241	Specialize a future that calls a function with no return value?	draft
1242	What are the available async policies?	draft
1243	When does asking for result might cause execution of two threads in sequence?	draft
1244	What is the best practice for running functionalities asynchronously?	draft
1245	What would happen if the system fails to execute functionality after directing async call with async launch policy?	draft
1246	What happens when the result of functionality is never requested after an async call with async launch policy?	draft
1247	What if the returning future of an async call gets discarded?	draft
1248	What are the use cases of using deferred launch policy over async calls?	draft
1249	What happens when exceptions raise in async called functions?	draft
1250	What is the state of a future after finishing execution?	draft
1251	What methods a future provides on its interface to wait for the execution?	draft
1252	What happens to a future when <code>wait()</code> is called before execution starts?	draft
1253	What are the possible future states after a call to waiting functions?	draft
1255	How to list available images on host?	review
1257	How to exit a container's shell without killing its process in docker?	review
1258	How to attach host's shell to the shell of a running container?	review
1259	How to stop a container?	review
1260	How to start a stopped container?	review
1261	How to stop and remove a container?	review
1262	How to list containers in docker?	review
1263	How to verify that a container was successfully deleted by docker?	review
1264	How to retrieve detailed information of installed docker on host?	review
1265	How to pull an image from official repositories?	review
1266	How to pull an image from unofficial repositories?	review
1267	How to pull an image from other registeries?	review
1268	What is a dangling image in docker and how can we list them?	review
1269	How to remove all dangling images in docker?	review
1270	What are the common filtering options for listing images in docker?	review
1272	How to search an image on registeries?	review
1273	How to inspect the layers of an image?	review
1275	How to see the digests of an image in docker?	review
1276	How does docker use manifests to fetch host compatible image layers when pulling images?	review
1277	How to create an image for different platforms and architectures?	review
1279	What are docker restart policies and how can they be applied to containers?	review
1280	What is the behavior of <code>always</code> docker restart policy?	review
1281	What is the <code>unless-stopped</code> docker restart policy?	review
1282	What is the <code>on-failure</code> docker restart policy?	review
1284	How to write a Dockerfile for a Linux based image containing a nodejs program?	review
1285	How to build an image from its Dockerfile?	review
1286	What are the prerequisites of pushing images into DockerHub?	review
1287	How is it possible to push an image into a registry other than the DockerHub?	review
1288	How to add an additional tag to an image?	review
1289	How to write comments in Dockerfile?	review
1356	Use <code>auto</code> to initialize objects in different forms?	draft
1357	Create type aliases?	draft
1358	Create alias templates?	draft
1359	Use uniform initialization to initialize objects of types?	draft
1360	Initialize non-static member variables?	draft
1361	Evaluate alignment of structures by considering theirs size of members?	draft
1363	Set alignment of structures?	draft
1364	Use scoped enumerations<span style="color:green">(c++11)</span>?	draft
5270	Remove an empty directory?	review
1343	Verify the integrity of images?	review
1352	Configure <b>Docker Content Trust</b> to sign images?	review
1353	Inspect signing data of an image?	review
1354	Permanently configure docker to verify image push and pull operations?	review
1297	How many types of swarm nodes exist?	review
1307	What is advantage of locking a swarm?	review
1322	How many publishing modes are available in docker service creation?	review
1347	Join new managers in a swarm?	review
1348	Revoke compromised token and issue new swarm join-token?	review
1342	What analyzing tool scans images for vulnerability?	review
1344	What kernel feature provides container isolation?	review
1345	What kernel feature provides container resource management?	review
1346	Secure the network connections of a swarm?	review
1349	Inspect a node’s client certificate?	review
1351	Manage CA related configuration?	review
1355	Create a secret on swarm to store credentials?	review
1338	Install a plugin on docker?	review
1339	List available plugins?	review
1330	Create a volume?	review
1335	Create a volume in Dockerfile?	review
1340	Create a volume with an installed plugin?	review
1331	List available volumes?	review
1332	Inspect into a volume?	review
1333	Delete a volume?	review
1336	Attach a volume to a container?	review
1337	Attach a volume to a cluster?	review
1341	What is the potential data corruption on a shared volume between nodes?	review
1365	Export enumerators of a scoped enumeration by `using` directive<span style="color:green">(c++20)</span>?	draft
1366	Use override to ensure correct declaration of virtual methods both in base and derived classes?	draft
1367	Use final to prevent virtual method override?	draft
1368	Use final to prevent inheritance of a class?	draft
1369	Use range-based for loop to iterate on a range<span style="color:green">(c++11)</span>?	draft
1370	Enable range-based for loops for custom types?	draft
1371	Avoid implicit conversion of classes using explicit constructors and conversion operators?	draft
1372	Use unnamed namespaces instead of static globals?	draft
1373	Use an unnamed namespace to use an internal linkage variable as a non-type template argument?	draft
1374	Use inline namespaces for symbol versioning<span style="color:green">(c++11)</span>?	draft
1375	Use structured bindings to handle multi-return values<span style="color:green">(c++17)</span>?	draft
1376	Simplify code with Class Template Argument Deduction<span style="color:green">(c++17)</span>?	draft
1377	What is the C++ approach for converting integers and floating-point numbers into strings?	draft
1378	How string represented numbers can be converted to numeric types in C++?	draft
1379	What is the second and third parameters of `std::ston` functions family?	draft
1291	How to view the instructions that were used to build an image?	review
1292	How to make docker ignore caches in creation of image layers?	review
1293	How does involved filesystem invalidate docker cache when the corresponding instruction has not changed in Dockerfile?	review
1294	What is a squashed image and how can it be built?	review
1295	How can we avoid installing excessive packages by <code>apt</code> when installing packages in docker images?	review
1296	What is a <b>Docker Swarm</b>?	review
1298	How does a swarm is maintained?	review
1299	What are different swarm modes?	review
1300	How to initialize a swarm?	review
1301	What is the default port for <b>Docker Swarm</b>?	review
1302	how to list available <i>swarm</i> nodes?	review
1303	How to extract tokens to join Docker nodes to a swarm?	review
1304	How to join Docker nodes to a swarm?	review
1305	How does the high availability mechanism of <b>Docker Swarm</b> work?	review
1306	What are the best practices to apply on Swarm high availability?	review
1308	How to apply a lock to a swarm?	review
1309	How to check the current swarm unlock key?	review
1310	How to re-join Docker nodes to a locked swarm?	review
1312	How to create a docker service?	review
1311	How many ways exist to create a docker service?	review
1313	How to list services running by docker?	review
1314	How to list the service replicas in docker?	review
1315	How to inspect a docker service?	review
1317	How to scale up and down a docker serivce?	review
1318	How to remove a docker service?	review
1319	How to create an overlay network for a docker service?	review
1320	How to list available docker networks?	review
1321	How to create a docker service and attach it to a network?	review
1323	How to create docker service replicas on <b>host mode</b>?	review
1324	How to push an update image to the swarm in a staged manner?	review
1325	How to troubleshoot docker services by printing its logs?	review
1326	How to configure docker daemon to log on different logging drivers?	review
1327	What makes the urge to make swarm backups?	review
1328	What is a swarm backup file contained of?	review
1329	How to perform a docker swarm backup and restore operation?	review
1334	Delete all volumes?	review
1380	What characters a valid integral number can have in string to numeric conversion functions?	draft
1381	What exceptions do numeric to string conversion functions throw when conversion fails?	draft
1382	What are special floating-point values representing infinity and not-a-number in string to floating-point conversion functions?	draft
1383	How to get the smallest and largest finite numbers of a type using `std::numeric_limits<T>` class template?	draft
1384	Specify a simple implementation of finding the minimum number in a range of a generic type?	draft
1385	How can we retrieve the number of bits excluding the sign bit if present, for integral types and the number of bits of the mantissa for floating-point types?	draft
1386	How can we retrieve the longest possible digits of a decimal type that can be represented without a change?	draft
1387	How `std::numeric_limits<T>` class template can be used to identify if a numeric type is signed?	draft
4251	Set alignment of object types?	draft
1388	How `std::numeric_limits<T>` class template can be used to verify a numeric type is an integer?	draft
1389	How to make sure if a floating-point value is exact using `std::numeric_limits<T>` class template?	draft
1390	How to verify if a floating-point value holds infinity value?	draft
1391	How can we get the minimum and maximum value that a random engine can generate?	draft
1392	How seed a random generator to initialize the algorithm corporated within it?	draft
1393	What method does the random engines use to generate a random number?	draft
1394	How can we discard generated number of a random engine?	draft
1395	How to initialize all bits of internal state of a psudo-random number generator?	draft
1397	How to create a user-defined literal in order to construct a type in compile time?	draft
1398	Express different types of strings that string literals can generate?	draft
1399	Express different types of chrono objects that chrono literals can generate?	draft
1400	Express how literals can be used to construct a `std::complex` object?	draft
1401	What signatues can a literal operator or a literal operator template have to overload user-defined literals?	draft
1403	How to create strings containing special characters without escaping them?	draft
1406	How to reverse a string?	draft
1407	How to trim a string?	draft
1408	How to remove all occurances of a character from a string?	draft
1409	How to split a string based on user specified delimiter?	draft
1410	How a `regex` object can be constructed?	draft
1411	How to make regular expressions case insensitive?	draft
1412	How regular expressions can be used to verify the format of a string?	draft
1413	How to retrieve submatches of a regular expresssion matched with a string?	draft
1414	How can we use different regular expression engines?	draft
1415	How to search for the first occurance of a pattern in a string using regular expressions?	draft
1416	How to find all occurences of a regular expression in a given text?	draft
1417	How to replace the content of a string using regular expressions?	draft
1418	How to reposition submatches of a string using regular expressions?	draft
1419	How `std::string_view` can be used to prevent string copy?	draft
1422	How to construct a `std::basic_string` from a `std::basic_string_view`?	draft
1423	How to notify compiler to default construct a class member function?	draft
1424	How to notify compiler that a function is `deleted`?	draft
1425	When does the compiler generate each of special member functions of a class and what prohibits it?	draft
1426	How to specify that a class is not copyable and implicitly not movable?	draft
1427	How to declare that class that is not copyable, but is movable?	draft
1428	How to declare a class member function `defaulted` outside of the body of that class?	draft
1429	How to define an anonymous lambda as a primitive function in algorithm function templates to count the numbers of a range that are between a minimum and maximum value?	draft
1430	How to define a named lambda as a primitive to be used in algorithm function template to count possitive numbers of a range?	draft
1431	How to define a generic lambda function as a primitive to be used in algorithm function templates to accumulate values of a range?	draft
1432	What are the different capture forms of lambdas both in forms of copy and reference?	draft
1404	Express different types of strings that raw string literals can generate?	review
1420	Find the first and last occurance of a character in a <code>string_view</code>?	review
1421	Remove tailing and trailing characters from a <code>string_view</code>?	review
1405	Convert a string to lowercase or uppercase?	review
1433	What is the general form of a lambda expression and how would each part affect its behavior?	draft
1434	How to make a lambda capture an rvalue reference as a means of move-semantics?	draft
1435	How to capture an entire temporary object by a lambda within it to use its member functions and variables?	draft
1436	How to write a template lambda to restrict the use of it with only some types, such as a container or types that satisfy a concept? <span style="color:green">(c++20)</span>	draft
1437	How to write a template lambda to make sure two or more arguments of it actually have the same type? <span style="color:green">(c++20)</span>	draft
1438	How to write a template lambda when you need to know the parameter type so that, for example, we can create instances of it, invoke its static methods, or use its iterator types? <span style="color:green">(c++20)</span>	draft
1439	How to perfect forward a template lambda? <span style="color:green">(c++20)</span>	draft
1440	How to write a recursive lambda so that it calculates the fibonacci sequence?	draft
1441	How to write a variadic function template to add variable number of arguments?	draft
1442	How to write a fold expression to simplify a variadic function template that adds arbitrary values?	draft
1443	How to write a fold expression with less-than comparison operator so that variadic function template `min()` returns the smallest object in an arbitrary number of objects?	draft
1444	How to implement a higher-order mapping function to apply a function to the elements of a range and return a new range in the same order?	draft
4157	What C++ entities cannot be exported as module interface?	draft
1445	How to use a higher-order mapping function to retain a vector of absolute values from a vector of integral numbers?	draft
1446	How to implement a higher-order folding function to apply a combining function to the elements of the range to produce a single result?	draft
1447	How to use a higher-order folding function template to accumulate values of a vector of integral types?	draft
1448	How to use a higher-order folding function template to count the number of words in a text based on their already computed appearances, available in a `std::map<string, int>`?	draft
1449	How to uniformly invoke any callable?	draft
1450	How to uniformly call a variadic function template? <span style="color:green">(needs work)</span>	draft
1451	How to write a header to avoid duplicate definitions?	draft
1452	How to write compiler-specific code using conditional compilation with compiler macros?	draft
5470	Manually link to ftxui library?	review
1453	How to write target-specific code based on compiler and system architecture?	draft
1454	How to write a configuration-specific code using compiler variables?	draft
1455	How can stringizing operator be used to create an identifier?	draft
1456	How can concatanation operator be used to concatanate identifiers together?	draft
1457	How to use compile-time assertion to check conditions?	draft
1458	How to use compile-time assertion to to make sure a class can be used with POD types?	draft
1459	How to conditionally compile a class by enabling its template parameter types?	draft
1460	How to select compile time branches with `constexpr if`?	draft
1461	How to use attributes to prevent user from discarding a return value?	draft
1462	How to use attributes to prevent user from discarding enumeration as function return types?	draft
1463	How to use attributes to mark a function as deprecated?	draft
1464	How to use attributes to tell compiler not to warn about unused variables?	draft
1465	How to tell compiler about intentional fallthrough cases of a switch statement?	draft
1466	How to tell compiler which cases of switch statements are more possibly used than others?	draft
1467	How to write into a <code>std::ofstream</code> object and discarding its previous content?	draft
1468	How to append data into a <code>std::ofstream</code> object?	draft
1469	How to write into a <code>std::ofstream</code> object in binary format and discard its previous content?	draft
1470	How to write a sequence of data into a <code>std::ofstream</code> in binary form?	draft
1471	How to evaluate the size of a file by changing the position of file indicator to the end and then moving back?	draft
1472	How to read the entire content of a file to a buffer?	draft
1473	What template parameters does the <code>std::basic\\_fstream</code> and its input/output ancestor classes can take and what are their typedef abbreviations?	draft
1474	Which constructors of <code>std::basic\\_fstream</code> class internally calls <code>open()</code> on its underlying <code>std::basic\\_filebuf</code> raw file object?	draft
1475	What are the different open modes of a <code>std::basic\\_fstream</code> file object?	draft
1476	How to read how many bytes have been successfully read in a read operation from a <code>std::basic\\_fstream</code> object?	draft
1477	What exceptions does <code>std::basic\\_fstream</code> throw when read or write operations fail?	draft
1478	How to initialize a <code>std::vector</code> object with the content of a <code>std::basic\\_ifstream</code> object directly using <code>std::istreambuf\\_iterator</code> iterator?	draft
1479	How to assign the content of a <code>std::basic\\_ifstream</code> object into a <code>std::vector</code> object?	draft
1480	How to write the content of a <code>std::basic\\_ifstream</code> object into a <code>std::vector</code> object using <code>std::ifstreambuf\\_iterator</code> and <code>std::back\\_inserter</code> adapter?	draft
1482	Import a module in a translation unit?	draft
1489	Specify requirements on template arguments with concepts?	draft
1484	What are the constituents of a module?	review
1483	Express a module to be used within another translation unit?	review
1485	What is a module partition?	review
1486	What is a module interface partition?	review
1487	What is a module implementation partition?	review
1488	What is the difference between module partitions and submodules?	review
1491	What are the building blocks of the Poky build tool?	review
1493	What are the responsibilities of OpenEmbedded Core in the Yocto Project?	review
1494	What are the responsibilities of Metadata in the Yocto Project?	review
1490	What is the default referencing build system in the Yocto Project?	review
1495	What are the release cycles of the Yocto Project?	review
1496	What is Poky?	review
1497	What is the usage of bitbake?	review
1498	How does bitbake operate?	review
1499	What is OpenEmbedded Core?	review
1501	Get poky source code?	review
1500	What metadata is made of?	review
1503	What configuration variable is required for build system?	review
1504	Get poky source tree?	review
1505	Prepare the poky build environment?	review
1509	What is the role of <code>conf/local.conf</code> file?	review
1510	Define the target machine to the project?	review
1511	List all available images?	review
1512	What predefined images exist in poky?	review
1513	Build an image?	review
1514	What layer provides necessary tool to run built images?	review
1515	What is the role of Toaster in the Yocto project?	review
1516	Install toaster and its requirements?	review
1517	Start toaster?	review
1521	What is the role of classes in layers?	review
1518	Where is the configuration file for each layer?	review
1519	What metadata types exist?	review
1520	What is the role of configurations in layers?	review
1523	What configuration files are be parsed by bitbake?	review
1524	What configuration variable is used to list required layers in metadata?	review
1525	What is the metadata parsing order of bitbake?	review
1526	When does architecture specific metadata loads into metadata?	review
1527	What dependencies exist in metadata?	review
1528	What recipes will only run on host and not the target device?	review
1529	What configuration variables hold metadata dependencies?	review
1530	What configuration variable is used to satisfy metadata dependecies?	review
1531	What configuration variable signifies higher precedence of a provider over others?	review
1532	How many ways exist for a provider to provide a functionality?	review
1533	When do we use virtual namespace in provider names?	review
1535	Override the default version preference of bitbake over selecting between multiple versions of the same provider?	review
1536	Change the default version preference of a recipe?	review
1537	What mechanism does bitbake have to fetch sources?	review
1538	What recipe variable is used to fetch source files?	review
5481	Create a full-size screen?	review
1539	What mechanism is used by bitbake to verify downloaded files?	review
1540	Override the download path in a layer?	review
1541	How does bitbake avoid conflicts between possible git repositories with the same project name?	review
1542	What are the use cases of <code>SRCREV</code> variable?	review
1543	Specify branch and protocol of a git repository to be fetched?	review
1544	What are the use cases of mirrors?	review
1545	What locations are searched by bitbake to download a repository?	review
1546	Instruct the build system to redirect any download request to a local server?	review
1547	Share downloads between multiple build directories?	review
1548	Disable internet access to bitbake?	review
1549	Run a specific task?	review
1550	List the defined tasks for a recipe?	review
1551	What is a task?	review
1552	What are the common tasks specified in each recipe?	review
1553	What are the entries of the build directory after image creation?	review
1554	Which directories are critical to know for analyzing the build process and troubleshooting?	review
1555	What directory is modified in each step of the build process?	review
1556	What is the structure of work directory?	review
1557	Reduce disk usage after each recipe compilation by removing artifacts?	review
1559	What is the general approach to fix broken builds when a missing header or link failure happens?	review
1558	Where is the list of sysroot providers?	review
1560	What package formats are available to poky?	review
1561	Select a package format?	review
1562	What package installation scripts are available in a recipe?	review
1563	Run post installation scripts on target devices instead of host?	review
1564	What variable holds the path to the installation directory?	review
1565	What is the best practice to run target specific processes?	review
1566	What is a shared state cache?	review
1567	Clean the shared state cache?	review
1568	Enforce building from scratch?	review
1569	What variables are used in package versioning of poky?	review
1570	What variables are used to specify runtime package dependencies?	review
1571	What is the role of rootfs directory?	review
1572	What variable holds the list of packages to be installed into rootfs?	review
1573	What variable holds the filesystem types to be generated?	review
1574	What are the steps of rootfs directory generation?	review
1582	How many types a metadata covers?	review
1575	What is a package feed?	review
1576	What are the use cases of package feeds?	review
1577	What is the role of PR service in package versioning?	review
1578	Enable PR service in a layer?	review
1579	What is the role of package index?	review
1580	Where do installed packages reside?	review
1581	Add support for package management to an image?	review
1583	What is the language of a recipe?	review
1585	Assign value to a variable in a recipe file?	review
1586	Use variable expansion in value assignment?	review
1587	How many expansion rules exist?	review
1588	How many assignments with different priorities exist?	review
1589	Use an immediate variable expansion?	review
1590	Append and prepend a value to a list?	review
1591	Append and prepend a value to a string?	review
1592	What are the differences between both variations of string append and prepend operators?	review
1593	Remove an item from a list?	review
1594	What variable is used to control the conditional metadata override?	review
1595	Conditionally assign value to a variable only when target device is Beagle Bone?	review
1597	How many ways exist to include another recipe file?	review
1598	Use inline Python code?	review
1599	Define a Shell function inside a recipe?	review
1600	Define a Python function inside a recipe?	review
1601	Get access to global datastore of bitbake within a Python function?	review
1602	Inherit from a class inside a recipe?	review
1603	What is a toolchain?	review
1604	What is an SDK?	review
1605	Generate a native SDK for development on target device?	review
1606	What SDK types can bitbake generate?	review
1607	In how many places an SDK can be generated?	review
1608	Build a generic standard SDK?	review
1609	Where are the generated SDK files after build?	review
1610	Install an SDK?	review
1624	What are the common ways of debugging the metadata?	draft
1625	What are the advantages of checking the build history?	draft
1626	Enable build history to observe differences between subsequent builds?	draft
1627	Check the difference of two subsequent builds?	draft
1628	Where can we check for installation splits?	draft
1629	Where can we check for the failures due to missing artifacts in sysroot?	draft
1630	What tool can be used to inspect built packages?	draft
1631	Find all packages related to a built package?	draft
1632	Find the package that owns a specific file?	draft
1633	Find the current version of a package?	draft
1634	List all the files for the given package?	draft
1635	What logging functions are available for use in Python and Shell functions?	draft
1636	Where are the Python and Shell logs stored?	draft
1637	What tool can be used to inspect value changes of a variable?	draft
1638	Inspect the value changes of a variable in a metadata?	draft
1639	What are the use cases of a development shell?	draft
1640	Run a development shell over the kernel image?	draft
1641	Install debugging packages containing debug symbols in an image?	draft
1642	Why remote debugging is usually a better option than debugging on target device?	draft
1643	List all layers?	draft
1644	What are the essential properties of a layer?	draft
1645	What kinds of layers exist?	draft
5494	Create a text widget?	review
1646	What is the common way to deal with permanent chances that need to be applied as special requirements?	draft
1647	What are the entries of a layer?	draft
1648	Add an existing meta layer?	draft
1649	Check for the availability of a layer in the community?	draft
1650	Add an existing meta layer from OpenEmbedded Layer Index?	draft
1651	Create a new layer?	draft
1652	What needs to be changed in the base of a layer right after its creation?	draft
1653	What is an image?	draft
1654	What are the possible ways of creating a new image?	draft
1655	Add a new features and remove an existing feature from an image?	draft
1656	Create a new imagine from scratch?	draft
1657	What image features are currently supported?	draft
1658	What happens when both openssh and dropbear appears for installation?	draft
1659	Where do the built packages go?	draft
1660	What class provides the steps to build a project based on autotools?	draft
1661	Copy the recipe file to the target layer?	draft
1662	What are the necessary actions to add support to a new machine definition?	draft
1663	What variable holds the list of software needed by a machine to be installed?	draft
1664	What values are currently available for <codde>MACHINE_FEATURES</code>?	draft
1665	At what stage the machine image should be created?	draft
1666	What tool is used to partition an image?	draft
1667	Add partitions to an image?	draft
1668	When do we have to create a distribution?	draft
1669	What are the use cases of distributions?	draft
1670	Create a new distribution to replace wayland by frame buffer?	draft
1671	What variable defines the features used in a distro?	draft
1672	What distro features are available?	draft
1673	What are the differences of machine features and distro features?	draft
1674	What are the parsing order of configuration files in a layer?	draft
1675	What are the scope of configuration and recipe variables?	draft
1676	What is the best practice to change a preexisting recipe?	draft
1677	Change a preexisting recipe?	draft
1678	What is the order of applying changes when more than one <code>.bbappend</code> exist?	draft
1679	Extend a task?	draft
1680	Add extra options to a recipe based tool?	draft
1681	What configuration variables exist for build systems?	draft
1682	What variable is used to make patch files visible?	draft
1683	What variable is used to add additional configuration files to an existing package?	draft
1684	What are the commonly used variables to represent paths?	draft
1685	Where does bitbake find recipe files?	draft
1686	What variable is used to configure features of a recipe?	draft
1687	What values are placed in the placeholders of <code>PACKAGECONFIG</code>?	draft
1688	Add a feature to a recipe?	draft
1689	What are the prerequisites of configuring a project based on Kconfig?	draft
1690	Configure the kernel using menuconfig?	draft
1691	Create a configuration fragment from the kernel?	draft
1692	Save the complete configuration of the kernel?	draft
1693	What variables describe the package license?	draft
1694	How does bitbake keep track of the project license?	draft
1695	What happens when bitbake detects a different license checksum?	draft
1696	What restrictions exist with commercial licenses?	draft
1697	Restrict a commercial license to a recipe?	draft
1698	Where does bitbake generate license manifest?	draft
1699	Configure Poky to provide the source code of packages under copyleft?	draft
1612	Use an installed standard SDK to build a custom application?	review
1613	Use an installed standard SDK to build the kernel?	review
1614	Build an extensible SDK?	review
1615	Install an extensible SDK?	review
1616	What are the advantages of using an extensible SDK?	review
1618	Run an image using an installed extensible SDK?	review
1619	Create a recipe from an external git repository using an installed extensible SDK?	review
1620	Build a recipe using an installed extensible SDK?	review
1621	Deploy an image to the target using an installed extensible SDK?	review
1622	Extend an installed extensible SDK?	review
1623	What are the use cases of a shared extensible SDK?	review
1700	What recipes are included when providing the source code?	draft
1701	Exclude recipes from source code extraction?	draft
1702	Provide the source code with the modifications applied to it?	draft
1703	Provide the source code with the procedure used to build the project?	draft
1704	Change the default archive mode of source code generation?	draft
1705	Provide license text in the image?	draft
1706	What are the widely used BSP layers?	draft
1707	Bake an image for BeagleBone Black?	draft
1708	Bake an image for Raspberry Pi 4?	draft
1709	Bake an image for VisionFive2?	draft
1710	Run an image on qemu?	draft
1711	Use runqemu to validate memory constraints?	draft
1712	Use runqemu to help with image regression tests?	draft
1713	Enable build information generation and layer revisioning?	draft
1714	Where are the backports of poky when new version gets released?	draft
1715	Why do we need to create a custom distribution?	draft
1716	What is the best way to create a minimal image?	draft
1753	Use structured binding to initialize multiple entities?	draft
1754	Use const and reference qualifiers with structured binding?	draft
1755	Use move semantics with structured bindings?	draft
1756	Use class and structures in structured bindings?	draft
1757	Use raw arrays in structured binding?	draft
1758	Use `std::pair`, `std::tuple`, and `std::array` in structured binding?	draft
1759	Make a custom type compatible with tuple interface to be used in structured binding?	draft
1760	What are the benefits of Class Template Argument Deduction feature?	draft
1761	What is the consequence of not having type conversions for deducing template parameters?	draft
1762	Write a C++ function to decide at compile time wether it should return a passed string, call <code>std::to_string()</code> for a passed integral or floating-point value, or try to convert the passed argument to std::string.	draft
1763	What object can be used in C++ STL to have a value with certain type or not have any value at all?	draft
1764	How can <code>std::optional<></code> be used as return values?	draft
1717	What are the main phases of compiling a C code?	review
1718	Stop compiler processing source after preprocessing phase?	review
1719	Specify the assembly flavor for gcc?	review
1720	Stop compiler processing source after compilation phase?	review
1721	Stop compiler processing source after assembly phase?	review
1722	How many relocatable files exist?	review
1723	View the symbolic information of an executable?	review
1725	What library can be used to programmatically parse debugging symbols?	review
1726	Strip all the debugging symbols of an executable?	review
1727	Specify the assembly flavor for objdump utility?	review
1728	Inspect the rodata section of an object file?	review
1729	Disassembly an object file?	review
1730	List all the relocation symbols present in an object file?	review
1731	What address do relocation offsets are pointing to in relocation table of an object file?	review
1732	List all the available sections in an object file?	review
1734	Represent the IP address and port of an endpoint?	review
1733	What sockets API does the Asio library use to implement networking?	review
1735	Create an endpoint to designate the address of a network node?	review
1736	Create an endpoint in the server to designate addresses on which the server wants to listen?	review
1738	Create an active socket in client code?	review
1739	Create a passive socket in server code?	review
1740	What information does an endpoint contain?	review
1741	How many forms an endpoint address can have?	review
1742	Create a tcp and udp endpoint for client?	review
1743	Create a tcp and udp endpoint for server?	review
1744	How many address types exist?	review
1745	What is the difference between active and passive sockets?	review
1746	Create an active socket?	review
1747	Create a passive socket?	review
1748	Resolve a DNS name?	review
1749	Bind a TCP acceptor to a port?	review
1750	Bind a UDP acceptor to a port?	review
1751	Connect socket to a server address?	review
1737	How many sockets are available?	rejected
1840	How do browsers detect existance of a captive portal?	draft
1841	What is a target AP?	draft
1842	What are the requirements of attacking a captive portal?	draft
1843	Capture a handshake from an access point?	draft
1844	Create a captive portal?	draft
1845	Download the Linux kernel for building?	draft
1846	Describe each directory in the kernel source tree?	draft
1847	What assumptions and flags are enabled by <code>kbuild</code> infrastructure based on the target architecture?	draft
1848	What <code>make</code> target options can be used to configure the kernel?	draft
1849	Where will be the kernel configurations stored?	draft
1850	Generate a preconfigured <code>.config</code> file tuned for a specific platform in the kernel source tree?	draft
1851	Revert configuration changes in kernel source tree after generating new <code>.config</code> file?	draft
1853	Generate a default configuration file for <code>x86_64</code> target in the kernel source tree?	draft
1854	Generate a default configuration file for <code>BeagleBone Black</code> target in kernel source tree?	draft
1855	Include new kernel configurations into an old <code>.config</code> file?	draft
1856	Use the kernel configuration file on a running machine as an initial configurtion?	draft
1857	What kernel configuration options allows accessing kernel configuration file on runtime?	draft
5360	Create a daemon thread?	review
1767	What are the properties of a normalized path?	review
1769	How many error handling approaches are available on filesystem library?	review
1770	Handle a filesystem operation error with exceptions?	review
1771	Handle a filesystem operation error with error code?	review
1772	What are the supporting different file types?	review
1773	Create a path with different string types?	review
1774	Create a path with a range?	review
1775	Get current path of the executing process?	review
1776	Get the path of temporary directory?	review
1777	Yield whether a path is empty?	review
1778	Yield whether a path is absolute or relative?	review
1779	Yield all the constituents of a path?	review
1780	Yield if a path is normalized?	review
1781	Yield a path as string objects of any byte size?	review
1782	Yield a relative path from two paths?	review
1783	Yield a path as a generic string?	review
1784	Concatenate a string to a path?	review
1785	Append a subpath to a path?	review
1786	Add extension to a file path that does not already have an extension?	review
1787	Assign a string to a path as a new path?	review
1788	Swap two path objects?	review
1789	Replace filename in a path?	review
1790	Replace extension in a path?	review
1792	Remove filename from a path?	review
1793	Remove extension from a path?	review
1794	What comparison operators are supported by path objects?	review
1795	Compare two paths <code>tmp/f</code> and <code>tmp/./f</code>?	review
1796	Compare two paths holding symbolic links?	review
1797	Check for existance of a file?	review
1798	Check if a file is a regular file or a directory or a symbolic link?	review
1799	Check if a file is neither a regular nor a directory nor a symbolic link?	review
1800	Check if a file is a special block, character, a fifo or a socket file?	review
1801	Check if a file is empty?	review
1802	Get the size of a file in bytes?	review
1803	Get the number of hard links to a file?	review
1804	Get the last time a file was written into?	review
1805	Yield information about the disk space available at a given path?	review
1806	Rename a file?	review
1807	Change the timepoint of the last write access of a file?	review
1808	Replace the permissions of a file?	review
1809	Resize a regular file?	review
1810	Change the current directory of the process?	review
1811	Check if a file exists?	review
1812	Use filesystem operations without following symbolic links?	review
1813	Yield the status of a file following any symbolic links?	review
1814	Yield the status of a file without following symbolic links?	review
1815	Improve performance of file operation calls using file status?	review
1816	Yield the type of a file using file status?	review
1817	Yield the permissions of a file using its file status?	review
1818	Yield the type of a file?	review
1819	Yield which permissions does a file have?	review
1820	Create a regular file?	review
1821	Create a directory inside an existing directory?	review
1822	Create a tree of nested directories?	review
1823	Create a symbolic link to a regular file?	review
1824	Create a symbolic link to a directory?	review
1825	Create a hard link from a file?	review
1826	Copy from a file of any type?	review
1827	Copy from a regular file?	review
1829	Copy a symbolic link?	review
1830	Remove a file?	review
1831	Recursively remove a directory and all of its contents?	review
1832	Yield the file an existing symbolic link refers to?	review
1833	Yield the absolute path of an existing path?	review
1834	Yield the relative path from current directory to a path?	review
1835	Yield the relative path from a base path to another path?	review
1836	Iterate over the entries of a directory?	review
1838	What are the directory iterator options?	review
1839	What operations are supported by directory entries?	review
1852	Create a new default configuration target in kernel source tree?	review
1858	What kernel configuration option allows extending the kernel command line from within the configuration?	draft
1859	What kernel configuration option makes the kernel symbol table available in <code>/proc/kallsyms</code>?	draft
1868	Where do kernel build artifact will be stored in the source tree?	draft
1870	Build and install kernel modules?	draft
1871	Override the installation path of compiled module binaries after the <code>modules_install</code> target is executed?	draft
1861	What kernel configuration option allows debugging input devices?	review
1862	What kernel configuration option enables system request key combinations to recover system after crash?	review
1863	What kernel configuration option enables the <code>ftrace</code> tracer support?	review
1864	What kernel configuration option allows tracing any non-inline function in the kernel?	review
1865	What kernel configuration option allows tracking off periods of IRQs in the kernel?	review
1866	What kernel configuration option allows measuring preemption off latency and schedule latency tracing?	review
1874	What kernel configuration option enables module loading on runtime?	review
1875	What kernel configuration option enables unloading modules on runtime?	review
1876	What kernel configuration option ignores safely unloading modules having dependencies?	review
1867	What <code>make</code> target should be used to build the kernel in the source tree?	review
1869	Install the kernel binary file on native and non-native targets?	review
1872	What artifacts does <code>make modules_install</code> command generate on the host machine?	review
1918	How does spinlocks operate on a CPU?	review
1921	What are the limitations of locking/unlocking spinlocks in a kernel module?	review
1922	Prevent deadlock caused by IRQs when using spinlocks?	review
1923	How does spinlocks affect preemtion after locking and unlocking?	review
1924	Store and restore previous IRQs status when using spinlocks?	review
1925	How a critical section can be protected from being preemted by kernel?	review
1926	What is a mutex and how does it operate?	review
1927	Initialize a mutex in the kernel?	review
1928	Acquire a mutex in the kernel?	review
1929	Release an acquired mutex in the kernel?	review
1930	Check mutex locking availability before acquiring it?	review
1931	What are specific rules while using mutexes in the kernel?	review
1932	What is more efficient between spinlocks and mutexes compared in terms of CPU cycles?	review
1933	Acquire a lock only if it is not already held by another contender?	review
1873	How many module types are available?	review
1877	What is the basic skeleton of a kernel module?	review
1878	What functions are the entry points of all kernel modules?	review
1879	What are the <code>\\_\\_init</code> and <code>\\_\\_exit</code> function prefixes in kernel modules?	review
1880	What section is used in kernel objects to store module information?	review
1881	What macros are commonly used in kernel modules to store module information?	review
1882	What is the real underlying macro provided by the kernel to add an entry to the <code>.modinfo</code> section?	review
1883	What utility dumps the <code>.modinfo</code> section of kernel modules?	review
1884	What are the differences of <code>EXPORT_SYMBOL</code> and <code>EXPORT_SYMBOL_GPL</code> macros exporting symbols based on license?	review
1885	What is the <b>out-of-tree</b> kernel module building?	review
1886	What is the <b>built-in</b> kernel module building?	review
1887	Write a custom <code>Makefile</code> for <b>out-of-tree</b> kernel modules?	review
1888	What <code>make</code> targets should be available when writing a custom <code>Makefile</code> for kernel modules?	review
1889	Write configuration dependent target in <code>Makefile</code> for a <b>built-in</b> kernel module?	review
1890	Specify multiple source files in a custom <code>Makefile</code> for a specific target?	review
1891	Specify compiler and linker flags in <code>Makefile</code> for kernel module building?	review
1892	Include other kernel source directories within a <code>Makefile</code>?	review
1893	Obtain a prebuilt kernel for building <b>out-of-tree</b> module?	review
1894	Load and unload an <b>out-of-tree</b> built kernel module?	review
1895	Write <code>Makefile</code> for a <b>built-in</b> kernel module?	review
1896	Define parameters in kernel modules?	review
1897	What psuedo-files represent module parameters?	review
1898	Pass parameters to built-in modules?	review
1899	How kernel functions can be called from a kernel module?	review
1900	How does <code>depmod</code> utility determine module dependencies?	review
1901	How does <code>modprobe</code> utility loads modules?	review
1902	How does <code>depmod</code> utility map devices to their drivers?	review
1903	Load a module at boot time?	review
1904	Unload an automatically loaded module?	review
1905	List loaded modules?	review
1906	Where the error macros defined are defined?	review
1908	Why <code>goto</code> statement is preferable over than nested <code>if</code>s in kernel modules?	review
1909	What is the standard way of handling null pointer errors in kernel modules?	review
1910	Where are the <code>printk()</code> function log levels are defined?	review
1911	What are the recommended helper functions alternative to <code>printk()</code>?	review
1912	What are the log levels of kernel printing helper functions?	review
1913	What is the default kernel log level?	review
1914	Change current kernel log level?	review
1915	Prefix the module output messages with a custom string?	review
1917	What is a spinlock?	review
1919	Define a spinlock in module source?	review
1920	Lock a previously defined spinlock in module source?	review
1945	How to install a virtual machine in VirtualBox?	draft
1946	How to installing the EPEL repository on the CentOS and AlmaLinux virtual machines?	draft
1947	Why should we keep the Linux systems updated?	draft
1948	How to update Debian-based systems?	draft
1949	How to remove some old packages that are no longer needed on Debian-based systems?	draft
1950	How to configure auto updates for Ubuntu?	draft
1951	How to enable auto-update on Ubuntu?	draft
1952	How to enable auto-reboot after unattended upgrades on Ubuntu?	draft
1953	How to auto-update Red Hat 7-based systems?	draft
1954	How to send mails containing update reports?	draft
1955	How to see if system needs to be restarted after an update?	draft
1956	How to enable auto-update on Red Hat 8/9-based systems?	draft
1957	Why is it more secure to use <code>sudo</code> to do administrative tasks than logging in as root?	draft
1958	How to allow a user to do everything, including logging in to the root command prompt using <code>sudo</code>?	draft
1959	How to add a user to the administrative group?	draft
1960	What differences does <code>useradd</code> have in Red Hat and non-Red Hat distros?	draft
1961	How to lock <i>root</i> user account after a clear Linux setup?	draft
1962	How to give members of a user group full sudo power in the sudo policy file?	draft
1963	How to assign specific software privileges on a group of users?	draft
1964	How to allow users to execute commands with specific subcommands, options or arguments as root?	draft
1965	How to assign privileges to either a Linux group or an individual user?	draft
1966	How to assign privileges on a group of users across a network?	draft
1967	How to disable sudo timer in order to protect system from physical access to open terminal?	draft
1968	How users can view their <code>sudo</code> privileges?	draft
1969	How to prevent users from shell escapes with sudo?	draft
1970	How to give users limited access to dangerous file editing commands when needed?	draft
1971	How to deal with differences between the different Linux and Unix distributions on a network when writing in sudo policy file?	draft
1972	How to let users run commands as other users?	draft
1973	How to prevent abuse via a user’s shell scripts?	draft
1974	How to protect a system from default user accounts after a fresh setup?	draft
1975	How to reconfigure <code>sudo</code> to ask user's password instead of root user in SUSE disto?	draft
1976	How to enable JSON formatted logging on <code>sudo</code>?	draft
1977	How to collect logs from multiple machines centrally into a server?	draft
1978	How to record user activity within a shell session started through <code>sudo</code>?	draft
1979	How to prevent user from running a specific command even when they have shell access taken from <code>sudo</code>?	draft
1980	Where is the configuration file for the command <code>useradd</code>?	draft
1981	How configure <code>useradd</code> utility to set default user home directory permissions on Red Hat-based systems?	draft
1982	What configuration directive controls the default permissions of users' home directories?	draft
1983	How configure <code>useradd</code> utility to set default user home directory permissions on Debian-based systems?	draft
1984	How to create a new user on Debian-based systems?	draft
1985	What are the differences of <code>adduser</code> and <code>useradd</code> utilities?	draft
1986	How to encrypt user's home directory using <code>adduser</code> utility?	draft
1987	How to enforce strong password criteria for users?	draft
1988	How to enforce password and account expiration on Linux?	draft
1989	How to configure default expiry data for `useradd` for Red Hat-type systems?	draft
1990	How to set expiry data on a user with <code>useradd</code> and <code>usermod</code> utility?	draft
1991	How to set expiry data on a user with <code>chage</code> utility?	draft
1992	How to force users to change their password the first time they logs in?	draft
1993	How to prevent brute-force password attacks on Linux user accounts?	draft
1994	How to configure <code>pam_faillock</code> on AlmaLinux 8/9?	draft
1995	How to configure <code>pam_faillock</code> on Ubuntu 20.04 and Ubuntu 22.04?	draft
1996	How to lock Linux user accounts?	draft
1997	How to lock the root user account on Linux?	draft
1998	How to set up security banners on Linux systems?	draft
1999	How to detect compromised passwords?	draft
2000	How to look at the current configuration of the <code>iptables</code> rules?	draft
2001	What <code>iptables</code> rule allows incoming packets from servers that our host has requested a connection to?	draft
2002	How to write <code>iptables</code> rules to open up a ports?	draft
2003	How to add an <code>iptables</code> rule to allow loopback interface?	draft
2004	How to block ICMP packets by <code>iptables</code> rules?	draft
2005	How to change the <code>iptables</code> default chain policy?	draft
2006	How to make iptables rules permanent?	draft
2007	How to block invalid packets before they travel through the entire <code>INPUT</code> chain in <code>iptables</code> rules?	draft
2008	How to perform a port availability test on a machine when <code>iptables</code> blocks <code>INVALID</code> packets from <code>PREROUTING</code> chain?	draft
2936	Push elements into a list?	draft
1936	What queues are implemented in the kernel to hold tasks?	review
1937	What is a wait queue?	review
1938	Initialize a wait queue?	review
1939	Put a process to sleep waiting for an event to occur?	review
1940	Put a process to sleep waiting either for an event to occur or a timeout to be reached?	review
1941	What values does the <code>wait_event_timeout()</code> function return?	review
1943	Wake up a process waiting on a wait queue?	review
1944	What values do <code>wait_up</code> family functions return?	review
1934	What does the term sleeping mean in the kernel?	review
2009	How to block ICMP packets over IPv6 by <code>iptables</code> rules?	draft
2010	How to list installed tables in <code>nftables</code>?	draft
2011	How to configure <code>nftables</code>?	draft
2012	How to prefix <code>nftables</code> log messages?	draft
2013	How to use <code>nftables</code> to block certain IP addresses from reaching specific ports?	draft
2014	How to IPv4 rules with IPv6 rules in the same <code>nftables</code> configuration file?	draft
2015	How to stop an attack in progress quickly without bringing down the system?	draft
2018	What is the Yocto Project's reference build system?	draft
2022	How to create a thread?	draft
2023	How to launch a thread using callable objects?	draft
2024	How to wait for a thread to complete?	draft
2025	Join threads on normal and exceptional exists:	draft
2026	Use RAII idiom to handle joining threads:	draft
2027	How to run threads in background?	draft
2028	How to pass arguments to a thread?	draft
2029	How to transfer ownership of a thread?	draft
2030	Choosing number of threads at runtime:	draft
2031	Identify threads:	draft
2032	Protect a critical section of code by marking it as mutually exclusive?	draft
2033	What is the problem of a data structure interface when it returns an element in multi-threaded environment?	draft
2034	Protect the interface of a data structure that provides a method to return elements and suffers from data race when shared between two threads?	draft
2035	What granularity is acceptable when locking exclusive content?	draft
2036	What is the common problem when using multiple fine-grained locking schemes?	draft
2037	What is the common solution to avoid deadlock?	draft
2038	Sequentially lock two mutexes with a guarantee that they won't deadlock?	draft
2039	How different is a unique lock compared to a regular lock guard?	draft
2040	Read basic networking manuals:	draft
2041	List network interfaces:	draft
2042	Get socket address:	draft
2043	Create server:	draft
2044	Send mail:	draft
2045	What aspects of a solution identifies good design?	draft
2046	Specify the process of designing an ADT by using a program that lists holidays as a model?	draft
2047	Specify the process of designing an ADT by using an appointment book as a model:	draft
2048	Step through the process of designing the interface of a bag as a container and test it:	draft
2049	What are the sudo proprietary alternatives on Unix systems?	draft
2050	What version of sudo should be installed on a server at least?	draft
2051	How to run a command with root privileges using <code>sudo</code>?	draft
2052	How to run a command on behalf of a specific user with sudo?	draft
2053	How to run a command on behalf of a specific group with sudo?	draft
2054	Where are the sudo rules stored on system and how can it be editted properly?	draft
2055	What is the general form of each line of sudo rules and what is the definition and scope of each part?	draft
2056	Why is it best practice to specify a specific <code>hostname</code> rather than <code>ALL</code> in sudo rules?	draft
2057	How to specify multiple options on each sudo rule?	draft
2058	How to specify commands to run by a specific user on behalf some other user except root in sudo rules?	draft
2059	Can sudo rules be specified multiple times for users on different hosts and commands?	draft
2060	How to break long rules into multiple lines?	draft
2061	What rules match in sudo when multiple rules exist in sudoers file?	draft
2062	How to use negate operator to exclude one item from a list in sudoers file?	draft
2063	What must be written in the last line of sudoers file to be accepted by visudo?	draft
2064	What editor does the <code>visudo</code> use to edit <code>/etc/sudoers</code> file?	draft
2065	How to keep editing <code>/etc/sudoers</code> file after making a syntactical error in <code>visudo</code> and save it?	draft
2066	How to retain older <code>/etc/sudoers</code> file after attempting to save incorrect changes by <code>visudo</code>?	draft
2067	How to put an emergency rescue rule in <code>/etc/sudoers</code> file by <code>visudo</code> in case every other access rules failed?	draft
2068	How to tell what a user can access with <code>sudo</code>?	draft
2069	What mechanism is used in <code>sudo</code> rules to simplify overwhelmingly repeated rules and similar possible options?	draft
2070	How can asterisk become harmful when used in different parts of rules like command arguments?	draft
2071	How wildcards can be carefully used to not expose accessibility to users?	draft
2072	How to match for specific option characters of a command in <code>/etc/sudoers</code> file using wildcards?	draft
2073	How to authorize a user using a command only without arguments in <code>/etc/sudoers</code> file?	draft
2074	How to use aliases in <code>/etc/sudoers</code> file to create a named list of similar items?	draft
2075	What types of users does the <code>sudo</code> recognize in <code>/etc/sudoers</code> file?	draft
2076	How to specify an operating system group in <code>/etc/sudoers</code> file?	draft
2077	How to specify users of <code>/etc/sudoers</code> file with <code>UID</code>?	draft
2078	How to specify members of a group in <code>/etc/sudoers</code> using their GID?	draft
2079	How to list usernames with aliases in <code>/etc/sudoers</code> file?	draft
2080	How does <code>sudo</code> determines the hostname on a system?	draft
2081	How many forms the host can be specified in <code>/etc/sudoers</code> file?	draft
2082	How hosts can be aliased in <code>/etc/sudoers</code> file?	draft
2083	How to specify a list of run-as users in <code>/etc/sudoers</code> file?	draft
2021	What are the different roles and their tasks in Linux-based software development teams?	review
2084	How to specify run-as aliases in <code>/etc/sudoers</code> file?	draft
2085	How to create a list of command in <code>/etc/sudoers</code> file?	draft
2086	How to specify a command alias in <code>/etc/sudoers</code> file?	draft
2087	What the command tags are and how they can be speicified in <code>/etc/sudoers</code> file?	draft
2088	How can lists be negated in <code>/etc/sudoers</code> file?	draft
2089	Why is it dangerious to use negation in a command list and alias?	draft
2090	What option types are available to use in <code>/etc/sudoers</code> file?	draft
2091	How boolean options can be enabled or disabled in <code>/etc/sudoers</code> file?	draft
2092	What option should be enabled in <code>sudo</code> to insult users who can't type their password?	draft
2093	How integer options can be used in <code>/etc/sudoers</code> file?	draft
2094	How string options can be used in <code>/etc/sudoers</code> file?	draft
2095	How list options can be written in <code>/etc/sudoers</code> file?	draft
2096	How to set <code>sudo</code> options for specific users in <code>/etc/sudoers</code> file?	draft
2097	How to limit <code>sudo</code> default options per host or host alias in <code>/etc/sudoers</code> file?	draft
2098	How to limit <code>sudo</code> default options per command or command alias in <code>/etc/sudoers</code> file?	draft
2099	How to limit <code>sudo</code> default options per run-as in <code>/etc/sudoers</code> file?	draft
2100	How to limit the times users attempt incorrect passwords in <code>/etc/sudoers</code> file?	draft
2101	How can sudo be limited to a specific number of minutes before it asks users their password?	draft
2102	How to enforce users to enter their password every time they run privileged commands?	draft
2103	How to change the default value of bad password message in <code>/etc/sudoers</code> file?	draft
2104	How to set or remove the first <code>sudo</code> use lecture for specific users in <code>/etc/sudoers</code> file?	draft
2105	How to write and set a custom lecture message for <code>sudo</code>?	draft
2106	How to raise user's maximum awareness on sensitive commands like <code>fdisk</code> both by lecturing them and asking them password each time?	draft
2107	What tags are used to restrict users from accessing shell escapes by <code>sudo</code>?	draft
2108	How to properly avoid shell escapes and give users permission of editing privileged files without restricting them to a certain editor?	draft
2109	What editor does <code>sudo</code> use to open files using <code>sudoedit</code>?	draft
2017	What are the expected outputs from the Yocto Project?	review
2110	How to specify which editor to be used by <code>sudoedit</code> in <code>/etc/sudoers</code> file?	draft
2111	How to identify <code>sudo</code> default configurations?	draft
2112	Where is the <code>sudo</code> configuration file?	draft
2113	What are the valid configuration types in <code>/etc/sudo.conf</code> file?	draft
2114	How Plugin configuration type can be used in /etc/sudo.conf file?	draft
2115	How Path configuration type can be used in /etc/sudo.conf file?	draft
2116	Hw Set configuration type can be used in /etc/sudo.conf file?	draft
2117	How to enable core dumps from setuid programs on FreeBSD, OpenBSD and Linux systems?	draft
2118	What environment variables do <code>sudo</code> exclude from the list of user ennvironment variables for the shell instance running by <code>sudo</code>?	draft
2119	How to define a list of environment variables that <code>sudo</code> should retain when running a shell instance in case whitelisting environment variables is desired?	draft
2120	How to allow users to retian all of their envinronment variables <code>/etc/sudoers</code> file when blacklisting environment variables is desired?	draft
2121	How to delete specific environment variables in <code>/etc/sudoers</code> file when blacklisting environment variables is desired?	draft
2122	How to allow users write a security policy to override their environment variables for specific commands when a software changes quickly and those values might need constant updating? (maybe can break into smaller parts)	draft
2123	How to run privileged commands as a target user, in the target user's shell environment by <code>sudo</code>?	draft
2124	What are the sudo-specifi environment variables of commands running under <code>sudo</code>?	draft
2125	How to set PATH environment variable securely in <code>/etc/sudoers</code> file?	draft
2126	How to define new environment variables in <code>/etc/sudoers</code> file?	draft
2127	How to start a root shell by running <code>sudo</code> wth no arguments?	draft
2128	How to retain a root shell but with your own environment using <code>sudo</code>?	draft
2129	How to run an external program by sudo but not attached to a terminal and still ask users their passwords?	draft
2130	How to let automated processes run arbitrary commands only via <code>sudo</code>?	draft
2131	How to generate digests for command integrity verification in <code>/etc/sudoers</code> file?	draft
2132	What algorithms are good to be used for generating digests in <code>/etc/sudoers</code> file?	draft
2133	How to write a sudoers rule to validate the generated digests for command integrity verfication in <code>/etc/sudoers</code> file?	draft
2134	How to write digests for a command having different digests on different operating systems?	draft
2135	What are the common ways of misconfiguring `sudo`?	draft
2136	How to enable the use of DNS in /etc/sudoers file?	draft
2137	How to write DNS entries in <code>/etc/sudoers</code> file to make <code>sudo</code> query DNS in case local hostnames could not be found?	draft
2138	How can hostname-based protections of <code>sudo</code> break down in <code>/etc/sudoers</code> file?	draft
2139	How IP addersses can be used as alternatives to hostnames in <code>/etc/sudoers</code> file?	draft
2140	How to include specific policy files when <code>/etc/sudoers</code> file is distributed on multiple networks?	draft
2141	How to include host specific policy files when <code>/etc/sudoers</code> file is distributed on multiple networks?	draft
2142	How to include a directory holding policy files when <code>/etc/sudoers</code> file is distributed on multiple networks?	draft
2143	How to write the sudoers files in include directory so that <code>sudo</code> will read them in a sorted order?	draft
2937	Filter elements within a list?	draft
2144	What validation does the <code>visudo</code> on included sudoers files?	draft
2145	How to check the syntax of a sudoers file using <code>visudo</code>?	draft
2146	How to strictly check referenced but not defined aliases, cycling alias dependencies, and syntax errors in a sudoers file using <code>visudo</code>?	draft
2147	How to check permissions and ownership of sudoers file along side strict checking of their syntax using <code>visudo</code>?	draft
2148	How many logging mechanisms does the <code>sudo</code>?	draft
2149	Where does the <code>sudo</code> store logs?	draft
2150	How to adjust when <code>sudo</code> notifies events in <code>/etc/sudo.conf</code> file?	draft
2151	What events does sudo support to notify?	draft
2152	How many debug logging levels does <code>sudo</code> have?	draft
2153	How to enable <code>sudo</code> debugging in <code>/etc/sudo.conf</code> file?	draft
2154	How to enable logging the output of processes running under <code>sudo</code> so that they can later be used by <code>sudoreplay</code>?	draft
2155	Where is the default log file generated by <code>log\\_output</code> option in <code>sudo</code>?	draft
2156	How to enable input logging in <code>/etc/sudoers</code> file and why it should be avoided?	draft
2157	What tags can be used to enable or disable input and output logging on a per-command basis in <code>/etc/sudoers</code> file?	draft
2158	How to authorize admins to use <code>sudoreplay</code> to check <code>sudo</code> logs?	draft
2159	How to use <code>sudoreplay</code> to see what commands have executed by users?	draft
2160	How to view a session of a command which was logged by <code>sudoreplay</code>?	draft
2161	How to alter playback of the <code>sudoreplay</code> session view?	draft
2162	How to search for a command in <code>sudoreplay</code> logs?	draft
2163	how to search for commands that were executed in a specific path in <code>sudoreplay</code> logs?	draft
2164	How to search for commands that were executed by a particular user in <code>sudoreplay</code> logs?	draft
2165	How to search for commands that were executed by a particular group in <code>sudoreplay</code> logs?	draft
2166	How to search for commands that were executed by a particular user but run as another user in <code>sudoreplay</code> logs?	draft
2167	How to search for commands that were executed in a particular terminal device in <code>sudoreplay</code> logs?	draft
2168	How to search for commands that were executed on a specific date and time in <code>sudoreplay</code> logs?	draft
4163	Initialize objects using automatic compiler type deduction?	draft
2169	How to search for commands by concatenating search keywords to result a specific criteria in <code>sudoreplay</code> logs?	draft
2170	How to search for commands by choosing between one of two search keywords in <code>sudoreplay</code> logs?	draft
2171	How to search for commands by combinig multiple search keywords in <code>sudoreplay</code> logs?	draft
2172	What is the best practice for using sudo when it comes to the need of running shell scripts with super user?	draft
2173	How to use <code>std::for_each</code> algorithm with a predicate to sum values of a container?	draft
2174	How to use <code>std::for_each</code> algorithm with a capturing lambda to sum values of a container?	draft
2175	How to use <code>std::for_each</code> algorithm with unsequenced parallel execution model to sum values of a container?	draft
2176	How to use ranges algorithm <code>std::ranges::for_each</code> to sum values of a container?	draft
2177	What is a sentinel and how is it different compared to a range?	draft
2179	How to think of standard algorithms in terms of ranges instead of iterators?	draft
2180	Find the end iterator of a maximal sorted sub-range using standard algorithms?	draft
2181	Iterate over all the elements of a container using <code>std::for_each</code>?	draft
2182	How to use parallel executaion on <code>std::for_each</code> to invoke an expensive operation for each element of a container?	draft
2183	Use range based <code>std::for_each</code> utilizing a projection to invoke external methods?	draft
2184	Iterate over a limited number of a container using <code>std::for_each_n</code>?	draft
2185	How to swap two values?	draft
2186	Swap values of a range using <code>std::iter_swap</code>?	draft
2187	How to exchange elements between two non-overlapping ranges using <code>std::swap_ranges</code>?	draft
4254	How to create a compile-time generated user-defined literal?	draft
2188	What is the minimum requirement for a type to be comparable with <code>strict_weak_ordering</code>?	draft
2189	Compare if one range is lexicographically less than another using <code>std::lexicographical_compare</code> and <code>std::ranges::lexicographical_compare</code>?	draft
2190	Compare if one range is lexicographically less than another using spaceship operator equivalent of <code>std::lexicographical_compare</code>?	draft
2191	What iterator type does the sort function operates on?	draft
2192	Sort a range using <code>std::sort</code>?	draft
2193	Sort a range of paired values providing an additional guarantee of preserving the relative order of equal elements?	draft
2194	Check if a range is already sorted in ascending order?	draft
2196	Partially sort a range within a given sub-range?	draft
2197	Partially sort a range within a given sub-range and write results to another range?	draft
2198	Reorder a vector of objects partitioned in two sections?	draft
2199	Guarantee the ordering of equal elements in partitioning a range?	draft
2201	Copy the reordering results of partitioning a vector?	draft
2204	Return both lower and upper bounds of a value within a range?	draft
2205	Return the upper bound of a value within a range using a predicate?	draft
2206	Check the presence of a value within a range?	draft
2207	Determine whether one range is contained within another range?	draft
2209	Merge two consecutive sub-ranges within a range?	draft
2195	Find the end iterator of the maximal sorted sub-range within a range using standard algorithms?	review
2200	Check if a range is partitioned?	review
2202	Find the nth element within a range?	review
2203	Find the lower and upper bounds of a value within a sorted range?	review
2208	Merge two sorted ranges into one?	review
2226	Accumulate the elements of a range?	draft
2227	Accumulate pairs of elements over two ranges into a single value?	draft
2228	Accumulate pairs of elements over two ranges and copy into the output range?	draft
2229	Calculate the difference of adjacent elements within a raneg?	draft
2230	Reduce a range?	draft
2231	Calculate a sum of all elements?	draft
2232	Accumulate the values of a range by summing each value with its previous elements?	draft
2233	Accumulate the values of a range by summing each value with its previous elements by applying a custom predicate?	draft
2237	Fill a range by consecutively assigning the given value to each element?	draft
2238	Fill a range by consecutively assigning the given value to a limited number of elements?	draft
2239	Fill a range by consecutively assigning the result of the provided generator?	draft
2240	Fill the specified number of elements within a range by consecutively assigning the result of the provided generator?	draft
2241	Generate elements by consecutively assigning the result of applying the prefix <code>operator++</code>, starting with the initial value?	draft
2242	Copy a non-overlapping and overlapping ranges?	draft
2243	Move a non-overlapping and overlapping ranges?	draft
2244	Copy and move a non-overlapping and overlapping ranges in the opposite direction?	draft
2245	Copy only a limited elements of a non-overlapping and overlapping ranges?	draft
2246	Selectively copy elements for which the predicate returns true?	draft
2247	Selectively copy elements for which the predicate returns false?	draft
2248	Selectively copy elements that do not match the provided value?	draft
2249	Copy a random selection N elements from the source range to the destination range utilising the provided random number generator?	draft
2250	Replace elements in a range matching a value?	draft
2251	Replace elements in a range for which the predicate evaluates to true?	draft
2252	Copy elements of a range into another in reverse order?	draft
2253	Copy elements <code>[middle, last)</code>, followed by <code>[first, middle)</code> from a range into another?	draft
2254	Construct and destroy a single element at a given address?	draft
2255	Reorder elements in the given range such that the elements maintain the max-heap property?	draft
2256	Push and pop values to heap?	draft
2257	Sort the elements in a heap?	draft
2258	Check if a range is a heap?	draft
2259	Check how further a range is a heap?	draft
2260	Find the first element matching the given value within a range?	draft
2261	Find the first element for which the predicate evaluates to true?	draft
2262	Find the first element for which the predicate evaluates to false?	draft
2263	Produce the view of the first elements and a range of second elements from a range of paired elements using views?	draft
2283	What are the basic types provided by the QML?	draft
2211	Produce a range containing elements present in the first range but not in the second range?	review
2212	Produce a range containing elements present only in one of two ranges, but not both?	review
2213	Produce a range containing elements present in either of the ranges?	review
2214	Produce a range containing elements present in both of the ranges?	review
2215	Apply a transformation function to each element within a range?	review
2216	Remove elements that match the given value within a range?	review
2217	Remove elements for which the given predicate evaluates true within a range?	review
2218	Replace elements that match the given value within a range?	review
2220	Reverse the order of elements in a range?	review
2221	Rearrange elements in the range from <code>[first, middle), [middle, last)</code> to <code>[middle, last), [first, middle)</code>?	review
2222	Move elements in the provided range by the specified amount of positions into left or right?	review
2223	Rearrange elements in the given array in a randomly order?	review
2224	Rearrange elements of given array so that they are in their next or previous permutation?	review
2225	Check whether two ranges have the same content but not necessarily the same order of elements?	review
2234	Indicate if all of the elements within a range evaluate to true for a predicate?	review
5497	Create a paragraph?	review
2235	Indicate if at least one element within a range evaluates to true for a predicate?	review
2236	Indicate if no elements within a range evaluates to true for a predicate?	review
2264	Produce the view of Nth elements from a range of tuple-like elements?	review
2265	Apply a transformation functor to every element of the view of a range?	review
2266	Take first N elements of the view of a range?	review
2267	Take the sequence of elements from the view of a range for which the predicate evaluates to true?	review
2268	Drop the first N elements of the view of a range?	review
2269	Drop the sequence of elements from the view of a range for which the predicate evaluates to true?	review
2270	Filter the view of a range to consist all elements that satisfy the provided predicate?	review
2271	Reverse the view of a range for bidirectional ranges?	review
2272	Adapt an iterator and the number of elements following it into the view of a range?	review
2273	Adapt a view into a range with a begin and end iterator of matching types for non-range versions of algorithms?	review
2274	Represent the view of all the elements of a range?	review
2275	Split a single range into a view over sub-ranges? (incomplete)	review
2276	Flatten a splited view of a range?	review
2277	Represent an empty view?	review
2278	Represent a single element view?	review
2279	Represent a view of the generated sequence formed by repeatedly incrementing an initial value?	review
2280	Represent a view obtained by successively applying the istream input iterator?	review
2281	Where the Qt installer can be found?	review
2282	How to update Qt components after manual installation?	review
2284	What is the foundation of C++ memory model for concurrency?	draft
2285	What are the levels of expertise in multithreading?	draft
2286	How to use <code>std::atomic_flag</code> to make spinlock mechanism?	draft
2287	How to use <code>std::mutex</code> to make spinlock mechanism?	draft
2288	Use condition variables to synchronize two threads?	draft
2289	What are the basic building blocks of C++ concurrency?	draft
2290	What are the higher abstraction layers of C++ concurrency?	draft
2291	What are the sequential consistency guarantees?	draft
2292	What is an atomic data type?	draft
2293	What does multithreading in C++ consist of?	draft
2294	What is an execution unit?	draft
2295	What is a callable unit?	draft
2296	What is the life-time of an execution unit?	draft
2297	How many ending strategies can a thread creator perform on its threads?	draft
2298	What is a joinable thread?	draft
2299	What happens when a joinable thread execution ends?	draft
2300	What does a thread take in its constructor?	draft
2301	What is a shared data?	draft
2302	What components can be used to coordinate access to a shared data?	draft
2303	How a mutex locks access to a shared data?	draft
2304	What is the basic use case of a lock?	draft
2305	What locks exist in C++?	draft
2306	How many ways exist to initialize a read-only variable accessible to multiple threads?	draft
2307	What is a thread-local data?	draft
2308	What is a condition variable?	draft
2309	What are the use cases of condition variables?	draft
2310	What is a task?	draft
2311	What objects can be transferred in the communication channel made by a task?	draft
2312	What are the execution policies?	draft
2313	What are the advantages of using jthread?	draft
2314	What are the drawbacks of using shared and weak pointers in multiple threads?	draft
2315	What are the atomic shared pointers?	draft
2316	What are the use cases of latch and barriers?	draft
2317	What is the difference between latches and barriers?	draft
2318	What is a counting semaphore?	draft
2319	What is a coroutine?	draft
2320	What are the use cases of coroutines?	draft
2321	What is an executors?	draft
2322	What member functions are new in extended futures?	draft
2323	What is a transactional memory model?	draft
2324	What transactional memory block types exist in C++?	draft
2325	What is the execution order of transactional memory blocks?	draft
2326	What are the differences between existing transactional memory blocks?	draft
2327	What is a task block?	draft
2328	What is the meaning of data parallel programming?	draft
2329	What happens when two threads access the same memory location?	draft
2330	What are the contract levels in thread executions?	draft
2331	What subjectives are the foundation of C++ memory model?	draft
2332	What are the guarantees of the sequential consistency?	draft
2333	What is the ordering of strong and weak memory models?	draft
2334	What are the guarantees of the relaxed semantics?	draft
2335	What are the guarantees of the acquire release semantics?	draft
2336	What memory order is applied to atomic operations by default?	draft
2337	What are the functionalities of an <code>atomic_flag</code> type?	draft
2338	Construct an atomic flag?	draft
2339	What is the only lock-free guaranteed atomic type?	draft
2340	Check if the atomic type is lock free?	draft
2341	What are the use cases of a spinlock?	draft
2342	What is the base of a spinlock?	draft
2343	What is the major difference between mutex and spinlock?	draft
2344	Use an atomic flag to notify waiting threads?	draft
2345	When does an atomic flag lose notifications?	draft
2346	What are the basic atomic types?	draft
2347	What are the template specialization atomic types?	draft
2348	What template specializations of atomic type extends the fundamental atomic interface?	draft
2349	What is the downside of extended atomic interfaces?	draft
2350	What operations does fundamental atomic interface support?	draft
2351	What is the difference between atomic boolean and atomic flag?	draft
2352	Use an atomic boolean to protect a shared value in a critical section using C++11 fundamental atomic interface?	draft
2353	What is the difference between the way atomic boolean and condition variable query the atomic value?	draft
2354	Use an atomic boolean to protect a shared value in a critical section using C++20 fundamental atomic interface?	draft
2355	What is the functionality of <code>compare_exchange_strong</code> in a fundamental atomic interface?	draft
2356	Why does <code>compare_exchange_weak</code> exists in the fundamental atomic interface?	draft
2357	What restrictions apply to user-defined types to be supported by the fundamental atomic interface?	draft
2358	Check if a user-defined type is compatible to the fundamental atomic interface?	draft
2359	Why there is a template specialization of atomic for shared pointers?	draft
2360	Why $y^2 = x^2$ is not a function?	draft
2361	Find the domain and range of $\\sqrt{x^2-3x}$ and $\\frac{4}{3-t}$?	draft
2362	A point $P$ in the first quadrant lies on the graph of the function $f(x) = \\sqrt{x}$. Express the coordinates of $P$ as functions of the slope of the line joining $P$ to the origin?	draft
2363	Consider the point $(x, y)$ lying on the graph of $y = 2x - 3$. Let $L$ be the distance between the points $(x, y)$ and $(4, 0)$. Write $L$ as a function of $y$?	draft
2364	What is the function graph?	draft
2365	Find the natural domain and graph the $f(x) = 1 - 2x - x^2$ and $g(t) = 1/|t|$ functions?	draft
2366	Find the domain of $y = \\frac{x+3}{4 - \\sqrt{x^2-9}}$?	draft
2367	Find the range of $y = 2 + \\sqrt{9+x^2}$	draft
2368	What is the vertical line test?	draft
2369	What is a piece-wise function?	draft
2370	Graph the function $$\\begin{equation}f(x) = \\begin{cases}1/x & x < 0 \\\\ x & 0 \\le x \\end{cases}\\end{equation}$$?	draft
2371	What is an increasing or decreasing function?	draft
2372	What symmetries, if any, do the graphs of functions $y = x^3/8$, $y = -x^{3/2}$ and $y = (-x)^{2/3}$ have?	draft
2373	Check whether functions $f(x) = x^4 + 3x^2 - 1$, $g(x) = \\frac{1}{x^1-1}$, $h(t) = 2t + 1$ and $\\sin{2x}$ are even, odd, or neither?	draft
2374	What function is a linear function?	draft
2375	When two variables become proportional to each other?	draft
2376	The variables $r$ and $s$ are inversely proportional, and $r = 6$ when $s = 4$. Determine $s$ when $r = 10$?	draft
2377	A box with an open top is to be constructed from a rectangular piece of cardboard with dimensions 14 cm. by 22 cm. by cutting out equal squares of side $x$ at each corner and then folding up the sides as in the figure. Express the volume $V$ of the box as a function of $x$?	draft
2378	What function is a power function?	draft
2379	What functions are polynomial functions?	draft
2380	What functions are the rational functions?	draft
2381	What functions are algebraic functions?	draft
2382	What functions are trigonometric functions?	draft
2383	What functions are exponential functions?	draft
2384	What functions are logarithmic functions?	draft
2385	What functions are transcendental functions?	draft
2386	Import a QML module to create a window?	draft
2387	What identifies an element in QML?	draft
2388	What is the binding mechanism?	draft
2389	What is a group property?	draft
2390	How javascript functions can be declared in QML?	draft
2391	Define a globaly accessible root element in QML code?	draft
2392	Specify exact coordinations of an element?	draft
2393	Create a new custom property?	draft
2394	Create an alias property pointing to another element's property?	draft
2395	Attach the signal of a property when its width and height changes?	draft
2396	What is the requirement of an element in order to receive key events?	draft
2397	What element is the most basic type to be inherited by other visual elements?	draft
2398	What are the basic properties of item element?	draft
2399	What are the additional basic properties of a rectangle over item element?	draft
2400	Make rectangle edges curved?	draft
2401	Make a custom gradient over a rectangle?	draft
2402	Display a text on main window?	draft
2403	Break a long text with an elide in the middle?	draft
2404	Select a font family and font size for a text element?	draft
2405	Set alignment for a text element?	draft
2406	Use style to color a text element?	draft
2407	What are the common image formats supported by QML?	draft
2408	Load an image as a resource?	draft
2409	Crop an image reaching outside of boudaries?	draft
2410	What are the possible values for image fill modes?	draft
2411	Get notified when user clicks on an element?	draft
2412	What is a component?	draft
2413	Create a button component to be used on other components?	draft
2414	Export properties of a component to be used as an API?	draft
2415	What are the simple transformation properties?	draft
2416	What feature can be used to smooth movements when rasterized edges can be seen in graphics?	draft
2417	Use a helper function to extract the lighter or darker color?	draft
2418	Position multiple elements in a row?	draft
2419	Position multiple elements in a column?	draft
2420	Position multiple elements in a grid?	draft
2421	Position multiple elements into a flow?	draft
2422	Fill out a grid with blue squares using a repeater?	draft
2423	What are the anchoring properties for visual elements?	draft
2424	What additional anchor property does a text element have?	draft
2425	What are the offsets of anchors?	draft
2426	What input constraints does <code>TextInput</code> support?	draft
2427	Make a tab <code>KeyNavigation</code> for multiple <code>TextInput</code> elements in a column?	draft
2428	Get multi-line input from user?	draft
2429	What property can record key presses?	draft
2430	Record user key presses?	draft
2431	How to precompile QML to avoid the initial startup penalty induced by the initial parsing?	draft
2432	Where do animations apply?	draft
2433	Animate an object rotating horizontally?	draft
2434	Animate an object to fade away?	draft
2435	How many types of animation elements exist?	draft
2436	What action elements are used to change a property or to run a script during an ongoing animation?	draft
2437	What are the possible ways of applying animations?	draft
2438	Enable wrapping on Text elements?	draft
2439	How many easing curves are available for animations?	draft
2440	Animate an object moving horizontally with an easing curve?	draft
2441	What type can be used to fine-tune the animations?	draft
2442	How many ways exist to group animations?	draft
2443	Animate an object to cross the window diagonally?	draft
2444	Animate a ball moving forward and bouncing on the floor twice?	draft
2445	What is the basic form of a state?	draft
2446	Describe two different states of an object having different colors?	draft
2447	What is the basic form of a transition?	draft
2448	What modules can be imported to use UI Controls?	draft
2449	What QtQuick Template is offten used to create a desktop application?	draft
2451	How move semantics can be implemented for a class?	review
2452	What happens to an object when move semantics is not available?	review
2453	What happens to an object declared with <code>const</code> when moved?	review
2454	Why return values should not be marked as <code>const</code>?	review
2455	What should be the state of an object after it has been moved?	review
2479	How to implement getter member functions using move semantics and reference semantics in order to avoid expensive copy of returned object?	draft
2480	How many reference qualified member functions can we implement and how would each of them be called?	draft
2481	Is it possible to overload for both reference and non-reference qualifiers?	draft
2482	Why should we use reference qualifiers?	draft
2483	What references qualifiers should be used for assignment operators to prevent accidental assignment of a new value to a temporary object?	draft
2484	What happens to an object in moved-from state when it goes out of scope?	draft
2485	What are the requirements in behavior of a moved-from object?	draft
2486	What guarantees should we give when desining a class?	draft
2487	What is an invariant?	draft
2488	Why should we avoid full guarantee to moved-from state types?	draft
2489	What are the fixes for types that contain non-destructible members?	draft
2490	What options are available when a moved member value breaks invariants?	draft
2491	Why <i>strong exception handling guarantee</i> is required for <code>std::vector</code> to use move operations instead of copying objects?	draft
2492	What condition can be specified for <code>noexcept</code>?	draft
2493	What does <code>noexcept</code> change when overloading functions?	draft
2494	What changes does <code>noexcept</code> imply in a class hierarchy?	draft
2495	What are the <i>strong exception handling guarantees</i> for classes with copy and move special member functions generated but not implemented?	draft
2496	What are the <i>strong exception handling guarantees</i> for classes having special member functions defaulted?	draft
2497	What happens when generated an specified <code>noexception</code> condition contradicts for special member functions?	draft
2498	Why do we need value categories besides types?	draft
2499	What are the primary value categories in C language?	draft
2500	What value category will a statement have when type is const?	draft
2501	What is the value category of a moved-from object?	draft
2502	What statements are lvalue?	draft
2503	What statements are prvalues?	draft
2504	What statements are xvalues?	draft
2505	What is the generalized explanation of value categories in C++17?	draft
2506	What is materialization?	draft
2507	What special rule do functions have in value categories?	draft
2508	What special rules do data members have in value categories?	draft
2509	What is the impact of value categories when binding an rvalue to lvalue references?	draft
2510	What is the overload resolution with references?	draft
2511	What is the priority between reference and value overload resolutions?	draft
2512	When does an lvalue become an rvalue?	draft
2513	When does an rvalue become an lvalue?	draft
2514	What operator can be used to determine the type of names?	draft
2515	What operator can be used to determine the value category of an expression?	draft
2516	What are the prerequisites of having a perfect universal reference?	draft
2517	What is the difference between a universal reference and an rvalue reference?	draft
2518	What is the overload resolution for universal references?	draft
2519	What is the semantic meaning of <code>std::forward</code>?	draft
2520	Perfect forward function arguments to another function?	draft
2521	Perfect forward a parameter pack of a function to another?	draft
2522	Perfect forward a return value?	draft
2523	Determine the value category of an expression?	draft
2524	Forward an object that is passed with move semantics to a function?	draft
2525	What is the workaround to having different overloads for each parameter in a generic code?	draft
2526	What are the requirements of perfect forwarding?	draft
2527	Perfectly forward variadic template arguments?	draft
2528	What is the difference between an rvalue reference and a universal reference?	draft
2938	Insert elements into a list?	draft
2457	What header file should be included when using move semantics?	review
2458	What is the equivallent form of <code>std::move()</code>?	review
2460	What is the moved-from object state?	review
2461	What are the major ways of call-by-reference and what kind of arguments does each take?	review
2463	Why does automatic move operations disable when user declares special member functions?	review
2464	Based on the exact rules for <i>generated special member functions</i> when would copy constructor and copy assignment operator automatically be generated?	review
2465	Based on the exact rules for <i>generated special member functions</i> when would move constructor and move assignment operator be automatically generated?	review
2466	Based on the exact rules for <i>generated special member functions</i> when would destructor disable automatic move operations?	review
2468	What special member functions are generated by default for a class?	review
2469	When do move operations become broken?	review
2474	What declarations does the <b>Rule of Five</b> formulate to simplify special member functions generation?	review
2467	What does it mean to say move semantics is not passed through?	review
2470	How to deal with moving an object to itself?	review
2471	Why deleting moving operations does not make semantic sence?	review
2475	Why should we avoid using move operations when returning a local object?	review
2472	How to properly disable move semantics in an object without disabling fallback mechanism?	review
2473	How does move operation work for a class containing a member with disabled move operations?	review
2477	Does <code>virtual</code> destructor in a base class disable automatic move operations in its derived classes?	review
2462	When does the call-by-value become cheap with move semantics?	review
2476	When would passing by value becomes cheaper than passing by const lvalue references?	review
2478	When to take arguments by value and when to take by references?	review
2529	What difference does it make to const qualify a universal reference?	draft
2530	What does <code>std::forward</code> do?	draft
2531	Call a member function of an object passed as a universal reference when we no longer need that object?	draft
2532	What is the overload resolution of binding all references including universal references?	draft
2533	What is the side effect of universal reference overloads on copy and move constructors?	draft
2534	Avoid accidental overload resolution with universal reference in a generic constructor?	draft
2535	Perfectly forward parameters of a lambda?	draft
2536	What is the advantage of universal references over const lvalue references?	draft
2537	Why cannot we use <code>std::forward<>()</code> twice in an object?	draft
2538	What is the deduced type of a universal reference?	draft
2539	Check for constness of an argument?	draft
2540	Divide the execution of a function based on constness of its argument?	draft
2541	Check whether the passed argument of an object is an lvalue or an rvalue?	draft
2542	Restrict a universal reference to a specifc type?	draft
2543	What corner cases exist that rvalue references might look like universal references?	draft
2544	Where does reference collapsing rule apply?	draft
2545	How does reference collapsing apply for <code>std::move()</code> and <code>std::reference<>()</code>?	draft
2546	What are the side effects of explicitly specifying the type of the template parameter when declared as a universal reference?	draft
2547	When does template parameter deduction conflicts happens with universal references?	draft
2548	Declare a function taking a pure rvalue reference of generic types?	draft
2549	How to declare move-only types?	draft
2550	What happens to a move-only object when removed from a container?	draft
2551	Why <code>std::initializer_list</code>s cannot be used for move-only objects?	draft
2552	What is the only way to iterate over move-only elements of a container?	draft
2553	What is the only way to pass or return move-only values?	draft
2554	How to ensure that we have lost the ownership of a move-only object when passed to a function?	draft
2555	How to move elements of a range to another using move semantics and the C++ standard library algorithms?	draft
2556	How to use move iterators in algorithms when we no longer want the elements of a container?	draft
2557	How to use move iterators to construct containers?	draft
2558	When do the capacity of strings shrink?	draft
2559	When do containers support move semantics?	draft
2560	What does the C++ standard guarantee for move operations on containers?	draft
2561	How many ways are there for elements to be moved into a container?	draft
2562	How does <code>std::array</code> support move semantics?	draft
2563	How does <code>std::pair</code> support move semantics?	draft
2564	What is the state of a moved-from string?	draft
2565	What is the use case of <code>std::optional</code>?	draft
2566	How does <code>std::optional</code> take advantage of move semantics?	draft
2567	What methods in <code>std::optional</code> overload with move semantics?	draft
2568	When does using a <code>std::shared_ptr</code> become expensive?	draft
2569	How does move semantics optimize the iteration over a collection of shared pointers?	draft
2570	How does <code>std::unique_ptr</code> take advantage of move semantics?	draft
2571	How do IOStream objects take advantage of move semantics?	draft
2572	Why cannot we be sure if functions take the ownership of passed rvalue objects or not?	draft
2573	Use a temporary file stream object to write into a file?	draft
2574	Use a temporary string stream object to extract words into separate string objects?	draft
2575	Use a temporary string stream object split a multi-line string into separate lines?	draft
2576	What types in multithreading are neither copyable nor movable?	draft
2577	What types in multithreading are move only?	draft
2578	How does the thread constructor take arguments?	draft
2579	Use move semantics to pass future and promise types to two different threads passing value?	draft
2580	Pass string literals as universal references?	draft
2581	What is the state of a moved-from string?	draft
2582	What is the use case of <code>std::optional</code>?	draft
2583	How does <code>std::optional</code> take advantage of move semantics?	draft
2584	What methods in <code>std::optional</code> overload with move semantics?	draft
2585	When does using a <code>std::shared_ptr</code> become expensive?	draft
2586	How does move semantics optimize the iteration over a collection of shared pointers?	draft
5482	Create a custom size screen?	review
2587	How does <code>std::unique_ptr</code> take advantage of move semantics?	draft
2588	How do IOStream objects take advantage of move semantics?	draft
2589	Why cannot we be sure if functions take the ownership of passed rvalue objects or not?	draft
2590	Use a temporary file stream object to write into a file?	draft
2591	Use a temporary string stream object to extract words into separate string objects?	draft
2592	Use a temporary string stream object split a multi-line string into separate lines?	draft
2593	What types in multithreading are neither copyable nor movable?	draft
2594	What types in multithreading are move only?	draft
2595	How does the thread constructor take arguments?	draft
2596	Use move semantics to pass future and promise types to two different threads passing value?	draft
2597	Pass string literals as universal references?	draft
2598	What is the state of a moved-from string?	draft
2599	What is the use case of <code>std::optional</code>?	draft
2600	How does <code>std::optional</code> take advantage of move semantics?	draft
2601	What methods in <code>std::optional</code> overload with move semantics?	draft
2602	When does using a <code>std::shared_ptr</code> become expensive?	draft
2603	How does move semantics optimize the iteration over a collection of shared pointers?	draft
2604	How does <code>std::unique_ptr</code> take advantage of move semantics?	draft
2605	How do IOStream objects take advantage of move semantics?	draft
2606	Why cannot we be sure if functions take the ownership of passed rvalue objects or not?	draft
2607	Use a temporary file stream object to write into a file?	draft
2608	Use a temporary string stream object to extract words into separate string objects?	draft
2609	Use a temporary string stream object split a multi-line string into separate lines?	draft
2610	What types in multithreading are neither copyable nor movable?	draft
2611	What types in multithreading are move only?	draft
2612	How does the thread constructor take arguments?	draft
2613	Use move semantics to pass future and promise types to two different threads passing value?	draft
2614	Pass string literals as universal references?	draft
2615	What is the state of a moved-from string?	draft
2616	What is the use case of <code>std::optional</code>?	draft
2617	How does <code>std::optional</code> take advantage of move semantics?	draft
2618	What methods in <code>std::optional</code> overload with move semantics?	draft
2619	When does using a <code>std::shared_ptr</code> become expensive?	draft
2620	How does move semantics optimize the iteration over a collection of shared pointers?	draft
2621	How does <code>std::unique_ptr</code> take advantage of move semantics?	draft
2622	How do IOStream objects take advantage of move semantics?	draft
2623	Why cannot we be sure if functions take the ownership of passed rvalue objects or not?	draft
2624	Use a temporary file stream object to write into a file?	draft
2625	Use a temporary string stream object to extract words into separate string objects?	draft
2626	Use a temporary string stream object split a multi-line string into separate lines?	draft
2627	What types in multithreading are neither copyable nor movable?	draft
2628	What types in multithreading are move only?	draft
2629	How does the thread constructor take arguments?	draft
2630	Use move semantics to pass future and promise types to two different threads passing value?	draft
2631	Pass string literals as universal references?	draft
2632	What is the state of a moved-from string?	draft
2633	What is the use case of <code>std::optional</code>?	draft
2634	How does <code>std::optional</code> take advantage of move semantics?	draft
2635	What methods in <code>std::optional</code> overload with move semantics?	draft
2636	When does using a <code>std::shared_ptr</code> become expensive?	draft
2637	How does move semantics optimize the iteration over a collection of shared pointers?	draft
2638	How does <code>std::unique_ptr</code> take advantage of move semantics?	draft
2639	How do IOStream objects take advantage of move semantics?	draft
2640	Why cannot we be sure if functions take the ownership of passed rvalue objects or not?	draft
2641	Use a temporary file stream object to write into a file?	draft
2642	Use a temporary string stream object to extract words into separate string objects?	draft
2643	Use a temporary string stream object split a multi-line string into separate lines?	draft
2644	What types in multithreading are neither copyable nor movable?	draft
2645	What types in multithreading are move only?	draft
2646	How does the thread constructor take arguments?	draft
2647	Use move semantics to pass future and promise types to two different threads passing value?	draft
2648	Pass string literals as universal references?	draft
2763	Where are the process related information on the system?	draft
2669	How to list the GNU GCC compiler default configurations?	review
2670	How to inspect the detailed steps the GNU GCC takes to compile a source file?	review
2671	How to inspect the meta data of an executable file?	review
2672	How to remove symbol table from an executable file using binary utilities?	review
2673	How to use GNU GCC compiler to compile C source files separately?	review
2674	How to list the symbol paths within an executable file?	review
2675	Why do C libraries require kernel headers and how kernel headers can be installed?	review
2676	What is the GNU GCC compiler flag to specify processor architecture and processor specific optimization?	review
2677	What toolchains are available to use in kernel image build process?	review
2678	How to build <code>Crosstool-ng</code>?	review
2679	How to list <code>Crosstool-ng</code> sample configurations?	review
2680	How to use <code>Crosstool-ng</code> to show a brief info of current or specified configuration?	review
2681	How to use <code>Crosstool-ng</code> to load a target specific configuration sample?	review
5520	Draw the graph of a function?	review
2711	Edit an environment variable on U-Boot command line?	draft
2712	Restart the board with a U-Boot command?	draft
2713	Where to download the Raspberry Pi bootloader from?	draft
2714	What files are required to to boot using a Raspberry Pi device?	draft
2718	What environment variable is required when building the kernel?	draft
2719	What kernel config is recommended to use for desktop systems?	draft
2720	Save your modified config as a default config to be used later?	draft
2721	What are the different types of a kernel configuration option?	draft
2722	What dependencies are available for kernel configutration options?	draft
2723	Make building process faster by running build in parallel?	draft
2724	Make building process faster multiple times by caching build artifacts?	draft
2725	What are the kernel build artifacts?	draft
2726	How many installation targets do we have to run?	draft
2727	Install built kernel from source tree?	draft
2728	What artifacts will be installed from the kernel source tree?	draft
2729	Which files should we install on root filesystem of the device?	draft
2730	Install modules from source tree?	draft
2731	Change the default path to module installation?	draft
2732	What artifacts will be installed by modules installation?	draft
2733	What cleaning targets do we have in kernel source?	draft
2734	Archive current kernel version?	draft
2735	What is the purpose of using device trees?	draft
2736	What is the hierarchy of a device tree source describing a specific device?	draft
2737	What commands can be used in U-Boot to load kernel images?	draft
2738	Load kernel on U-Boot command line from ftp service?	draft
2739	Load kernel on U-Boot command line from MMC storage?	draft
2740	Automatically load kernel on boot up using U-Boot command line?	draft
2741	What is a kernel command line?	draft
2742	Where is the list of all kernel command line arguments?	draft
2743	What are the priorities of passing command line arguments?	draft
2744	Where the dependency of modules are specified?	draft
2745	What is the kernel logging mechanism?	draft
2746	Filter kernel log messages using log level?	draft
2747	Where is the device node representing kernel log buffer?	draft
2748	Print the information about a module?	draft
2749	List kernel modules?	draft
2750	Insert modules?	draft
2751	Which tool loads kernel modules while also loading their dependencies?	draft
2752	Pass parameters to a module through modprobe configuration?	draft
2753	Pass parameters to a module through kernel parameters?	draft
2754	Where can you find module parameters?	draft
2755	Mount a filesystem for a USB storage device?	draft
2756	Unmount a filesystem?	draft
2757	Where can we mount a root filesystem from?	draft
2758	Use NFS protocol to mount a root filesystem?	draft
2759	Boot up a virtual system into U-Boot command line?	draft
2760	Create an initramfs?	draft
2650	Separate source and build directories when building a project with cmake?	review
2651	Build a project?	review
2652	Specify the exact target to build?	review
2653	Show possible targets within a project?	review
2654	What targets are predefined by cmake?	review
2655	Explicitly specify generator for building the project?	review
2656	How many library types are defined in cmake?	review
2657	Create static and shared libraries?	review
2659	Enable position independent executable for an executable?	review
2660	Change the name of the target on output?	review
2661	What is the default library build strategy when library type is not specified?	review
2662	What values are equivalent to true and false in cmake?	review
2663	Use conditional statements to either make libraries and link to program or build them into one executable?	review
2664	What is the better alternative to making variables optional for user than using if expressions?	review
2665	What is the common way to pass source files to targets?	review
2666	Make an option dependent to another?	review
2761	What component is responsible for loading device files into the kernel?	draft
2762	Create proc virtual filesystem?	draft
2683	How to use <code>Crosstool-ng</code> to print the tuple of the currently configured toolchain?	review
2684	How to use <code>Crosstool-ng</code> to separate downloading source files from building stage?	review
2685	How to use <code>Crosstool-ng</code> to build the desired architecture specific cross-toolchain?	review
2686	How to set library and headers path for a cross-compiled GNU GCC compiler?	review
2687	How to obtain U-Boot and configure it?	review
2688	How to load a file from a filesystem to RAM within U-Boot shell?	review
2689	What command can be used within U-Boot shell to load a kernel image into RAM from network?	review
2690	What command can be used within U-Boot shell to test network conectivity?	review
2691	What utilities can be used within U-Boot shell to load a kernel image from serial line to RAM?	review
2692	What command can be used within U-Boot shell to control the USB subsystem?	review
2693	What command can be used within U-Boot shell to control MMC subsystem?	review
2695	What commands can be used within U-Boot shell to erase, modify protection or write contents to NOR flash?	review
2696	What command can be used within U-Boot shell to display memory info?	review
2697	What command can be used within U-Boot shell to modify memory info?	review
2698	What command can be used within U-Boot shell to display board information?	review
2699	What command can be used within U-Boot shell to display environment variables?	review
2700	What command can be used within U-Boot shell to set environment variables?	review
2701	What command can be used within U-Boot shell to edit an environment variable?	review
2702	What command can be used within U-Boot shell to save environment variables permanently?	review
5495	Create a vertical text widget?	review
2703	What environment variable can be set within U-Boot shell to specify the boot command sequence that U-Boot should automatically execute at boot time?	review
2704	What environment variable can be set within U-Boot shell to be passed to the kernel as arguments?	review
2705	What environment variables should be set within U-Boot shell to load an image into RAM from network?	review
2706	What command can be used within U-Boot shell to see the size of the latest copy into memory?	review
2707	How to write conditional expressions within U-Boot shell?	review
2708	How to run a script within U-Boot shell?	review
2709	How to reference other variable within U-Boot shell?	review
2710	What does the <code>source</code> command do in U-Boot shell environment?	review
2715	How to list all available processors available to QEMU?	review
2716	How to use <code>qemu-system-arm</code> command to boot into <code>u-boot</code>?	review
2717	How to create a patch?	review
2764	What files in the system contain general device-related information?	draft
2765	What information does sysfs hold from the system?	draft
2766	What sequence does kernel follow to call init?	draft
2767	Create a simple init program to prevent kernel panic?	draft
2768	Compile a program with debugging information?	draft
2838	What are the use cases of nontype template parameters?	draft
2839	How nontype template parameters can be initialized?	draft
2840	What is the relation between objects of a class instantiated by different nontype template parameter values?	draft
2935	Find an element within a list?	draft
2771	Start an event processing loop on a worker thread?	review
2772	Start an event processing loop without blocking thread execution?	review
2773	Start an event processing loop to run queued tasks?	review
2774	Start an event processing loop to run tasks out of queue?	review
2775	Serialize concurrent execution of an event processing loop?	review
2777	Expire a task when reached to a deadline?	review
2779	Write a client establishing an asynchronous tcp connection to a server?	review
2780	Write a server accepting synchronous tcp requests?	review
2782	Write and read from server socket?	review
2778	Write a client establishing a synchronous tcp connection to a server?	review
2781	Write a server accepting asynchronous tcp requests?	review
2813	When does auto type decays?	review
2795	What are the alternatives to templates which should be avoided by using templates?	review
2796	What are the alternatives to typename keyword?	review
2797	What are the translation phases of a template?	review
2798	What happens when a function template triggers its instantiation?	review
2799	What is the signature of a function template?	review
2800	What requirements should the type of a function template parameter meet?	review
2801	Use a function template with different types?	review
2802	How does the compile deduce the type of function template arguments?	review
2803	What are the limits of type conversion during type deduction of function template arguments?	review
2804	What are the common ways to handle type conversions during type deduction of function template arguments?	review
2805	How does the compiler deduce the default function template parameters?	review
2806	Declare a function template with multiple template parameters?	review
2808	What are the disadvantages of using additional template parameter for return types when having multiple function template parameters?	review
2809	What are the disadvantages of using automatic deduction of return types when multiple function template parameters are used?	review
2810	Use trailing return type to deduce the return type of a function template?	review
2811	What is the drawback of using trailing return type?	review
2812	Use common type as the return type of a function template?	review
2814	What are the use cases of default template arguments?	review
2793	How to add a package to the root filesystem of built qemu image using <b>Yocto Poky</b> tools?	review
2815	What ordering default template parameter can have?	review
2816	What are the rules of overload resolution for matching a function template overload by a compiler?	review
2817	What happens when there are two matching template overloads for a function call?	review
2818	What are the common use cases of overloading function templates?	review
2819	What is the drawback of overloading function templates?	review
2820	When a template function overload would be missed by a call?	review
2821	Declare a class template?	review
2822	Declare copy constructor and copy assignment operator of a class template?	review
2823	Define the member functions of a class template outside of the scope of the class?	review
2824	Declare a friend function template in a class template?	review
2825	Specialize a class template for a specific type?	review
2826	Partially specialize a class template for pointers?	review
2827	What are the possible template specializations of a class template with multiple template parameters?	review
2828	Define default values for class template parameters?	review
2829	Define an alias template?	review
2830	Use alias templates for member types of class templates?	review
2831	Under what condition class templates do not require specifying template parameters?	review
2832	What is the common way of supporting type deduction for a class template?	review
2833	What is the drawback of supporting class template argument deduction by providing constructors passing initial argument?	review
2834	What is the drawback of passing arguments of a template type by reference when supporting class template argument deduction?	review
2835	Disable automatic deduction of raw character pointers using deduction guides instead of constructors passing arguments?	review
2836	Where are the edge cases where deduction guides do not work?	review
2837	Define deduction guides for aggregate class templates?	review
2783	Begin debugging session of an executable?	review
2785	Show source code in debugging session?	review
2786	Set breakpoints on a program?	review
2787	Delete a breakpoint from a program?	review
2784	Step through program execution in debugging session?	review
2788	Print the value of an object?	review
2790	Inspect the type of a variable?	review
2789	Modify the value of a variable?	review
2791	Run shell commands in debugging session?	review
2769	What is the objective of <code>io_context</code> in boost?	review
2841	What is the use case of nontype class template parameters with default values?	draft
2842	How many stages does CMake have to build a project?	draft
2843	What file does CMake use as cache in configuration stage?	draft
2844	What are the crucial CMake commands needed in every project?	draft
2845	Run CMake for configuration stage of a project?	draft
2846	Run CMake for building stage of a project?	draft
2847	Build latest CMake version from source?	draft
2848	What commands are available after a clean installation of CMake?	draft
2849	Specify generator when configuring a project with CMake?	draft
2850	Get help from CMake on a shell?	draft
2851	Get a list of detailed help from CMake on shell?	draft
2852	Specify a cache when configuring a project with CMake?	draft
2853	Initialize existing cache variables when configuring a project with CMake?	draft
2854	Specify build type when configuring a project with CMake?	draft
2855	List all the cache variables of a project?	draft
2856	Remove a cache variable from the configuration of a project?	draft
2857	Get project agnostic general information about variables, commands, marcros and other settings?	draft
2858	Change the log level of CMake?	draft
2859	What CMake command prints logs?	draft
2860	What is a message context?	draft
2861	Enable context in CMake logs?	draft
2862	What is the most verbose option of loggin for CMake?	draft
2863	What are CMake presets?	draft
2864	List available CMake presets?	draft
2865	Choose a CMake preset for a project?	draft
2866	Run CMake to configure a project by erasiing previous configurations first?	draft
2867	Run CMake in building stage with parallel jobs?	draft
2868	Specify a target in building stage of a project?	draft
2869	Clean the build tree?	draft
2870	Build a project by first cleaning the build tree?	draft
2871	Specify which configuration should be used in building stage by multi-configuration supported generators?	draft
2872	Generate debugging logs on building stage?	draft
2873	Use CMake to install build artifacts?	draft
2874	Change the default installation path in installation stage?	draft
2875	Explicitly specify which components you want to install on installation stage?	draft
2876	Specify default directory permissions on installatino stage?	draft
2877	Generate debugging logs on installation stage?	draft
2878	Run a cmake script?	draft
2879	Use CMake to run a platform independent command?	draft
2880	Use CMake to run checksum?	draft
2881	Where do workflows can be used?	draft
2882	Get a list of presets in a workflow?	draft
2883	Execute a workflow preset?	draft
2884	Run all the tests in a project?	draft
2885	What GUI interfaces does cmake have?	draft
2886	Where is the source directory?	draft
2887	Where is the build directory?	draft
2888	What is Listfiles?	draft
2889	What is the main CMake listfile in a project?	draft
2890	What is the structure of a cache file?	draft
2891	What is a CMake package configuration file?	draft
2892	What are the common CMake artifacts resulted in generation stage?	draft
2893	What are preset files?	draft
2894	What are the advantages of running CMake scripts rather than external scripts?	draft
2895	What is the minimum requirements of a CMake script file?	draft
2896	What are the CMake utility modules?	draft
2897	Use a CMake utility module?	draft
2898	What are the CMake find modules?	draft
2899	Get the list of CMake modules?	draft
2900	How many execution modes exist in CMake?	draft
2901	What case sensitivity does CMake follow for writing commands?	draft
2902	What is the syntax of a comment in CMake listfiles?	draft
2903	How many types of arguments exist in CMake?	draft
2904	How many variable categories exist in CMake?	draft
2905	Are CMake variables case sensitivity?	draft
2906	What is the default type of variables in CMake?	draft
2907	What are the basic variable manipulation commands in CMake?	draft
2908	Create a normal CMake variable?	draft
2909	Remove a normal CMake variable?	draft
2910	What is the syntax of referencing a CMake variable?	draft
2911	What is the syntax of referencing a CMake environment variable?	draft
2912	What is the syntax of referencing a CMake cache variable?	draft
2913	How does CMake traverse scopes to reference a variable?	draft
2914	What variable will be changed when assigning a value to a variable reference instead of a variable name in CMake listfile?	draft
2915	What is the precedence of CMake variable evaluation in different variable categories?	draft
2916	What normal variables are defined as arguments passed to CMake?	draft
2917	What are the CMake environment variables coming from?	draft
2918	What is the lifetime of CMake environment variables?	draft
2919	What is the lifetime of CMake cache variables?	draft
2920	Define a CMake cache variable?	draft
2921	What variable types exist for CMake cache variables?	draft
2922	How many scopes exist in CMake?	draft
2923	What is the difference between inner and outer CMake scopes?	draft
2924	Which CMake commands create file scopes?	draft
2925	Create a new block in a CMake listfile?	draft
2926	Propagate a variable in a block to the outer scope in a CMake listfile?	draft
2927	How does a CMake list store its values?	draft
2928	Create a list?	draft
2929	What happens when an unquoted list is passed as a parameter?	draft
2930	Print the elements of a list?	draft
2931	Get the size of a list?	draft
2932	Get the value of a particular element in the list?	draft
2933	Combine two lists?	draft
2934	Extract a range of elements within a list?	draft
2939	Pop the last element within a list?	draft
2940	Pop the first element within a list?	draft
2941	Push an element at the beginning of a list?	draft
2942	Remove an element by value from a list?	draft
2943	Remove an element by index from a list?	draft
2944	Remove duplicate entries of a list?	draft
2945	Transform elements of a list?	draft
2946	Reverse the elements of a list?	draft
2947	Sort the elements of a list?	draft
2948	Write a conditional block?	draft
2949	How many conditional operators exist in CMake?	draft
2950	Write two nested conditional expressions?	draft
2951	How variables can be used as conditional operands?	draft
2952	How strings are evaluated as conditional operands?	draft
2953	What are the differences between a braced reference and an unbraced reference as a conditional operand?	draft
2954	What is the best practice to check if a variable is defined?	draft
2955	What comparison operators are available for integral types?	draft
2956	What comparison operators are available for version type?	draft
2957	What comparison operators are available for string type?	draft
2958	Compare if a value matches with a regular expression?	draft
2959	Access to tokens after matching string with a regular expression?	draft
2960	Check if value is in a list?	draft
2961	Check if a command is available for invokation in current CMake version?	draft
2962	Check if a policy exists?	draft
2963	Check if a test exists?	draft
2964	Check if a target is defined?	draft
2965	What is a target?	draft
2967	Compare creation date of two files?	draft
2968	Check if a path is a directory?	draft
2969	Check if a path is a symbolic link?	draft
2970	Check if a path is absolute?	draft
2971	Compare equality of two paths?	draft
2972	What command manipulates paths?	draft
2973	How many loops exist in CMake?	draft
2974	What is the scope of loop variables?	draft
2975	How many function types exist in CMake?	draft
2976	What scopes do function and macro have?	draft
2977	What variables are provided in a function as function arguments?	draft
2978	What variables provide function information in a function scope?	draft
2979	What function prints logs into the standard streams?	draft
2980	What log levels exist?	draft
2981	What is the message context?	draft
2982	What arguments does inclusion function take?	draft
2983	Guard a listfile from multiple inclusion?	draft
2984	Read the content of a file?	draft
2985	Write into a file?	draft
2986	Download a file?	draft
2987	Run another process and collect its output?	draft
2988	What are the side effects of assigning the minimum required version to a cmake listfile?	draft
2989	Define project details in CMake listfile?	draft
2990	What languages are supported by CMake?	draft
2991	What variables provide the version information about the project?	draft
2992	What variables provide project information?	draft
2993	Include another CMake listfile?	draft
2994	What are the disadvantages of including another listfile?	draft
2995	Include another CMake listfile with a scope?	draft
2996	What is the most appropriate way of making the targets of a project available to other projects system-wide?	draft
2997	Define an export file to be used by consuming projects?	draft
2998	What are the alternative approaches to exporting a target?	draft
2999	Why the generated export file cannot be used system-wide?	draft
3000	Install a built project on your host system?	draft
3001	What CMake command installs artifacts?	draft
3002	What artifacts can be installed by CMake?	draft
3003	Specify the location where an artifact would be copied in install command?	draft
3004	Set permissions for an artifact in install command?	draft
3005	Specify in which configurations an artifact should be installed in install command?	draft
3006	Suppress errors when the installable files do not exist in install command?	draft
3007	Specify in which export component an artifact belongs to in install command?	draft
3008	Exclude an artifact from the default build process in install command?	draft
3009	What command installs executable and library artifacts?	draft
3010	Specify the export file in which an artifact should belong to in install command?	draft
3011	What artifact types an installable artifact can have?	draft
3012	What are the default installation paths for each of the artifact types?	draft
3013	What utility module aims detecting platform specific installation paths?	draft
3014	What path is the defacto standard for library headers to be installed?	draft
3015	Specify a file set for target headers to be installed in an appropriate location?	draft
3016	Install files and assets into system-wide accessible locations?	draft
3017	Invoke scripts during installation?	draft
3018	Specify runtime dependencies for a target?	draft
3019	What steps are required to make a project accessible system-wide?	draft
3020	Make include directories relocatable?	draft
3021	Install an export file?	draft
3022	What are the building blocks of a package definition config file?	draft
3023	What are the requirements of a package?	draft
3024	What are the requirements of package location and name?	draft
3025	What does a basic config file contain?	draft
3026	Make a library visible by other projects through <code>find_package()</code>?	draft
3027	Check path availability in a config file?	draft
3028	Generate package version file?	draft
3029	Define components to be used in package finding?	draft
3030	Make a symbolic linke to a versioned shared library?	draft
3031	What package generators are available?	draft
3032	What information is needed in the project before packing it?	draft
3033	Create a package from a project?	draft
3034	Which version of CMake does support presets?	draft
3035	What features do CMake presets offer?	draft
3036	Where should CMake preset files reside to be recognizable?	draft
3037	What stages do CMake presets can be defined for?	draft
3038	List CMake presets specific for configuration stage?	draft
3039	List CMake presets specific for build stage?	draft
3040	List CMake presets specific for test stage?	draft
3041	List CMake workflow presets?	draft
3042	Use a project defined CMake preset?	draft
3043	What is the format of a CMake preset file?	draft
3044	What is the common mandatory field in all CMake presets?	draft
3045	What are the optional fields in all CMake presets?	draft
3046	What common dependency exists in CMake stage specific presets?	draft
3047	What are the CMake configuration stage specific preset fields?	draft
3048	What is the precedence of preset variables in CMake?	draft
3049	What are the CMake build stage specific preset fields?	draft
3050	What are the CMake test stage specific preset fields?	draft
3051	What are the CMake package stage specific preset fields?	draft
3052	What is the work around for creating an install stage preset?	draft
3053	Run a CMake workflow by first wiping the build tree and clearing cache?	draft
3054	Define a CMake workflow in a project?	draft
3055	What is the structure of a condition in CMake presets?	draft
3056	What types of conditions exists in CMake presets?	draft
3057	What are the available macros in CMake presets?	draft
3058	What are the properties of the tiniest unit of a graphical unit?	draft
3059	What is a pipeline?	draft
3060	What are the pipeline stages?	draft
3061	What is the responsibility of OpenGL?	draft
3062	What cross-platform window systems are available to use with OpenGL?	draft
3063	Install GLFW from source?	draft
3064	Create a window with GLFW?	draft
3065	Draw a colored triangle?	draft
3066	What is an OpenGL context?	draft
3067	How circles are drawn in OpenGL?	draft
3068	What are the coordinates of screen corners in OpenGL?	draft
3069	Coordinate the triangles rotating the origin to shape a circle?	draft
3070	Draw a circle?	draft
3071	What are the transformation slots?	draft
3072	Select each of the transformation slots?	draft
3073	Reset model view matrix to identity matrix?	draft
3074	Scale down a circle to look smaller?	draft
3075	Store and restore matrix state before and after translations?	draft
3076		draft
3077		draft
3078	Rotate a two dimensional circles rotating around z axis?	draft
3079	What structure is used instead of a vertex due to performance reasons?	draft
3080	What is the modern pipeline for shaders?	draft
3081	What is the vertex structure?	draft
3082	What each slot of a shaders do in pipeline?	draft
3083	What slots exist in the rendering pipeline?	draft
3084	Initialize a shader class?	draft
3085	Compile a shader in source?	draft
3086	Create a fragment shader?	draft
3087	Attach shaders to a program?	draft
3088	Link program shader?	draft
3089	Create a vertex and fragment shader to create a program?	draft
3090	What type categories exist in GLSL?	draft
3091	What are the basic types in GLSL?	draft
3092	What are the vector types in GLSL?	draft
3093	What are the matrix types in GLSL?	draft
3094	What is the syntax of constructing a GLSL object?	draft
3095	What syntax does accessing to elements have in GLSL?	draft
3096	Write a basic vertex shader?	draft
3097	Define inputs of a vertex shader?	draft
3098	What shader type will be rendered by rasterizer?	draft
3099	What variable must be initialized in a vertex shader?	draft
3100	Write a basic fragment shader?	draft
3101	How the input data for vertex shaders can be supplied?	draft
3102	What stage in the rendering pipeline is responsible for copying data into GPU?	draft
3103	Define a vertex buffer object?	draft
3104	Bind a vertex buffer object?	draft
3105	Copy the vertex buffer object into GPU?	draft
3106	Define an attribute location for a shader?	draft
3107	What arguments does <code>glVertexAttribPointer</code> take?	draft
3108	What function draws triangles defined in shader program?	draft
3109	Define matrices to the vertex shader?	draft
3110	Draw two triangles with touching bases forming a square?	draft
3111	Get access to the coordinations of fragments?	draft
3112	Get the time information from GLFW?	draft
3113	Load a texture?	draft
3114	Draw a few pixels using textures?	draft
3115	Load a bitmap image using textures?	draft
3116	Rotate a cube?	draft
3117	Use GLM math library?	draft
3118	Texture a cube?	draft
3119	Project a cube with correct perspectives?	draft
3120	What is the output of yocto?	draft
3121	What is the name of the build engine in yocto?	draft
3122	What does bitbake do?	draft
3123	What is the name of the text files parsed by bitbake?	draft
3124	What is the building blocks of a recipe?	draft
3125	What does bitbake take as an input?	draft
3126	What is the building blocks of a metadata?	draft
3127	What is the core layer of metadata?	draft
3128	What is a poky layer?	draft
3129	What is a poky distribution?	draft
3130	What meta layer is used to build images for a beagle bone black board?	draft
3131	Get poky reference system?	draft
3132	What is the contents of <code>bitbake</code> directory in poky source tree?	draft
3133	What is the contents of <code>meta</code> directory in poky source tree?	draft
3134	What is the contents of <code>meta-skeleton</code> directory in poky source tree?	draft
3135	What is the contents of <code>meta-poky</code> directory in poky source tree?	draft
3136	What is the contents of <code>meta-yocto-bsp</code> directory in poky source tree?	draft
3137	What does the <code>oe-init-build-env</code> file do in poky?	draft
3138	What is the contents of <code>script</code> directory in poky source tree?	draft
3139	Get poky repository?	draft
3140	What commands are available after sourcing <code>oe-init-build-env</code> script?	draft
3141	What are the common targets in bitbake?	draft
3142	What environment variables does <code>oe-init-build-env</code> script provide?	draft
3143	What configuration files exist in a bitbake generated build directory?	draft
3144	What does the <code>oe-init-build-env</code> script generate?	draft
3145	Prepare build environment with poky?	draft
3146	Build an image with poky?	draft
3147	Initialize the build directory with poky?	draft
3148	What variable defines the architecture of target machine to build for in poky?	draft
3149	What are the optional variables to speed up the build process?	draft
3150	Get help from bitbake manual?	draft
3151	Build an image for a target machine with poky?	draft
3152	How does OpenEmbedded build system hold project information?	draft
3153	Expand an already assigned variable?	draft
3154	What are the properties of variables?	draft
3155	What scopes does OpenEmbedded build system have?	draft
3156	Assign a value to a variable discarding its previous value?	draft
3157	How many different variable expansions exists in OpenEmbedded build system?	draft
3158	Append values to a variable with and without spaces?	draft
3159	Prepend values to a variable with and without spaces?	draft
3160	Make a default value for a variable?	draft
3161	What is the difference between default and weak default values?	draft
3162	What is the preferred way of modifying a variable?	draft
3163	What does override operators do?	draft
3164	Append to a variable using override operators?	draft
3165	Prepend to a variable using override operators?	draft
3166	Remove all occurances of a value within a variable using override operators?	draft
3167	What does the dropbear package do?	draft
3168	Assign on a variable only for a specific machine?	draft
3169	What is the precedence between override assignments and regular assignments?	draft
3170	Append to a variable only for a specific machine using override variables?	draft
3171	What is the precedence of override operators?	draft
3172	Get the list of all places where a variable was modified?	draft
3173	Get information from a recipe specific variables?	draft
3174	Get information from a recipe specific environment variable?	draft
3175	Locate a recipe file?	draft
3176	Get package name of a recipe?	draft
3177	Which variable holds virtual package names?	draft
3178	What recipes can provide virtual packages?	draft
3179	What are the building blocks of virtual packages?	draft
3180	What are the common virtual packages in Poky?	draft
3181	What virtual package variants exist for bootloader?	draft
3182	What virtual package variants exist for kernel?	draft
3183	What virtual package variants exist for libc?	draft
3184	What virtual package variants exist for xserver?	draft
3185	Select a variant of a virtual package?	draft
3186	Which provider has a higher priority in build?	draft
3187	Explicitly select a specific version of a provider when many exist?	draft
3188	What packages are included in the install?	draft
3189	What variable holds the packages being installed in the image?	draft
3190	What are the recipe name modifiers?	draft
3191	Run a specific bitbake recipe?	draft
3192	Run a specific task in a bitbake recipe?	draft
3193	List all recipes?	draft
3194	List all tasks within a recipe?	draft
3195	Force bitbake to run a recipe regardless of previous runs?	draft
3196	What bitbake target can be used to build all recipes?	draft
3197	Run a specific task for all recipes?	draft
3198	What is the naming pattern of tasks in recipes?	draft
3199	What are the common tasks found in recipes?	draft
3200	Run a specific task for all recipes of an image?	draft
3201	Where does bitbake store cache files?	draft
3202	What variable holds the path to cache?	draft
3203	What is the default location to cache?	draft
3204	What is the content of bitbake cache?	draft
3205	Clean up the bitbake cache from builds older than a month?	draft
3206	Why should not we use direct assignment in configuration files?	draft
3207	What is the advantage of using override operators?	draft
3208	What does a recipe do?	draft
3209	What steps do recipes define?	draft
3210	What is the pattern in recipe file names?	draft
3211	What is the output of a recipe?	draft
3212	What a recipe is made of?	draft
3213	What configuration variables are already available in a recipe?	draft
3214	What is the content of <code>.inc</code> files?	draft
3215	What is written in a recipe file?	draft
3216	Where are the recipe run and log files located?	draft
3217	How many sections does a recipe have?	draft
3218	What is written in a recipe header section?	draft
3219	What variable defines where and how to retrieve the needed elements within a recipe?	draft
3220	What URI schemes exist?	draft
3221	What pattern does git scheme have?	draft
3222	What variables can be used as mirror locations?	draft
3573	Verify the size of a container?	draft
3223	What configuration variable defines the location where sources are downloaded?	draft
3224	Use checksums to verify integrity of a package?	draft
3225	What variable is used to locate source files with file scheme?	draft
3226	What paths are automatically appended to <code>FILESPATH</code>?	draft
3227	What does <code>FILESOVERRIDES</code> variable contain?	draft
3228	What variables defines the source files location?	draft
3229	What variable defines the license files location?	draft
3230	What variable defines build-time dependencies of a recipe?	draft
3231	What variable defines runtime dependencies of a recipe?	draft
3232	Reflect the dependency of a recipe on a specific version of another recipe?	draft
3233	Inspect the dependencies of an image?	draft
3234	What are the default tasks?	draft
3235	Get a list of existing tasks from a recipe?	draft
3236	What variable defines the location of generated objects during build?	draft
3237	What variable defines the location where files are installed?	draft
3238	What variable points to the working directory of recipe?	draft
3239	What is the general syntax of a task?	draft
3240	What each of default tasks work on which location variables?	draft
3241	Add a task in a recipe?	draft
3242	Take the precedence of gcc arguments without making patches?	draft
3243	Which files are always applied after sources are fetched and extracted?	draft
3244	Specify a tool to patch the sources listed in <code>SRC_URI</code>	draft
3245	Specify how to resolve a conflict in patch?	draft
3246	Write a recipe to install an program from GitHub?	draft
3247	Write a version agnostic include file for a custom program?	draft
3248	Use a version agnostic include file in a recipe?	draft
3249	Where the run and log files are located?	draft
3250	Get the value of a variable used in a recipe?	draft
3251	List the entire environment variables in poky?	draft
3252	List the environment variables of a recipe?	draft
3253	Extend a recipe in third-party layers?	draft
3254	What are the considerations of extending a recipe?	draft
3255	Which variable should be changed when new files are added in recipe extension?	draft
3256	Extend a task?	draft
3257	Use a class in a custome recipe?	draft
3258	What are the common classes?	draft
3259	Which class is automatically inherited by all recipes?	draft
3260	What common tasks are defaulted by base class?	draft
3261	Where is <code>EXTRA_OEMAKE</code> useful?	draft
3262	What does kernel class do?	draft
3263	What does autotools class do?	draft
3264	What does useradd class do?	draft
3265	Which variable can be used to specify the packages that require their own users?	draft
3266	Which class should be used when we need to install pre-built files into the generated root filesystem?	draft
3267	Which variables is used to find the files to be included?	draft
3268	What keywords are used to include files from recipes?	draft
3269	How does inheriting in configuration files work?	draft
3270	What is the difference between <code>include</code> and <code>require</code>?	draft
3271	Debug build failures by using a development shell?	draft
3272	Differenciate two builds?	draft
3273	What locations are used by bitbake to retrieve files?	draft
3274	Export full environment to a shell to debug a build?	draft
3275	Enable build history to differenciate between two builds?	draft
3276	Check the difference between two builds?	draft
3277	Which class can be used to add mirrors?	draft
3278	Create a local mirror by downloading all the sources?	draft
3279	Which task is responsible for downloading sources?	draft
3280	Disable network access in a recipe?	draft
3281	Restrict bitbake to only download files from the <code>PREMIRRORS</code>?	draft
3282	Download all the sources to run builds with network disabled?	draft
3283	What is the convention in naming layers?	draft
3284	What do layers isolate within their boundaries?	draft
3285	What are the common layers in Poky?	draft
3286	Where is the list of maintained layers?	draft
3287	Where are the bitbake layers located?	draft
3288	Include another layer?	draft
3289	What tool is used to inspect layers?	draft
3290	Get a list of layers?	draft
3291	Add an existing layer?	draft
3292	Remove a layer?	draft
3293	What layers provide board support?	draft
3294	What layers provide application support?	draft
3295	Create a new layer?	draft
3296	What is the skeleton of a newly created layer?	draft
3297	Which metadata files are parsed by bitbake automatically?	draft
3298	Define a new layer dependency?	draft
3299	Specify which yocto version a layer is compatible with?	draft
3300	What is a BSP layer?	draft
3301	What are the machine configurations in a BSP layers?	draft
3302	What configuration variable is used to describe target machine architecture?	draft
3303	What configuration variable is used to describe target kernel?	draft
3304	What configuration variable is used to describe target machine features?	draft
3305	What configuration variable is used to describe the serial console used to attach to target devide?	draft
3306	What configuration variable is used to describe the target kernel image type?	draft
3307	What bootloader is used in Poky by default?	draft
3308	What configuration variable is used in UBoot recipe to name of the SPL binary?	draft
3309	What configuration variable is used in UBoot recipe as a suffix to bootloader name?	draft
3310	What configuration variable is used in UBoot recipe as the target architecture?	draft
3311	What configuration variable is used in UBoot recipe as the bootloader entry point?	draft
3312	What configuration variable is used in UBoot recipe as the bootloader load address?	draft
3313	What configuration variable is used in UBoot recipe as the make target used to build the bootloader?	draft
3314	In how many ways the kernel can be built with yocto?	draft
3315	Use <code>linux-yocto</code> to build a specific kernel in an image?	draft
3316	What is the advanced metadata?	draft
3317	What is a Kernel Metadata?	draft
3318	Write a simple kernel metadata specifying a configuration and a patch?	draft
3319	What is advantage of creating a distribution layer?	draft
3320	Where is the configuration for a distro layer?	draft
3321	What configuration variable is mandatory in a distro layer config file?	draft
3322	What informational configuration variables are used in a distro layer config file?	draft
3323	What configuration variable is used in distro layers to toggle features?	draft
3324	What configuration variable holds the intersection of distro and machine features?	draft
3325	Define a toolchain in a distro layer?	draft
3326	What sample files are created in distro layers?	draft
3327	What configuration variable holds the path to sample config files?	draft
3328	What is an image?	draft
3329	What is the difference between an image and a machine layer?	draft
3330	Where is the location of images?	draft
3331	What are the common images used in poky?	draft
3332	What an image is made of?	draft
3333	What class is inherited by images?	draft
3334	What configuration variable is used in an image as the generated image name?	draft
3335	What configuration variable is used in an image to hold the list of packages to be installed?	draft
3336	What configuration variable is used in an image as the root filesystem size?	draft
3337	What configuration variable is used in an image to hold the list of features used in the image?	draft
3338	What configuration variable is used in an image to hold the list of formats to be used to create the image?	draft
3339	What configuration variable is used in an image to hold the list of locales to be supported?	draft
3340	What configuration variable is used in an image as the package type used by the build system?	draft
3341	What configuration variable is used in an image as shell commands to run at post process?	draft
3342	What configuration variable is used in an image as recipes to be built with the image?	draft
3343	What is the first steps of image creation?	draft
3344	What variables change how root filesystem is created?	draft
3345	Where are the root filesystem related files located in poky?	draft
3346	Where are the image type instructions located?	draft
3347	What are the steps to creating an image type?	draft
3348	What are the steps to creating an image conversion type?	draft
3349	Use wic to create a flashable image?	draft
3350	What is the use cases of bmaptool?	draft
3351	What is the structure of a package group?	draft
3352	What is the required configuration variable in a package group class?	draft
3353	What are the common package groups?	draft
3354	Where is a sysroot directory?	draft
3355	What is the concept of per-recipe sysroot?	draft
3356	What a recipe sysroot is made of?	draft
3357	Where is the recipe sysroot located?	draft
3358	What is the output recipe sysroot used by other dependent recipes?	draft
3359	In what script languages can recipes be written?	draft
3360	What Python modules are automatically included when used?	draft
3361	Write an anonymous Python function in a recipe?	draft
3362	Write an inline Python function in a recipe?	draft
3363	Access <code>D</code> configuration variable in recipe tasks?	draft
3364	What are the use cases of variable flags?	draft
3365	What variable flag is used to store the result of md5 hash?	draft
3366	What variable flag can be used to make a directory before a task runs?	draft
3367	What variable flag can be used to disable the execution of the task?	draft
3368	What variable flag can be used to disable timestamp modification each time a task runs?	draft
3369	What variable flag can be used to store task documentation?	draft
3370	What variable flag can be used to add a dependency between specific tasks?	draft
3371	What configuration variable controls build on a per feature granularity?	draft
3372	What are the arguments used by <code>PACKAGECONIFG</code> configuration variable?	draft
3373	Conditionally configure wifi feature in a package if it is enabled?	draft
3374	Conditionally configure bluetooth feature in a package if it is enabled?	draft
3375	Conditionally configure openvpn feature in a package if it is enabled?	draft
3376	Add a feature in a recipe configuration?	draft
3377	Add a feature in a distro configuration?	draft
3378	List available <code>PACKAGECONFIG</code> flags?	draft
3379	Check if a value exists in varaible?	draft
3380	Using inline Python functions return all the values of a variable for a specific flag?	draft
3381	What configuration variable holds the list of packages to be built?	draft
3382	What configuration variable allows to check dependencies?	draft
3383	What configuration variable allows creation of empty packages?	draft
3384	What configuration variable is used to prevent overwriting during the update process?	draft
3385	What configuration variable lists the files to be included in a package?	draft
3386	What configuration variable tracks the changes in licenses?	draft
3387	Which recipes should contain licensing information?	draft
3388	Specify which licenses cannot be integrated into the image?	draft
3389	Define a license for commercial components?	draft
3390	Where does bitbake generate the manifest of all licenses?	draft
3391	Include the license manifest into the root filesystem?	draft
3392	What tools does an SDK provide?	draft
3393	What is the form of an SDK generated by poky?	draft
3394	What SDK can be used to do low level development?	draft
3595	Use a matcher as a predicate?	draft
3395	Create a generic SDK for bootloader and kernel development?	draft
3396	Where will be the generated generic SDK stored?	draft
3397	What SDK can be used to develop applications running on a target?	draft
3398	What task is responsible for generating an SDK?	draft
3399	Generate an SDK for an image?	draft
3400	What configuration variables control what will be installed in an SDK?	draft
3401	Install an SDK?	draft
3402	Use an installed SDK?	draft
3403	What environment variables will be exported by an SDK?	draft
3404	Use a SDK to build an application for a target?	draft
3405	Use a SDK to build kernel?	draft
3406	What are the advantages of using devtool?	draft
3407	Where is devtool located?	draft
3408	Where does devtool manage sources?	draft
3409	Create a new recipe with devtool?	draft
3410	Modify a recipe with devtool?	draft
3411	Upgrade a recipe with devtool?	draft
3412	Edit a recipe with an editor using devtool?	draft
3413	Build a recipe with devtool?	draft
3414	Build an image with the additional devtool recipes?	draft
3415	Upload the recipes packages to the target using devtool?	draft
3416	Generate patches from git commits made locally with devtool?	draft
3417	Remove a recipe from devtool?	draft
3418	What are the different roles in embedded Linux development projects?	draft
3419	What are the possible system integration strategies?	draft
3420	What are the inputs and outputs of a build system?	draft
3421	When do we need to specify template arguments for class templates?	draft
3422	Use compile-time type deduction to declare a non-type template parameter?	draft
3423	What is the substitution to recurring templates?	draft
3424	What is the initializer list defect when initializing an integer?	draft
3425	Declare a compile-time evaluated lambda?	draft
3426	What is the smallest character code?	draft
3427	Capture <code>this</code> in a lambda by value?	draft
3428	Declare an inline variable?	draft
3429	Define nested namespaces?	draft
3430	Store the return values of a function into structured bindings?	draft
3431	Initialize a variable used for evaluation in an if statement within the statement?	draft
3432	Use compile-time if statement to check if template argument is integral, string, or a base of an object?	draft
3433	Write a hexadecimal floating-point literal number?	draft
3434	Direct initialize an enumeration?	draft
3435	Explicitly specify fallthrough of a case in switch statement?	draft
3436	Prevent function caller from discarding the return value?	draft
3437	Specify that a variable is intentionally left unused?	draft
3438	Write a static assertion without a message?	draft
3440	Provide a custom failure message to an assertion?	review
3441	What string types are allowed to extract into assertions?	review
3442	Define a test unit with a comparison for equality?	review
3443	When does a test fail?	review
3444	What are the arguments of a test unit?	review
3446	Write a test case that uses a fixture?	review
3469	What is a cardinality in mock functions?	draft
3470	Specify a method in a mock that should never be called?	draft
3471	What is the cardinality of a mock when <code>Times()</code> is omitted?	draft
3472	What is the default behavior of gMock when a mock function returns?	draft
3473	Specify the return value of mock function for three calls?	draft
3474	Specify the return value of a mock function for indefinite calls?	draft
3475	What happens if the cardinality is bigger than the specified return occurrances?	draft
3476	In what order expectations are searched?	draft
3477	Specify multiple expectations for a mock function?	draft
3478	What is the best practice in ordering of multiple expectations?	draft
3479	Verify that the call to a series of mock functions are in a specific order?	draft
3480	Verify that a mock function will be called with an specific argument value exactly once and ignore the rest of the calls?	draft
3481	What are the downsides of expectations being sticky?	draft
3482	Specify a series of expectations that retire after reaching invocation upper bounds?	draft
3483	What parameters does a mock method take?	draft
3484	What qualifiers are possible to specify as the fourth parameter of mock method?	draft
3485	Write an expectation call to a mock method when the method returns a const reference to a string?	draft
3486	Write an expectation call to a mock method when the method is const qualified?	draft
3487	What is an unprotected comma?	draft
3488	In which access specifier a mock method is allowed to be written?	draft
3489	Write mock methods for overloaded functions?	draft
3490	Mock a class template?	draft
3491	Mock a non-virtual method?	draft
3492	Mock a free function?	draft
3493	What is an uninteresting call?	draft
3494	What is a nice mock?	draft
3495	What is a strict mock?	draft
3496	What are the limitations of nice and strict mocks?	draft
3497	What is a naggy mock?	draft
3498	What are the use cases of succeed and fail assertions?	draft
3499	What is the use case of succeed assertion?	draft
3500	What is the use case of fail assertion?	draft
3501	What is the limitation of using fail assertion?	draft
3502	Write a non-fatal failure assertion?	draft
3503	Write a non-fatal failure for a specific line of file?	draft
3504	What is an assertion matcher?	draft
3505	In what namespace are matchers defined?	draft
3506	What is the best practice for equality matching using matchers?	draft
3507	Write test assertions to evaluate boolean values?	draft
3508	What are the binary comparison assertions?	draft
3509	What are the requirements of writing binary comparison test assertions?	draft
3510	When does GoogleTest print assertion arguments when the assertion fails?	draft
3511	What is the evaluation order of arguments in assertions?	draft
3512	What is the behavior of comparison assertions for pointers and C-style strings?	draft
3513	Write a test to verify comparison of a pointer or a C-style string with null?	draft
3514	Write a test to verify comparison of two C-style strings for equality and inequality?	draft
3515	Write a test to verify comparison of two C-style strings without case sensitivity?	draft
3516	Write a test to verify comparison of two floating point values?	draft
3517	Write a test to verify if difference of two floating points does not exceed an absolute error bound?	draft
3518	What are the exception assertions?	draft
3519	Write a test to verify that a statement throws a specific exception type?	draft
3520	Write a test to verify that a statement throws any exception?	draft
3521	Write a test to verify that a statement does not throw any exceptions?	draft
3522	Write a test to verify the return value of a predicate with given arguments?	draft
3523	How overloaded functions and function templates should be treated when given as argument to predicate assertions?	draft
3524	What is a predicate formatter?	draft
3525	Create an assertion result object?	draft
3526	What are the assertions taking predicate formatter?	draft
3527	Write a test to verify a predicate using predicate formatter?	draft
3528	What is the use case of death assertions?	draft
3529	When does a death assertion asserts?	draft
3530	What is the difference between exception tests and death tests?	draft
3531	What arguments does a death test take?	draft
3447	What is the naming convention of test fixtures?	review
3448	What is the lifetime of a fixture?	review
3449	Define a test fixture for Queue class?	review
3451	What are the advantages of using <code>SetUp()</code> virtual function over constructor?	review
3452	What are the advantages of using <code>TearDown()</code> virtual function over destructor?	review
3453	Initialize tests by parsing arguments?	review
3454	What function macro is used to run tests across all linking units?	review
3455	What is the preferred way of building and running tests?	review
3456	Write a test entry point?	review
3457	When should we write manual main function for tests?	review
3458	What are the limitations of using GoogleTest assertions in threads?	review
3459	What is a mock?	review
3460	What is the workflow of running a mock object?	review
3461	What are the use cases of mocks?	review
3462	Write a mock for Queue class?	review
3463	Use a MockQueue in a test?	review
3464	What is the ordering of mock expectation calls?	review
3465	What is the general syntax of a mock?	review
3466	Where matchers are used in mocks?	review
3467	Specify an expectation for a mock that the argument given to its method will be at least 100?	review
3468	Ignore an argument when it is not in our interest when it is passed to a mock method?	review
3532	Write a death test to verify exit status of a statement when death tsets are supported?	draft
3533	What are the use cases of exit assertions?	draft
3534	What are the common predicates used to verify exit status of a statement in exit assertions?	draft
3535	What is the predicate type that exit assertions take as second argument?	draft
3536	Write a wildcard matcher?	draft
3537	What arithmetic comparison matchers exist?	draft
3538	What boolean comparison matchers exist?	draft
3539	What pointer comparison matchers exist?	draft
3540	What matcher exists to check for returned <code>std::optional<></code> object?	draft
3541	What matcher exists to check for returneed <code>std::variant<></code> object?	draft
3542	What matcher should be used when given argument is a reference?	draft
3543	What matcher can be used when testing a function template?	draft
3544	What value category is used in matchers to take arguments?	draft
3545	What is the difference between using boolean comparison matchers and assertions?	draft
3546	What matchers exist for comparing equality of doubles?	draft
3547	What is the difference between variants of floating-point matchers?	draft
3548	Write a test to compare any floating point value to <code>NaN</code>	draft
3549	What matchers exist to compare two floating-point values with specified approximity?	draft
3550	 Verify given string contains a match against a regular expression?	draft
3551	 Verify given string entirely matches against a regular expression?	draft
3552	 Verify given string ends with a suffix?	draft
3553	 Verify given string contains a substring?	draft
3554	 Verify given string is empty?	draft
3555	 Verify given string starts with a prefix?	draft
3556	Verify two strings are equal without case sensitivity?	draft
3557	Verify two strings are not equal regardless of their case?	draft
3558	Verify two strings are equal?	draft
3559	Verify two strings are not equal?	draft
3560	Verify given argument is a base64 escaped sequence of a string?	draft
3561	Verify a container that does not provide size method contains an expected number of elements?	draft
3562	Verify a container that provides size method contains an expected number of elements?	draft
3563	Verify two containers are equal?	draft
3564	Verify a container contains an expected value?	draft
3565	Verify a container has an expected repition of a value?	draft
3566	Verify that each element of a container matches with a value or a matcher?	draft
3567	Verify what each element of a container should match with?	draft
3568	Verify that a container matches a given range element-wise?	draft
3569	Verify that a container is empty?	draft
3570	Verify that a container is a subset of given range?	draft
3571	Verify that a container is a superset of given range?	draft
3572	Match each of the elements of a container with a matcher compared to another range?	draft
3574	Verify that elements of a container match a series of criteria without orders?	draft
3575	Match each of the elements of a container with a criteria without ordering?	draft
3576	Verify a container holds given elements after being sorted?	draft
3577	Verify a container holds given elements after being sorted by a predicate?	draft
3578	Verify that member of a class that a pointer is pointing to matches to a criteria?	draft
3579	Verify a map contains a key matching a certain criteria?	draft
3580	Verify a pair contains expected key and value?	draft
3581	Verify that an object supporting <code>std::get<I>(object)</code> contains elements that match a certain criteria piece-wise?	draft
3582	Verify that the returning object from a member function matches a criteria when called by the test?	draft
3583	Verify the result of calling a function matches a pattern?	draft
3584	Verify the address of given argument matches a pattern?	draft
3585	Verify that given pointer is pointing to an object that matches a pattern?	draft
3586	Verify that given pointer holds a pointer that matches a pattern?	draft
3587	Verify that given pointer matches a pattern after a dynamic cast to specified type?	draft
3588	Verify that all the arguments of a tuple matches a pattern?	draft
3589	Composite multiple matches into one?	draft
3590	Make sure at least one of a few matchers apply?	draft
3591	Verify that given argument does not match a pattern?	draft
3592	Use a ternary like operator to conditionally compare the given argument to one of the two existing patterns?	draft
3593	Cast a matcher to another matcher type?	draft
3594	Verify that a predicate returns true when given argument is passed into it?	draft
3596	Use a matcher to redirect results into a listener?	draft
3597	Verify a value matches a pattern?	draft
3598	Define a matcher taking no arguments?	draft
3599	Define a matcher taking argumetns?	draft
3600	Define a matcher taking a range?	draft
3601	What are the restrictions of defining a matcher?	draft
3603	How does mutex lock executions of other threads accessing a shared resource?	draft
3604	Get the list of environment variables?	draft
3605	What are the useful environment variables?	draft
3606	List contents of current directory?	draft
3607	Create a directory?	draft
3608	List active processes running under current shell?	draft
3609	List active processes of whole system?	draft
3610	What is the shebang line in bsah script?	draft
3611	Make a shell script file executable?	draft
3612	Dry run a script without executing commands for debugging?	draft
3613	Run a script by printing line by line execution for debugging?	draft
3614	How many routine types exist?	draft
3615	When does a function is considered a coroutine?	draft
3616	What semantics a coroutine return type must follow?	draft
3617	What are the standard awaiter objects in the standard?	draft
3618	What type is the primary standard type for <code>promise_type</code>?	draft
3619	What is the signature of a coroutine handle?	draft
3620	How to resume the execution of a paused coroutine?	draft
3621	How many coroutine initializations exist?	draft
3622	What are the restricutions on coroutines?	draft
3623	What subroutines can become a coroutine?	draft
3624	What does <code>co_yield</code> do?	draft
3625	What requirements should the return type of a coroutine have to be used with <code>co_yield</code>?	draft
3626		draft
3627	What are each parts of the SOLID principle?	draft
3628	What does the single responsibility principle define?	draft
3629	What does the open closed principle define?	draft
3630	What does the liskov substitution principle define?	draft
3631	What does the interface segregation principle define?	draft
3632	What does the dependency inversion principle define?	draft
3665	How many parallel programming paradigms exist?	draft
3666	What is the difference between preemptive and non-preemptive concurrency?	draft
3667	What are the advantages of preemptive multitasking?	draft
3668	Use Amdahl's law to measure the speed-up factor of a parallel system?	draft
3669	Use Gustafson's law to compute the speed-up gained by using multiple processors?	draft
3680	How many thread types exist?	draft
3681	Construct a thread of execution?	draft
3682	Check how many threads can run on the host in parallel?	draft
3683	Synchronize writes into an output stream from multiple threads?	draft
3684	How many thread sleeping functions exist?	draft
3685	What type is the identifier of a thread?	draft
3686		draft
3687	Where workflows are written?	draft
3688	What are the least required properties to start up a workflow?	draft
3689	How sequences are expressed in yml syntax?	draft
3690	What wildcards express any character in yml?	draft
3691	What are jobs in workflows?	draft
3692	What characters are allowed in job names?	draft
3693	What is the required element for a job?	draft
3694	Define a command to be executed by a runner?	draft
3695	What shells are available in jobs?	draft
3696	What are the use cases of expressions?	draft
3697	What location on GitHub do actions refer to?	draft
3698	What are the use cases of the checkout action?	draft
3699	Show repository files after checking out?	draft
3700	What is the comment character in YAML syntax?	draft
3701	What is the syntax of assigning a value in YAML?	draft
3702	What characters can be used to surround a string value in YAML?	draft
3703	What data types are available in YAML?	draft
3704	How can we use JSON syntax in YAML?	draft
3705	What triggers are available in GitHub workflows?	draft
3706	How do webhook triggers function?	draft
3707	How do scheduled triggers function?	draft
3708	How do manual triggers function?	draft
3710	What characters are acceptable in secret names?	draft
3711	What expression expands to the secret value?	draft
3712	Create a secret?	draft
3713	Create a variable?	draft
3714	How many ways are possible to pass values when creating variables?	draft
3715	What are the use cases of environments?	draft
3672	What are the main characteristics of a daemon?	review
3673	What are the steps into creating a daemon?	review
3674	What are the major differences between a process and a thread?	review
3675	What are the use cases of syncronization primitives?	review
3676	What are the characteristics of coroutines?	review
3677	What is the life cycle of a thread?	review
3678	What are the common synchronization primitives?	review
3679	What are the common synchronization failures?	review
3633	Install OpenCV from source?	review
3634	Use OpenCV in a simple CMake configured project?	review
3635	What type is used to store image data?	review
3636	Read an image from file?	review
3637	Write an image to file?	review
3638	What coloring formats are possible to apply on importing images?	review
3639	Retrieve the number of rows and columns within a matrix?	review
3640	What type is used to contain pixel information?	review
3641	Retrieve a pixel from a matrix?	review
3642	Display an image in a window?	review
3643	Record video feed from a camera?	review
3644	What are the basic objects in OpenCV?	review
3645	What type aliases are available for <code>cv::Vec</code> class template?	review
3646	What operations does <code>cv::Vec</code> class template support?	review
3647	What operations does Scalar type support?	review
3648	What operations does Point type support?	review
3649	What type aliases are available for Point class template?	review
3650	What operations does Size type support?	review
3651	Initialize an object of type Rect?	review
3652	Initialize an object of type RotatedRect?	review
3654	Create a matrix with specific channels?	review
3655	How many channel options are available?	review
3656	Initialize a matrix with zeros?	review
3657	Initialize a matrix with ones?	review
3658	Create an eye matrix?	review
3659	What operations are supported on Mat type?	review
3660	Count non-zero elements in a matrix?	review
3661	Calculate mean standard deviation of a matrix?	review
3662	Locate minimum and maximum values in a matrix?	review
3663	Store matrix data in a persistent storage?	review
3664	Read data from a persistent storage?	review
3716	Specify an environment in a job?	draft
3717	Depend a job to another?	draft
3718	Set secrets in environments?	draft
3719	Specify URL for a job?	draft
3720	How many log annotations exist?	draft
3721	Make all the actions logs more verbose?	draft
3722	Specify custom docker image to run actions on?	draft
3723	Specify inputs for an action?	draft
3724	Specify that jobs should be run on a docker image?	draft
3725	Reference to another workflow file in current workflow?	draft
3726	Create a variable to be used in subsequent steps?	draft
3727	Create an environment variable to be used in subsequent steps?	draft
3728	Make the execution of an action conditional?	draft
3729	What functions are available in action expressions?	draft
3730	What functions are available to check for job status?	draft
3731	Create a self-hosted runner?	draft
3732	Remove a self-hosted runner?	draft
3733		draft
3806	What variable is used to limit a transaction lifetime?	draft
3807	Limit the lifetime of a transaction?	draft
3808	What feature can be used to react to events inside the database?	draft
3809	What is the only requirement of a trigger?	draft
3810	Create a trigger to track logins?	draft
3811	How many types exist in YAML syntax?	draft
3812	What is a workflow?	draft
3813	When does a workflow complete execution of tasks successfully?	draft
3814	What workflow triggers exist?	draft
3815	What runners exist in workflows?	draft
3816	What are the actions?	draft
3817	What push events are supported?	draft
3818	How many pull request events are available?	draft
3819	Limit a pull request trigger to only apply to specific branches?	draft
3820	What commands give information about the system?	draft
3821	Inspect the information from a disk?	draft
3822	Inspect what system calls a program is calling?	draft
3823	Read kernel logs?	draft
3824	What file system holds process info and where is it mounted?	draft
3825	Where can we find kernel boot parameters?	draft
3826	Where can we find memory state?	draft
3827	What file system holds the hardware information?	draft
3828	Where does debug file system mount in the system?	draft
3829	Where does tracing file system mount in the system?	draft
3734	Configure a project?	review
3735	What directories should be ignored in projects?	review
3737	What are the first stages of cmake execution?	review
3738	What is the underlying build system?	review
3739	What is the incompatibility difference between build systems?	review
3740	What is the minimum required commands to build a project?	review
3741	What is a policy?	review
3742	What is a target?	review
3743	What options are available for <code>project()</code> command?	review
3745	What is the difference between variables and their CMAKE prefixed counterparts?	review
3746	What are the available target types?	review
3747	Specify languages features for a single target?	review
3748	Explicitly specify which generator should be used to build the project?	review
3749	Start over building the binary directory?	review
3750	Build a project with single-config generators?	review
3751	Build a project with multi-config generators?	review
3752	What options are available to add a third-party dependency to a project?	review
3753	What are the advantages of <code>FetchContent</code> over <code>add_subdirectory</code>?	review
3754	Where the dependencies will be stored by <code>FetchContent</code>?	review
3755	What are the disadvantages of using <code>FetchContent</code>?	review
3756	Integrate an external library into the project from a remote source?	review
3757	Integrate an external library into the project from a local path?	review
3758	Add an external library to our project and make the dependency ready to use	review
3759	What wrapper can be used to fetch contents with ease?	review
3760	Toggle features of an imported external library?	review
3761	Make library’s headers visible to clients?	review
3762	What does the term generator expressions refer to?	review
3763	Why should we specify two interfaces for library headers?	review
3764	What is the difference between the two existing build interfaces?	review
3765	Specify which subdirectory should be fetched when importing an external library?	review
3766	What extra step needs to be done for shared libraries on Windows to be exported?	review
3768	What target properties should be avoided when making cross platform projects?	review
3769	Why do we need to link targets to a header only library?	review
3770	Write a configuration preset?	review
3771	What are the macros?	review
3772	What is the best practice in inheritance of presets?	review
3773	When do user specified presets become handy?	review
3774	Put a condition on a preset?	review
3775	Write a build preset?	review
3776	Write a workflow preset?	review
3777	Specify a separate directory for installation?	review
3778	How many ways exist to install a project?	review
3779	What are the default configurations of cmake commands when build type is not specified?	review
3780	Override the install directory when installing?	review
3781	How many search modes exist to find an external library?	review
3782	What files will be searched for in the config mode?	review
3783	What files will be searched for in the module mode?	review
3784	What are the advantages of both search modes?	review
3830	Where does each of kernel modules mount in the system?	draft
3831	Where can we find information about block and character device drivers?	draft
3832	Where can we find information about classes of devices?	draft
3833	From which file does lspci get its information?	draft
3834	What file contains vendor and device identifiers?	draft
3835	What are device files?	draft
3836	How system calls can become available for a device file?	draft
3837	Investigate what happens when you read from <code>/dev/null</code>?	draft
3838	Investigate what heppens when you write into <code>/dev/zero</code>?	draft
3839	When does GRUB loads into RAM and loads what components?	draft
3840	How does GRUB find the kernel?	draft
3841	Where are the GRUB configuration files?	draft
3842	Where the initial customization of GRUB can take place?	draft
3843	What command applies the changes in GRUB configurations?	draft
3844	Where are the kernel parameters defined?	draft
3845	What kernel parameters will give us shell access?	draft
3846	Where are all of the kernel parameters defined?	draft
3847	What parameter preserves memory for a crash kernel?	draft
3848	What kernel parameter enforces SELinux?	draft
3849	What kernel parameter starts tracer early to help debugging boot problems?	draft
3850	What kernel parameter disables cpu features?	draft
3786	What event types exist to trigger workflows?	review
3787	What runners are supported?	review
3788	Create a job?	review
3789	Create multiple jobs running in sequence?	review
3790	How many types exist for steps?	review
3791	What are the steps properties?	review
3792	Write a job to checkout the source repository?	review
3793	Write a job to setup nodejs modules?	review
3795	Write a job to create a release?	review
3796	Write a job to release generated artifacts?	review
3797	Write a job to cache a step?	review
3798	Write a job to upload artifacts in storage?	review
3799	Write a job to download artifacts from storage?	review
3800	Write a job to delete artifacts within storage?	review
3801	Make job execution conditional?	review
3802	Write a job to continue execution even after failure?	review
3803	Create an output for a step?	review
3804	Create an output for a job?	review
3805	Run a job on a matrix of runners?	review
3851	What kernel parameter specifies what program to run instead of default initializer?	draft
3852	What are the responsibilities of initial root file system?	draft
3853	What is an init?	draft
3854	Where the systemd service files can be found?	draft
3855	What are the file extensions of kernel modules?	draft
3856	Where is the list of modules stored?	draft
3857	Where are the kernel modules located?	draft
3858	Find how many modules are available on a system?	draft
3859	List loaded kernel modules in a chronological order?	draft
3860	Remove a module?	draft
3861	Get information from a module?	draft
3862	Find what modules depend on a specific module?	draft
3863	Insert a module?	draft
3864	Insert a module with all of its dependencies?	draft
3865	Why do some modules appear unused on the system?	draft
3866	What commands are needed to build and load a kernel module?	draft
3867	What happens when a kernel module returns non-zero on initialization?	draft
3868	What configuration targets are available in the kernel source tree?	draft
3869	What clean up targets are available in the kernel source tree?	draft
3870	What build targets are available in the kernel source tree?	draft
3871	What install targets are available in the kernel source tree?	draft
3872	What documentation targets are available in the kernel source tree?	draft
3873	What source tagging targets are available in the kernel source tree?	draft
3874	What commands can help searching in the kernel source tree?	draft
3875	What driver implements reading and writing functions of null device?	draft
3876	Find the driver in use by available network devices on your system?	draft
3877	What make target builds a bootable image?	draft
3878	What make target builds modules?	draft
3879	What make target installs build artifacts?	draft
3880	Clean artifacts from custom module project directory?	draft
3881	What additional arguments does make command take to cross compile the kernel image for a target device?	draft
4468	Retrieve the ID of a thread?	draft
3902	Get a value out of coroutine?	draft
3903	Put a value into coroutine?	draft
3904	How many command types exist in Mutt?	draft
3905	What is the syntax of assigning a variable in configuration?	draft
3906	What command prompts user to take yes or no answer?	draft
3907	Remove a variable in configuration?	draft
3908	Include the configuration contents from a separate path inside a configuration file?	draft
3909	Take the output of an external shell command as muttrc commands?	draft
3910	Execute configuration commands from main config file on runtime?	draft
3911	Define the path mutt should treat as incoming mailboxes?	draft
3912	Define the standard or user defined headers to be overwritten to outgoing emails?	draft
3913	Define aliases to a long email address?	draft
3914	Introduce the addresses by which you should be known to mutt?	draft
3915	Specify addresses to be recognized as mailing lists where your address does not appear as recipient?	draft
3916	What is the syntax for colorizing elements in the mutt environment?	draft
3917	Hide headers with specific patterns in them?	draft
3918	Order headers in a specific pattern?	draft
3919	Invoke a single function by assigning a key-binding?	draft
3920	Bind a series of key-strikes or functions to a single key?	draft
3921	Execute a series of functions in configuration?	draft
3922	Execute a series of key-strikes in configuration?	draft
3923	What are the differences between regexp and mutt-pattern?	draft
3924	When do we need to quote special characters?	draft
3925	What are the special characters on each level of patterns in mutt configuration?	draft
3926	Separate multiple commands in mutt command?	draft
3927	Write a comment in mutt configuration?	draft
3928	Use a shell variable inside mutt configuration?	draft
3929	What are the white space characters in mutt configuration?	draft
3930	What are the quoting characters in mutt configuration?	draft
3931	What are the use cases of the worst, best, and average functions in algorithm analysis?	draft
3932	What notation do we use for best, worst, and average case scenarios of an algorithm?	draft
3933	What is the general procedure to find the average function of an algorithm?	draft
3934	What are the characteristics of an array data structure?	draft
5272	Remove a file interactively?	review
3883	What is the signature of a coroutine generator function?	review
3884	What does the body of a coroutine generator look like?	review
3885	What is the return type of a coroutine generator?	review
3886	What is the responsibility of the promise type in a coroutine?	review
3887	What function in a coroutine will be called first by the compiler?	review
3888	What function in a coroutine will be called to handle the <code>co_return</code> statement?	review
3889	What function in a coroutine will be called to handle when the coroutine reaches an exception point?	review
3890	What functions in a coroutine will be called to handle execution flow?	review
3892	What is the role of an awaitable in a coroutine code?	review
3891	Construct a coroutine by defining its return type outside of the body of the coroutine?	review
3893	When do awaitables suspend coroutine code?	review
3894	What function does awaitable call to check if it needs to suspend or not?	review
3895	What function in an awaitable will be called before function suspension?	review
3896	What function in an awaitable will be called before function resumes execution?	review
3897	What is the body of an awaitable that always suspends on start up?	review
3898	What is the body of a coroutine handle?	review
3900	What kind of object does the promise type return to the coroutine?	review
3901	What interface should values have in order to be usable by coroutines?	review
3935	What algorithm can be used to find the maximum value in an array?	draft
3936	What algorithms can be used to check if a string is palindrome or not?	draft
3937	What are the use cases of strategy pattern?	draft
3938	What are the advantages of static strategy pattern over dynamic strategy pattern?	draft
3939	What are the advantages of using strategies as non-member functions?	draft
3940	What are the use cases of template method pattern?	draft
3941	Where are the common use cases of the command pattern?	draft
3942	What is the structure of the command pattern?	draft
3943	Use command pattern to decouple invoker and receiver classes?	draft
3944	Introduce inputs to manual triggers?	draft
3945	Give input parameters to manual workflows?	draft
3946	Define matrix strategy for a job?	draft
3947	Apply conditions on a job?	draft
3948	What expressions are available in GitHub expressions?	draft
3949	What are the built-in expression functions?	draft
3950	What functions return the status of the current job?	draft
3951	Print logs with specific contexts?	draft
3952	Pass outputs to subsequent steps?	draft
3953	Mask the output of a step?	draft
3954	Use environment variables to pass values to subsequent steps?	draft
3955	Create job summaries?	draft
3956	How many context levels exist?	draft
3957	In what context level secrets and variables exist?	draft
3958	Set secrets and variables?	draft
3959	Get access to GitHub token?	draft
3960	Where permissions can be applied?	draft
3961	What permissions are available?	draft
3962	What are the use cases of chain of responsibility pattern?	draft
3963	What are the steps into implementing the chain of responsibilities pattern?	draft
1492	What are the responsibilities of BitBake in the Yocto Project?	review
3965	Apply command pattern to refine multiple implementations of class button when each execute a different task to a single implementation of class button with multiple definitions of a command?	draft
3966	What is the content of index?	draft
3967	What is the content of pager?	draft
3968	What is the content of file browser??	draft
3969	What is the content of sidebar?	draft
3970	Enable sidebar?	draft
3971	What named keys are available to move the sidebar highlight?	draft
3972		draft
3973	What is the definition of single responsibility principle?	draft
3974	What is the definition of open-closed principle?	draft
3975	What is the definition of Liskov substitution principle?	draft
3976	What is the definition of interface segregation principle?	draft
3977	What is the definition of dependency inversion principle?	draft
3978	What are the structural design patterns?	draft
3979	What are the essential steps of creating a singleton?	draft
3980	Implement a singleton class?	draft
3981	What is the difference between ordinary programs and system programs?	draft
3982	Find the minimum and maximum value in a series of values?	draft
3983	What overloads of min and max functions are available?	draft
3984	Calculate the midpoint between two values?	draft
3985	Calculate the interpolation of two numbers?	draft
3986	Safely compare two integral values?	draft
3987	Mark an object as no longer needed while passed as an argument?	draft
4165	Bind multiple returned values into existing objects?	draft
3988	Pass input arguments without changes in constness and value category to another call?	draft
3989	Cast a scoped enumeration into its underlying type?	draft
3990	Swap the value of two objects?	draft
3991	Bind arguments to an arbitrary position?	draft
3992	What is the difference between <code>std::function()</code> and <code>std::bind()</code>	draft
3993	Construct a pair of two objects?	draft
3994	Get either of the two elements of a pair?	draft
4015	Indicate that a literal number is in octal base in x64 assembly?	draft
4028	Add and subtract two integral integers?	draft
4029	Increment and decrement a value stored on a writable variable?	draft
4030	Shift arithmetic values stored in writable variables?	draft
4031	Multiply and divide two integral integers?	draft
4033	Add and subtract two floating point numbers?	draft
4034	Multiply and divide two floating point numbers?	draft
4035	Calculate the square root of a floating point number?	draft
4043	Temporarily store values on memory within the scope of a function?	draft
4044	Write a stack frame for a function?	draft
4045	Align the stack with stack frame after function call?	draft
4046	Abbreviate function epilogue?	draft
4047	Use calling convention to return error code from a function?	draft
4049	Declare function local variables?	draft
4053	How many of inline assembly types are available?	draft
4057	Conditionally compile a part of x64 assembly program?	draft
4058	Write into the standard output stream?	draft
4059	Read from the standard input stream?	draft
4060	Prevent stack overflow by counting input string before printing it?	draft
4061	Prevent stack overflows by limiting the maximum allowed input length from standard input?	draft
4064	Inspect the command line arguments stored in registers in a GNU debugger?	draft
4074	How does alignment of data in <code>.data</code> and <code>.bss</code> sections can improve performance of a program?	draft
4075	How can we align data in <code>.data</code> and <code>.bss</code> sections in specific byte sizes?	draft
4076	What is the objective of <code>io_service</code> in boost?	draft
4087	Write a client establishing a synchronous tcp connection to a server?	draft
4093	Initiate project configuration with cmake?	draft
4094	Specify the generator used for building the project?	draft
4095	Externally specify the toolset and platform in configuration stage?	draft
4096	Initialize project configuration by providing a pre-cached configuration file?	draft
4097	Modify project cache variables in configuration stage?	draft
4098	Specify the path to build directory in configuration stage?	draft
4099	Remove one or more of configuration cache variables?	draft
4100	List configuration cache variables?	draft
4101	Get general information about variables, commands, macros, and other settings?	draft
4102	Filter the CMake log output by log level in the command line?	draft
4103	Permanently specify the log level in project configuration?	draft
4104	Display log context with each <code>message()</code> call?	draft
4105	Enable trace mode?	draft
4106	Where does cmake write project presets?	draft
4107	List all of the available presets?	draft
4108	Use one of the available presets in the project?	draft
4109	What preset paths are available in scripts?	draft
4110	Execute the build stage of the project?	draft
4111	Provide special arguments to the native builder?	draft
4112	Specify the number of jobs that should build the project simultaneously?	draft
4113	Explicitly specify targets to build?	draft
4114	Remove all artifacts from the build directory?	draft
4115	Execute build stage by first cleaning the build directory?	draft
4116	Instruct CMake to be verbose in build stage?	draft
4117	Execute CMake to install targets?	draft
4118	Execute CMake to install targets with a specific build type?	draft
4119	Execute CMake to install specific components within a project?	draft
4120	Set default permissions of installed files?	draft
4121	Modify the installation path?	draft
4122	Instruct CMake to log a detailed output of the installation stage?	draft
4123	Run CMake scripts?	draft
4124	Pass values to CMake scripts?	draft
4125	Execute external commands with CMake?	draft
4126	List all the available external commands in CMake?	draft
4127	Get help from CMake documentation?	draft
4128	Run test on a built project?	draft
4129	Include another listfile in <code>CMakeLists.txt</code>?	draft
4130	What are the actual requirements for the script file provided?	draft
4131	Use a utility in script?	draft
4133	What is the behavior of a fundamental data type when it's default initialized?	draft
4137	Uniformly initialize objects of any type?	draft
4138	What is the defect in auto rule for direct list initialization?	draft
4139	What are the possible ways of initializing aggregate objects?	draft
4140	What object types are able to initialize specific members explicitly?	draft
4144	What conditional statement can be used to separate a function into compiletime and runtime evaluation?	draft
4145	What is the equivalent form of <code>if consteval</code> prior standard 23?	draft
4146	What are the advantages of using <code>if consteval</code> compared to <code>std::is_constant_evaluated()</code>?	draft
4147	Transfer ownership of a pointer without making a copy of it?	draft
4149	Declare an object with internal linkage without being static?	draft
4150	Initialize a non-type template argument with an object of internal linkage?	draft
4151	Define symbol versioning of a library without breaking client code when implementing template specializations?	draft
4152	What is the abbreviated way of declaring nested namespaces?	draft
4154	Import a standard module in a translation unit?	draft
4167	Create type aliases for objects and functions?	draft
4168	Specify the underlying type for an enumeration type?	draft
4169	Export enumerators of an enumeration in a local scope?	draft
4170	Construct a variant to hold three different types?	draft
4171	Change the active type of a variant?	draft
4172	Retreive value of the active type within a variant?	draft
4173	Access the content of a variant with visitor approach?	draft
4174	Create a helper to be compatible with any of the variant types?	draft
4175	Use <code>std::expected</code> to link possible outcomes of an operation?	draft
4176	Enable all comparison operators for an object type?	draft
4177	Implement an object comparable with all six comparison operators?	draft
4178	What are the possible comparison categories?	draft
4179	Compare two objects that might result any of the comparison categories?	draft
4182	Avoid implicit conversion of classes?	draft
4183	Initialize non-static member variables of a class?	draft
4184	Indicate error when a return value from a function is ignored?	draft
4185	Add a message to discard attribute?	draft
4186	Indicate error when a return value from lambda is ignored?	draft
4187	Indicate error when a type is ignored when returned?	draft
4188	Indicate error when a constructor is used without object name?	draft
4189	Replace ref-quialified overloads of a method with one generic overload?	draft
4190	What is the equivalent form of ref-quialified function?	draft
4191	Access the object containing the lambda within a recursive lambda?	draft
4198	What is the alternative to writing function templates without having typenames?	draft
4207	What types are supported as non-type template arguments?	draft
4208	Since when <code>template</code> keyword can be used instead of class in a template template parameter?	draft
4209	What is a variadic template parameter?	draft
4210	What operator can be used to retrieve the number of arguments in a variadic template parameter?	draft
4211	What is the compact form of variadic templates?	draft
4223	What is the use case of concepts?	draft
4224	Write a custom concept?	draft
4225	How can we have two different bodies of a function with the same signature and let compiler know which is best match?	draft
4226	In how many ways can we apply a concept as a type constraint on a function template?	draft
4230	What is the requirements of the type used as class template arguments?	draft
4239	How does compiler realize which constructor should be used as the result of arguments deduction?	draft
4244	Use deduction guides for the constructor of a class that takes two iterators to deduce the value type of iterators?	draft
4247	Iterate over a range without invoking iterator functions?	draft
4248	Enable iteration mechanism for custom types?	draft
5521	Colorize an element?	review
4255	What signatues can a literal operator or a literal operator template have to overload a user-defined literal?	draft
5187	What are the differences between the operations that CPU cores and GPU cores can do?	draft
5274	Remove an empty directory?	review
5248	Locate the manual pages of a command?	review
4286	Ensure correct virtual declaration of methods base and derived classes?	draft
4287	Prevent derived classes from overriding virtual methods?	draft
4288	Prevent inheritance of a class?	draft
4289	Synchronize an stream to be flushed when went out of scope regarding RAII idiom?	draft
4290	Take the string stream contents as an string?	draft
4291	Use move semantics to avoid copies on string stream construction?	draft
4292	Use a preallocated buffer as the internal memory for a stream object?	draft
4293	Insert elements into containers by constructing them on insertion?	draft
4294	Find a substring within another string?	draft
4295	Check if a string has expected prefix?	draft
4296	Check if a string has expected postfix?	draft
4297	Convert integeral and floating-point types into strings?	draft
4298	Convert string to numeric types?	draft
4299	What are the valid input characters for integral type to string conversion functions?	draft
4300	What exceptions are thrown by numeric to string conversion functions on failure?	draft
4301	What are the valid input characters for floating-point type to string conversion functions?	draft
4302	Express all different string literals?	draft
4303	Create string literals containing special characters without escaping them?	draft
4305	Avoid string copies over function call?	draft
4308	Construct a <code>std::string</code> from a <code>std::string_view</code>?	draft
4309	Check existance of a substring at the beginning or the end of a string?	draft
4310	What are the advantages of using format compared to printf?	draft
4311	Format a text by positioning multiple values in a text in a specific order?	draft
4312	Format a 2-digit integer in hexadecimal with zero padding?	draft
4313	Enable formating of a custom type?	draft
4314	Format the current date?	draft
4315	Print a text to standard output?	draft
4316	Construct a regex?	draft
4317	Make regular expressions case insensitive?	draft
4318	Verify existance of a pattern in a string?	draft
4319	Retrieve submatches of a pattern matched within a string?	draft
4320	How many regular expression engines are available in C++?	draft
4321	Search for the first occurance of a pattern in a string?	draft
4322	Find all occurences of a pattern in a given text?	draft
4323	Replace the content of a string with a pattern?	draft
4324	Reposition submatches of a string?	draft
4325	Get the smallest and largest finite numbers of a type?	draft
4326	Retrieve the maximum number of digits for integral and floating-point types?	draft
4327	Retrieve the longest possible digits of a decimal type that can be represented without a change?	draft
4328	Verify if a numeric type is signed?	draft
4329	Verify if a numeric type is an integer?	draft
4330	Verify if a floating-point value is exact?	draft
4331	Verify if a floating-point value holds infinity value?	draft
4332	Express all different <code>std::complex</code> literals?	draft
4333	Get the minimum and maximum value that a random engine can generate?	draft
4334	Seed a random generator to initialize the algorithm corporated within it?	draft
4335	Call for a new number from random engines?	draft
4336	Discard the generated number of a random engine?	draft
4337	Initialize all bits of the internal state of a psudo-random number generator?	draft
4338	Take the difference of two time points?	draft
4339	Explicitly specify duration type?	draft
4340	Explicitly convert a duration into a different duration unit?	draft
4341	Check whether a clock is steady?	draft
4342	Query a clock's time resolution?	draft
4343	Express all different chrono literals?	draft
4344	What are the calendar string literals?	draft
4345	Specify the date information about a specific day in a year?	draft
4346	Iterate over the days of a month within a year?	draft
4347	Get file time using pre-C++17 standard?	draft
4348	What type is used to represent file time type?	draft
4349	Get file time using C++20 standard?	draft
4350	Retrieve the size information of a passed-in range or an array as a signed integer?	draft
4351	What is a sentinel in ranges library?	draft
4353	When do input and output iterators overlap?	draft
4354	What are general category of algorithms?	draft
4355	What algorithms are parallel?	draft
4356	What is the downside of having two separate parallel operations on a common container?	draft
4357	Find the biggest and smallest element within a range or parameters?	draft
4358	Check if a range starts with an expected subrange?	draft
4359	Check if a range ends with an expected subrange?	draft
4360	Convert a resulting range to another type?	draft
4361	Check if the contents of two containers of different types are equal?	draft
4362	Invoke a functor for each range element in or out of order?	draft
4363	Iterate over a range with <i>unsequenced parallel execution</i> model?	draft
4364	Invoke an external method utilizing a projection over the entire elements of a range?	draft
4365	Iterate over a limited number of elements within a range?	draft
4366	Swap two values using standard algorithms?	draft
4367	Swap values behind two forward iterators?	draft
4368	Exchange elements of two non-overlapping ranges?	draft
4369	Specialize swap for user-defined types?	draft
4370	What is the minimum requirement for a type to be comparable for sorting algorithms?	draft
4371	Compare if one range is lexicographically less than another?	draft
4372	Compare if one range is lexicographically less than another using spaceship operator?	draft
4373	What iterator type does the sort function operate on?	draft
4374	Sort ranges having different iterator types?	draft
4375	Sort a range providing an additional guarantee of preserving the relative order of equal elements?	draft
4376	Check if a range is already sorted in ascending or descending order?	draft
4378	Sort a sub-range within a range?	draft
4379	Sort a sub-range within a range and write the results to another range?	draft
4380	Extract a sub-range from a range?	draft
4381	Partition a range into two based on a criterion?	draft
4382	Guarantee the ordering of equal elements when partitioning a range?	draft
4384	Copy the partitioning results of a range into another?	draft
4387	Return both lower and upper bounds of a value within a sorted range?	draft
4388	Return the upper bound of a value within a sorted range using a predicate?	draft
4389	Check the presence of a value within a sorted range?	draft
4390	Determine whether a sorted range is contained within another sorted range?	draft
4392	Merge two consecutive sub-ranges within a sorted range?	draft
4394	Remove consecutive duplicate values within a sorted range and copy the results into an output range?	draft
4408	Find the next and previous permutations of a container?	draft
4415	Reverse a string?	draft
4416	Trim a string?	draft
4417	Remove all occurances of a character from a string?	draft
4418	Split a string based on user specified delimiter?	draft
4419	What ranges operations are supported by strings?	draft
4420	Insert a range within an string?	draft
4421	Produce the view of the first elements and a range of second elements from a range of paired elements?	draft
4439	Specify a contract for a function?	draft
4440	Enable contracts on a compiler to support a program with compilers?	draft
4441	What cannot be specified directly by a contract?	draft
4442	How many contract types do we have?	draft
4443	What are the narrow and wide contracts?	draft
4444	What is the definition of a bug in respect to contracts?	draft
4445	What happens if we violate a contract?	draft
4446	What function will be called to handle a contract violation?	draft
4447	What controlling modes can be used against contracts?	draft
4448	What happens when contracts are specified but ignore controlling mode is selected?	draft
4449	What are the limitations of using contracts with virtual functions?	draft
4450	Construct a thread and wait to the end of its normal execution?	draft
4451	What kind of callable objects does a thread take?	draft
4452	What are the requirements of passing different value categories as thread arguments?	draft
4453	Create a thread that joins automatically followed by RAII principle?	draft
4454	How does the destructor of a thread is called?	draft
4455	Wait for a thread in case an exception is thrown?	draft
4456	Write a thread guard to join on destruction?	draft
4457	Run a thread in background?	draft
4458	Transfer the ownership of a thread into another?	draft
4459	Why do we need to have a stopping mechanism on our thread?	draft
4460	What is the process of requesting a thread to stop?	draft
4461	What member function can be used to obtain stop source from a thread?	draft
4462	Send a stop request to a thread?	draft
4463	What is the signature of callee function when constructing a jthread?	draft
4464	What member function can be used to obtain stop token from a thread?	draft
4465	What method can be used to stop a thread directly by using its handle?	draft
4466	What is the use case of stop callbacks in threads?	draft
4467	Retrieve the maximum number of threads efficiently running at runtime?	draft
4469	What are the basic synchronization points in a concurrent program?	draft
4470	What synchronization facilities are available in C++?	draft
4472	What methods does a mutex have?	draft
4473	What is the downside of manually locking mutexes?	draft
4474	What is the use case of scoped lock?	draft
4475	What is the advantage of scoped lock over lock guard?	draft
4476	What is the use case of a shared mutex?	draft
4477	What is the use case of a shared lock?	draft
4478	What methods are available for a shared timed mutex?	draft
4479	What is the use case of a recursive mutex?	draft
4480	What are the use cases of conditional variable?	draft
4481	Synchronize two threads signaling each other using condition variables?	draft
4482	What data types can be used within atomic types?	draft
4483	What is the use case of an atomic type?	draft
4484	What storage duration guarantees access without data races?	draft
4485	When is it safe to initialize a variable without using synchronization primitives?	draft
4486	Initialize a member variable with thread safety?	draft
4487	What is the use case of a future?	draft
4488	Send a signal from 1 to N threads?	draft
4489	What is the API of async free function?	draft
4490	What is the API for promise?	draft
4491	How a promise can be used to transfer data between threads?	draft
4492	What happens when an exception is thrown in the future?	draft
4493	What is the difference between a mutex and a semaphore?	draft
4494	Retrieve the maximum value of internal counter a semaphore can have?	draft
4495	What is the use case of a counting semaphore?	draft
4496	What operations are available on counting semaphores?	draft
4497	Synchronize threads writing on a shared container using semaphores?	draft
4498	Write two blocking threads only to unlock when signaled by each other?	draft
4499	What are the use cases of a latch?	draft
4500	How does a latch operate?	draft
4501	What operations are available to a latch?	draft
4502	Synchronize multiple threads using a latch?	draft
4503	What are the use cases of a barrier?	draft
4504	What operations are available to a barrier?	draft
4505	Synchronize threads with a barrier?	draft
4506	What functions are coroutines?	draft
4507	Write an object ensuring only one instance of its internal state exists?	draft
4583	Make a log function revealing source location of the error?	draft
4584	What are the common design pattern categories?	draft
4585	What are the common creational patterns?	draft
4586	What are the benefits of the factory method design pattern?	draft
4587	What are the use cases of abstract factory pattern?	draft
4588	Provide an interface to create variations of an object without exposing implementation details?	draft
4589	What is the main advantage of using builder design pattern?	draft
4590	Provide an export to different file format mechanism?	draft
4594	Check if Docker client is connected to the server?	draft
4596	Retrieve detailed information of the installed docker client?	draft
4600	List available Docker images?	draft
4601	List dangling images?	draft
4602	List images built before another available image was built?	draft
4603	List images built since another available image was built?	draft
4604	List images containing a string in their label?	draft
4605	Customize the output format of the image list?	draft
4606	Search an image on registeries?	draft
4607	Limit the image search results to 10 entries?	draft
4608	Filter the result of image search results to official images only?	draft
4609	Filter the result of image search results to automated build images only?	draft
4610	Pull an image from official repositories?	draft
4611	Pull an image from unofficial repositories?	draft
4612	Pull an image from other registeries?	draft
4613	Inspect the layers of an image?	draft
4614	See the build history of an image?	draft
4615	See the digests of an image?	draft
4616	What is an image manifest?	draft
4617	Create an image for different platforms and architectures?	draft
4619	Remove all dangling images?	draft
4624	Run a container from an existing image?	draft
4625	Exit a container shell without killing its process?	draft
4626	Attach host's shell to the shell of a running container?	draft
4627	Stop a container?	draft
4628	Start a stopped container?	draft
4629	Stop and remove a container?	draft
4630	How many docker restart policies exist?	draft
4631	Run a container with persistent restart policy on failure or system restart?	draft
4632	Run a container always restarting except when manually stopped?	draft
4633	Run a container restarting on failure only?	draft
4634	List running and stopped Docker containers?	draft
4635	Specify the maintainer of an image in Dockerfile?	draft
4636	Specify required packages to be installed on an image in Dockerfile?	draft
4637	Import source files of a project to an image in Dockerfile?	draft
4638	Change the working directory of image in Dockerfile?	draft
4639	Publish a port in an image in Dockerfile?	draft
4640	Express the entry point of an image in Dockerfile?	draft
4641	Express the command for default arguments given to the executable within an image?	draft
4642	How to manage multiple Docker nodes?	draft
4644	How does a swarm synchronizes all of its nodes?	draft
4645	How many modes does each node of a swarm have?	draft
4646	Initialize a swarm on an existing node?	draft
4647	What is the default port on swarms?	draft
4648	List available swarm nodes?	draft
4649	Extract joining tokens of a swarm?	draft
4650	Join Docker nodes to a swarm?	draft
4651	How does the <b>High Availability</b> mechanism in swarms work?	draft
4652	How to apply <b>High Availability</b> mechanisms to a swarm?	draft
4654	Apply a lock on a swarm?	draft
4655	Check the current swarm unlock key?	draft
4656	Re-join Docker nodes to a locked swarm?	draft
4657	How many ways are there to create a docker service?	draft
4658	Create a docker service?	draft
4659	List services running by docker?	draft
4660	List the service replicas in docker?	draft
4661	Inspect a docker service?	draft
4662	What are the differences between replicated and global docker services?	draft
4663	Scale up and scale down a docker serivce in a swarm?	draft
4664	Remove a docker service from a swarm?	draft
4665	Create an overlay network for a docker service?	draft
4666	List available docker networks?	draft
4667	Create a docker service and attach it to a network?	draft
4669	Create docker service replicas on <b>host mode</b>?	draft
4670	Push an updated image to the swarm in a staged manner?	draft
4671	Print logs of a docker service?	draft
4672	Configure docker daemon to log on different logging drivers?	draft
4673	Why swarm backups are important?	draft
4674	Where a swarm backup file will be written?	draft
4675	Backup docker swarm and restore it?	draft
4695	Delete all unmounted volumes?	draft
4700	What are the development stages of an embedded Linux system?	draft
4701	What are the building blocks of an embedded Linux system?	draft
4702	What are the minimum required hardware target to develop an Embedded Linux for?	draft
4705	What components are used in the toolchain tuple?	draft
4708	Override the default processor for GCC compiler?	draft
4709	List available architecture specific options in GCC compiler?	draft
4710	Print the <code>sysroot</code> path of GCC compiler?	draft
4731	Build and install <i>crosstool-ng</i>?	draft
4732	Print the list of crosstool-ng sample configurations?	draft
4733	Inspect the configuration details of crosstool-ng targets?	draft
4734	Build a cross-toolchain for Raspberry Pi Zero?	draft
4735	Build a cross-toolchain for BeagleBone Black?	draft
4736	Build a cross-toolchain for QEMU?	draft
4738	Print the linked libraries of an executable using GNU toolchains?	draft
4739	Print the runtime linker used for an executable using GNU toolchains?	draft
4740	Compile by linking libraries statically using GNU GCC compiler?	draft
4741	Where are static libraries located in <code>sysroot</code> directory used by GNU toolchains?	draft
4742	Use GNU toolchains to create a static library containing two executable objects compiled from C source files?	draft
4743	Use GNU toolchains to create a shared library containing two executable objects compiled from C source files?	draft
4744	Use GNU cross-toolchains to print the <code>SONAME</code> of a shared library?	draft
4745	Use GNU toolchains to cross-compile for a specific target?	draft
4746	Override the toolchain in an autotools compatible project?	draft
4747	Use <code>crosstool-ng</code> to cross compile <i>SQlite</i> and add it to an existing toolchain?	draft
4748	Prepare <code>pkg-config</code> to look up library dependencies in a sysroot?	draft
4749	Use CMake to cross compile a project?	draft
4751	Where to download the Raspberry Pi bootloader?	draft
4752	What files are required to boot using a Raspberry Pi device?	draft
4778	When are the release cycles of the Yocto Project?	draft
5188	What are the differences between control units of CPU and GPU?	draft
4781	What is the default referencing build system for the Yocto Project?	draft
4784	What is the role of BitBake in the Yocto Project?	draft
4785	What is the role of OpenEmbedded Core in the Yocto Project?	draft
4786	What is the role of Metadata in the Yocto Project?	draft
4790	Generate DWARF debugging information in an executable?	draft
4791	Start the text user interface in gdb?	draft
4792	Enter SingleKey mode?	draft
4793	Cycle through assembly and source code windows in GDB TUI?	draft
4794	Switch focus between GDB TUI windows?	draft
4795	Navigate through command history?	draft
4797	Start debugging an already running process?	draft
4798	Detach debugger from a debugging process?	draft
4800	How many breakpoints does GDB offer?	draft
4801	Get information about breakpoints, watchpoints and catchpoints?	draft
4803	Run program with an immediate stop on main function?	draft
4804	Use regex to select multiple breakpoints for an operation?	draft
4806	Set condition for a breakpoint?	draft
4807	Conditionally break execution only when iteration index has increased to 3?	draft
4808	Skip over a number of breakpoint hits?	draft
4809	Disable an already existing breakpoint?	draft
4810	Enable an already disabled breakpoint?	draft
4811	Save breakpoints of a debugging session?	draft
4812	Restore saved breakpoints on a debugging session?	draft
4813	Manually write the content of a file in which breakpoints were saved?	draft
4814	Watch changes of a variable only when a criteria is met?	draft
4815	Track a particular location in memory rather than the value of an expression?	draft
4817	Examine a memory address or register?	draft
4818	Get information of threads?	draft
4819	List the innermost or outermost frames of backtrace?	draft
4820	Where the coredumps are stored?	draft
4821	Store the core dump of your program into a file?	draft
4822	Load the stored coredump into debugging session?	draft
4823	Select a core section to inspect the cause of termination?	draft
4824	Create a core dump from the state of an executable in debugging session?	draft
4829	Automatically run commands on GDB startup?	draft
4830	What are the porcelain commands?	draft
4831	What are the plumbing commands?	draft
4832	Conditionally use different git config file based on your project directory?	draft
4833	Configure git to sign commits by ssh?	draft
4834	Use shell command as a git alias?	draft
4835	List available branches?	draft
4836	Enable column view of branches by default?	draft
4837	What options can be used to stash all ignored and untracked files along unstaged files?	draft
4838	Log only a part of a file?	draft
4839	Search through the git history for a string that was removed?	draft
4840	What is a safer mechanism to force push commits?	draft
4841	Push your sign along with pushing changes?	draft
4842	How cloning can become faster?	draft
4843	What is the downside of partial cloning?	draft
4844	List remote refs?	draft
4845	Set fetch remotes to a project?	draft
4846	Blame only a part of a file?	draft
4847	Ignore white spaces in blame?	draft
4848	Detect who moved or copied in the same commit in blame?	draft
4849	Detect who created or changed the file in blame?	draft
4850	Detect any commit that affects a line of code in blame?	draft
4851	What is a reflog?	draft
4852	Differentiate two commits by line?	draft
4853	Differentiate two commits by word?	draft
4854	What is the advantage of using Reused Recorded Resolution?	draft
4855	Enable Reused Recorded Resolution feature?	draft
4856	What does <code>maitainance start</code> command do?	draft
4857	What is the use case of maintainance command?	draft
4858	What is the use case of commit graph command?	draft
4859	How often should we run commit graph command?	draft
4860	What mechanism can be used to increase the status command performance on big repositories?	draft
4861	What is the impact of using multipack index mechanism?	draft
4862	Clone with no checkout?	draft
4863	Keep track of kernel release changes?	draft
4864	Aquire the kernel source repository?	draft
4865	Aquire the kernel source for long-term service?	draft
4867	What is the name of the kernel configuration mechanism?	draft
4868	What environment variables are used to configure the kernel for cross compiling?	draft
4869	What values does <code>ARCH</code> take in the kernel configuration stage?	draft
4870	Start configuring the kernel with graphical environments?	draft
4871	Where is the kernel configuration file?	draft
4872	Where are the default configuration files stored?	draft
4873	Configure the kernel for a specific platform using default configuration files?	draft
4874	Select default configuration for <code>x86_64</code> platform?	draft
4875	Select default configuration for <code>Raspberry Pi Zero</code> evaluation board?	draft
4876	Select default configuration for <code>BeagleBone Black</code> evaluation board?	draft
4877	Restore previous configuration changes?	draft
5278	Create a directory?	review
4879	Update an already existing kernel configuration file with new released options?	draft
4880	Extract the kernel configuration file from the running machine?	draft
4881	Configure kernel to make its configuration options available in <code>/proc</code>?	draft
4882	Configure kernel to allow extending command line options from within the configuration?	draft
4883	Configure kernel to make kernel symbol table available through procfs?	draft
4891	Print the version or release of configured kernel?	draft
4892	Append local version to the kernel release string?	draft
4893	What header file contains kernel configuration options?	draft
4894	Add make object in Makefile for a configuration option?	draft
4895	Make debug symbols available in the kernel image?	draft
4901	What types are available for kernel configuration options in a Kconfig menu?	draft
4902	Make a kernel configuration option dependent on another?	draft
4903	Enforce selection of an option in its parent option when it has reverse dependency?	draft
4905	Specify the numbers of jobs allowed to build the kernel with?	draft
4907	What kernel build artifacts will be stored in the source tree?	draft
5083	Color text?	draft
4914	Install kernel modules?	draft
4916	Override the installation path of compiled module binaries?	draft
4918	Clean kernel source tree from build artifacts?	draft
4919	List all loaded modules on system?	draft
4920	Get information of a module?	draft
4921	Inspect the given parameters of a loaded module?	draft
4922	Where do module parameters linger on the system?	draft
4923	Load a module into the kernel?	draft
4924	Load a module into the kernel with parameters?	draft
4925	Load a module and all of its dependencies?	draft
4926	Secure kernel from loading malicious modules?	draft
4927	How does <code>modprobe</code> retrieve module dependencies?	draft
4928	Manually retrieve module dependencies?	draft
4929	Remove loadable modules from the kernel?	draft
4930	Remove a loadable module and its dependencies?	draft
4931	Where is the modules configuration file located?	draft
4932	Supply automatic module parameters?	draft
4933	Put multiple modules into blacklist?	draft
4934	What is the signature of module initial function?	draft
4935	What is the signature of module cleanup function?	draft
4936	What is the minimal skeleton for a module?	draft
4937	Manually create a device node?	draft
4938	What is the least requirement for a <code>Makefile</code> to build a loadable module?	draft
4939	What is the minimal skeleton of Makefile for a module?	draft
4940	Specify a kernel object with multiple source files in <code>Makefile</code>?	draft
4941	Write a module accepting parameters?	draft
4945	Include a device tree source from another?	draft
4948	Compile a device tree source?	draft
4964	Configure udev in order to give devices another name?	draft
4967	What is the mechanism of a spinlock on processors?	draft
4968	Define a spinlock?	draft
5063	Where does the kernel log?	draft
5064	Where is the tracing directory usually mounted?	draft
5065	What is the common method to write a document as a beginner?	draft
5066	What is the best practice in naming tex files?	draft
5067	How many document classes are available?	draft
5068	Create an empty article document?	draft
5069	Set default font for document?	draft
5070	Make a title in document?	draft
5071	What features does the blindtext package present?	draft
5072	What package should be used when UTF8 characters are written in text?	draft
5073	What is best method to separate consequent lines in tex document?	draft
5074	Bold a text?	draft
5075	Italic a text?	draft
5076	Underline a text?	draft
5077	Underline a text with double line?	draft
5078	Underline a text with wavy line?	draft
5079	Strikethrough a text?	draft
5080	Slash through a text?	draft
5081	Underline text with dashed line?	draft
5082	Underline text with dotted line?	draft
5084	What symbol is used to create an inline math block?	draft
5085	Protect a piece of inline math block from breaking into two lines?	draft
5086	Write a math equation to be shown in a new separate line?	draft
5087	What is a RAID used for?	draft
5088	What are the RAID levels?	draft
5089	Create an array of drives with RAID level 5?	draft
5090	Get the current status of RAID array?	draft
5091	Retrieve RAID details?	draft
5092	Make a RAID array permanent?	draft
5093	Start monitoring RAID and get notified about failures?	draft
5094	Stop monitoring a RAID?	draft
5095	Stop a RAID array temporarily?	draft
5096	Run an array of raided devices from the stopped state?	draft
5097	Remove an array component from a RAID?	draft
5098	Add an storage drive into the array?	draft
5108	Generate a CA Certificate private key?	draft
5109	Generate an X509 Certificate?	draft
5110	Dump the x509 Certificate text?	draft
5111	Generate a CA Certificate Sign request file?	draft
5112	Generate a self-signed CA Certificate?	draft
5113	Measure the processor events using perf?	draft
5114	Visually analyze the output of perf?	draft
5139	What is the interpreter of QML?	draft
5140	What is the base code for a QML app?	draft
5141	What elements are grouped as core in QML?	draft
5142	What element is an item?	draft
5143	What properties does an item element define inherited by all other elements?	draft
5144	What properties does a window element support?	draft
5145	Changed the default size of the window?	draft
5146	What properties does a rectangle support?	draft
5147	Colorize the background of a window?	draft
5148	Draw a text on the app?	draft
5149	How does a property alias work?	draft
5150	How do signals work in QML?	draft
5151	Capture key signals in an element?	draft
5152	Load an image into the app?	draft
5153	What are the properties of an image component?	draft
5154	Make an area of window clickable?	draft
5155	How many types of components are available?	draft
5156	Make a reusable element?	draft
5157	Propegate clicked signal to root level component?	draft
5174	Create tmux configuration file so that it reads on every execution?	draft
5175	Replace prefix key with other key-bindings?	draft
5176	What is the role of tmux server and clients?	draft
5177	Create a new session?	draft
5178	Create a new window?	draft
5179	Create a new pane by spliting window vertically or horizontally?	draft
5180	Detect common memory faults in a program?	draft
5181	Trace the origin of variables causing memory leaks?	draft
5182	Fully check for memory leak of a program?	draft
5183	Count the number of instructions used in a program?	draft
5184	Use interactive control to use callgrind dump file?	draft
5185	Use a user interface to interactively control the use of callgrind dump file?	draft
5186	Attach gdb remote session to valgrind?	draft
5189	What are the building blocks of a streaming multiprocessor?	draft
5190	What are the building blocks of a GPU?	draft
5191	What operation makes a GPU operate faster than a CPU?	draft
32	Build and install <i>crosstool-ng</i>?	review
3785	What are the building blocks of a workflow?	review
3794	Give enough permissions to an action to create a release?	review
3709	What are the possible ways of taking inputs for an action?	draft
5192	Permit write access to a job to create releases?	review
5193	Permit write access to a job to create pull requests?	review
5194	What is the structure of strategy pattern?	review
5197	When do we inject the strategy into the context through constructor and when do we use a setter method?	review
5199	What is the definition of null object pattern?	review
5201	What are the differences between static and dynamic strategy patterns?	review
5203	What part of the kernel does SELinux integrate with?	review
5205	What are the disadvantages of having fine-grained access control policies in SELinux?	review
5207	Get the access control list of a file?	review
5209	Check the current SELinux status?	review
5211	What is a context in an SELinux policy?	review
5213	What is a label in SELinux terminology?	review
5219	Take the attributes of processes?	review
5215	What makes label-based access control in SELinux more flexible than using path names in other LSM implementations?	review
5217	Where are process attributes stored in the system?	review
5221	What annotations are available for logs?	review
5224	List available jobs inside a workflow locally?	review
5226	Validate correctness of a workflow without running any containers?	review
5228	Provide a secret to the local runner in order to use as a substitute to GitHub secrets?	review
5230	Provide an input to the actions running by local runners?	review
5232	Rename the actor on local runners?	review
5234	Write an action to run a local container?	review
5236	Where are SELinux roles defined?	review
5238	Obtain an overview of the SELinux roles?	review
5240	What restrictions does SELinux user impose on a Linux user?	review
5242	What is the role of sensitivity labels in access control?	review
5244	How many confidentiality levels are available in MLS?	review
5195	What are the definitions of strategy pattern?	review
5198	What is the implementation of non-member strategy pointer?	review
5200	Implement the strategy pattern with null object pattern?	review
5202	What mechanism does SELinux use to enforce access control?	review
5204	Read the list of active LSM modules on a system?	review
5206	What are the building blocks of SELinux implementation?	review
5208	Set the access control list of a file?	review
5210	What are the prerequisites for enabling SELinux on a system?	review
5212	How does SELinux identify a process?	review
5214	Print the context of your user?	review
5216	What are the four components of an SELinux context?	review
5218	What each of the attribute files in the process directory represent?	review
5220	What does the type component in an SELinux context enforce?	review
5222	What utility provides containerized runners?	review
5225	Draw the graph of workflows on local runners?	review
5227	Run a local workflow each time a modification is made?	review
5229	Provide a variable to the local runner in order to use as a substitute to GitHub variables?	review
5231	Provide environment variables to the actions running by local runners?	review
5233	Disable steps output on local runners?	review
5526	Make an element italic?	review
5235	What is the role of SELinux roles in access control?	review
5237	What roles are available in a default SELinux installation?	review
5239	How does SELinux prevent unprivileged access when the Linux user has switched?	review
5241	What is the relationship between SELinux users and Linux users?	review
5243	What confidentiality model does MLS implement?	review
5245	What are the use cases for categories in SELinux?	review
5246	How tenants are isolated using categories?	review
5249	Locate the binaries of a command?	review
5295	Copy a file into another path?	review
5250	Locate the binaries of a command with a specific pattern in their name?	review
5269	Remove a file with suppressing errors?	review
5251	Locate all the binary instances of a command?	review
5252	Locate the binaries of a command used inside of an alias?	review
5286	Open a manpage in your favorite browser?	review
5253	Locate the binaries of a command used inside of a shell function?	review
5271	Remove a directly and its contents?	review
5254	Locate the binaries of a command excluding directories starting with dot?	review
5255	Locate the binaries of a command excluding directories starting with tilde?	review
5256	What are the commonly used system monitoring commands?	review
5273	Remove a file with receiving a confirmation of the removal?	review
5257	Print the path to the working directory of your running shell?	review
5258	Print the resolved path to the working directory of your running shell?	review
5259	Print the name of the user you are logged in with?	review
5275	Remove empty directories and ignore non-empty ones?	review
5260	Print the name of your system within a local domain?	review
5261	Print the network addresses of your system?	review
5287	Locate the path to the manual page files of a command?	review
5262	Print the fully qualified domain name on your system?	review
5276	Remove nested empty directories?	review
5263	Change the name of your system within a local domain?	review
5264	Print the currently used kernel release?	review
5265	Print the machine architecture of the running system?	review
5277	Remove empty directories with removal confirmations?	review
5267	Generate a sequence of numbers with specific steps?	review
5279	Create nested directories?	review
5288	Search for the manual page of a command?	review
5280	Create directories with specific permissions?	review
5281	Create directories with confirmations after creation?	review
5296	Recursively copy files inside a directory?	review
5282	Open the manual page of a command?	review
5289	Open the manual page of a command in a specific locale?	review
5283	Where is the common path to manual page files?	review
5284	List available manpage sections of a command?	review
5285	Select a specific manpage section of a command?	review
5290	Open the manual page of a command with a specific pager?	review
5300	Change the working directory of the running shell into root directory?	review
5292	Prevent file overwrites when moving?	review
5297	Update files when there are differences between source and destination?	review
5293	Overwrite files when moving without prompts?	review
5294	Interactively move files?	review
5298	Change the working directory of the running shell?	review
5301	Change the working directory of the running shell to its parent directory?	review
5299	Change the working directory of the running shell into home directory?	review
5303	List the entries of a directory?	review
5302	List entries of the current working directory of the running shell?	review
5305	List the entries of a directory sorted by modification time?	review
5304	List the entries of a directory with human readable file sizes?	review
5306	List the entries of a directory sorted by file sizes?	review
5307	List the entries of a directory with directories grouped first?	review
5308	Randomly shuffle the lines of a file or input stream?	review
5309	Generate a sequence of shuffled numbers?	review
5310	Generate a random percentage?	review
5311	Generate a stream of randomly shuffled numbers?	review
5312	Sort the lines of a file or input stream?	review
5313	Reversely sort the lines of a file or input stream?	review
5314	Sort numerically the lines of a file or input stream?	review
5315	Randomly sort the lines of a file or input stream?	review
5316	Sort a column of a file or input stream?	review
5317	Unique sort the lines of a file or input stream?	review
5318	Search for a pattern in a file or input stream?	review
5341	What damages can information disclosure cause and what are the mitigations?	review
5291	Rename a file?	review
5319	Use extended regular expressions for searching a pattern in a file or input stream?	review
5320	Search for a fixed string in a file or input stream?	review
5321	Invert the search results of a pattern in a file or input stream?	review
5342	What damages can denial of service cause and what are the mitigations?	review
5322	Recursively search for a pattern in a directory?	review
5323	Ignore binary files when searching for a pattern?	review
5324	Find the files containing a pattern rather than the lines?	review
5343	What damages can elevation of privileges cause and what are the mitigations?	review
5325	Ignore case sensitivity when searching for a pattern?	review
5326	Include line numbers in the search results of a pattern?	review
5327	Suppress error messages when searching for a pattern?	review
5344	What are the post-exploitation steps?	review
5328	Suppress all output and only return the exit status when searching for a pattern?	review
5329	Search for a whole word pattern in a file or input stream?	review
5330	Search for a pattern that matches the whole line in a file or input stream?	review
5345	What are the penetration testing approaches?	review
5331	Count the number of matching lines for a pattern in a file or input stream?	review
5332	Limit the number of matching lines for a pattern in a file or input stream?	review
5333	How does penetration testing methodologies help testers?	review
5346	What is the difference between vulnerability assessment and penetration testing?	review
5334	What are the common penetration testing methodologies?	review
5335	What are the pre-engagement steps before starting penetration tests?	review
5336	What are the benefits of using threat modeling in penetration testing?	review
5347	What are the phases of exploitation?	review
5337	What are the common threat models?	review
5338	What damages can spoofing identity threat cause and what are the mitigations?	review
5339	What damages can tampering data cause and what are the mitigations?	review
5348	Setup the latest Metasploit?	review
5340	What damages can repudiation threads cause and what are the mitigations?	review
5349	Pass a value as parameter to a thread?	review
5350	Pass a reference as parameter to a thread?	review
5351	Pass a constant reference as a parameter to a thread?	review
5352	Pass a value as parameter to a thread?	review
5369	What are the differences between Decorator and Chain of Responsibility pattern?	review
5353	Pass a reference as parameter to a thread?	review
5354	Pass a constant reference as a parameter to a thread?	review
5355	Pass an rvalue reference as a parameter to a thread?	review
5356	What are the considerations of returning a value from threads?	review
5357	Move the ownership of a thread to another thread object?	review
5358	Wait for a thread to complete execution?	review
5359	Check if a thread has already joined?	review
5361	What specific situation should remind you of using the Command pattern in your program?	review
5362	What is the structure of the Command pattern?	review
5363	Implement the command pattern?	review
5364	What specific situation would remind you of using the Memento pattern in your program?	review
5365	What is the structure of the Memento pattern?	review
5366	What are the disadvantages of Memento design pattern?	review
5367	Implement the Memento pattern?	review
5368	What is the structure of Chain of Responsibility pattern?	review
5370	Compile an optimized release configuration of a source that includes a header from the source directory and a header from the system and linked to a library?	review
5383	Remove empty lines in a file?	review
5375	Use extended regular expressions on sed?	review
5384	Add a line on top of a file?	review
5371	Define a function to evaluate multiplication of a double to a global constant number in compile time?	review
5376	Capitalize occurrences of a pattern?	review
5377	Combine multiple sed statements?	review
5372	Share the instance of an object without losing ownership?	review
5388	What are the advantages of using logical backup?	review
5373	Replace occurrences of a pattern with a substitute?	review
5378	Write changes of sed command inplace?	review
5374	Replace occurrences of a pattern with a substitute without case sensitivity?	review
5385	Write a line after a pattern match?	review
5379	Use sed to print a range of lines?	review
5380	Print lines containing occurrences of a pattern?	review
5381	Delete lines containing occurrences of a pattern?	review
5386	What are the differences between logical backup and physical backup?	review
5382	Make a backup of the original file while in a sed command?	review
5387	What permissions are required for the user to perform a database backup?	review
5391	What are the advantages of physical backup?	review
5389	What are the disadvantages of using logical backup?	review
5390	What logical backup formats are available in PostgreSQL?	review
5392	What are the disadvantages of physical backup?	review
5393	Perform a logical backup on a local cluster?	review
5394	Perform a logical backup and write the results into a file?	review
5395	Perform a backup with verbose output?	review
5396	Perform a logical backup remotely on a cluster?	review
5397	What is the side effect of removed search path in the backup?	review
5398	In what scenarios would you want to use insert instead of copy statements in the backup?	review
5399	Perform a logical backup including database creation statement?	review
5400	Perform a logical backup including only schema?	review
5401	Perform a logical backup excluding schema?	review
5402	Perform a logical backup limited to the scope of a table?	review
5403	Perform a logical backup excluding a table?	review
5404	Perform a logical backup stored in a compressed archive?	review
5406	Configure a database to look up for tables within a search path?	review
5407	Perform a formated logical backup?	review
5408	Perform a faster backup with parallel processes?	review
5409	Print the list of content of the backup?	review
5410	Restore a database from a formatted backup?	review
5411	Restore a database from a formatted backup into a file?	review
5412	Perform a backup using list of content?	review
5413	Perform a restoration in parallel?	review
5414	Perform a backup from the entire cluster?	review
2966	Check if a file exists?	review
5415	Schedule backup?	review
1828	Why there is copy options?	review
5416	Export contents of a table into a file?	review
5268	Remove a file?	review
5417	Export contents of a table with CSV format into a file?	review
410	Iterate over the entries of a directory?	review
5418	Filter contents of a table when exporting to a file?	review
1837	Recursively iterate over directories with following symbolic links?	review
5419	Import contents of a table from a file?	review
1278	How to remove an image in docker?	review
5420	Filter contents of a table when importing from a file?	review
1350	Configure the swarm certificate rotation period?	review
5421	Import contents of a table from a program?	review
31	What toolchains are available to build cross-toolchains with?	review
5422	Export contents of a table into a program?	review
38	Get the version and configurations of a native or cross-compiled GCC compiler?	review
5423	What is the alternative to the copy command for unprivileged users?	review
2667	What are prerequisites for communicating with an embedded device?	review
5424	What is the major use case of physical backup?	review
2668	How to connect to an embedded device using <code>picocom</code> through <code>/dev/ttyUSB0</code> device driver?	review
5425	What are the limitations of performing a physical restoration?	review
2682	How to use <code>Crosstool-ng</code> to configure selected architecture specific cross-toolchain?	review
5426	What tools can be used to perform a physical backup?	review
2694	What command can be used within U-Boot shell to read, write and erase contents to NAND flash?	review
5427	What are the prerequisites of performing a physical backup?	review
5428	Perform a physical backup?	review
1860	What kernel configuration option enables timing information while printing messages from the kernel?	review
5429	Verify the integrity of a physical backup?	review
90	Solve different relocation addresses of the kernel with multi-platform ARM <code>uImage</code>?	review
5430	Restore a physical backup?	review
5431	What is the use case of Point in Time Recovery?	review
62	Overlay nodes on top of another to create a composite tree in which the outer layers extend or modify the inner ones?	review
5432	What are the disadvantages of Point in Time Recovery?	review
895	Compile an x64 assembly program?	review
902	Debug a compiled program with gdb?	review
912	Inspect the breakpoint, stack, threads and other resources of the debugging program in gdb?	review
976	Indicate that a literal number is in hexadecimal base in x64 assembly?	review
962	What registers are used to read command line arguments from an x64 assembly program?	review
2770	What is the objective of <code>io_object</code> in boost?	review
2776	Handle exceptional asynchronous control flow in an event processing loop?	review
108	Build an executable from C++ source?	review
116	How many constants are available in C++?	review
1481	What are the main module properties?	review
640	Compare two derived objects having a base class?	review
641	What is the compatibility defect of comparison operators in C++20?	review
2807	What are the common ways of handling return type deduction for function templates having multiple function template parameters?	review
1362	Query alignment of object types?	review
1396	What types can be used to create a cooked user-defined literal?	review
3964	What are the use cases of command pattern?	review
1402	How literal operators or literal operator templates can be used to construct a numberic value by its binary representation?	review
2450	Where does move semantics apply optimizations compared to prior C++11 standard?	review
2456	When do compilers automatically switch to move semantics?	review
2459	What is the behavior of a parameter that is declared as an rvalue reference?	review
2178	How to move iterators back and forth regardless of their bidirectional support?	review
2210	Remove consecutive duplicate values within a sorted range?	review
2219	Replace elements for which the given predicate evaluates to true within a range?	review
3602	What is the use case of a mutex?	review
1765	What are the constituents of a path?	review
1766	What path formats are available?	review
1768	What are the differences of member and free-standing functions of path?	review
1791	Convert directory separators inside a path to the native format?	review
67	Use <code>mkimage</code> to create a compressed kernel image from an uncompressed kernel image?	review
1907	What is the standard way to return an error in kernel modules?	review
1104	How many synchronization mechanisms for accessibility of shared resources are available in the kernel?	review
1916	How many synchronization mechanisms for accessibility of shared resources are available in the kernel?	review
1109	What are the limitations of locking/unlocking spinlocks in a kernel module?	review
1121	Acquire a lock only if it is not already held by another contender?	review
1935	What passive waiting mechanisms are implemented in the kernel?	review
1942	Convert standard time units to jiffies?	review
213	What is the meaning of ACID terminology?	review
294	What is a schema?	review
219	What schema an object in postgres belongs to?	review
234	What libraries are required for C++ projects to link to postgres?	review
1724	What formats are used to represent debugging symbols for executables?	review
5433	What is the process of distributing SELinux policies?	review
5434	What languages can be used to write SELinux policies?	review
5435	What are the policy files?	review
5436	Where SELinux policy modules are usually placed after distribution?	review
5437	Where SELinux policy modules are placed after they are activated?	review
5438	Figure out which policy is active on a system?	review
5439	Where does SELinux look for the configuration for next reboot?	review
5440	Check if MLS policy is enabled?	review
5441	How many policy stores are available?	review
5442	How does SELinux react to new kernel permissions that is not yet known to SELinux?	review
5443	Configure how SELinux should react to unknown permissions?	review
5444	Check if a type is available?	review
1752	Accept connections by listening on a port?	review
3882	How does a compiler know if a function is a coroutine?	review
3899	What key components in a coroutine interact with each other to make the suspending functions functional?	review
5522	Construct a linear gradient?	review
5445	What specific scenario would remind you of using the Observer pattern in your program?	review
5446	What is the structure of Observer pattern?	review
5447	Implement Observer pattern?	review
5448	Implement Observer pattern with a connection manager?	review
5449	Export the stack usage of a program with GCC?	review
5450	Activate stack usage warning when it exceeds a certain threshold?	review
5451	What are the use cases of core module?	review
5452	What are the use cases of imgcodecs module?	review
5453	What are the use cases of videoio module?	review
5454	What are the use cases of imgproc and ximgproc module?	review
5455	What are the use cases of highgui module?	review
5456	What are the use cases of video and videostab modules?	review
5457	What are the use cases of calib3d module?	review
5458	What are the use cases of features2d, xfeatures2d and bioinspired modules?	review
5459	What are the use cases of objdetect and xobjdetect modules?	review
5460	What are the use cases of ml module?	review
5461	What are the use cases of photo and xphoto modules?	review
5462	What are the use cases of shape module?	review
5463	What are the use cases of optflow and tracking modules?	review
5464	What are the use cases of face and saliency modules?	review
5465	What are the use cases of surface_matching module?	review
5466	What are the use cases of text module?	review
5467	Install opencv with contrib modules?	review
5468	Write a CMake listfile to link OpenCV to a program?	review
2020	What are the building blocks of the Metadata component in the Poky build system?	review
2016	What are the input requirements for the Yocto Project?	review
1596	Conditionally append and prepend value to a variable only when target device is Beagle Bone?	review
1502	Set up the building environment using <code>oe-init-build-env</code>?	review
1522	What are the required variables in the configuration file of a layer?	review
1534	What is the preference of bitbake over selecting between multiple versions of the same provider?	review
3439	How many assertion variations exist?	review
3445	What testing feature can be used to share data between multiple tests?	review
3450	What are the advantages of using constructor over <code>SetUp()</code> virtual function?	review
1584	Trace the variable changes during execution of a recipe?	review
1611	What machine architecture is supported by a standard SDK?	review
1617	Build an image using an installed extensible SDK?	review
2792	How to build a kernel image using <b>Yocto Poky</b> tools?	review
2794	How to build a <code>qemuarm64</code> image with <b>SATO</b> as desktop environment for mobile devices using <b>Yocto Poky</b> tools?	review
3670	What is the life cycle of a process?	review
23	Specify the life cycle of Embedded Linux projects?	review
3671	What are the major Inter Process Communication mechanisms supported by Linux?	review
3736	Configure a project from another path?	review
3744	What variables will be provided by the <code>project()</code> command?	review
3767	Bake the run path into a library where it can be loaded after build and installation?	review
1009	How many components does CMake have?	review
1010	How many graphical interfaces officially exists for cmake?	review
2649	What should be the bare minimum content of a <code>CMakeLists.txt</code> file?	review
2658	Use common library object to use static and shared in one go?	review
3653	Retrieve the bounding rectangle of a rotated rectangle?	review
1254	How to check if docker is connected to server?	review
1256	How to run a container from an existing image?	review
1271	How to format the output of image lists in docker?	review
1274	How to see the build history of an image and its image layers?	review
1283	How does default programs are embedded in docker images so that containers know which program to run when they are launched with no arguments?	review
1290	What instructions in Dockerfile do create new layers into an image?	review
1316	What are the differences of replicated and global docker services?	review
18	What image channels are affected by drawing functions?	review
510	Convert an image into another image of different type?	review
5469	Integrate ftxui library into your project?	review
5471	What are the use cases of screen module in ftxui?	review
5472	What are the use cases of dom module in ftxui?	review
5473	What are the use cases of component module in ftxui?	review
5474	Declare a dimension type representing full screen size?	review
5478	What color spaces are supported by ftxui?	review
5475	Declare a dimension type representing a fixed size?	review
5476	Declare a dimension type representing the size of an element?	review
5477	Access to the dimensions of a dimension type?	review
5487	Register a hyperlink to a pixel?	review
5479	Use literals to create a color object?	review
5484	Access to a pixel inside a screen?	review
5480	What are the properties of a pixel?	review
5483	Print an empty screen on the terminal?	review
5486	Access characters inside a pixel of a screen?	review
5485	Colorize a pixel inside a screen?	review
5488	What would happen if we access a pixel outside the bounds of a screen?	review
5489	Reset cursor position to the top left corner of the terminal?	review
5490	What types does the dom module provide?	review
5491	Render an element onto a screen?	review
5492	What is the role of a decorator?	review
5493	What operator can be used to apply a decorator to an element?	review
5496	What is the difference between text and paragraph?	review
5498	What are the alignment variations of a paragraph?	review
5499	Draw a border around an element?	review
5500	Draw a border around an element with sharp edges?	review
5501	Draw a border around an element with dashed lines?	review
5502	Draw a border around an element with thick lines?	review
5503	Draw a border around an element with double lines?	review
5504	Draw an invisible border around an element?	review
5505	Draw a border around an element with a custom character?	review
5506	Draw a border around an element with a header?	review
5507	Separate two elements by drawing a line between them?	review
5508	Separate two elements with a thick line?	review
5509	Separate two elements with a double line?	review
5510	Separate two elements with a space?	review
5511	Separate two elements with a variable styled line?	review
5512	Separate two elements with a custom character?	review
5513	Separate two elements with a colorized line?	review
5514	Draw a bar representing progress?	review
5515	Draw a bar representing progress moving towards the right direction?	review
5516	Draw a bar representing progress moving towards the left direction?	review
5517	Draw a bar representing progress moving upwards?	review
5518	Draw a bar representing progress moving downwards?	review
5519	Explicitly specify the direction of a progress bar?	review
5523	Define multiple stops for a linear gradient?	review
5524	Colorize an element with a linear gradient?	review
5528	Invert the color of an element?	review
5529	Underline an element?	review
5530	Underline an element with double lines?	review
5531	Strikethrough an element?	review
5532	Make an element blink?	review
5533	Horizontally align elements?	review
5534	Vertically align elements?	review
5535	Align elements inside a grid?	review
5536	Fill the space between two aligned elements?	review
5537	Make nested layouts?	review
5538	Create a table?	review
5539	Draw on a canvas?	review
5540	Take input from keyboard?	review
5541	Filter input?	review
5542	Create a menu of selectable items?	review
5543	Create a toggle option?	review
5544	Create a checkbox?	review
5545	Create a radio button?	review
5546	Create a dropdown?	review
5547	Create a slider?	review
5548	Render the screen with a different function?	review
5549	Catch key presses?	review
5550	Hide a component based on a predicate?	review
5551	What are the use cases of collapsible elements?	review
5552	Make an element collapsible?	review
5553	What are the use cases of containers?	review
5554	Create a few vertical tabs each containing elements?	review
5555	Create a few horizontal tabs each containing elements?	review
5556	Split a few elements within resizable areas?	review
5557	Handle events other than mouse, keyboard, or window resizing?	review
5558	Import ftxui library as modules?	review
5559	Toggle processing of piped input?	review
\.


--
-- Data for Name: cards_activities; Type: TABLE DATA; Schema: flashback; Owner: flashback
--

COPY flashback.cards_activities (id, "user", card, action, "time") FROM stdin;
\.


--
-- Data for Name: last_position; Type: TABLE DATA; Schema: flashback; Owner: flashback
--

COPY flashback.last_position (max) FROM stdin;
10
10
10
\.


--
-- Data for Name: margin; Type: TABLE DATA; Schema: flashback; Owner: flashback
--

COPY flashback.margin ("coalesce") FROM stdin;
9
9
9
\.


--
-- Data for Name: milestones; Type: TABLE DATA; Schema: flashback; Owner: flashback
--

COPY flashback.milestones (subject, roadmap, level, "position") FROM stdin;
35	2	origin	12
14	2	origin	11
41	2	origin	10
42	2	origin	9
41	2	surface	1
14	2	surface	3
35	2	surface	4
41	2	depth	5
42	2	surface	2
14	2	depth	8
35	2	depth	7
42	2	depth	6
29	1	origin	120
52	1	depth	61
54	1	surface	24
6	1	surface	1
3	1	surface	2
4	1	surface	3
5	1	surface	4
1	1	surface	5
8	1	surface	6
11	1	surface	7
10	1	surface	8
7	1	surface	9
41	1	surface	10
42	1	surface	11
15	1	surface	12
51	1	surface	13
50	1	surface	14
44	1	surface	15
9	1	surface	16
52	1	surface	17
2	1	surface	18
45	1	surface	19
13	1	surface	20
16	1	surface	21
17	1	surface	22
18	1	surface	23
19	1	surface	25
43	1	surface	26
20	1	surface	27
21	1	surface	28
22	1	surface	29
23	1	surface	30
24	1	surface	31
25	1	surface	32
26	1	surface	33
27	1	surface	34
28	1	surface	35
29	1	surface	36
30	1	surface	37
48	1	surface	38
31	1	surface	39
32	1	surface	40
46	1	surface	41
33	1	surface	42
34	1	surface	43
47	1	surface	44
36	1	surface	45
37	1	surface	46
38	1	surface	47
49	1	surface	48
12	1	surface	49
40	1	surface	50
6	1	depth	51
3	1	depth	52
4	1	depth	53
5	1	depth	54
2	1	depth	55
1	1	depth	56
7	1	depth	57
8	1	depth	58
44	1	depth	59
9	1	depth	60
10	1	depth	62
11	1	depth	63
45	1	depth	64
13	1	depth	65
41	1	depth	66
42	1	depth	67
15	1	depth	68
51	1	depth	69
50	1	depth	70
16	1	depth	71
17	1	depth	72
18	1	depth	73
30	1	origin	121
48	1	origin	122
32	1	origin	123
46	1	origin	124
47	1	origin	125
33	1	origin	126
34	1	origin	127
37	1	origin	128
10	1	origin	107
11	1	origin	108
13	1	origin	109
15	1	origin	110
51	1	origin	111
50	1	origin	112
17	1	origin	113
18	1	origin	114
43	1	origin	115
20	1	origin	116
24	1	origin	117
26	1	origin	118
27	1	origin	119
52	1	origin	106
19	1	depth	75
43	1	depth	76
20	1	depth	77
21	1	depth	78
22	1	depth	79
23	1	depth	80
24	1	depth	81
25	1	depth	82
26	1	depth	83
27	1	depth	84
28	1	depth	85
29	1	depth	86
30	1	depth	87
48	1	depth	88
31	1	depth	89
32	1	depth	90
46	1	depth	91
33	1	depth	92
47	1	depth	93
34	1	depth	94
36	1	depth	95
37	1	depth	96
38	1	depth	97
49	1	depth	98
40	1	depth	99
3	1	origin	100
54	1	depth	74
4	1	origin	101
6	1	origin	102
8	1	origin	103
44	1	origin	104
9	1	origin	105
\.


--
-- Data for Name: milestones_activities; Type: TABLE DATA; Schema: flashback; Owner: flashback
--

COPY flashback.milestones_activities (id, "user", action, "time", subject, roadmap, level) FROM stdin;
\.


--
-- Data for Name: network_activities; Type: TABLE DATA; Schema: flashback; Owner: flashback
--

COPY flashback.network_activities (id, "user", "time", activity, address) FROM stdin;
\.


--
-- Data for Name: resources; Type: TABLE DATA; Schema: flashback; Owner: flashback
--

COPY flashback.resources (id, name, type, pattern, condition, presenter, provider, link) FROM stdin;
5	GDB Tips by Greg Law	website	post	relevant	\N	\N	\N
6	Daily C++ Bites	mailing list	chapter	relevant	\N	\N	\N
7	C++ Daily Bites	mailing list	post	relevant	\N	\N	\N
10	mdadm(1)	manual	page	relevant	\N	\N	\N
15	Calculus: Concepts and Contexts	book	chapter	relevant	\N	\N	\N
16	Qt6 Deep Dive	book	chapter	relevant	\N	\N	\N
28	PostgreSQL 13 Cookbook	book	chapter	relevant	\N	\N	\N
31	Linux Security and Administration	book	chapter	relevant	\N	\N	\N
36	Udemy: SQL and PostgreSQL - The Complete Developer's Guide	book	chapter	relevant	\N	\N	\N
40	Linux Kernel Programming Part 2	book	chapter	relevant	\N	\N	\N
48	Linux Device Driver	book	chapter	relevant	\N	\N	\N
52	The Shellcoder's Handbook	book	chapter	relevant	\N	\N	\N
63	Offensive Security Wireless Professional (OSWP)	video	video	relevant	\N	\N	\N
68	The Art of PostgreSQL	book	chapter	relevant	\N	\N	\N
70	Introducing Qt6	book	chapter	relevant	\N	\N	\N
78	Udemy - The C++20 Master Class	book	chapter	relevant	\N	\N	\N
79	PostgreSQL 14 Administration Cookbook	book	chapter	relevant	\N	\N	\N
80	Linux Kernel Development	book	chapter	relevant	\N	\N	\N
81	Sudo Mastery	book	chapter	relevant	\N	\N	\N
85	Thomas' Calculus	book	chapter	relevant	\N	\N	\N
86	Qt6 QML	book	chapter	relevant	\N	\N	\N
89	Embedded Linux Training Course	course	course	relevant	Bootlin	\N	\N
91	GNU Pocket Reference	book	chapter	relevant	\N	\N	\N
99	C++17 Language New Features Ref Card	slides	page	relevant	\N	\N	\N
102	Black Hat Bash	book	chapter	relevant	\N	\N	\N
103	Cpp Hive	video	video	relevant	\N	\N	\N
104	Mastering Modern CPP Features	video	video	relevant	\N	\N	\N
13	Linux Device Drivers	course	video	relevant	\N	LinkedIn	\N
113	Advanced Linux: The Linux Kernel	video	chapter	relevant	\N	\N	\N
115	MuttGuide	website	chapter	relevant	\N	\N	\N
98	Yocto Project and OpenEmbedded Training Course	slides	chapter	relevant	Bootlin	\N	\N
116	Algorithms and Data Structures Made Easy	video	video	relevant	\N	\N	\N
4	Qt Documentation	website	page	relevant	\N	\N	https://doc.qt.io/
8	C++ Stories	website	page	relevant	\N	\N	https://www.cppstories.com/
19	C++20 STL Cookbook	book	chapter	relevant	Bill Weinman	Packt Publishing	https://subscription.packtpub.com/book/programming/9781803248714/
20	Mastering OpenCV 3	book	chapter	relevant	Daniel Lélis Baggio	Packt Publishing	https://subscription.packtpub.com/book/data/9781786467171/
22	Professional C++	book	chapter	relevant	\N	\N	https://www.wiley.com/en-us/Professional+C%2B%2B%2C+6th+Edition-p-9781394193189
24	Hands-On Design Patterns with C++	book	chapter	relevant	Fedor G. Pikus	Packt Publishing	https://subscription.packtpub.com/book/programming/9781804611555/
26	Docker for Developers	book	chapter	relevant	\N	\N	https://subscription.packtpub.com/book/cloud-networking/9781789536058/
30	OpenCV 4 Computer Vision Programming Cookbook	book	chapter	relevant	\N	\N	https://subscription.packtpub.com/book/data/9781789340723/
34	Demystifying Cryptography with OpenSSL 3.0	book	chapter	relevant	\N	\N	https://subscription.packtpub.com/book/security/9781800560345/
35	C++20: The Complete Guide	book	chapter	relevant	Nicolai M. Josuttis	Leanpub	https://leanpub.com/cpp20
37	Linux Service Management Made Easy with systemd	book	chapter	relevant	Donald A. Tevault	Packt Publishing	https://subscription.packtpub.com/book/cloud-networking/9781801811644/
39	Learning eBPF	book	chapter	relevant	\N	\N	https://www.oreilly.com/library/view/learning-ebpf/9781098135119/
42	Linux Kernel Programming	book	chapter	relevant	\N	\N	https://subscription.packtpub.com/book/cloud-networking/9781803232225/
44	Docker: Up & Running	book	chapter	relevant	\N	\N	https://dockerupandrunning.com/
46	The Linux Programming Interface	book	chapter	relevant	\N	\N	https://nostarch.com/tlpi
49	Introduction to Linear and Matrix Algebra	book	chapter	relevant	\N	\N	https://link.springer.com/book/10.1007/978-3-030-52811-9
50	Extreme C	book	chapter	relevant	Kamran Amini	Packt Publishing	https://subscription.packtpub.com/book/programming/9781789343625/
53	Design Patterns in Modern C++20	book	chapter	relevant	\N	\N	https://link.springer.com/book/10.1007/978-1-4842-7295-4
55	Docker Deep Dive	book	chapter	relevant	\N	\N	https://subscription.packtpub.com/book/cloud-networking/9781835081709/
59	Practical Binary Analysis	book	chapter	relevant	\N	\N	https://practicalbinaryanalysis.com/
60	Learn Docker in a month of Lunches	book	chapter	relevant	\N	\N	https://www.manning.com/books/learn-docker-in-a-month-of-lunches
65	Linux Device Driver Development	book	chapter	relevant	\N	\N	https://subscription.packtpub.com/book/iot-hardware/9781803240060/
71	C++ Concurrency in Action	book	chapter	relevant	\N	\N	https://www.manning.com/books/c-plus-plus-concurrency-in-action
75	Linux Kernel Debugging	book	chapter	relevant	\N	\N	https://subscription.packtpub.com/book/cloud-networking/9781801075039/
82	A Complete Guide to Standard C++ Algorithms	book	chapter	relevant	\N	\N	https://github.com/HappyCerberus/book-cpp-algorithms
83	Cross-Platform Development with Qt6 and Modern C++	book	chapter	relevant	\N	\N	https://subscription.packtpub.com/book/programming/9781800204584/
84	Concurrency with Modern C++	book	chapter	relevant	Rainer Grimm	Leanpub	https://leanpub.com/concurrencywithmodernc
90	Hands-On Mobile and Embedded Development with Qt5	book	chapter	relevant	Lorn Potter	Packt Publishing	https://subscription.packtpub.com/book/programming/9781789614817/
92	Mastering Linux Kernel Development	book	chapter	relevant	\N	\N	https://subscription.packtpub.com/book/cloud-networking/9781785883057/
101	Advanced C++ Programming Cookbook	book	chapter	relevant	Rian Quinn	Packt Publishing	https://subscription.packtpub.com/book/programming/9781838559915/
118	Behavioral Design Patterns in C++	video	chapter	relevant	Umar Lone	Packt Publishing	https://subscription.packtpub.com/video/programming/9781804615652/
109	Minimal CMake	book	chapter	relevant	Tom Hulton-Harrop	Packt Publishing	https://subscription.packtpub.com/book/programming/9781835087312/
110	Mastering GitHub Actions	book	chapter	relevant	Eric Chapman	Packt Publishing	https://subscription.packtpub.com/book/cloud-networking/9781805128625
121	Language Features of C++17 Ref Card	slides	page	relevant	Bartłomiej Filipek	\N	\N
132	System Programming in Linux	book	chapter	relevant	\N	\N	\N
130	Real-time Linux with PREEMPT_RT	course	course	relevant	\N	Bootlin	\N
139	OpenCV & C++ Tutorial	book	chapter	relevant	Computer Vision Lab	YouTube	\N
140	C++ Weekly With Jason Turner	channel	video	relevant	Jason Turner	YouTube	\N
1	C++26 Preview	video	video	relevant	CppNow	YouTube	https://youtu.be/CwYILWyTRMQ
2	Boost Documentation	website	page	relevant	\N	https://boost.org	https://www.boost.org/libraries/latest/list/
3	LaTeX Tutorial	website	page	relevant	\N	\N	https://latex-tutorial.com/tutorials/
9	C++ Reference	website	page	relevant	\N	\N	https://cppreference.com/
11	C++ Design Patterns: Creational	video	chapter	relevant	Olivia Chiu Stone	LinkedIn	https://www.linkedin.com/learning/c-plus-plus-design-patterns-creational
12	Kevin Dankwardt's Linux Device Drivers	course	video	relevant	\N	\N	https://www.linkedin.com/learning/linux-device-drivers-reading-writing-and-debugging
14	Learning OpenCV 3	book	chapter	relevant	Adrian Kaehler	O’Reilly	https://www.oreilly.com/library/view/learning-opencv-3/9781491937983/
17	Mastering Embedded Linux Development	book	chapter	relevant	Frank Vasquez	Packt Publishing	https://subscription.packtpub.com/book/iot-hardware/9781803232591/
21	A Common-Sense Guide to Data Structures and Algorithms	book	chapter	relevant	\N	\N	https://pragprog.com/titles/jwdsal2/a-common-sense-guide-to-data-structures-and-algorithms-second-edition/
23	Pro Tbb: C++ Parallel Programming with Threading Building Blocks	book	chapter	relevant	\N	\N	https://link.springer.com/book/10.1007/978-1-4842-4398-5
25	Learn PostgreSQL	book	chapter	relevant	Luca Ferrari	Packt Publishing	https://subscription.packtpub.com/book/data/9781837635641/
29	Practical Vim	book	chapter	relevant	\N	\N	https://pragprog.com/titles/dnvim2/practical-vim-second-edition/
32	Linux System Programming Techniques	book	chapter	relevant	\N	\N	https://subscription.packtpub.com/book/programming/9781789951288/
33	Linux Driver Development for Embedded Processors	book	chapter	relevant	\N	\N	https://vdoc.pub/download/linux-driver-development-for-embedded-processors-second-edition-learn-to-develop-linux-embedded-drivers-with-kernel-49-lts-1gf0ri0tddno
38	C++20: Get the Details	book	chapter	relevant	\N	\N	https://leanpub.com/c20/
41	Beginning C++23: From Novice to Professional	book	chapter	relevant	\N	\N	https://link.springer.com/book/10.1007/978-1-4842-9343-0
43	Beginning x64 Assembly Programming	book	chapter	relevant	\N	\N	https://link.springer.com/book/10.1007/978-1-4842-5076-1
45	Docker in Practice	book	chapter	relevant	\N	\N	https://www.manning.com/books/docker-in-practice-second-edition
47	CMake Best Practices	book	chapter	relevant	Dominik Berner	Packt Publishing	https://subscription.packtpub.com/book/programming/9781835880647/
51	Mastering Linux Device Driver Development	book	chapter	relevant	John Madieu	\N	https://subscription.packtpub.com/book/iot-hardware/9781789342048/
58	Embedded Linux Development Using Yocto Project	book	chapter	relevant	Otavio Salvador	Packt Publishing	https://subscription.packtpub.com/book/security/9781804615065/
72	Professional CMake	book	chapter	relevant	Craig Scott	Crascit Pty Ltd	https://crascit.com/professional-cmake/
93	Boost.Asio C++ Network Programming	book	chapter	relevant	Dmytro Radchuk	Packt Publishing	https://subscription.packtpub.com/book/programming/9781785283079/
100	GoogleTest Documentation	website	page	relevant	Google Developers	Google	https://google.github.io/googletest/
107	Asynchronous Programming with C++	book	chapter	relevant	Javier Reguera-Salgado	Packt Publishing	https://subscription.packtpub.com/book/programming/9781835884249/
119	Computer Graphics Programming in OpenGL with C++	book	chapter	relevant	\N	\N	https://www.packtpub.com/en-de/product/computer-graphics-programming-in-opengl-with-c-edition-3-9781836641186
123	Template Metaprogramming with C++	book	chapter	relevant	Marius Bancila	Packt Publishing	https://subscription.packtpub.com/book/programming/9781803243450/
126	C++ Design Patterns: Structural	video	chapter	relevant	Olivia Chiu Stone	LinkedIn	https://www.linkedin.com/learning/c-plus-plus-design-patterns-structural-22183029
127	Linux Security Techniques	course	video	relevant	\N	\N	https://subscription.packtpub.com/video/security/9781835887042/
129	NeoMutt Guide	manual	chapter	relevant	\N	\N	https://neomutt.org/guide/index
114	Deciphering C++ Coroutines	video	video	relevant	Andreas Weis	YouTube	\N
134	The Modern Vulkan Cookbook	book	chapter	relevant	\N	\N	https://subscription.packtpub.com/book/game-development/9781803239989/
136	SELinux System Administration	book	chapter	relevant	Sven Vermeulen	Packt Publishing	https://subscription.packtpub.com/book/cloud-networking/9781800201477/
138	The Ultimate Kali Linux Book	book	chapter	relevant	Glen D. Singh	Packt Publishing	https://subscription.packtpub.com/book/security/9781835085806/
142	Using Yocto Project with BeagleBone Black 	book	chapter	relevant	H.M. Irfan Sadiq	Packt Publishing	https://subscription.packtpub.com/book/iot-hardware/9781785289736/
144	OpenCV 3 Computer Vision Application Programming Cookbook	book	chapter	relevant	Robert Laganiere	Packt Publishing	https://subscription.packtpub.com/book/data/9781786469717/
146	OpenCV 4 for Secret Agents	book	chapter	relevant	Joseph Howse	Packt Publishing	https://subscription.packtpub.com/book/data/9781789345360/
147	Mastering OpenCV 4	book	chapter	relevant	Roy Shilkrot	Packt Publishing	https://subscription.packtpub.com/book/data/9781789533576/
149	Cross-Platform Application Development with OpenCV 4 and Qt 5	video	chapter	relevant	Antonio Ortiz Lira	Packt Publishing	https://subscription.packtpub.com/video/data/9781788479080/
150	Computer Vision with OpenCV 3 and Qt5	video	chapter	relevant	Amin Ahmadi Tazehkandi	Packt Publishing	https://subscription.packtpub.com/book/data/9781788472395/
18	Teach Yourself C++ in One Hour a Day	book	chapter	relevant	Siddhartha Rao	Sams	https://www.pearson.com/en-us/subject-catalog/p/sams-teach-yourself-c-in-one-hour-a-day/P200000000559/9780137334582
56	Modern C++ Programming Cookbook	book	chapter	relevant	Marius Bancila	Packt Publishing	https://subscription.packtpub.com/book/programming/9781835080542/
57	Step by Step Learning x64 Assembly Language	book	chapter	relevant	\N	\N	https://www.oreilly.com/library/view/x64-assembly-language/9781394155248/
61	Boost.Asio C++ Network Programming Cookbook	book	chapter	relevant	Dmytro Radchuk	Packt Publishing	https://subscription.packtpub.com/book/cloud-networking/9781783986545/
64	Kali Linux Penetration Testing Bible	book	chapter	relevant	\N	\N	https://www.wiley.com/en-us/Kali+Linux+Penetration+Testing+Bible-p-9781119719083
69	Heading for the Yocto Project	book	chapter	relevant	Otavio Salvador	GitHub	https://github.com/CollaborativeWritersHub/heading-for-the-yocto-project
74	Deciphering Object-Oriented Programming with C++	book	chapter	relevant	\N	\N	https://subscription.packtpub.com/book/programming/9781804613900/
76	Hands-On Network Programming with C	book	chapter	relevant	\N	\N	https://subscription.packtpub.com/book/cloud-networking/9781789349863/
77	Data Abstraction & Problem Solving with C++	book	chapter	relevant	\N	\N	https://www.pearson.com/en-us/subject-catalog/p/data-abstraction--problem-solving-with-c-walls-and-mirrors/P200000003514/9780137516759
88	CMake Cookbook	book	chapter	relevant	Radovan Bast	Packt Publishing	https://subscription.packtpub.com/book/programming/9781788470711/
94	Embedded Linux Development Using Yocto Project Cookbook 	book	chapter	relevant	Alex González	Packt Publishing	https://subscription.packtpub.com/book/iot-hardware/9781788399210/
95	C++ Templates: The Complete Guide	book	chapter	relevant	\N	\N	https://www.pearson.com/en-us/subject-catalog/p/c-templates-the-complete-guide/P200000000663/9780134778747
96	Modern CMake for C++	book	chapter	relevant	Rafał Świdziński	Packt Publishing	https://subscription.packtpub.com/book/programming/9781805121800/
106	Learn OpenCV 4 by Building Projects	book	chapter	relevant	David Millán Escrivá	Packt Publishing	https://subscription.packtpub.com/book/data/9781789341225/
108	GitHub Actions Cookbook	book	chapter	relevant	Michael Kaufmann	Packt Publishing	https://subscription.packtpub.com/book/cloud-networking/9781835468944/
111	Mastering PostgreSQL 17	book	chapter	relevant	\N	\N	https://subscription.packtpub.com/book/data/9781836205975/
124	GitHub Actions in Action	book	chapter	relevant	\N	\N	https://www.manning.com/books/github-actions-in-action
135	GPU Programming with C++ and CUDA	book	chapter	relevant	Paulo Motta	Packt Publishing	https://subscription.packtpub.com/book/programming/9781805124542/
137	DistroTube	channel	video	relevant	DistroTube	YouTube	https://www.youtube.com/@DistroTube
141	Yocto Project Documentation	manual	page	relevant	Yocto Development Team	Linux Foundation	https://docs.yoctoproject.org/
143	Yocto for Raspberry Pi	book	chapter	relevant	Pierre-Jean, Mabäcker	Packt Publishing	https://subscription.packtpub.com/book/iot-hardware/9781785281952/
145	Qt 5 and OpenCV 4 Computer Vision Projects	book	chapter	relevant	Zhuo Qingliang	Packt Publishing	https://subscription.packtpub.com/book/data/9781789532586/
148	Hands-On GPU-Accelerated Computer Vision with OpenCV and CUDA	book	chapter	relevant	Bhaumik Vaidya	Packt Publishing	https://subscription.packtpub.com/book/data/9781789348293/
151	FTXUI Documentation	manual	page	relevant	Arthur Sonzogni	GitHub	https://arthursonzogni.github.io/FTXUI/index.html
128	Mastering C++ Multithreading	book	chapter	relevant	Maya Posch	Packt Publishing	https://subscription.packtpub.com/book/programming/9781787121706/
125	C++ Design Patterns: Behavioral	video	video	relevant	Olivia Chiu Stone	LinkedIn	https://subscription.packtpub.com/video/programming/9781804615652/
152	Mastering the C++17 STL	book	chapter	relevant	Arthur O'Dwyer	Packt Publishing	https://subscription.packtpub.com/book/programming/9781787126824/
153	Mastering C++ Standard Library Features	book	chapter	relevant	Vittorio Romeo	Packt Publishing	https://subscription.packtpub.com/video/programming/9781788294256/
154	Expert C++	book	chapter	relevant	Vardan Grigoryan	Packt Publishing	https://subscription.packtpub.com/book/programming/9781804617830/
155	Mastering Kali Linux for Advanced Penetration Testing	book	chapter	relevant	Vijay Kumar Velu	Packt Publishing	https://subscription.packtpub.com/book/security/9781801819770/
105	Creational Design Patterns in Modern C++	video	chapter	relevant	Umar Lone	Packt Publishing	https://subscription.packtpub.com/video/programming/9781800568242/
131	Structural Design Patterns in Modern C++	video	chapter	relevant	Umar Lone	Packt Publishing	https://subscription.packtpub.com/video/programming/9781801073073/
160	Software Architecture with C++	book	chapter	relevant	Andrey Gavrilin	Packt Publishing	https://subscription.packtpub.com/book/programming/9781803243016/
156	The Embedded Linux Security Handbook	book	chapter	relevant	Matt St. Onge	Packt Publishing	https://subscription.packtpub.com/book/iot-hardware/9781835885642/
157	The C++ Programmer's Mindset	book	chapter	relevant	Sam Morley	Packt Publishing	https://subscription.packtpub.com/book/programming/9781835888421/
158	Rust for C++ Developers	book	chapter	relevant	Dan Olson	Packt Publishing	https://subscription.packtpub.com/book/programming/9781836206514/
159	Linux Shell Scripting for Hackers	book	chapter	relevant	Donald A. Tevault	Packt Publishing	https://subscription.packtpub.com/book/programming/9781835462195/
161	Kali Linux Cookbook	book	chapter	relevant	Corey P. Schultz	Packt Publishing	https://subscription.packtpub.com/book/programming/9781835889800/
162	Asynchronous Programming in Python	book	chapter	relevant	Nicolas Bohorquez	Packt Publishing	https://subscription.packtpub.com/book/programming/9781836646617/
163	Embedded Linux Essentials Handbook	book	chapter	relevant	Mohammed Billoo	Packt Publishing	https://subscription.packtpub.com/book/programming/9781835469309/
54	The C++ Standard Library	book	chapter	relevant	Nicolai M. Josuttis	\N	https://www.oreilly.com/library/view/c-standard-library/9780132978286/
112	GitHub Actions Masterclass	video	chapter	relevant	LM Academy	Packt Publishing	https://subscription.packtpub.com/video/business-other/9781837025411/
62	C++17: The Complete Guide	book	chapter	relevant	Nicolai M. Josuttis	Leanpub	https://leanpub.com/cpp17
87	C++ Move Semantics: The Complete Guide	book	chapter	relevant	Nicolai M. Josuttis	Leanpub	https://leanpub.com/cppmove
66	The C++ Programming Language	book	chapter	relevant	Bjarne Stroustrup	Addison-Wesley	https://www.informit.com/store/c-plus-plus-programming-language-9780133522907
67	Mastering Linux Security and Hardening	book	chapter	relevant	Donald A. Tevault	Packt Publishing	https://subscription.packtpub.com/book/security/9781837630516/
122	C++ Memory Management	book	chapter	relevant	Patrice Roy	Packt Publishing	https://subscription.packtpub.com/book/programming/9781805129806/
164	PostgreSQL 18 for Developers	book	chapter	relevant	Marc Linster	Packt Publishing	https://subscription.packtpub.com/book/data/9781806028474/
165	Building Low Latency Applications with C++	book	chapter	relevant	Sourav Ghosh	Packt Publishing	https://subscription.packtpub.com/book/programming/9781837639359/
166	Qt 6 C++ GUI Programming Cookbook	book	chapter	relevant	Lee Zhi Eng	Packt Publishing	https://subscription.packtpub.com/book/programming/9781805122630/
167	Mastering Git	book	chapter	relevant	Jakub Narebski	Packt Publishing	https://subscription.packtpub.com/book/cloud-networking/9781835086070/
168	Bash Shell Scripting for Pentesters	book	chapter	relevant	Steve Campbell	Packt Publishing	https://subscription.packtpub.com/book/security/9781835880821/
169	TLS Cryptography In-Depth	book	chapter	relevant	Paul Duplys	Packt Publishing	https://subscription.packtpub.com/book/security/9781804611951/
170	Learn LLVM 17	book	chapter	relevant	Kai Nacke	Packt Publishing	https://subscription.packtpub.com/book/programming/9781837631346/
171	Raspberry Pi and MQTT Essentials	book	chapter	relevant	Dhairya Parikh	Packt Publishing	https://subscription.packtpub.com/book/iot-hardware/9781803244488/
172	Data Structures and Algorithms with the C++ STL	book	chapter	relevant	John Farrier	Packt Publishing	https://subscription.packtpub.com/book/programming/9781835468555/
173	Mastering Vim	book	chapter	relevant	Ruslan Osipov	Packt Publishing	https://subscription.packtpub.com/book/programming/9781835081877/
174	Cross-Platform Development with Qt 6 and Modern C++	book	chapter	relevant	Nibedit Dey	Packt Publishing	https://subscription.packtpub.com/book/programming/9781800204584/
175	C++ Programming for Linux Systems	book	chapter	relevant	Desislav Andreev	Packt Publishing	https://subscription.packtpub.com/book/programming/9781805129004/
176	Bare-Metal Embedded C Programming	book	chapter	relevant	Israel Gbati	Packt Publishing	https://subscription.packtpub.com/book/programming/9781835460818/
177	Learn C Programming	book	chapter	relevant	Jeff Szuhay	Packt Publishing	https://subscription.packtpub.com/book/programming/9781801078450/
178	Embedded Linux Development with Yocto Project	book	chapter	relevant	Otavio Salvador	Packt Publishing	https://subscription.packtpub.com/book/security/9781804615065/
179	Embedded Linux Projects Using Yocto Project Cookbook	book	chapter	relevant	Alex Gonzalez	Packt Publishing	https://subscription.packtpub.com/book/iot-and-hardware/9781788399210/
180	Using Yocto Project with BeagleBone Black	book	chapter	relevant	Irfan Sadiq	Packt Publishing	https://subscription.packtpub.com/book/iot-hardware/9781785289736/
181	Python 3 Object-Oriented Programming	book	chapter	relevant	Dusty Phillips	Packt Publishing	https://subscription.packtpub.com/book/programming/9781801077262/
182	Hands-On Embedded Programming with Qt	book	chapter	relevant	John Werner	Packt Publishing	https://subscription.packtpub.com/book/iot-and-hardware/9781789952063/
183	C++ 20 (2a) New Features	course	video	relevant	Daniel Zawadzki	Packt Publishing	https://subscription.packtpub.com/video/programming/9781839216909/
27	C++17 STL Cookbook	book	chapter	relevant	Jacek Galowicz	Packt Publishing	https://subscription.packtpub.com/book/programming/9781787120495/
184	C++ in Embedded Systems	book	chapter	relevant	Amar Mahmutbegović	Packt Publishing	https://subscription.packtpub.com/book/iot-hardware/9781835881149/
185	Offensive Shellcode from Scratch	book	chapter	relevant	Rishalin Pillay	Packt Publishing	https://subscription.packtpub.com/book/security/9781803247427/
186	Protocol Buffers Handbook	book	chapter	relevant	Clément Jean	Packt Publishing	https://subscription.packtpub.com/book/programming/9781805124672/
187	A Practical Guide to Quantum Computing	book	chapter	relevant	Elías F. Combarro	Packt Publishing	https://subscription.packtpub.com/book/programming/9781835885949/
188	The Ultimate Linux Shell Scripting Guide	book	chapter	relevant	Donald A. Tevault	Packt Publishing	https://subscription.packtpub.com/book/cloud-networking/9781835463574/
189	Hands-On RTOS with Microcontrollers	book	chapter	relevant	Jim Yuill	Packt Publishing	https://subscription.packtpub.com/book/security/9781803237725/
190	Rust from Beginner to Professional	book	chapter	relevant	Francesco Ciulla	Packt Publishing	https://subscription.packtpub.com/book/programming/9781836208877/
191	Automating Workflows with GitHub Actions	book	chapter	relevant	Priscila Heller	Packt Publishing	https://subscription.packtpub.com/book/cloud-networking/9781800560406/
192	Reverse Engineering Armv8-A Systems	book	chapter	relevant	Austin Kim	Packt Publishing	https://subscription.packtpub.com/book/security/9781835088920/
193	Practical Hardware Pentesting	book	chapter	relevant	Jean-Georges Valle	Packt Publishing	https://subscription.packtpub.com/book/security/9781789619133/
194	Advanced Python Programming	book	chapter	relevant	Quan Nguyen	Packt Publishing	https://subscription.packtpub.com/book/programming/9781801814010/
195	Refactoring with C++	book	chapter	relevant	Dmitry Danilov	Packt Publishing	https://subscription.packtpub.com/book/programming/9781837633777/
196	Hands-On Machine Learning with C++	book	chapter	relevant	Kirill Kolodiazhnyi	Packt Publishing	https://subscription.packtpub.com/book/data/9781805120575/
197	Vulkan 3D Graphics Rendering Cookbook	book	chapter	relevant	Sergey Kosarevsky	Packt Publishing	https://subscription.packtpub.com/book/game-development/9781803248110/
198	C++23 STL Cookbook	book	chapter	relevant	Bill Weinman	Packt Publishing	https://subscription.packtpub.com/book/programming/9781836204251/
199	Clang Compiler Frontend	book	chapter	relevant	Ivan Murashko	Packt Publishing	https://subscription.packtpub.com/book/programming/9781837630981/
200	Developing IoT Projects with ESP32	book	chapter	relevant	Vedat Ozan Oner	Packt Publishing	https://subscription.packtpub.com/book/iot-hardware/9781803237688/
201	Test-Driven Development with C++	book	chapter	relevant	Abdul Wahid Tanner	Packt Publishing	https://subscription.packtpub.com/book/web-development/9781803242002/
202	Expert Python Programming	book	chapter	relevant	Michał Jaworski	Packt Publishing	https://subscription.packtpub.com/book/programming/9781801071109/
203	C++ High Performance	book	chapter	relevant	Björn Andrist	Packt Publishing	https://subscription.packtpub.com/book/programming/9781839216541/
204	C++ System Programming Cookbook	book	chapter	relevant	Onorato Vaticone	Packt Publishing	https://subscription.packtpub.com/book/programming/9781838646554/
205	The C++ Standard Library	book	chapter	relevant	Rainer Grimm	Leanpub	https://leanpub.com/cpplibrary
206	Mastering STM32	book	chapter	relevant	Carmine Noviello	Leanpub	https://leanpub.com/mastering-stm32-2nd
97	OpenGL and GLSL Fundamentals with C++	video	chapter	relevant	course	Packt Publishing	https://subscription.packtpub.com/video/game-development/9781838647889/
207	Learn OpenGL	book	chapter	relevant	Frahaan Hussain	Packt Publishing	https://subscription.packtpub.com/book/game-development/9781789340365/
208	The Modern C++ Challenge	book	chapter	relevant	Marius Bancila	Packt Publishing	https://subscription.packtpub.com/book/programming/9781788993869/
209	Linux Device Drivers in Action	book	chapter	relevant	Kaiwan N. Billimoria	Packt Publishing	https://subscription.packtpub.com/book/cloud-networking/9781835881866/
210	Practical C++ Game Programming with Data Structures and Algorithms	book	chapter	relevant	Zhenyu George Li	Packt Publishing	https://subscription.packtpub.com/book/programming/9781835889862/
211	Linux Command Line and Shell Scripting Techniques	book	chapter	relevant	Jasmin Redzepagic	Packt Publishing	https://subscription.packtpub.com/book/cloud-networking/9781800205192/
212	Linux Administration Best Practices	book	chapter	relevant	Scott Alan Miller	Packt Publishing	https://subscription.packtpub.com/book/cloud-networking/9781800568792/
213	Practical Memory Forensics	book	chapter	relevant	Oleg Skulkin	Packt Publishing	https://subscription.packtpub.com/book/security/9781801070331/
\.


--
-- Data for Name: resources_activities; Type: TABLE DATA; Schema: flashback; Owner: flashback
--

COPY flashback.resources_activities (id, "user", resource, action, "time") FROM stdin;
\.


--
-- Data for Name: roadmaps; Type: TABLE DATA; Schema: flashback; Owner: flashback
--

COPY flashback.roadmaps (id, name) FROM stdin;
1	Embedded Linux Software Developer
2	String Theory Physicist
\.


--
-- Data for Name: roadmaps_activities; Type: TABLE DATA; Schema: flashback; Owner: flashback
--

COPY flashback.roadmaps_activities (id, "user", roadmap, action, "time") FROM stdin;
\.


--
-- Data for Name: section_name; Type: TABLE DATA; Schema: flashback; Owner: flashback
--

COPY flashback.section_name (pattern) FROM stdin;
chapter
chapter
chapter
\.


--
-- Data for Name: sections; Type: TABLE DATA; Schema: flashback; Owner: flashback
--

COPY flashback.sections (resource, "position", name) FROM stdin;
14	1	\N
14	2	\N
14	3	\N
14	4	\N
14	5	\N
14	6	\N
14	7	\N
14	8	\N
14	9	\N
14	10	\N
14	11	\N
14	12	\N
14	13	\N
14	14	\N
14	15	\N
14	16	\N
14	17	\N
14	18	\N
14	19	\N
14	20	\N
14	21	\N
14	22	\N
14	23	\N
15	1	\N
15	2	\N
15	3	\N
15	4	\N
15	5	\N
15	6	\N
15	7	\N
15	8	\N
15	9	\N
15	10	\N
15	11	\N
15	12	\N
15	13	\N
16	1	\N
16	2	\N
16	3	\N
16	4	\N
16	5	\N
16	6	\N
16	7	\N
16	8	\N
16	9	\N
17	1	\N
17	2	\N
17	3	\N
17	4	\N
17	5	\N
17	6	\N
17	7	\N
17	8	\N
17	9	\N
17	10	\N
17	11	\N
17	12	\N
17	13	\N
17	14	\N
17	15	\N
17	16	\N
17	17	\N
17	18	\N
17	19	\N
17	20	\N
17	21	\N
18	1	\N
18	2	\N
18	3	\N
18	4	\N
18	5	\N
18	6	\N
18	7	\N
18	8	\N
18	9	\N
18	10	\N
18	11	\N
18	12	\N
18	13	\N
18	14	\N
18	15	\N
18	16	\N
18	17	\N
18	18	\N
18	19	\N
18	20	\N
18	21	\N
18	22	\N
18	23	\N
18	24	\N
18	25	\N
18	26	\N
18	27	\N
18	28	\N
18	29	\N
18	30	\N
18	31	\N
19	1	\N
19	2	\N
19	3	\N
19	4	\N
19	5	\N
19	6	\N
19	7	\N
19	8	\N
19	9	\N
19	10	\N
19	11	\N
20	1	\N
20	2	\N
20	3	\N
20	4	\N
20	5	\N
20	6	\N
21	1	\N
21	2	\N
21	3	\N
21	4	\N
21	5	\N
21	6	\N
21	7	\N
21	8	\N
21	9	\N
21	10	\N
21	11	\N
21	12	\N
21	13	\N
21	14	\N
21	15	\N
21	16	\N
21	17	\N
21	18	\N
21	19	\N
21	20	\N
22	1	\N
22	2	\N
22	3	\N
22	4	\N
22	5	\N
22	6	\N
22	7	\N
22	8	\N
22	9	\N
22	10	\N
22	11	\N
22	12	\N
22	13	\N
22	14	\N
22	15	\N
22	16	\N
22	17	\N
22	18	\N
22	19	\N
22	20	\N
22	21	\N
22	22	\N
22	23	\N
22	24	\N
22	25	\N
22	26	\N
22	27	\N
22	28	\N
22	29	\N
22	30	\N
22	31	\N
22	32	\N
22	33	\N
22	34	\N
23	1	\N
23	2	\N
23	3	\N
23	4	\N
23	5	\N
23	6	\N
23	7	\N
23	8	\N
23	9	\N
23	10	\N
23	11	\N
23	12	\N
23	13	\N
23	14	\N
23	15	\N
23	16	\N
23	17	\N
23	18	\N
23	19	\N
23	20	\N
24	1	\N
24	2	\N
24	3	\N
24	4	\N
24	5	\N
24	6	\N
24	7	\N
24	8	\N
24	9	\N
24	10	\N
24	11	\N
24	12	\N
24	13	\N
24	14	\N
24	15	\N
24	16	\N
24	17	\N
24	18	\N
25	3	Manipulating Users and Connections
25	5	Advanced Statements
25	7	Server-Side Programming
25	8	Triggers and Rules
25	11	Transactions, MVCC, WALs, and Checkpoints
25	14	Logging and Auditing
25	15	Backup and Restore
25	17	Physical Replication
25	19	Useful Tools and Extensions
26	1	\N
26	2	\N
26	3	\N
26	4	\N
26	5	\N
26	6	\N
26	7	\N
26	8	\N
26	9	\N
26	10	\N
26	11	\N
26	12	\N
26	13	\N
26	14	\N
26	15	\N
26	16	\N
27	1	\N
27	2	\N
27	3	\N
27	4	\N
27	5	\N
27	6	\N
27	7	\N
27	8	\N
27	9	\N
27	10	\N
28	1	\N
29	1	\N
29	2	\N
29	3	\N
29	4	\N
29	5	\N
29	6	\N
29	7	\N
29	8	\N
29	9	\N
29	10	\N
29	11	\N
29	12	\N
29	13	\N
29	14	\N
29	15	\N
29	16	\N
29	17	\N
29	18	\N
29	19	\N
29	20	\N
29	21	\N
30	1	\N
30	2	\N
30	3	\N
30	4	\N
30	5	\N
30	6	\N
30	7	\N
30	8	\N
30	9	\N
30	10	\N
30	11	\N
30	12	\N
30	13	\N
30	14	\N
30	15	\N
31	1	\N
31	2	\N
31	3	\N
31	4	\N
31	5	\N
31	6	\N
31	7	\N
31	8	\N
31	9	\N
31	10	\N
31	11	\N
31	12	\N
32	1	\N
32	2	\N
32	3	\N
32	4	\N
32	5	\N
32	6	\N
32	7	\N
32	8	\N
32	9	\N
32	10	\N
32	11	\N
32	12	\N
33	1	\N
33	2	\N
33	3	\N
33	4	\N
33	5	\N
33	6	\N
33	7	\N
33	8	\N
33	9	\N
33	10	\N
33	11	\N
33	12	\N
34	1	\N
34	2	\N
34	3	\N
34	4	\N
34	5	\N
34	6	\N
34	7	\N
34	8	\N
34	9	\N
34	10	\N
34	11	\N
34	12	\N
35	1	\N
35	2	\N
35	3	\N
35	4	\N
35	5	\N
35	6	\N
35	7	\N
35	8	\N
35	9	\N
35	10	\N
35	11	\N
35	12	\N
35	13	\N
35	14	\N
35	15	\N
35	16	\N
35	17	\N
35	18	\N
35	19	\N
35	20	\N
35	21	\N
35	22	\N
35	23	\N
35	24	\N
36	1	\N
36	2	\N
36	3	\N
36	4	\N
36	5	\N
36	6	\N
36	7	\N
36	8	\N
36	9	\N
36	10	\N
36	11	\N
36	12	\N
36	13	\N
36	14	\N
36	15	\N
36	16	\N
36	17	\N
36	18	\N
36	19	\N
36	20	\N
36	21	\N
36	22	\N
36	23	\N
36	24	\N
36	25	\N
36	26	\N
36	27	\N
36	28	\N
36	29	\N
36	30	\N
36	31	\N
36	32	\N
36	33	\N
36	34	\N
36	35	\N
36	36	\N
36	37	\N
37	1	\N
37	2	\N
37	3	\N
37	4	\N
37	5	\N
37	6	\N
37	7	\N
37	8	\N
37	9	\N
37	10	\N
37	11	\N
37	12	\N
37	13	\N
37	14	\N
37	15	\N
37	16	\N
37	17	\N
37	18	\N
38	1	\N
38	2	\N
38	3	\N
38	4	\N
38	5	\N
38	6	\N
38	7	\N
38	8	\N
38	9	\N
39	1	\N
39	2	\N
39	3	\N
39	4	\N
39	5	\N
39	6	\N
39	7	\N
39	8	\N
39	9	\N
39	10	\N
39	11	\N
40	1	\N
40	2	\N
40	3	\N
40	4	\N
40	5	\N
40	6	\N
40	7	\N
41	1	\N
41	2	\N
41	3	\N
41	4	\N
41	5	\N
41	6	\N
41	7	\N
41	8	\N
41	9	\N
41	10	\N
41	11	\N
41	12	\N
41	13	\N
41	14	\N
41	15	\N
41	16	\N
41	17	\N
41	18	\N
41	19	\N
41	20	\N
41	21	\N
42	1	\N
42	2	\N
42	3	\N
42	4	\N
42	5	\N
42	6	\N
42	7	\N
42	8	\N
42	9	\N
42	10	\N
42	11	\N
42	12	\N
42	13	\N
43	1	\N
43	2	\N
43	3	\N
43	4	\N
43	5	\N
43	6	\N
43	7	\N
43	8	\N
43	9	\N
43	10	\N
43	11	\N
43	12	\N
43	13	\N
43	14	\N
43	15	\N
43	16	\N
43	17	\N
43	18	\N
43	19	\N
43	20	\N
43	21	\N
43	22	\N
43	23	\N
43	24	\N
43	25	\N
43	26	\N
43	27	\N
43	28	\N
43	29	\N
43	30	\N
43	31	\N
43	32	\N
43	33	\N
43	34	\N
43	35	\N
43	36	\N
43	37	\N
43	38	\N
43	39	\N
43	40	\N
43	41	\N
43	42	\N
43	43	\N
44	1	\N
44	2	\N
44	3	\N
44	4	\N
44	5	\N
44	6	\N
44	7	\N
44	8	\N
44	9	\N
44	10	\N
44	11	\N
44	12	\N
44	13	\N
44	14	\N
45	1	\N
45	2	\N
45	3	\N
45	4	\N
45	5	\N
45	6	\N
45	7	\N
45	8	\N
45	9	\N
45	10	\N
45	11	\N
45	12	\N
45	13	\N
45	14	\N
45	15	\N
45	16	\N
46	1	\N
46	2	\N
46	3	\N
46	4	\N
46	5	\N
46	6	\N
46	7	\N
46	8	\N
46	9	\N
46	10	\N
46	11	\N
46	12	\N
46	13	\N
46	14	\N
46	15	\N
46	16	\N
46	17	\N
46	18	\N
46	19	\N
46	20	\N
46	21	\N
46	22	\N
46	23	\N
46	24	\N
46	25	\N
46	26	\N
46	27	\N
46	28	\N
46	29	\N
46	30	\N
46	31	\N
46	32	\N
46	33	\N
46	34	\N
46	35	\N
46	36	\N
46	37	\N
46	38	\N
46	39	\N
46	40	\N
46	41	\N
46	42	\N
46	43	\N
46	44	\N
46	45	\N
46	46	\N
46	47	\N
46	48	\N
46	49	\N
46	50	\N
46	51	\N
46	52	\N
46	53	\N
46	54	\N
46	55	\N
46	56	\N
46	57	\N
46	58	\N
46	59	\N
46	60	\N
46	61	\N
46	62	\N
46	63	\N
46	64	\N
47	1	\N
47	2	\N
47	3	\N
47	4	\N
47	5	\N
47	6	\N
47	7	\N
47	8	\N
47	9	\N
47	10	\N
47	11	\N
47	12	\N
47	13	\N
47	14	\N
47	15	\N
47	16	\N
48	1	\N
49	1	\N
49	2	\N
49	3	\N
49	4	\N
49	5	\N
49	6	\N
49	7	\N
49	8	\N
49	9	\N
49	10	\N
49	11	\N
49	12	\N
50	1	\N
50	2	\N
50	3	\N
50	4	\N
50	5	\N
50	6	\N
50	7	\N
50	8	\N
50	9	\N
50	10	\N
50	11	\N
50	12	\N
50	13	\N
50	14	\N
50	15	\N
50	16	\N
50	17	\N
50	18	\N
50	19	\N
50	20	\N
50	21	\N
50	22	\N
50	23	\N
51	1	\N
51	2	\N
51	3	\N
51	4	\N
51	5	\N
51	6	\N
51	7	\N
51	8	\N
51	9	\N
51	10	\N
51	11	\N
51	12	\N
51	13	\N
51	14	\N
52	1	\N
52	2	\N
52	3	\N
52	4	\N
52	5	\N
52	6	\N
52	7	\N
52	8	\N
52	9	\N
52	10	\N
52	11	\N
52	12	\N
52	13	\N
52	14	\N
52	15	\N
52	16	\N
52	17	\N
52	18	\N
52	19	\N
52	20	\N
52	21	\N
52	22	\N
52	23	\N
52	24	\N
52	25	\N
52	26	\N
52	27	\N
53	1	\N
53	2	\N
53	3	\N
53	4	\N
53	5	\N
53	6	\N
53	7	\N
53	8	\N
53	9	\N
53	10	\N
53	11	\N
53	12	\N
53	13	\N
53	14	\N
53	15	\N
53	16	\N
53	17	\N
53	18	\N
53	19	\N
53	20	\N
53	21	\N
53	22	\N
53	23	\N
53	24	\N
53	25	\N
54	1	\N
54	2	\N
54	3	\N
54	4	\N
54	5	\N
54	6	\N
54	7	\N
54	8	\N
54	9	\N
54	10	\N
54	11	\N
54	12	\N
54	13	\N
54	14	\N
54	15	\N
54	16	\N
54	17	\N
54	18	\N
54	19	\N
55	1	\N
55	2	\N
55	3	\N
55	4	\N
55	5	\N
55	6	\N
55	7	\N
55	8	\N
55	9	\N
55	10	\N
55	11	\N
55	12	\N
55	13	\N
55	14	\N
55	15	\N
55	16	\N
56	1	\N
56	2	\N
56	3	\N
56	4	\N
56	5	\N
56	6	\N
56	7	\N
56	8	\N
56	9	\N
56	10	\N
56	11	\N
56	12	\N
57	1	\N
57	2	\N
57	3	\N
57	4	\N
57	5	\N
57	6	\N
57	7	\N
57	8	\N
57	9	\N
57	10	\N
57	11	\N
57	12	\N
58	1	\N
58	2	\N
58	3	\N
58	4	\N
58	5	\N
58	6	\N
58	7	\N
58	8	\N
58	9	\N
58	10	\N
58	11	\N
58	12	\N
58	13	\N
58	14	\N
58	15	\N
58	16	\N
58	17	\N
59	1	\N
59	2	\N
59	3	\N
59	4	\N
59	5	\N
59	6	\N
59	7	\N
59	8	\N
59	9	\N
59	10	\N
59	11	\N
59	12	\N
59	13	\N
60	1	\N
60	2	\N
60	3	\N
60	4	\N
60	5	\N
60	6	\N
60	7	\N
60	8	\N
60	9	\N
60	10	\N
60	11	\N
60	12	\N
60	13	\N
60	14	\N
60	15	\N
60	16	\N
60	17	\N
60	18	\N
60	19	\N
60	20	\N
60	21	\N
60	22	\N
61	1	\N
61	2	\N
61	3	\N
61	4	\N
61	5	\N
61	6	\N
62	1	\N
62	2	\N
62	3	\N
62	4	\N
62	5	\N
62	6	\N
62	7	\N
62	8	\N
62	9	\N
62	10	\N
62	11	\N
62	12	\N
62	13	\N
62	14	\N
62	15	\N
62	16	\N
62	17	\N
62	18	\N
62	19	\N
62	20	\N
62	21	\N
62	22	\N
62	23	\N
62	24	\N
62	25	\N
62	26	\N
62	27	\N
62	28	\N
62	29	\N
63	1	\N
64	1	\N
64	2	\N
64	3	\N
64	4	\N
64	5	\N
64	6	\N
64	7	\N
64	8	\N
64	9	\N
64	10	\N
64	11	\N
64	12	\N
64	13	\N
64	14	\N
65	1	\N
65	2	\N
65	3	\N
65	4	\N
65	5	\N
65	6	\N
65	7	\N
65	8	\N
65	9	\N
65	10	\N
65	11	\N
65	12	\N
65	13	\N
65	14	\N
65	15	\N
65	16	\N
65	17	\N
66	1	\N
66	2	\N
66	3	\N
66	4	\N
66	5	\N
66	6	\N
66	7	\N
66	8	\N
66	9	\N
66	10	\N
66	11	\N
66	12	\N
66	13	\N
66	14	\N
66	15	\N
66	16	\N
66	17	\N
66	18	\N
66	19	\N
66	20	\N
66	21	\N
66	22	\N
66	23	\N
66	24	\N
66	25	\N
66	26	\N
66	27	\N
66	28	\N
66	29	\N
66	30	\N
66	31	\N
66	32	\N
66	33	\N
66	34	\N
66	35	\N
66	36	\N
66	37	\N
66	38	\N
66	39	\N
66	40	\N
66	41	\N
66	42	\N
66	43	\N
66	44	\N
67	1	\N
67	2	\N
67	3	\N
67	4	\N
67	5	\N
67	6	\N
67	7	\N
67	8	\N
67	9	\N
67	10	\N
67	11	\N
67	12	\N
67	13	\N
67	14	\N
67	15	\N
67	16	\N
68	1	\N
68	2	\N
68	3	\N
68	4	\N
68	5	\N
68	6	\N
68	7	\N
68	8	\N
68	9	\N
68	10	\N
68	11	\N
68	12	\N
68	13	\N
68	14	\N
68	15	\N
68	16	\N
68	17	\N
68	18	\N
68	19	\N
68	20	\N
68	21	\N
68	22	\N
68	23	\N
68	24	\N
68	25	\N
68	26	\N
68	27	\N
68	28	\N
68	29	\N
68	30	\N
68	31	\N
68	32	\N
68	33	\N
68	34	\N
68	35	\N
68	36	\N
68	37	\N
68	38	\N
68	39	\N
68	40	\N
68	41	\N
68	42	\N
68	43	\N
68	44	\N
68	45	\N
68	46	\N
68	47	\N
68	48	\N
68	49	\N
68	50	\N
68	51	\N
69	1	\N
69	2	\N
69	3	\N
69	4	\N
70	1	\N
70	2	\N
70	3	\N
71	1	\N
71	2	\N
71	3	\N
71	4	\N
71	5	\N
71	6	\N
71	7	\N
71	8	\N
71	9	\N
71	10	\N
71	11	\N
72	1	\N
72	2	\N
72	3	\N
72	4	\N
72	5	\N
72	6	\N
72	7	\N
72	8	\N
72	9	\N
72	10	\N
72	11	\N
72	12	\N
72	13	\N
72	14	\N
72	15	\N
72	16	\N
72	17	\N
72	18	\N
72	19	\N
72	20	\N
72	21	\N
72	22	\N
72	23	\N
72	24	\N
72	25	\N
72	26	\N
72	27	\N
72	28	\N
72	29	\N
72	30	\N
72	31	\N
72	32	\N
72	33	\N
72	34	\N
72	35	\N
72	36	\N
74	1	\N
74	2	\N
74	3	\N
74	4	\N
74	5	\N
74	6	\N
74	7	\N
74	8	\N
74	9	\N
74	10	\N
74	11	\N
74	12	\N
74	13	\N
74	14	\N
74	15	\N
74	16	\N
74	17	\N
74	18	\N
74	19	\N
74	20	\N
74	21	\N
75	1	\N
75	2	\N
75	3	\N
75	4	\N
75	5	\N
75	6	\N
75	7	\N
75	8	\N
75	9	\N
75	10	\N
75	11	\N
75	12	\N
76	1	\N
76	2	\N
76	3	\N
76	4	\N
76	5	\N
76	6	\N
76	7	\N
76	8	\N
76	9	\N
76	10	\N
76	11	\N
76	12	\N
76	13	\N
76	14	\N
77	1	\N
77	2	\N
77	3	\N
77	4	\N
77	5	\N
77	6	\N
77	7	\N
77	8	\N
77	9	\N
77	10	\N
77	11	\N
77	12	\N
77	13	\N
77	14	\N
77	15	\N
77	16	\N
77	17	\N
77	18	\N
77	19	\N
77	20	\N
77	21	\N
78	1	\N
78	2	\N
78	3	\N
78	4	\N
78	5	\N
78	6	\N
78	7	\N
78	8	\N
78	9	\N
78	10	\N
78	11	\N
78	12	\N
78	13	\N
78	14	\N
78	15	\N
78	16	\N
78	17	\N
78	18	\N
78	19	\N
78	20	\N
78	21	\N
78	22	\N
78	23	\N
78	24	\N
78	25	\N
78	26	\N
78	27	\N
78	28	\N
78	29	\N
78	30	\N
78	31	\N
78	32	\N
78	33	\N
78	34	\N
78	35	\N
78	36	\N
78	37	\N
78	38	\N
78	39	\N
78	40	\N
78	41	\N
78	42	\N
78	43	\N
78	44	\N
78	45	\N
78	46	\N
78	47	\N
79	1	\N
79	2	\N
79	3	\N
79	4	\N
79	5	\N
79	6	\N
79	7	\N
79	8	\N
79	9	\N
79	10	\N
79	11	\N
79	12	\N
80	1	\N
80	2	\N
80	3	\N
80	4	\N
80	5	\N
80	6	\N
80	7	\N
80	8	\N
80	9	\N
80	10	\N
80	11	\N
80	12	\N
80	13	\N
80	14	\N
80	15	\N
80	16	\N
80	17	\N
80	18	\N
80	19	\N
80	20	\N
81	1	\N
81	2	\N
81	3	\N
81	4	\N
81	5	\N
81	6	\N
81	7	\N
81	8	\N
81	9	\N
81	10	\N
81	11	\N
81	12	\N
81	13	\N
82	1	\N
82	2	\N
82	3	\N
82	4	\N
82	5	\N
82	6	\N
82	7	\N
82	8	\N
82	9	\N
82	10	\N
82	11	\N
82	12	\N
82	13	\N
82	14	\N
82	15	\N
82	16	\N
82	17	\N
82	18	\N
82	19	\N
82	20	\N
83	1	\N
83	2	\N
83	3	\N
83	4	\N
83	5	\N
83	6	\N
83	7	\N
83	8	\N
83	9	\N
83	10	\N
83	11	\N
83	12	\N
84	1	\N
84	2	\N
84	3	\N
84	4	\N
84	5	\N
84	6	\N
84	7	\N
84	8	\N
84	9	\N
84	10	\N
84	11	\N
84	12	\N
84	13	\N
84	14	\N
84	15	\N
84	16	\N
84	17	\N
85	1	\N
85	2	\N
85	3	\N
85	4	\N
85	5	\N
85	6	\N
85	7	\N
85	8	\N
85	9	\N
85	10	\N
85	11	\N
85	12	\N
85	13	\N
85	14	\N
85	15	\N
85	16	\N
85	17	\N
86	1	\N
86	2	\N
86	3	\N
86	4	\N
86	5	\N
86	6	\N
86	7	\N
86	8	\N
86	9	\N
86	10	\N
86	11	\N
86	12	\N
86	13	\N
86	14	\N
86	15	\N
86	16	\N
86	17	\N
86	18	\N
86	19	\N
86	20	\N
87	1	\N
87	2	\N
87	3	\N
87	4	\N
87	5	\N
87	6	\N
87	7	\N
87	8	\N
87	9	\N
87	10	\N
87	11	\N
87	12	\N
87	13	\N
87	14	\N
87	15	\N
88	1	\N
88	2	\N
88	3	\N
88	4	\N
88	5	\N
88	6	\N
88	7	\N
88	8	\N
88	9	\N
88	10	\N
88	11	\N
88	12	\N
88	13	\N
88	14	\N
88	15	\N
89	1	\N
90	1	\N
90	2	\N
90	3	\N
90	4	\N
90	5	\N
90	6	\N
90	7	\N
90	8	\N
90	9	\N
90	10	\N
90	11	\N
90	12	\N
90	13	\N
90	14	\N
90	15	\N
91	1	\N
92	1	\N
92	2	\N
92	3	\N
92	4	\N
92	5	\N
92	6	\N
92	7	\N
92	8	\N
92	9	\N
92	10	\N
92	11	\N
93	1	\N
93	2	\N
93	3	\N
93	4	\N
93	5	\N
93	6	\N
93	7	\N
94	1	\N
95	1	\N
95	2	\N
95	3	\N
95	4	\N
95	5	\N
95	6	\N
95	7	\N
95	8	\N
95	9	\N
95	10	\N
95	11	\N
95	12	\N
95	13	\N
95	14	\N
95	15	\N
95	16	\N
95	17	\N
95	18	\N
95	19	\N
95	20	\N
95	21	\N
95	22	\N
95	23	\N
95	24	\N
95	25	\N
95	26	\N
95	27	\N
95	28	\N
96	1	\N
96	2	\N
96	3	\N
96	4	\N
96	5	\N
96	6	\N
96	7	\N
96	8	\N
96	9	\N
96	10	\N
96	11	\N
96	12	\N
96	13	\N
96	14	\N
96	15	\N
96	16	\N
96	17	\N
96	18	\N
97	1	\N
97	2	\N
97	3	\N
97	4	\N
97	5	\N
98	1	\N
98	2	\N
98	3	\N
98	4	\N
98	5	\N
98	6	\N
98	7	\N
98	8	\N
98	9	\N
98	10	\N
98	11	\N
98	12	\N
98	13	\N
98	14	\N
98	15	\N
98	16	\N
98	17	\N
98	18	\N
98	19	\N
98	20	\N
99	1	\N
101	1	\N
101	2	\N
101	3	\N
101	4	\N
101	5	\N
101	6	\N
101	7	\N
101	8	\N
101	9	\N
101	10	\N
101	11	\N
101	12	\N
101	13	\N
101	14	\N
102	1	\N
102	2	\N
102	3	\N
102	4	\N
102	5	\N
102	6	\N
102	7	\N
102	8	\N
102	9	\N
102	10	\N
102	11	\N
102	12	\N
103	1	\N
103	2	\N
103	3	\N
103	4	\N
103	5	\N
103	6	\N
104	1	\N
104	2	\N
104	3	\N
104	4	\N
104	5	\N
104	6	\N
104	7	\N
104	8	\N
104	9	\N
104	10	\N
104	11	\N
104	12	\N
104	13	\N
105	1	\N
105	2	\N
105	3	\N
105	4	\N
105	5	\N
105	6	\N
105	7	\N
107	1	\N
107	2	\N
107	3	\N
107	4	\N
107	5	\N
107	6	\N
107	7	\N
107	8	\N
107	9	\N
107	10	\N
107	11	\N
107	12	\N
107	13	\N
108	1	\N
108	2	\N
108	3	\N
108	4	\N
108	5	\N
108	6	\N
108	7	\N
109	1	\N
109	2	\N
109	3	\N
109	4	\N
109	5	\N
109	6	\N
109	7	\N
109	8	\N
109	9	\N
109	10	\N
109	11	\N
110	1	\N
110	2	\N
110	3	\N
110	4	\N
110	5	\N
110	6	\N
106	3	Learning Graphical User Interfaces
106	6	Learning Object Classification
106	8	Video Surveillance, Background Modeling, and Morphological Operations
106	11	Text Recognition with Tesseract
110	7	\N
110	8	\N
110	9	\N
110	10	\N
100	3	Mocking for Dummies
100	5	Mocking Cheat Sheet
100	7	Mocking Reference
110	11	\N
110	12	\N
110	13	\N
110	14	\N
110	15	\N
110	16	\N
111	1	\N
111	2	\N
111	3	\N
111	4	\N
111	5	\N
111	6	\N
111	7	\N
111	8	\N
111	9	\N
111	10	\N
111	11	\N
111	12	\N
111	13	\N
112	1	\N
112	2	\N
112	3	\N
112	4	\N
112	5	\N
112	6	\N
112	7	\N
112	8	\N
112	9	\N
112	10	\N
112	11	\N
112	12	\N
112	13	\N
112	14	\N
112	15	\N
112	16	\N
112	17	\N
112	18	\N
112	19	\N
113	1	\N
113	2	\N
113	3	\N
113	4	\N
113	5	\N
115	1	\N
115	2	\N
115	3	\N
115	4	\N
115	5	\N
115	6	\N
115	7	\N
115	8	\N
115	9	\N
115	10	\N
115	11	\N
115	12	\N
115	13	\N
115	14	\N
115	15	\N
115	16	\N
115	17	\N
115	18	\N
115	19	\N
115	20	\N
115	21	\N
115	22	\N
115	23	\N
115	24	\N
115	25	\N
116	1	\N
116	2	\N
116	3	\N
116	4	\N
116	5	\N
116	6	\N
116	7	\N
116	8	\N
116	9	\N
116	10	\N
116	11	\N
116	12	\N
116	13	\N
116	14	\N
116	15	\N
116	16	\N
116	17	\N
116	18	\N
116	19	\N
116	20	\N
116	21	\N
116	22	\N
116	23	\N
116	24	\N
116	25	\N
116	26	\N
116	27	\N
116	28	\N
116	29	\N
116	30	\N
116	31	\N
116	32	\N
116	33	\N
116	34	\N
116	35	\N
116	36	\N
116	37	\N
116	38	\N
116	39	\N
116	40	\N
116	41	\N
116	42	\N
116	43	\N
116	44	\N
116	45	\N
116	46	\N
116	47	\N
116	48	\N
116	49	\N
116	50	\N
116	51	\N
116	52	\N
116	53	\N
116	54	\N
116	55	\N
116	56	\N
116	57	\N
116	58	\N
116	59	\N
116	60	\N
116	61	\N
116	62	\N
116	63	\N
116	64	\N
116	65	\N
116	66	\N
116	67	\N
116	68	\N
118	1	\N
118	2	\N
118	3	\N
118	4	\N
118	5	\N
118	6	\N
118	7	\N
118	8	\N
118	9	\N
118	10	\N
118	11	\N
118	12	\N
118	13	\N
119	1	\N
119	2	\N
119	3	\N
119	4	\N
119	5	\N
119	6	\N
119	7	\N
119	8	\N
119	9	\N
119	10	\N
119	11	\N
119	12	\N
119	13	\N
119	14	\N
119	15	\N
119	16	\N
119	17	\N
119	18	\N
121	1	\N
122	1	\N
122	2	\N
122	3	\N
122	4	\N
122	5	\N
122	6	\N
122	7	\N
122	8	\N
122	9	\N
122	10	\N
122	11	\N
122	12	\N
122	13	\N
122	14	\N
123	1	\N
123	2	\N
123	3	\N
123	4	\N
123	5	\N
123	6	\N
123	7	\N
123	8	\N
123	9	\N
124	1	\N
124	2	\N
124	3	\N
124	4	\N
124	5	\N
124	6	\N
124	7	\N
124	8	\N
124	9	\N
124	10	\N
124	11	\N
124	12	\N
126	1	\N
125	2	Template Method
125	3	Command
125	5	Chain of Responsibility
125	7	Mediator
125	8	Visitor
125	10	State
125	11	Iterator
126	2	\N
126	3	\N
126	4	\N
126	5	\N
126	6	\N
126	7	\N
127	1	\N
127	2	\N
127	3	\N
127	4	\N
127	5	\N
127	6	\N
127	7	\N
127	8	\N
127	9	\N
127	10	\N
127	11	\N
127	12	\N
127	13	\N
127	14	\N
127	15	\N
127	16	\N
127	17	\N
127	18	\N
127	19	\N
127	20	\N
127	21	\N
128	1	\N
128	2	\N
128	3	\N
128	4	\N
128	5	\N
128	6	\N
128	7	\N
128	8	\N
128	9	\N
128	10	\N
129	1	\N
129	2	\N
129	3	\N
129	4	\N
129	5	\N
129	6	\N
129	7	\N
129	8	\N
129	9	\N
129	10	\N
129	11	\N
129	12	\N
129	13	\N
129	14	\N
129	15	\N
129	16	\N
129	17	\N
129	18	\N
129	19	\N
129	20	\N
129	21	\N
129	22	\N
129	23	\N
129	24	\N
129	25	\N
129	26	\N
129	27	\N
129	28	\N
129	29	\N
129	30	\N
129	31	\N
129	32	\N
129	33	\N
129	34	\N
129	35	\N
129	36	\N
129	37	\N
129	38	\N
129	39	\N
129	40	\N
129	41	\N
129	42	\N
129	43	\N
129	44	\N
129	45	\N
129	46	\N
129	47	\N
130	1	\N
131	1	\N
131	2	\N
131	3	\N
131	4	\N
131	5	\N
131	6	\N
131	7	\N
131	8	\N
132	1	\N
132	2	\N
132	3	\N
132	4	\N
132	5	\N
132	6	\N
132	7	\N
132	8	\N
132	9	\N
132	10	\N
132	11	\N
132	12	\N
132	13	\N
132	14	\N
132	15	\N
132	16	\N
132	17	\N
132	18	\N
132	19	\N
134	1	\N
134	2	\N
134	3	\N
134	4	\N
134	5	\N
134	6	\N
134	7	\N
134	8	\N
134	9	\N
135	1	\N
1	1	https://youtu.be/CwYILWyTRMQ
108	8	2
125	1	Strategy
125	4	Memento
125	6	Observer
125	9	Interpreter
108	9	3
136	1	Fundamental of SELinux Concepts
137	1	https://youtu.be/Tl6xOw6Au88
137	2	https://youtu.be/rF3ymTBeZ_k
137	3	https://youtu.be/clqL--vqToE?feature=shared
137	4	https://youtu.be/nXJdxxXjkvA
137	5	https://youtu.be/TLH7tDk6OP4
137	6	https://youtu.be/XMPeAVx3Cls
137	7	https://youtu.be/TgoJ51OwSeA
137	8	https://youtu.be/d-3A3Y2C-Fc?feature=shared
137	9	https://youtu.be/1h9T3-X_1qQ
137	10	https://youtu.be/07nVHYb_vV0
137	11	https://youtu.be/Do4G_es2vm8
137	12	https://youtu.be/1V5ewUKIM1I
137	13	https://youtu.be/R8CQjsNYdvY
137	14	https://youtu.be/KeAkWb4wgsc
137	15	https://youtu.be/0p4l-rIGTfs
137	16	https://youtu.be/T-4Q7i6mNeM
137	17	https://youtu.be/ArquIrMD-0M
137	18	https://youtu.be/z55PFrvuBqk
137	19	https://youtu.be/speTBP-NXJo
138	1	Introduction to Ethical Hacking
138	2	Building a Penetration Testing Lab
25	1	Introduction to PostgreSQL
25	2	Getting to Know Your Cluster
25	4	Basic Statements
25	6	Window Functions
25	9	Partitioning
25	10	Users, Roles, and Database Security
25	12	Extending the Database
25	13	Query Tuning, Indexes, and Performance Optimization
25	16	Configuration and Monitoring
25	18	Logical Replication
137	20	https://youtu.be/D7aDAXWi5SM
114	1	https://youtu.be/J7fYddslH0Q
140	1	https://youtu.be/kXe-YkJ9nBs
106	1	Getting Started with OpenCV
106	2	An Introduction to the Basics of OpenCV
106	5	Automated Optical Inspection, Object Segmentation, and Detection
106	7	Detecting Face Parts and Overlaying Masks
106	9	Learning Object Tracking
106	12	Deep Learning with OpenCV
106	10	Developing Segmentation Algorithms for Text Recognition
106	4	Delving into Histogram and Filters
100	1	GoogleTest Primer
100	2	Advanced Topics
205	1	\N
114	2	https://youtu.be/qfKFfQSxvA8
100	4	Mocking Cookbook
100	6	Testing Reference
100	9	Matchers
100	8	Assertions
100	10	Actions
151	1	Installation
151	2	ftxui
151	3	ftxui/screen
151	4	ftxui/dom
151	5	ftxui/component
151	6	C++20 Modules
151	7	POSIX Piped Input in FTXUI
205	2	\N
205	3	\N
205	4	\N
205	5	\N
205	6	\N
205	7	\N
205	8	\N
205	9	\N
205	10	\N
205	11	\N
205	12	\N
205	13	\N
205	14	\N
205	15	\N
205	16	\N
205	17	\N
205	18	\N
205	19	\N
205	20	\N
\.


--
-- Data for Name: sections_activities; Type: TABLE DATA; Schema: flashback; Owner: flashback
--

COPY flashback.sections_activities (id, "user", resource, "position", action, "time") FROM stdin;
\.


--
-- Data for Name: sections_cards; Type: TABLE DATA; Schema: flashback; Owner: flashback
--

COPY flashback.sections_cards (resource, section, card, "position") FROM stdin;
1	1	1	1
1	1	2	2
1	1	3	3
1	1	4	4
1	1	5	5
1	1	6	6
1	1	7	7
1	1	8	8
14	6	18	1
14	6	19	2
14	6	20	3
14	6	21	4
14	6	22	5
17	1	23	1
17	1	24	2
17	1	25	3
17	1	26	4
17	2	27	1
17	2	28	2
17	2	29	3
17	2	30	4
17	2	31	5
17	2	32	6
17	2	33	7
17	2	34	8
17	2	35	9
17	2	36	10
17	2	37	11
17	2	38	12
17	2	39	13
17	2	40	14
17	2	41	15
17	2	42	16
17	2	43	17
17	2	44	18
17	2	45	19
17	2	46	20
17	2	47	21
17	2	48	22
17	2	49	23
17	2	50	24
17	2	51	25
17	2	52	26
17	2	53	27
17	2	54	28
17	2	55	29
17	3	56	1
17	3	57	2
17	3	58	3
17	3	59	4
17	3	60	5
17	3	61	6
17	3	62	7
17	3	63	8
17	3	64	9
17	3	65	10
17	3	66	11
17	3	67	12
17	3	68	13
17	3	69	14
17	3	70	15
17	3	71	16
17	4	72	1
17	4	73	2
17	4	74	3
17	4	75	4
17	4	76	5
17	4	77	6
17	4	78	7
17	4	79	8
17	4	80	9
17	4	81	10
17	4	82	11
17	4	83	12
17	4	84	13
17	4	85	14
17	4	86	15
17	4	87	16
17	4	88	17
17	4	89	18
17	4	90	19
17	4	91	20
17	4	92	21
17	4	93	22
17	4	94	23
17	4	95	24
17	4	96	25
17	4	97	26
17	4	98	27
17	4	99	28
17	4	100	29
17	4	101	30
17	4	102	31
17	4	103	32
17	4	104	33
17	4	105	34
17	4	106	35
17	4	107	36
18	1	108	1
18	2	109	1
18	2	110	2
18	3	111	1
18	3	112	2
18	3	113	3
18	3	114	4
18	3	115	5
18	3	116	6
18	3	117	7
18	3	118	8
18	3	119	9
18	3	120	10
19	1	121	1
19	1	122	2
19	1	123	3
19	1	124	4
19	1	125	5
19	1	126	6
21	1	127	1
21	1	128	2
21	1	129	3
21	1	130	4
21	1	131	5
21	2	132	1
21	2	133	2
21	3	134	1
21	3	135	2
21	3	136	3
21	3	137	4
21	3	138	5
21	3	139	6
21	4	140	1
21	5	141	1
21	5	142	2
21	5	143	3
21	5	144	4
21	6	145	1
21	6	146	2
21	6	147	3
21	6	148	4
21	8	149	1
21	8	150	2
21	8	151	3
21	8	152	4
21	9	153	1
21	9	154	2
21	9	155	3
21	9	156	4
21	9	157	5
21	10	158	1
21	10	159	2
21	10	160	3
21	12	161	1
21	12	162	2
21	12	163	3
21	12	164	4
21	13	165	1
21	13	166	2
21	13	167	3
21	13	168	4
21	13	169	5
21	13	170	6
21	14	171	1
21	14	172	2
21	14	173	3
21	14	174	4
21	14	175	5
21	14	176	6
21	15	177	1
21	15	178	2
21	15	179	3
21	15	180	4
21	15	181	5
21	15	182	6
21	15	183	7
21	15	184	8
21	16	185	1
21	16	186	2
21	16	187	3
21	16	188	4
21	16	189	5
21	16	190	6
22	17	191	1
22	17	192	2
22	17	193	3
22	17	194	4
22	17	195	5
22	17	196	6
22	17	197	7
22	17	198	8
22	17	199	9
22	17	200	10
22	17	201	11
22	17	202	12
22	17	203	13
22	17	204	14
22	17	205	15
22	17	206	16
22	17	207	17
22	18	208	1
22	18	209	2
22	18	210	3
22	18	211	4
22	18	212	5
25	1	213	1
25	1	214	2
25	1	215	3
25	1	216	4
25	1	217	5
25	1	218	6
25	1	219	7
25	1	220	8
25	1	221	9
25	1	222	10
25	1	223	11
25	1	224	12
25	1	225	13
25	1	226	14
25	1	227	15
25	1	228	16
25	1	229	17
25	1	230	18
25	1	231	19
25	1	232	20
25	1	233	21
25	1	234	22
25	2	235	1
25	2	236	2
25	2	237	3
25	2	238	4
25	2	239	5
25	2	240	6
25	2	241	7
25	2	242	8
25	2	243	9
25	2	244	10
25	2	245	11
25	2	246	12
25	2	247	13
25	2	248	14
25	2	249	15
25	2	250	16
25	2	251	17
25	2	252	18
25	2	253	19
25	2	254	20
25	2	255	21
25	2	256	22
25	3	257	1
25	3	258	2
25	3	259	3
25	3	260	4
25	3	261	5
25	3	262	6
25	3	263	7
25	3	264	8
25	3	265	9
25	3	266	10
25	3	267	11
25	3	268	12
25	3	269	13
25	3	270	14
25	3	271	15
25	3	272	16
25	3	273	17
25	3	274	18
25	3	275	19
25	3	276	20
25	3	277	21
25	3	278	22
25	3	279	23
25	3	280	24
25	3	281	25
25	3	282	26
25	3	283	27
25	3	284	28
25	3	285	29
25	4	286	1
25	4	287	2
25	4	288	3
25	4	289	4
25	4	290	5
25	4	291	6
25	4	292	7
25	4	293	8
25	4	294	9
25	4	295	10
25	4	296	11
25	4	297	12
25	4	298	13
25	4	299	14
25	4	300	15
25	4	301	16
25	4	302	17
25	4	303	18
25	4	304	19
25	4	305	20
25	4	306	21
25	4	307	22
25	4	308	23
25	4	309	24
25	4	310	25
25	4	311	26
25	4	312	27
25	4	313	28
25	4	314	29
25	4	315	30
25	4	316	31
25	4	317	32
25	4	318	33
25	4	319	34
25	4	320	35
25	4	321	36
25	5	322	1
25	5	323	2
25	5	324	3
25	5	325	4
25	5	326	5
25	5	327	6
25	5	328	7
25	5	329	8
25	5	330	9
25	5	331	10
25	5	332	11
25	5	333	12
25	5	334	13
25	6	335	1
25	6	336	2
25	6	337	3
25	6	338	4
25	6	339	5
25	6	340	6
25	6	341	7
25	6	342	8
25	6	343	9
25	6	344	10
25	6	345	11
25	6	346	12
25	6	347	13
25	6	348	14
25	6	349	15
25	6	350	16
25	6	351	17
25	6	352	18
25	7	353	1
25	7	354	2
25	7	355	3
25	7	356	4
25	7	357	5
25	7	358	6
25	7	359	7
25	7	360	8
25	7	361	9
25	7	362	10
25	7	363	11
25	7	364	12
25	7	365	13
25	7	366	14
25	7	367	15
25	7	368	16
25	7	369	17
25	7	370	18
25	7	371	19
25	7	372	20
25	7	373	21
25	7	374	22
25	13	375	1
25	13	376	2
25	13	377	3
25	13	378	4
25	13	379	5
25	13	380	6
25	13	381	7
25	13	382	8
25	13	383	9
25	13	384	10
25	13	385	11
25	13	386	12
25	13	387	13
25	13	388	14
25	13	389	15
25	13	390	16
25	13	391	17
25	13	392	18
25	13	393	19
25	13	394	20
25	13	395	21
25	13	396	22
25	13	397	23
25	13	398	24
27	10	399	1
27	10	400	2
27	10	401	3
27	10	402	4
27	10	403	5
27	10	404	6
27	10	405	7
27	10	406	8
27	10	407	9
27	10	408	10
27	10	409	11
27	10	410	12
29	1	411	1
29	1	412	2
29	1	413	3
29	1	414	4
29	1	415	5
29	1	416	6
29	1	417	7
29	1	418	8
29	2	419	1
29	2	420	2
29	2	421	3
29	2	422	4
29	2	423	5
29	3	424	1
29	3	425	2
29	3	426	3
29	3	427	4
29	3	428	5
29	3	429	6
29	3	430	7
29	3	431	8
29	3	432	9
29	3	433	10
29	3	434	11
29	4	435	1
29	4	436	2
29	4	437	3
29	4	438	4
29	4	439	5
29	4	440	6
29	4	441	7
29	4	442	8
29	4	443	9
29	5	444	1
29	5	445	2
29	5	446	3
29	5	447	4
29	5	448	5
29	5	449	6
29	5	450	7
29	5	451	8
29	5	452	9
29	5	453	10
29	5	454	11
29	5	455	12
29	5	456	13
29	5	457	14
29	5	458	15
29	5	459	16
29	5	460	17
29	5	461	18
29	5	462	19
29	5	463	20
29	5	464	21
29	5	465	22
29	5	466	23
29	5	467	24
29	5	468	25
29	6	469	1
29	6	470	2
29	6	471	3
29	7	472	1
29	7	473	2
29	7	474	3
29	7	475	4
29	7	476	5
29	7	477	6
29	16	478	1
29	16	479	2
29	16	480	3
29	16	481	4
29	16	482	5
29	16	483	6
29	16	484	7
29	17	485	1
29	17	486	2
29	17	487	3
29	17	488	4
29	17	489	5
29	17	490	6
29	17	491	7
29	17	492	8
29	17	493	9
29	17	494	10
30	1	495	1
30	1	496	2
30	1	497	3
30	1	498	4
30	1	499	5
30	1	500	6
30	1	501	7
30	1	502	8
30	1	503	9
30	1	504	10
30	1	505	11
30	1	506	12
30	1	507	13
30	1	508	14
30	1	509	15
30	1	510	16
30	1	511	17
30	1	512	18
30	1	513	19
30	1	514	20
31	2	515	1
31	2	516	2
31	2	517	3
31	2	518	4
31	2	519	5
31	2	520	6
31	2	521	7
31	2	522	8
31	2	523	9
31	2	524	10
31	3	525	1
31	3	526	2
31	3	527	3
31	3	528	4
31	3	529	5
31	3	530	6
31	3	531	7
31	3	532	8
31	3	533	9
31	3	534	10
31	3	535	11
31	3	536	12
31	3	537	13
31	3	538	14
31	3	539	15
31	3	540	16
31	3	541	17
31	3	542	18
31	4	543	1
31	4	544	2
31	4	545	3
31	4	546	4
31	4	547	5
31	4	548	6
31	4	549	7
31	4	550	8
31	4	551	9
31	6	552	1
31	6	553	2
31	6	554	3
31	6	555	4
31	6	556	5
31	6	557	6
31	6	558	7
31	6	559	8
31	6	560	9
31	8	561	1
31	8	562	2
31	8	563	3
31	9	564	1
31	12	565	1
32	1	566	1
32	1	567	2
32	1	568	3
32	2	569	1
32	2	570	2
32	2	571	3
32	2	572	4
32	2	573	5
32	3	574	1
32	3	575	2
32	3	576	3
32	3	577	4
32	3	578	5
32	3	579	6
32	3	580	7
32	4	581	1
32	5	582	1
32	5	583	2
32	5	584	3
32	5	585	4
32	5	586	5
32	5	587	6
32	5	588	7
32	5	589	8
32	5	590	9
32	5	591	10
32	5	592	11
32	5	593	12
32	5	594	13
32	5	595	14
32	6	596	1
32	6	597	2
32	6	598	3
32	6	599	4
32	6	600	5
32	6	601	6
32	6	602	7
32	6	603	8
32	7	604	1
32	7	605	2
32	8	606	1
32	8	607	2
32	8	608	3
32	8	609	4
32	9	610	1
32	9	611	2
32	9	612	3
32	9	613	4
32	9	614	5
32	10	615	1
32	10	616	2
32	10	617	3
32	10	618	4
32	10	619	5
32	10	620	6
32	10	621	7
32	10	622	8
32	10	623	9
32	11	624	1
32	11	625	2
32	11	626	3
32	12	627	1
32	12	628	2
32	12	629	3
32	12	630	4
32	12	631	5
32	12	632	6
32	12	633	7
32	12	634	8
32	12	635	9
32	12	636	10
32	12	637	11
32	12	638	12
32	12	639	13
35	1	640	1
35	1	641	2
35	1	642	3
35	1	643	4
35	1	644	5
35	1	645	6
35	1	646	7
35	1	647	8
35	1	648	9
35	1	649	10
35	1	650	11
35	1	651	12
35	1	652	13
35	1	653	14
35	1	654	15
35	1	655	16
35	1	656	17
35	1	657	18
35	1	658	19
35	1	659	20
35	1	660	21
35	1	661	22
35	1	662	23
35	1	663	24
35	1	664	25
35	1	665	26
35	1	666	27
35	2	667	1
35	2	668	2
35	2	669	3
35	2	670	4
35	2	671	5
35	2	672	6
35	2	673	7
35	3	674	1
35	3	675	2
35	3	676	3
35	3	677	4
35	3	678	5
35	3	679	6
35	3	680	7
35	3	681	8
35	3	682	9
35	3	683	10
35	3	684	11
35	3	685	12
35	5	686	1
35	5	687	2
35	5	688	3
35	5	689	4
35	5	690	5
35	5	691	6
35	5	692	7
35	5	693	8
36	1	694	1
36	1	695	2
36	1	696	3
36	1	697	4
36	1	698	5
36	1	699	6
36	1	700	7
36	2	701	1
36	2	702	2
36	2	703	3
36	2	704	4
36	2	705	5
36	2	706	6
36	2	707	7
36	2	708	8
36	2	709	9
36	2	710	10
36	3	711	1
36	3	712	2
36	3	713	3
36	3	714	4
36	3	715	5
36	3	716	6
36	3	717	7
36	3	718	8
36	3	719	9
36	3	720	10
36	4	721	1
36	4	722	2
36	5	723	1
36	5	724	2
36	5	725	3
36	5	726	4
36	5	727	5
36	5	728	6
36	5	729	7
36	5	730	8
36	5	731	9
36	5	732	10
36	5	733	11
36	7	734	1
36	7	735	2
36	7	736	3
36	7	737	4
36	7	738	5
36	7	739	6
36	8	740	1
36	8	741	2
36	8	742	3
36	8	743	4
36	8	744	5
36	8	745	6
36	9	746	1
36	9	747	2
36	9	748	3
36	14	749	1
36	14	750	2
36	14	751	3
36	14	752	4
36	14	753	5
36	14	754	6
36	14	755	7
36	14	756	8
36	14	757	9
36	14	758	10
36	14	759	11
36	14	760	12
36	14	761	13
36	14	762	14
36	15	763	1
36	16	764	1
36	22	765	1
36	22	766	2
36	22	767	3
36	22	768	4
36	22	769	5
36	23	770	1
36	23	771	2
36	23	772	3
36	23	773	4
36	23	774	5
36	23	775	6
36	23	776	7
36	23	777	8
36	23	778	9
36	23	779	10
36	23	780	11
36	23	781	12
36	23	782	13
36	23	783	14
36	23	784	15
36	23	785	16
36	23	786	17
36	24	787	1
36	25	788	1
39	1	789	1
39	1	790	2
39	1	791	3
39	1	792	4
39	2	793	1
39	2	794	2
39	2	795	3
39	2	796	4
39	2	797	5
40	1	798	1
40	1	799	2
40	1	800	3
40	1	801	4
40	1	802	5
40	1	803	6
40	1	804	7
40	1	805	8
40	1	806	9
40	1	807	10
40	1	808	11
40	1	809	12
40	1	810	13
40	1	811	14
40	1	812	15
40	1	813	16
40	1	814	17
40	1	815	18
40	1	816	19
40	1	817	20
40	1	818	21
41	1	819	1
42	1	820	1
42	1	821	2
42	1	822	3
42	1	823	4
42	1	824	5
42	1	825	6
42	1	826	7
42	1	827	8
42	1	828	9
42	1	829	10
42	1	830	11
42	1	831	12
42	1	832	13
42	1	833	14
42	2	834	1
42	2	835	2
42	2	836	3
42	2	837	4
42	2	838	5
42	2	839	6
42	2	840	7
42	2	841	8
42	2	842	9
42	2	843	10
42	2	844	11
42	2	845	12
42	2	846	13
42	2	847	14
42	2	848	15
42	2	849	16
42	2	850	17
42	2	851	18
42	2	852	19
42	2	853	20
42	2	854	21
42	2	855	22
42	2	856	23
42	2	857	24
42	2	858	25
42	2	859	26
42	2	860	27
42	2	861	28
42	2	862	29
42	2	863	30
42	2	864	31
42	2	865	32
42	2	866	33
42	2	867	34
42	2	868	35
42	2	869	36
42	2	870	37
42	2	871	38
42	2	872	39
42	2	873	40
42	2	874	41
42	2	875	42
42	2	876	43
42	2	877	44
42	2	878	45
42	2	879	46
42	2	880	47
42	2	881	48
42	2	882	49
42	2	883	50
42	2	884	51
42	2	885	52
42	2	886	53
42	2	887	54
42	2	888	55
42	2	889	56
42	2	890	57
42	13	891	1
42	13	892	2
42	13	893	3
42	13	894	4
43	1	895	1
43	1	896	2
43	2	897	1
43	2	898	2
43	2	899	3
43	2	900	4
43	2	901	5
43	3	902	1
43	3	903	2
43	3	904	3
43	3	905	4
43	3	906	5
43	3	907	6
43	3	908	7
43	3	909	8
43	3	910	9
43	3	911	10
43	3	912	11
43	3	913	12
43	3	914	13
43	3	915	14
43	3	916	15
43	4	917	1
43	4	918	2
43	4	919	3
43	7	920	1
43	7	921	2
43	7	922	3
43	8	923	1
43	8	924	2
43	8	925	3
43	8	926	4
43	8	927	5
43	8	928	6
43	9	929	1
43	10	930	1
43	11	931	1
43	11	932	2
43	12	933	1
43	12	934	2
43	12	935	3
43	12	936	4
43	13	937	1
43	14	938	1
43	14	939	2
43	15	940	1
43	16	941	1
43	17	942	1
43	17	943	2
43	18	944	1
43	18	945	2
43	19	946	1
43	19	947	2
43	19	948	3
43	19	949	4
43	20	950	1
43	20	951	2
43	20	952	3
43	20	953	4
43	20	954	5
43	20	955	6
43	20	956	7
43	20	957	8
43	20	958	9
43	20	959	10
43	20	960	11
43	20	961	12
43	21	962	1
43	21	963	2
43	21	964	3
43	22	965	1
43	23	966	1
43	23	967	2
43	23	968	3
43	24	969	1
43	24	970	2
43	24	971	3
43	24	972	4
43	24	973	5
43	24	974	6
43	24	975	7
43	25	976	1
43	25	977	2
43	25	978	3
43	26	979	1
43	26	980	2
43	26	981	3
43	26	982	4
43	26	983	5
43	27	984	1
44	2	985	1
44	2	986	2
44	3	987	1
44	3	988	2
44	3	989	3
44	3	990	4
44	3	991	5
44	3	992	6
44	3	993	7
45	1	994	1
45	1	995	2
45	1	996	3
45	1	997	4
45	1	998	5
45	1	999	6
45	1	1000	7
45	1	1001	8
45	1	1002	9
45	2	1003	1
45	2	1004	2
45	2	1005	3
45	2	1006	4
45	2	1007	5
45	2	1008	6
47	1	1009	1
47	1	1010	2
47	1	1011	3
47	1	1012	4
47	1	1013	5
47	1	1014	6
47	1	1015	7
47	1	1016	8
47	1	1017	9
47	1	1018	10
47	1	1019	11
47	1	1020	12
47	1	1021	13
47	1	1022	14
47	1	1023	15
47	1	1024	16
47	1	1025	17
47	1	1026	18
47	1	1027	19
47	1	1028	20
48	1	1029	1
48	1	1030	2
48	1	1031	3
48	1	1032	4
48	1	1033	5
48	1	1034	6
48	1	1035	7
48	1	1036	8
49	1	1037	1
49	1	1038	2
49	1	1039	3
49	1	1040	4
49	1	1041	5
49	1	1042	6
49	1	1043	7
49	1	1044	8
49	1	1045	9
49	1	1046	10
49	1	1047	11
49	1	1048	12
49	1	1049	13
49	1	1050	14
49	1	1051	15
49	1	1052	16
49	1	1053	17
49	1	1054	18
49	1	1055	19
49	1	1056	20
49	1	1057	21
49	1	1058	22
49	1	1059	23
49	1	1060	24
49	1	1061	25
49	1	1062	26
49	1	1063	27
49	2	1064	1
49	2	1065	2
49	2	1066	3
49	2	1067	4
49	2	1068	5
49	2	1069	6
49	2	1070	7
49	4	1071	1
49	4	1072	2
49	4	1073	3
49	4	1074	4
49	4	1075	5
49	4	1076	6
49	4	1077	7
49	4	1078	8
49	4	1079	9
49	4	1080	10
49	4	1081	11
49	4	1082	12
49	4	1083	13
49	4	1084	14
49	4	1085	15
49	4	1086	16
49	4	1087	17
49	4	1088	18
49	4	1089	19
49	4	1090	20
49	4	1091	21
49	4	1092	22
49	4	1093	23
49	4	1094	24
49	4	1095	25
49	4	1096	26
49	4	1097	27
49	4	1098	28
49	4	1099	29
49	4	1100	30
50	15	1101	1
50	15	1102	2
50	15	1103	3
51	1	1104	1
51	1	1105	2
51	1	1106	3
51	1	1107	4
51	1	1108	5
51	1	1109	6
51	1	1110	7
51	1	1111	8
51	1	1112	9
51	1	1113	10
51	1	1114	11
51	1	1115	12
51	1	1116	13
51	1	1117	14
51	1	1118	15
51	1	1119	16
51	1	1120	17
51	1	1121	18
51	1	1122	19
51	1	1123	20
51	1	1124	21
51	1	1125	22
51	1	1126	23
51	1	1127	24
51	1	1128	25
51	1	1129	26
51	1	1130	27
51	1	1131	28
51	1	1132	29
51	1	1133	30
51	1	1134	31
51	1	1135	32
51	1	1136	33
51	1	1137	34
51	1	1138	35
51	1	1139	36
51	1	1140	37
51	1	1141	38
51	1	1142	39
51	1	1143	40
51	1	1144	41
51	1	1145	42
51	1	1146	43
51	1	1147	44
51	1	1148	45
51	1	1149	46
51	1	1150	47
51	1	1151	48
51	1	1152	49
51	1	1153	50
51	1	1154	51
51	1	1155	52
52	1	1156	1
52	1	1157	2
52	1	1158	3
52	2	1159	1
52	2	1160	2
52	2	1161	3
52	2	1162	4
52	2	1163	5
52	2	1164	6
52	2	1165	7
52	2	1166	8
53	1	1167	1
53	1	1168	2
53	1	1169	3
53	1	1170	4
54	2	1171	1
54	3	1172	1
54	3	1173	2
54	3	1174	3
54	3	1175	4
54	3	1176	5
54	3	1177	6
54	3	1178	7
54	3	1179	8
54	3	1180	9
54	3	1181	10
54	3	1182	11
54	3	1183	12
54	3	1184	13
54	3	1185	14
54	3	1186	15
54	3	1187	16
54	3	1188	17
54	3	1189	18
54	3	1190	19
54	3	1191	20
54	3	1192	21
54	3	1193	22
54	3	1194	23
54	3	1195	24
54	3	1196	25
54	3	1197	26
54	4	1198	1
54	4	1199	2
54	4	1200	3
54	4	1201	4
54	4	1202	5
54	4	1203	6
54	4	1204	7
54	5	1205	1
54	5	1206	2
54	5	1207	3
54	5	1208	4
54	5	1209	5
54	5	1210	6
54	5	1211	7
54	5	1212	8
54	5	1213	9
54	5	1214	10
54	5	1215	11
54	5	1216	12
54	5	1217	13
54	5	1218	14
54	5	1219	15
54	5	1220	16
54	5	1221	17
54	5	1222	18
54	5	1223	19
54	5	1224	20
54	5	1225	21
54	5	1226	22
54	5	1227	23
54	5	1228	24
54	5	1229	25
54	5	1230	26
54	5	1231	27
54	5	1232	28
54	5	1233	29
54	5	1234	30
54	5	1235	31
54	5	1236	32
54	5	1237	33
54	18	1238	1
54	18	1239	2
54	18	1240	3
54	18	1241	4
54	18	1242	5
54	18	1243	6
54	18	1244	7
54	18	1245	8
54	18	1246	9
54	18	1247	10
54	18	1248	11
54	18	1249	12
54	18	1250	13
54	18	1251	14
54	18	1252	15
54	18	1253	16
55	4	1254	1
55	4	1255	2
55	4	1256	3
55	4	1257	4
55	4	1258	5
55	4	1259	6
55	4	1260	7
55	4	1261	8
55	4	1262	9
55	4	1263	10
55	6	1264	1
55	6	1265	2
55	6	1266	3
55	6	1267	4
55	6	1268	5
55	6	1269	6
55	6	1270	7
55	6	1271	8
55	6	1272	9
55	6	1273	10
55	6	1274	11
55	6	1275	12
55	6	1276	13
55	6	1277	14
55	6	1278	15
55	7	1279	1
55	7	1280	2
55	7	1281	3
55	7	1282	4
55	7	1283	5
55	8	1284	1
55	8	1285	2
55	8	1286	3
55	8	1287	4
55	8	1288	5
55	8	1289	6
55	8	1290	7
55	8	1291	8
55	8	1292	9
55	8	1293	10
55	8	1294	11
55	8	1295	12
55	10	1296	1
55	10	1297	2
55	10	1298	3
55	10	1299	4
55	10	1300	5
55	10	1301	6
55	10	1302	7
55	10	1303	8
55	10	1304	9
55	10	1305	10
55	10	1306	11
55	10	1307	12
55	10	1308	13
55	10	1309	14
55	10	1310	15
55	10	1311	16
55	10	1312	17
55	10	1313	18
55	10	1314	19
55	10	1315	20
55	10	1316	21
55	10	1317	22
55	10	1318	23
55	10	1319	24
55	10	1320	25
55	10	1321	26
55	10	1322	27
55	10	1323	28
55	10	1324	29
55	10	1325	30
55	10	1326	31
55	10	1327	32
55	10	1328	33
55	10	1329	34
55	13	1330	1
55	13	1331	2
55	13	1332	3
55	13	1333	4
55	13	1334	5
55	13	1335	6
55	13	1336	7
55	13	1337	8
55	13	1338	9
55	13	1339	10
55	13	1340	11
55	13	1341	12
55	15	1342	1
55	15	1343	2
55	15	1344	3
55	15	1345	4
55	15	1346	5
55	15	1347	6
55	15	1348	7
55	15	1349	8
55	15	1350	9
55	15	1351	10
55	15	1352	11
55	15	1353	12
55	15	1354	13
55	15	1355	14
56	1	1356	1
56	1	1357	2
56	1	1358	3
56	1	1359	4
56	1	1360	5
56	1	1361	6
56	1	1362	7
56	1	1363	8
56	1	1364	9
56	1	1365	10
56	1	1366	11
56	1	1367	12
56	1	1368	13
56	1	1369	14
56	1	1370	15
56	1	1371	16
56	1	1372	17
56	1	1373	18
56	1	1374	19
56	1	1375	20
56	1	1376	21
56	2	1377	1
56	2	1378	2
56	2	1379	3
56	2	1380	4
56	2	1381	5
56	2	1382	6
56	2	1383	7
56	2	1384	8
56	2	1385	9
56	2	1386	10
56	2	1387	11
56	2	1388	12
56	2	1389	13
56	2	1390	14
56	2	1391	15
56	2	1392	16
56	2	1393	17
56	2	1394	18
56	2	1395	19
56	2	1396	20
56	2	1397	21
56	2	1398	22
56	2	1399	23
56	2	1400	24
56	2	1401	25
56	2	1402	26
56	2	1403	27
56	2	1404	28
56	2	1405	29
56	2	1406	30
56	2	1407	31
56	2	1408	32
56	2	1409	33
56	2	1410	34
56	2	1411	35
56	2	1412	36
56	2	1413	37
56	2	1414	38
56	2	1415	39
56	2	1416	40
56	2	1417	41
56	2	1418	42
56	2	1419	43
56	2	1420	44
56	2	1421	45
56	2	1422	46
56	3	1423	1
56	3	1424	2
56	3	1425	3
56	3	1426	4
56	3	1427	5
56	3	1428	6
56	3	1429	7
56	3	1430	8
56	3	1431	9
56	3	1432	10
56	3	1433	11
56	3	1434	12
56	3	1435	13
56	3	1436	14
56	3	1437	15
56	3	1438	16
56	3	1439	17
56	3	1440	18
56	3	1441	19
56	3	1442	20
56	3	1443	21
56	3	1444	22
56	3	1445	23
56	3	1446	24
56	3	1447	25
56	3	1448	26
56	3	1449	27
56	3	1450	28
56	4	1451	1
56	4	1452	2
56	4	1453	3
56	4	1454	4
56	4	1455	5
56	4	1456	6
56	4	1457	7
56	4	1458	8
56	4	1459	9
56	4	1460	10
56	4	1461	11
56	4	1462	12
56	4	1463	13
56	4	1464	14
56	4	1465	15
56	4	1466	16
56	7	1467	1
56	7	1468	2
56	7	1469	3
56	7	1470	4
56	7	1471	5
56	7	1472	6
56	7	1473	7
56	7	1474	8
56	7	1475	9
56	7	1476	10
56	7	1477	11
56	7	1478	12
56	7	1479	13
56	7	1480	14
56	12	1481	1
56	12	1482	2
56	12	1483	3
56	12	1484	4
56	12	1485	5
56	12	1486	6
56	12	1487	7
56	12	1488	8
56	12	1489	9
58	1	1490	1
58	1	1491	2
58	1	1492	3
58	1	1493	4
58	1	1494	5
58	1	1495	6
58	1	1496	7
58	1	1497	8
58	1	1498	9
58	1	1499	10
58	1	1500	11
58	3	1515	1
58	3	1516	2
58	3	1517	3
58	4	1518	1
58	4	1519	2
58	4	1520	3
58	4	1521	4
58	4	1522	5
58	5	1523	1
58	5	1524	2
58	5	1525	3
58	5	1526	4
58	5	1527	5
58	5	1528	6
58	5	1529	7
58	5	1530	8
58	5	1531	9
58	5	1532	10
58	5	1533	11
58	5	1534	12
58	5	1535	13
58	5	1536	14
58	5	1537	15
58	5	1538	16
58	5	1539	17
58	5	1540	18
58	5	1541	19
58	5	1542	20
58	5	1543	21
58	5	1544	22
58	5	1545	23
58	5	1546	24
58	5	1547	25
58	5	1548	26
58	5	1549	27
58	5	1550	28
58	5	1551	29
58	5	1552	30
58	6	1553	1
58	6	1554	2
58	6	1555	3
58	6	1556	4
58	6	1557	5
58	6	1558	6
58	6	1559	7
58	7	1560	1
58	7	1561	2
58	7	1562	3
58	7	1563	4
58	7	1564	5
58	7	1565	6
58	7	1566	7
58	7	1567	8
58	7	1568	9
58	7	1569	10
58	7	1570	11
58	7	1571	12
58	7	1572	13
58	7	1573	14
58	7	1574	15
58	7	1575	16
58	7	1576	17
58	7	1577	18
58	7	1578	19
58	7	1579	20
58	7	1580	21
58	7	1581	22
58	8	1582	1
58	8	1583	2
58	8	1584	3
58	8	1585	4
58	8	1586	5
58	8	1587	6
58	8	1588	7
58	8	1589	8
58	8	1590	9
58	8	1591	10
58	8	1592	11
58	8	1593	12
58	8	1594	13
58	8	1595	14
58	8	1596	15
58	8	1597	16
58	8	1598	17
58	8	1599	18
58	8	1600	19
58	8	1601	20
58	8	1602	21
58	9	1603	1
58	9	1604	2
58	9	1605	3
58	9	1606	4
58	9	1607	5
58	9	1608	6
58	9	1609	7
58	9	1610	8
58	9	1611	9
58	9	1612	10
58	9	1613	11
58	9	1614	12
58	9	1615	13
58	9	1616	14
58	9	1617	15
58	9	1618	16
58	9	1619	17
58	9	1620	18
58	9	1621	19
58	9	1622	20
58	9	1623	21
58	10	1624	1
58	10	1625	2
58	10	1626	3
58	10	1627	4
58	10	1628	5
58	10	1629	6
58	10	1630	7
58	10	1631	8
58	10	1632	9
58	10	1633	10
58	10	1634	11
58	10	1635	12
58	10	1636	13
58	10	1637	14
58	10	1638	15
58	10	1639	16
58	10	1640	17
58	10	1641	18
58	10	1642	19
58	11	1643	1
58	11	1644	2
58	11	1645	3
58	11	1646	4
58	11	1647	5
58	11	1648	6
58	11	1649	7
58	11	1650	8
58	12	1651	1
58	12	1652	2
58	12	1653	3
58	12	1654	4
58	12	1655	5
58	12	1656	6
58	12	1657	7
58	12	1658	8
58	12	1659	9
58	12	1660	10
58	12	1661	11
58	12	1662	12
58	12	1663	13
58	12	1664	14
58	12	1665	15
58	12	1666	16
58	12	1667	17
58	12	1668	18
58	12	1669	19
58	12	1670	20
58	12	1671	21
58	12	1672	22
58	12	1673	23
58	12	1674	24
58	2	1501	1
58	2	1502	2
58	2	1503	3
58	12	1675	25
58	13	1676	1
58	13	1677	2
58	13	1678	3
58	13	1679	4
58	13	1680	5
58	13	1681	6
58	13	1682	7
58	13	1683	8
58	13	1684	9
58	13	1685	10
58	13	1686	11
58	13	1687	12
58	13	1688	13
58	13	1689	14
58	13	1690	15
58	13	1691	16
58	13	1692	17
58	14	1693	1
58	14	1694	2
58	14	1695	3
58	14	1696	4
58	14	1697	5
58	14	1698	6
58	14	1699	7
58	14	1700	8
58	14	1701	9
58	14	1702	10
58	14	1703	11
58	14	1704	12
58	14	1705	13
58	15	1706	1
58	15	1707	2
58	15	1708	3
58	15	1709	4
58	16	1710	1
58	16	1711	2
58	16	1712	3
58	17	1713	1
58	17	1714	2
58	17	1715	3
58	17	1716	4
59	1	1717	1
59	1	1718	2
59	1	1719	3
59	1	1720	4
59	1	1721	5
59	1	1722	6
59	1	1723	7
59	1	1724	8
59	1	1725	9
59	1	1726	10
59	1	1727	11
59	1	1728	12
59	1	1729	13
59	1	1730	14
59	1	1731	15
59	1	1732	16
61	1	1733	1
61	1	1734	2
61	1	1735	3
61	1	1736	4
61	1	1737	5
61	1	1738	6
61	1	1739	7
61	1	1740	8
61	1	1741	9
61	1	1742	10
61	1	1743	11
61	1	1744	12
61	1	1745	13
61	1	1746	14
61	1	1747	15
61	1	1748	16
61	1	1749	17
61	1	1750	18
61	1	1751	19
61	1	1752	20
62	1	1753	1
62	1	1754	2
62	1	1755	3
62	1	1756	4
62	1	1757	5
62	1	1758	6
62	1	1759	7
62	9	1760	1
62	9	1761	2
62	10	1762	1
62	15	1763	1
62	15	1764	2
62	20	1765	1
62	20	1766	2
62	20	1767	3
62	20	1768	4
62	20	1769	5
62	20	1770	6
62	20	1771	7
62	20	1772	8
62	20	1773	9
62	20	1774	10
62	20	1775	11
62	20	1776	12
62	20	1777	13
62	20	1778	14
62	20	1779	15
62	20	1780	16
62	20	1781	17
62	20	1782	18
62	20	1783	19
62	20	1784	20
62	20	1785	21
62	20	1786	22
62	20	1787	23
62	20	1788	24
62	20	1789	25
62	20	1790	26
62	20	1791	27
62	20	1792	28
62	20	1793	29
62	20	1794	30
62	20	1795	31
62	20	1796	32
62	20	1797	33
62	20	1798	34
62	20	1799	35
62	20	1800	36
62	20	1801	37
62	20	1802	38
62	20	1803	39
62	20	1804	40
62	20	1805	41
62	20	1806	42
62	20	1807	43
62	20	1808	44
62	20	1809	45
62	20	1810	46
62	20	1811	47
62	20	1812	48
62	20	1813	49
62	20	1814	50
62	20	1815	51
62	20	1816	52
62	20	1817	53
62	20	1818	54
62	20	1819	55
62	20	1820	56
62	20	1821	57
62	20	1822	58
62	20	1823	59
62	20	1824	60
62	20	1825	61
62	20	1826	62
62	20	1827	63
62	20	1828	64
62	20	1829	65
62	20	1830	66
62	20	1831	67
62	20	1832	68
62	20	1833	69
62	20	1834	70
62	20	1835	71
62	20	1836	72
62	20	1837	73
62	20	1838	74
62	20	1839	75
63	1	1840	1
63	1	1841	2
63	1	1842	3
63	1	1843	4
63	1	1844	5
65	1	1845	1
65	1	1846	2
65	1	1847	3
65	1	1848	4
65	1	1849	5
65	1	1850	6
65	1	1851	7
65	1	1852	8
65	1	1853	9
65	1	1854	10
65	1	1855	11
65	1	1856	12
65	1	1857	13
65	1	1858	14
65	1	1859	15
65	1	1860	16
65	1	1861	17
65	1	1862	18
65	1	1863	19
65	1	1864	20
65	1	1865	21
65	1	1866	22
65	1	1867	23
65	1	1868	24
65	1	1869	25
65	1	1870	26
65	1	1871	27
65	1	1872	28
65	2	1873	1
65	2	1874	2
65	2	1875	3
65	2	1876	4
65	2	1877	5
65	2	1878	6
65	2	1879	7
65	2	1880	8
65	2	1881	9
65	2	1882	10
65	2	1883	11
65	2	1884	12
65	2	1885	13
65	2	1886	14
65	2	1887	15
65	2	1888	16
65	2	1889	17
65	2	1890	18
65	2	1891	19
65	2	1892	20
65	2	1893	21
65	2	1894	22
65	2	1895	23
65	2	1896	24
65	2	1897	25
65	2	1898	26
65	2	1899	27
65	2	1900	28
65	2	1901	29
65	2	1902	30
65	2	1903	31
65	2	1904	32
65	2	1905	33
65	2	1906	34
65	2	1907	35
65	2	1908	36
65	2	1909	37
65	2	1910	38
65	2	1911	39
65	2	1912	40
65	2	1913	41
65	2	1914	42
65	2	1915	43
65	3	1916	1
65	3	1917	2
65	3	1918	3
65	3	1919	4
65	3	1920	5
65	3	1921	6
65	3	1922	7
65	3	1923	8
65	3	1924	9
65	3	1925	10
65	3	1926	11
65	3	1927	12
65	3	1928	13
65	3	1929	14
65	3	1930	15
65	3	1931	16
65	3	1932	17
65	3	1933	18
65	3	1934	19
65	3	1935	20
65	3	1936	21
65	3	1937	22
65	3	1938	23
65	3	1939	24
65	3	1940	25
65	3	1941	26
65	3	1942	27
65	3	1943	28
65	3	1944	29
67	1	1945	1
67	1	1946	2
67	1	1947	3
67	1	1948	4
67	1	1949	5
67	1	1950	6
67	1	1951	7
67	1	1952	8
67	1	1953	9
67	1	1954	10
67	1	1955	11
67	1	1956	12
67	2	1957	1
67	2	1958	2
67	2	1959	3
67	2	1960	4
67	2	1961	5
67	2	1962	6
67	2	1963	7
67	2	1964	8
67	2	1965	9
67	2	1966	10
67	2	1967	11
67	2	1968	12
67	2	1969	13
67	2	1970	14
67	2	1971	15
67	2	1972	16
67	2	1973	17
67	2	1974	18
67	2	1975	19
67	2	1976	20
67	2	1977	21
67	2	1978	22
67	2	1979	23
67	3	1980	1
67	3	1981	2
67	3	1982	3
67	3	1983	4
67	3	1984	5
67	3	1985	6
67	3	1986	7
67	3	1987	8
67	3	1988	9
67	3	1989	10
67	3	1990	11
67	3	1991	12
67	3	1992	13
67	3	1993	14
67	3	1994	15
67	3	1995	16
67	3	1996	17
67	3	1997	18
67	3	1998	19
67	3	1999	20
67	4	2000	1
67	4	2001	2
67	4	2002	3
67	4	2003	4
67	4	2004	5
67	4	2005	6
67	4	2006	7
67	4	2007	8
67	4	2008	9
67	4	2009	10
67	4	2010	11
67	4	2011	12
67	4	2012	13
67	4	2013	14
67	4	2014	15
67	4	2015	16
69	1	2016	1
69	1	2017	2
69	1	2018	3
69	1	2020	5
69	3	2021	1
71	1	2022	1
71	2	2023	1
71	2	2024	2
71	2	2025	3
71	2	2026	4
71	2	2027	5
71	2	2028	6
71	2	2029	7
71	2	2030	8
71	2	2031	9
71	3	2032	1
71	3	2033	2
71	3	2034	3
71	3	2035	4
71	3	2036	5
71	3	2037	6
71	3	2038	7
71	3	2039	8
76	1	2040	1
76	1	2041	2
76	1	2042	3
76	2	2043	1
76	8	2044	1
77	1	2045	1
77	1	2046	2
77	1	2047	3
77	1	2048	4
81	1	2049	1
81	1	2050	2
81	2	2051	1
81	2	2052	2
81	2	2053	3
81	2	2054	4
81	2	2055	5
81	2	2056	6
81	2	2057	7
81	2	2058	8
81	2	2059	9
81	2	2060	10
81	2	2061	11
81	2	2062	12
81	2	2063	13
81	3	2064	1
81	3	2065	2
81	3	2066	3
81	3	2067	4
81	3	2068	5
81	4	2069	1
81	4	2070	2
81	4	2071	3
81	4	2072	4
81	4	2073	5
81	4	2074	6
81	4	2075	7
81	4	2076	8
81	4	2077	9
81	4	2078	10
81	4	2079	11
81	4	2080	12
81	4	2081	13
81	4	2082	14
81	4	2083	15
81	4	2084	16
81	4	2085	17
81	4	2086	18
81	4	2087	19
81	4	2088	20
81	4	2089	21
81	5	2090	1
81	5	2091	2
81	5	2092	3
81	5	2093	4
81	5	2094	5
81	5	2095	6
81	5	2096	7
81	5	2097	8
81	5	2098	9
81	5	2099	10
81	5	2100	11
81	5	2101	12
81	5	2102	13
81	5	2103	14
81	5	2104	15
81	5	2105	16
81	5	2106	17
81	6	2107	1
81	6	2108	2
81	6	2109	3
81	6	2110	4
81	7	2111	1
81	7	2112	2
81	7	2113	3
81	7	2114	4
81	7	2115	5
81	7	2116	6
81	7	2117	7
81	8	2118	1
81	8	2119	2
81	8	2120	3
81	8	2121	4
81	8	2122	5
81	8	2123	6
81	8	2124	7
81	8	2125	8
81	8	2126	9
81	8	2127	10
81	8	2128	11
81	8	2129	12
81	8	2130	13
81	9	2131	1
81	9	2132	2
81	9	2133	3
81	9	2134	4
81	10	2135	1
81	10	2136	2
81	10	2137	3
81	10	2138	4
81	10	2139	5
81	10	2140	6
81	10	2141	7
81	10	2142	8
81	10	2143	9
81	10	2144	10
81	10	2145	11
81	10	2146	12
81	10	2147	13
81	12	2148	1
81	12	2149	2
81	12	2150	3
81	12	2151	4
81	12	2152	5
81	12	2153	6
81	12	2154	7
81	12	2155	8
81	12	2156	9
81	12	2157	10
81	12	2158	11
81	12	2159	12
81	12	2160	13
81	12	2161	14
81	12	2162	15
81	12	2163	16
81	12	2164	17
81	12	2165	18
81	12	2166	19
81	12	2167	20
81	12	2168	21
81	12	2169	22
81	12	2170	23
81	12	2171	24
81	13	2172	1
82	1	2173	1
82	1	2174	2
82	1	2175	3
82	1	2176	4
82	1	2177	5
82	1	2178	6
82	1	2179	7
82	1	2180	8
82	1	2181	9
82	1	2182	10
82	1	2183	11
82	1	2184	12
82	1	2185	13
82	1	2186	14
82	1	2187	15
82	1	2188	16
82	1	2189	17
82	1	2190	18
82	1	2191	19
82	1	2192	20
82	1	2193	21
82	1	2194	22
82	1	2195	23
82	1	2196	24
82	1	2197	25
82	1	2198	26
82	1	2199	27
82	1	2200	28
82	1	2201	29
82	1	2202	30
82	1	2203	31
82	1	2204	32
82	1	2205	33
82	1	2206	34
82	1	2207	35
82	1	2208	36
82	1	2209	37
82	1	2210	38
82	1	2211	39
82	1	2212	40
82	1	2213	41
82	1	2214	42
82	1	2215	43
82	1	2216	44
82	1	2217	45
82	1	2218	46
82	1	2219	47
82	1	2220	48
82	1	2221	49
82	1	2222	50
82	1	2223	51
82	1	2224	52
82	1	2225	53
82	1	2226	54
82	1	2227	55
82	1	2228	56
82	1	2229	57
82	1	2230	58
82	1	2231	59
82	1	2232	60
82	1	2233	61
82	1	2234	62
82	1	2235	63
82	1	2236	64
82	1	2237	65
82	1	2238	66
82	1	2239	67
82	1	2240	68
82	1	2241	69
82	1	2242	70
82	1	2243	71
82	1	2244	72
82	1	2245	73
82	1	2246	74
82	1	2247	75
82	1	2248	76
82	1	2249	77
82	1	2250	78
82	1	2251	79
82	1	2252	80
82	1	2253	81
82	1	2254	82
82	1	2255	83
82	1	2256	84
82	1	2257	85
82	1	2258	86
82	1	2259	87
82	1	2260	88
82	1	2261	89
82	1	2262	90
82	1	2263	91
82	1	2264	92
82	1	2265	93
82	1	2266	94
82	1	2267	95
82	1	2268	96
82	1	2269	97
82	1	2270	98
82	1	2271	99
82	1	2272	100
82	1	2273	101
82	1	2274	102
82	1	2275	103
82	1	2276	104
82	1	2277	105
82	1	2278	106
82	1	2279	107
82	1	2280	108
83	1	2281	1
83	1	2282	2
83	4	2283	1
84	1	2284	1
84	1	2285	2
84	1	2286	3
84	1	2287	4
84	1	2288	5
84	1	2289	6
84	1	2290	7
84	1	2291	8
84	1	2292	9
84	1	2293	10
84	1	2294	11
84	1	2295	12
84	1	2296	13
84	1	2297	14
84	1	2298	15
84	1	2299	16
84	1	2300	17
84	1	2301	18
84	1	2302	19
84	1	2303	20
84	1	2304	21
84	1	2305	22
84	1	2306	23
84	1	2307	24
84	1	2308	25
84	1	2309	26
84	1	2310	27
84	1	2311	28
84	1	2312	29
84	1	2313	30
84	1	2314	31
84	1	2315	32
84	1	2316	33
84	1	2317	34
84	1	2318	35
84	1	2319	36
84	1	2320	37
84	1	2321	38
84	1	2322	39
84	1	2323	40
84	1	2324	41
84	1	2325	42
84	1	2326	43
84	1	2327	44
84	1	2328	45
84	2	2329	1
84	2	2330	2
84	2	2331	3
84	2	2332	4
84	2	2333	5
84	2	2334	6
84	2	2335	7
84	2	2336	8
84	2	2337	9
84	2	2338	10
84	2	2339	11
84	2	2340	12
84	2	2341	13
84	2	2342	14
84	2	2343	15
84	2	2344	16
84	2	2345	17
84	2	2346	18
84	2	2347	19
84	2	2348	20
84	2	2349	21
84	2	2350	22
84	2	2351	23
84	2	2352	24
84	2	2353	25
84	2	2354	26
84	2	2355	27
84	2	2356	28
84	2	2357	29
84	2	2358	30
84	2	2359	31
85	1	2360	1
85	1	2361	2
85	1	2362	3
85	1	2363	4
85	1	2364	5
85	1	2365	6
85	1	2366	7
85	1	2367	8
85	1	2368	9
85	1	2369	10
85	1	2370	11
85	1	2371	12
85	1	2372	13
85	1	2373	14
85	1	2374	15
85	1	2375	16
85	1	2376	17
85	1	2377	18
85	1	2378	19
85	1	2379	20
85	1	2380	21
85	1	2381	22
85	1	2382	23
85	1	2383	24
85	1	2384	25
85	1	2385	26
86	4	2386	1
86	4	2387	2
86	4	2388	3
86	4	2389	4
86	4	2390	5
86	4	2391	6
86	4	2392	7
86	4	2393	8
86	4	2394	9
86	4	2395	10
86	4	2396	11
86	4	2397	12
86	4	2398	13
86	4	2399	14
86	4	2400	15
86	4	2401	16
86	4	2402	17
86	4	2403	18
86	4	2404	19
86	4	2405	20
86	4	2406	21
86	4	2407	22
86	4	2408	23
86	4	2409	24
86	4	2410	25
86	4	2411	26
86	4	2412	27
86	4	2413	28
86	4	2414	29
86	4	2415	30
86	4	2416	31
86	4	2417	32
86	4	2418	33
86	4	2419	34
86	4	2420	35
86	4	2421	36
86	4	2422	37
86	4	2423	38
86	4	2424	39
86	4	2425	40
86	4	2426	41
86	4	2427	42
86	4	2428	43
86	4	2429	44
86	4	2430	45
86	4	2431	46
86	5	2432	1
86	5	2433	2
86	5	2434	3
86	5	2435	4
86	5	2436	5
86	5	2437	6
86	5	2438	7
86	5	2439	8
86	5	2440	9
86	5	2441	10
86	5	2442	11
86	5	2443	12
86	5	2444	13
86	5	2445	14
86	5	2446	15
86	5	2447	16
86	6	2448	1
86	6	2449	2
87	1	2450	1
87	1	2451	2
87	1	2452	3
87	1	2453	4
87	1	2454	5
87	1	2455	6
87	1	2456	7
87	2	2457	1
87	2	2458	2
87	2	2459	3
87	2	2460	4
87	2	2461	5
87	2	2462	6
87	3	2463	1
87	3	2464	2
87	3	2465	3
87	3	2466	4
87	3	2467	5
87	3	2468	6
87	3	2469	7
87	3	2470	8
87	3	2471	9
87	3	2472	10
87	3	2473	11
87	3	2474	12
87	4	2475	1
87	4	2476	2
87	4	2477	3
87	4	2478	4
87	5	2479	1
87	5	2480	2
87	5	2481	3
87	5	2482	4
87	5	2483	5
87	6	2484	1
87	6	2485	2
87	6	2486	3
87	6	2487	4
87	6	2488	5
87	6	2489	6
87	6	2490	7
87	7	2491	1
87	7	2492	2
87	7	2493	3
87	7	2494	4
87	7	2495	5
87	7	2496	6
87	7	2497	7
87	8	2498	1
87	8	2499	2
87	8	2500	3
87	8	2501	4
87	8	2502	5
87	8	2503	6
87	8	2504	7
87	8	2505	8
87	8	2506	9
87	8	2507	10
87	8	2508	11
87	8	2509	12
87	8	2510	13
87	8	2511	14
87	8	2512	15
87	8	2513	16
87	8	2514	17
87	8	2515	18
87	9	2516	1
87	9	2517	2
87	9	2518	3
87	9	2519	4
87	9	2520	5
87	9	2521	6
87	9	2522	7
87	9	2523	8
87	9	2524	9
87	9	2525	10
87	9	2526	11
87	9	2527	12
87	9	2528	13
87	9	2529	14
87	9	2530	15
87	9	2531	16
87	9	2532	17
87	9	2533	18
87	9	2534	19
87	9	2535	20
87	10	2536	1
87	10	2537	2
87	10	2538	3
87	10	2539	4
87	10	2540	5
87	10	2541	6
87	10	2542	7
87	10	2543	8
87	10	2544	9
87	10	2545	10
87	10	2546	11
87	10	2547	12
87	10	2548	13
87	13	2549	1
87	13	2550	2
87	13	2551	3
87	13	2552	4
87	13	2553	5
87	13	2554	6
87	14	2555	1
87	14	2556	2
87	14	2557	3
87	15	2558	1
87	15	2559	2
87	15	2560	3
87	15	2561	4
87	15	2562	5
87	15	2563	6
87	15	2564	7
87	15	2565	8
87	15	2566	9
87	15	2567	10
87	15	2568	11
87	15	2569	12
87	15	2570	13
87	15	2571	14
87	15	2572	15
87	15	2573	16
87	15	2574	17
87	15	2575	18
87	15	2576	19
87	15	2577	20
87	15	2578	21
87	15	2579	22
87	15	2580	23
87	15	2581	24
87	15	2582	25
87	15	2583	26
87	15	2584	27
87	15	2585	28
87	15	2586	29
87	15	2587	30
87	15	2588	31
87	15	2589	32
87	15	2590	33
87	15	2591	34
87	15	2592	35
87	15	2593	36
87	15	2594	37
87	15	2595	38
87	15	2596	39
87	15	2597	40
87	15	2598	41
87	15	2599	42
87	15	2600	43
87	15	2601	44
87	15	2602	45
87	15	2603	46
87	15	2604	47
87	15	2605	48
87	15	2606	49
87	15	2607	50
87	15	2608	51
87	15	2609	52
87	15	2610	53
87	15	2611	54
87	15	2612	55
87	15	2613	56
87	15	2614	57
87	15	2615	58
87	15	2616	59
87	15	2617	60
87	15	2618	61
87	15	2619	62
87	15	2620	63
87	15	2621	64
87	15	2622	65
87	15	2623	66
87	15	2624	67
87	15	2625	68
87	15	2626	69
87	15	2627	70
87	15	2628	71
87	15	2629	72
87	15	2630	73
87	15	2631	74
87	15	2632	75
87	15	2633	76
87	15	2634	77
87	15	2635	78
87	15	2636	79
87	15	2637	80
87	15	2638	81
87	15	2639	82
87	15	2640	83
87	15	2641	84
87	15	2642	85
87	15	2643	86
87	15	2644	87
87	15	2645	88
87	15	2646	89
87	15	2647	90
87	15	2648	91
88	1	2649	1
88	1	2650	2
88	1	2651	3
88	1	2652	4
88	1	2653	5
88	1	2654	6
88	1	2655	7
88	1	2656	8
88	1	2657	9
88	1	2658	10
88	1	2659	11
88	1	2660	12
88	1	2661	13
88	1	2662	14
88	1	2663	15
88	1	2664	16
88	1	2665	17
88	1	2666	18
89	1	2667	1
89	1	2668	2
89	1	2669	3
89	1	2670	4
89	1	2671	5
89	1	2672	6
89	1	2673	7
89	1	2674	8
89	1	2675	9
89	1	2676	10
89	1	2677	11
89	1	2678	12
89	1	2679	13
89	1	2680	14
89	1	2681	15
89	1	2682	16
89	1	2683	17
89	1	2684	18
89	1	2685	19
89	1	2686	20
89	1	2687	21
89	1	2688	22
89	1	2689	23
89	1	2690	24
89	1	2691	25
89	1	2692	26
89	1	2693	27
89	1	2694	28
89	1	2695	29
89	1	2696	30
89	1	2697	31
89	1	2698	32
89	1	2699	33
89	1	2700	34
89	1	2701	35
89	1	2702	36
89	1	2703	37
89	1	2704	38
89	1	2705	39
89	1	2706	40
89	1	2707	41
89	1	2708	42
89	1	2709	43
89	1	2710	44
89	1	2711	45
89	1	2712	46
89	1	2713	47
89	1	2714	48
89	1	2715	49
89	1	2716	50
89	1	2717	51
89	1	2718	52
89	1	2719	53
89	1	2720	54
89	1	2721	55
89	1	2722	56
89	1	2723	57
89	1	2724	58
89	1	2725	59
89	1	2726	60
89	1	2727	61
89	1	2728	62
89	1	2729	63
89	1	2730	64
89	1	2731	65
89	1	2732	66
89	1	2733	67
89	1	2734	68
89	1	2735	69
89	1	2736	70
89	1	2737	71
89	1	2738	72
89	1	2739	73
89	1	2740	74
89	1	2741	75
89	1	2742	76
89	1	2743	77
89	1	2744	78
89	1	2745	79
89	1	2746	80
89	1	2747	81
89	1	2748	82
89	1	2749	83
89	1	2750	84
89	1	2751	85
89	1	2752	86
89	1	2753	87
89	1	2754	88
89	1	2755	89
89	1	2756	90
89	1	2757	91
89	1	2758	92
89	1	2759	93
89	1	2760	94
89	1	2761	95
89	1	2762	96
89	1	2763	97
89	1	2764	98
89	1	2765	99
89	1	2766	100
89	1	2767	101
91	1	2768	1
93	5	2775	1
93	5	2776	2
93	5	2777	3
93	6	2778	1
93	6	2779	2
93	6	2780	3
93	6	2781	4
93	6	2782	5
93	7	2783	1
93	7	2784	2
93	7	2785	3
93	7	2786	4
93	7	2787	5
93	7	2788	6
93	7	2789	7
93	7	2790	8
93	7	2791	9
94	1	2792	1
94	1	2793	2
94	1	2794	3
95	1	2795	1
95	1	2796	2
95	1	2797	3
95	1	2798	4
95	1	2799	5
95	1	2800	6
95	1	2801	7
95	1	2802	8
95	1	2803	9
95	1	2804	10
95	1	2805	11
95	1	2806	12
95	1	2807	13
95	1	2808	14
95	1	2809	15
95	1	2810	16
95	1	2811	17
95	1	2812	18
95	1	2813	19
95	1	2814	20
95	1	2815	21
95	1	2816	22
95	1	2817	23
95	1	2818	24
95	1	2819	25
95	1	2820	26
95	2	2821	1
95	2	2822	2
95	2	2823	3
95	2	2824	4
95	2	2825	5
95	2	2826	6
95	2	2827	7
95	2	2828	8
95	2	2829	9
95	2	2830	10
95	2	2831	11
95	2	2832	12
95	2	2833	13
95	2	2834	14
95	2	2835	15
95	2	2836	16
95	2	2837	17
95	3	2838	1
95	3	2839	2
95	3	2840	3
95	3	2841	4
96	1	2842	1
96	1	2843	2
96	1	2844	3
96	1	2845	4
96	1	2846	5
96	1	2847	6
96	1	2848	7
96	1	2849	8
96	1	2850	9
96	1	2851	10
96	1	2852	11
96	1	2853	12
96	1	2854	13
96	1	2855	14
96	1	2856	15
96	1	2857	16
96	1	2858	17
96	1	2859	18
96	1	2860	19
96	1	2861	20
96	1	2862	21
96	1	2863	22
96	1	2864	23
96	1	2865	24
96	1	2866	25
96	1	2867	26
96	1	2868	27
96	1	2869	28
96	1	2870	29
96	1	2871	30
96	1	2872	31
96	1	2873	32
96	1	2874	33
96	1	2875	34
96	1	2876	35
96	1	2877	36
96	1	2878	37
96	1	2879	38
96	1	2880	39
96	1	2881	40
96	1	2882	41
96	1	2883	42
96	1	2884	43
96	1	2885	44
96	1	2886	45
96	1	2887	46
96	1	2888	47
96	1	2889	48
96	1	2890	49
96	1	2891	50
96	1	2892	51
96	1	2893	52
96	1	2894	53
96	1	2895	54
96	1	2896	55
96	1	2897	56
96	1	2898	57
96	1	2899	58
96	2	2900	1
96	2	2901	2
96	2	2902	3
96	2	2903	4
96	2	2904	5
96	2	2905	6
96	2	2906	7
96	2	2907	8
96	2	2908	9
96	2	2909	10
96	2	2910	11
96	2	2911	12
96	2	2912	13
96	2	2913	14
96	2	2914	15
96	2	2915	16
96	2	2916	17
96	2	2917	18
96	2	2918	19
96	2	2919	20
96	2	2920	21
96	2	2921	22
96	2	2922	23
96	2	2923	24
96	2	2924	25
96	2	2925	26
96	2	2926	27
96	2	2927	28
96	2	2928	29
96	2	2929	30
96	2	2930	31
96	2	2931	32
96	2	2932	33
96	2	2933	34
96	2	2934	35
96	2	2935	36
96	2	2936	37
96	2	2937	38
96	2	2938	39
96	2	2939	40
96	2	2940	41
96	2	2941	42
96	2	2942	43
96	2	2943	44
96	2	2944	45
96	2	2945	46
96	2	2946	47
96	2	2947	48
96	2	2948	49
96	2	2949	50
96	2	2950	51
96	2	2951	52
96	2	2952	53
96	2	2953	54
96	2	2954	55
96	2	2955	56
96	2	2956	57
96	2	2957	58
96	2	2958	59
96	2	2959	60
96	2	2960	61
96	2	2961	62
96	2	2962	63
96	2	2963	64
96	2	2964	65
96	2	2965	66
96	2	2966	67
96	2	2967	68
96	2	2968	69
96	2	2969	70
96	2	2970	71
96	2	2971	72
96	2	2972	73
96	2	2973	74
96	2	2974	75
96	2	2975	76
96	2	2976	77
96	2	2977	78
96	2	2978	79
96	2	2979	80
96	2	2980	81
96	2	2981	82
96	2	2982	83
96	2	2983	84
96	2	2984	85
96	2	2985	86
96	2	2986	87
96	2	2987	88
96	4	2988	1
96	4	2989	2
96	4	2990	3
96	4	2991	4
96	4	2992	5
96	4	2993	6
96	4	2994	7
96	4	2995	8
96	14	2996	1
96	14	2997	2
96	14	2998	3
96	14	2999	4
96	14	3000	5
96	14	3001	6
96	14	3002	7
96	14	3003	8
96	14	3004	9
96	14	3005	10
96	14	3006	11
96	14	3007	12
96	14	3008	13
96	14	3009	14
96	14	3010	15
96	14	3011	16
96	14	3012	17
96	14	3013	18
96	14	3014	19
96	14	3015	20
96	14	3016	21
96	14	3017	22
96	14	3018	23
96	14	3019	24
96	14	3020	25
96	14	3021	26
96	14	3022	27
96	14	3023	28
96	14	3024	29
96	14	3025	30
96	14	3026	31
96	14	3027	32
96	14	3028	33
96	14	3029	34
96	14	3030	35
96	14	3031	36
96	14	3032	37
96	14	3033	38
96	16	3034	1
96	16	3035	2
96	16	3036	3
96	16	3037	4
96	16	3038	5
96	16	3039	6
96	16	3040	7
96	16	3041	8
96	16	3042	9
96	16	3043	10
96	16	3044	11
96	16	3045	12
96	16	3046	13
96	16	3047	14
96	16	3048	15
96	16	3049	16
96	16	3050	17
96	16	3051	18
96	16	3052	19
96	16	3053	20
96	16	3054	21
96	16	3055	22
96	16	3056	23
96	16	3057	24
97	1	3058	1
97	1	3059	2
97	1	3060	3
97	1	3061	4
97	1	3062	5
97	1	3063	6
97	1	3064	7
97	1	3065	8
97	1	3066	9
97	2	3067	1
97	2	3068	2
97	2	3069	3
97	2	3070	4
97	2	3071	5
97	2	3072	6
97	2	3073	7
97	2	3074	8
97	2	3075	9
97	2	3076	10
97	2	3077	11
97	2	3078	12
97	3	3079	1
97	3	3080	2
97	3	3081	3
97	3	3082	4
97	3	3083	5
97	3	3084	6
97	3	3085	7
97	3	3086	8
97	3	3087	9
97	3	3088	10
97	3	3089	11
97	3	3090	12
97	3	3091	13
97	3	3092	14
97	3	3093	15
97	3	3094	16
97	3	3095	17
97	3	3096	18
97	3	3097	19
97	3	3098	20
97	3	3099	21
97	3	3100	22
97	3	3101	23
97	3	3102	24
97	3	3103	25
97	3	3104	26
97	3	3105	27
97	3	3106	28
97	3	3107	29
97	3	3108	30
97	3	3109	31
97	3	3110	32
97	3	3111	33
97	3	3112	34
97	4	3113	1
97	4	3114	2
97	4	3115	3
97	5	3116	1
97	5	3117	2
97	5	3118	3
97	5	3119	4
98	1	3120	1
98	1	3121	2
98	1	3122	3
98	1	3123	4
98	1	3124	5
98	1	3125	6
98	1	3126	7
98	1	3127	8
98	1	3128	9
98	1	3129	10
98	1	3130	11
98	1	3131	12
98	1	3132	13
98	1	3133	14
98	1	3134	15
98	1	3135	16
98	1	3136	17
98	1	3137	18
98	1	3138	19
98	1	3139	20
98	2	3140	1
98	2	3141	2
98	2	3142	3
98	2	3143	4
98	2	3144	5
98	2	3145	6
98	2	3146	7
98	2	3147	8
98	2	3148	9
98	2	3149	10
98	2	3150	11
98	2	3151	12
98	3	3152	1
98	3	3153	2
98	3	3154	3
98	3	3155	4
98	3	3156	5
98	3	3157	6
98	3	3158	7
98	3	3159	8
98	3	3160	9
98	3	3161	10
98	3	3162	11
98	3	3163	12
98	3	3164	13
98	3	3165	14
98	3	3166	15
98	3	3167	16
98	3	3168	17
98	3	3169	18
98	3	3170	19
98	3	3171	20
98	3	3172	21
98	3	3173	22
98	3	3174	23
98	3	3175	24
98	3	3176	25
98	3	3177	26
98	3	3178	27
98	3	3179	28
98	3	3180	29
98	3	3181	30
98	3	3182	31
98	3	3183	32
98	3	3184	33
98	3	3185	34
98	3	3186	35
98	3	3187	36
98	3	3188	37
98	3	3189	38
98	3	3190	39
98	3	3191	40
98	3	3192	41
98	3	3193	42
98	3	3194	43
98	3	3195	44
98	3	3196	45
98	3	3197	46
98	3	3198	47
98	3	3199	48
98	3	3200	49
98	3	3201	50
98	3	3202	51
98	3	3203	52
98	3	3204	53
98	3	3205	54
98	3	3206	55
98	3	3207	56
98	4	3208	1
98	4	3209	2
98	4	3210	3
98	4	3211	4
98	4	3212	5
98	4	3213	6
98	4	3214	7
98	4	3215	8
98	4	3216	9
98	4	3217	10
98	4	3218	11
98	4	3219	12
98	7	3220	1
98	7	3221	2
98	7	3222	3
98	7	3223	4
98	7	3224	5
98	7	3225	6
98	7	3226	7
98	7	3227	8
98	7	3228	9
98	7	3229	10
98	7	3230	11
98	7	3231	12
98	7	3232	13
98	7	3233	14
98	8	3234	1
98	8	3235	2
98	8	3236	3
98	8	3237	4
98	8	3238	5
98	8	3239	6
98	8	3240	7
98	8	3241	8
98	9	3242	1
98	9	3243	2
98	9	3244	3
98	9	3245	4
98	9	3246	5
98	9	3247	6
98	9	3248	7
98	9	3249	8
98	9	3250	9
98	9	3251	10
98	9	3252	11
98	9	3253	12
98	9	3254	13
98	9	3255	14
98	9	3256	15
98	10	3257	1
98	10	3258	2
98	10	3259	3
98	10	3260	4
98	10	3261	5
98	10	3262	6
98	10	3263	7
98	10	3264	8
98	10	3265	9
98	10	3266	10
98	11	3267	1
98	11	3268	2
98	11	3269	3
98	11	3270	4
98	11	3271	5
98	11	3272	6
98	11	3273	7
98	11	3274	8
98	11	3275	9
98	11	3276	10
98	11	3277	11
98	11	3278	12
98	11	3279	13
98	11	3280	14
98	11	3281	15
98	11	3282	16
98	12	3283	1
98	12	3284	2
98	12	3285	3
98	12	3286	4
98	12	3287	5
98	12	3288	6
98	12	3289	7
98	12	3290	8
98	12	3291	9
98	12	3292	10
98	12	3293	11
98	12	3294	12
98	12	3295	13
98	12	3296	14
98	13	3297	1
98	13	3298	2
98	13	3299	3
98	13	3300	4
98	13	3301	5
98	13	3302	6
98	13	3303	7
98	13	3304	8
98	13	3305	9
98	13	3306	10
98	13	3307	11
98	13	3308	12
98	13	3309	13
98	13	3310	14
98	13	3311	15
98	13	3312	16
98	13	3313	17
98	14	3314	1
98	14	3315	2
98	14	3316	3
98	14	3317	4
98	14	3318	5
98	14	3319	6
98	14	3320	7
98	14	3321	8
98	14	3322	9
98	14	3323	10
98	14	3324	11
98	14	3325	12
98	14	3326	13
98	14	3327	14
98	15	3328	1
98	15	3329	2
98	15	3330	3
98	15	3331	4
98	15	3332	5
98	15	3333	6
98	15	3334	7
98	15	3335	8
98	15	3336	9
98	15	3337	10
98	15	3338	11
98	15	3339	12
98	15	3340	13
98	15	3341	14
98	15	3342	15
98	15	3343	16
98	16	3344	1
98	16	3345	2
98	16	3346	3
98	16	3347	4
98	16	3348	5
98	16	3349	6
98	16	3350	7
98	16	3351	8
98	16	3352	9
98	16	3353	10
98	16	3354	11
98	16	3355	12
98	16	3356	13
98	16	3357	14
98	16	3358	15
98	17	3359	1
98	17	3360	2
98	17	3361	3
98	17	3362	4
98	17	3363	5
98	17	3364	6
98	17	3365	7
98	17	3366	8
98	17	3367	9
98	17	3368	10
98	17	3369	11
98	17	3370	12
98	17	3371	13
98	17	3372	14
98	17	3373	15
98	17	3374	16
98	17	3375	17
98	17	3376	18
98	17	3377	19
98	17	3378	20
98	17	3379	21
98	17	3380	22
98	18	3381	1
98	18	3382	2
98	18	3383	3
98	18	3384	4
98	18	3385	5
98	18	3386	6
98	18	3387	7
98	18	3388	8
98	18	3389	9
98	18	3390	10
98	18	3391	11
98	19	3392	1
98	19	3393	2
98	19	3394	3
98	19	3395	4
98	19	3396	5
98	19	3397	6
98	19	3398	7
98	19	3399	8
98	19	3400	9
98	19	3401	10
98	19	3402	11
98	19	3403	12
98	19	3404	13
98	19	3405	14
98	20	3406	1
98	20	3407	2
98	20	3408	3
98	20	3409	4
98	20	3410	5
98	20	3411	6
98	20	3412	7
98	20	3413	8
98	20	3414	9
98	20	3415	10
98	20	3416	11
98	20	3417	12
98	20	3418	13
98	20	3419	14
98	20	3420	15
99	1	3421	1
99	1	3422	2
99	1	3423	3
99	1	3424	4
99	1	3425	5
99	1	3426	6
99	1	3427	7
99	1	3428	8
99	1	3429	9
99	1	3430	10
99	1	3431	11
99	1	3432	12
99	1	3433	13
99	1	3434	14
99	1	3435	15
99	1	3436	16
99	1	3437	17
99	1	3438	18
100	1	3439	1
100	1	3440	2
100	1	3441	3
100	1	3442	4
100	1	3443	5
100	1	3444	6
100	1	3445	7
100	1	3446	8
100	1	3447	9
100	1	3448	10
100	1	3449	11
100	1	3450	12
100	1	3451	13
100	1	3452	14
100	1	3453	15
100	1	3454	16
100	1	3455	17
100	1	3456	18
100	1	3457	19
100	1	3458	20
100	3	3459	1
100	3	3460	2
100	3	3461	3
100	3	3462	4
100	3	3463	5
100	3	3464	6
100	3	3465	7
100	3	3466	8
100	3	3467	9
100	3	3468	10
100	3	3469	11
100	3	3470	12
100	3	3471	13
100	3	3472	14
100	3	3473	15
100	3	3474	16
100	3	3475	17
100	3	3476	18
100	3	3477	19
100	3	3478	20
100	3	3479	21
100	3	3480	22
100	3	3481	23
100	3	3482	24
100	4	3483	1
100	4	3484	2
100	4	3485	3
100	4	3486	4
100	4	3487	5
100	4	3488	6
100	4	3489	7
100	4	3490	8
100	4	3491	9
100	4	3492	10
100	4	3493	11
100	4	3494	12
100	4	3495	13
100	4	3496	14
100	4	3497	15
101	5	3602	1
101	5	3603	2
102	1	3604	1
102	1	3605	2
102	1	3606	3
102	1	3607	4
102	1	3608	5
102	1	3609	6
102	1	3610	7
102	1	3611	8
102	1	3612	9
102	1	3613	10
103	4	3614	1
103	4	3615	2
104	1	3616	1
104	1	3617	2
104	1	3618	3
104	1	3619	4
104	1	3620	5
104	1	3621	6
104	1	3622	7
104	1	3623	8
104	1	3624	9
104	1	3625	10
104	1	3626	11
105	1	3627	1
105	1	3628	2
105	1	3629	3
105	1	3630	4
105	1	3631	5
105	1	3632	6
106	1	3633	1
106	2	3634	1
106	2	3635	2
106	2	3636	3
106	2	3637	4
106	2	3638	5
106	2	3639	6
106	2	3640	7
106	2	3641	8
106	2	3642	9
106	2	3643	10
106	2	3644	11
106	2	3645	12
106	2	3646	13
106	2	3647	14
106	2	3648	15
106	2	3649	16
106	2	3650	17
106	2	3651	18
106	2	3652	19
106	2	3653	20
106	2	3654	21
106	2	3655	22
106	2	3656	23
106	2	3657	24
106	2	3658	25
106	2	3659	26
106	2	3660	27
106	2	3661	28
106	2	3662	29
106	2	3663	30
106	2	3664	31
107	1	3665	1
107	1	3666	2
107	1	3667	3
107	1	3668	4
107	1	3669	5
107	2	3670	1
107	2	3671	2
107	2	3672	3
107	2	3673	4
107	2	3674	5
107	2	3675	6
107	2	3676	7
107	2	3677	8
107	2	3678	9
107	2	3679	10
107	3	3680	1
107	3	3681	2
107	3	3682	3
107	3	3683	4
107	3	3684	5
107	3	3685	6
107	3	3686	7
108	1	3687	1
108	1	3688	2
108	1	3689	3
108	1	3690	4
108	1	3691	5
108	1	3692	6
108	1	3693	7
108	1	3694	8
108	1	3695	9
108	1	3696	10
108	1	3697	11
108	1	3698	12
108	1	3699	13
108	1	3700	14
108	1	3701	15
108	1	3702	16
108	1	3703	17
108	1	3704	18
108	1	3705	19
108	1	3706	20
108	1	3707	21
108	1	3708	22
108	1	3709	23
108	1	3710	24
108	1	3711	25
108	1	3712	26
108	1	3713	27
108	1	3714	28
108	1	3715	29
100	8	3531	34
100	8	3532	35
100	8	3533	36
100	8	3534	37
100	8	3535	38
108	1	3716	30
108	1	3717	31
108	1	3718	32
108	1	3719	33
108	2	3720	1
108	2	3721	2
108	2	3722	3
108	3	3723	1
108	3	3724	2
108	3	3725	3
108	3	3726	4
108	3	3727	5
108	3	3728	6
108	3	3729	7
108	3	3730	8
108	4	3731	1
108	4	3732	2
108	6	3733	1
109	2	3734	1
109	2	3735	2
109	2	3736	3
109	2	3737	4
109	2	3738	5
109	2	3739	6
109	2	3740	7
109	2	3741	8
109	2	3742	9
109	2	3743	10
109	2	3744	11
109	2	3745	12
109	2	3746	13
109	2	3747	14
109	2	3748	15
109	2	3749	16
109	2	3750	17
109	2	3751	18
109	2	3752	19
109	3	3753	1
109	3	3754	2
109	3	3755	3
109	3	3756	4
109	3	3757	5
109	3	3758	6
109	3	3759	7
109	3	3760	8
109	4	3761	1
109	4	3762	2
109	4	3763	3
109	4	3764	4
109	4	3765	5
109	4	3766	6
109	4	3767	7
109	4	3768	8
109	4	3769	9
109	5	3770	1
109	5	3771	2
109	5	3772	3
109	5	3773	4
109	5	3774	5
109	5	3775	6
109	5	3776	7
109	6	3777	1
109	6	3778	2
109	6	3779	3
109	6	3780	4
109	6	3781	5
109	6	3782	6
109	6	3783	7
109	6	3784	8
110	2	3785	1
110	2	3786	2
110	2	3787	3
110	2	3788	4
110	2	3789	5
110	2	3790	6
110	2	3791	7
110	2	3792	8
110	2	3793	9
110	2	3794	10
110	2	3795	11
110	2	3796	12
110	2	3797	13
110	2	3798	14
110	2	3799	15
110	2	3800	16
110	2	3801	17
110	2	3802	18
110	2	3803	19
110	2	3804	20
110	2	3805	21
111	1	3806	1
111	1	3807	2
111	1	3808	3
111	1	3809	4
111	1	3810	5
112	2	3811	1
112	3	3812	1
112	3	3813	2
112	3	3814	3
112	5	3815	1
112	6	3816	1
112	7	3817	1
112	7	3818	2
112	7	3819	3
113	1	3820	1
113	1	3821	2
113	1	3822	3
113	1	3823	4
113	1	3824	5
113	1	3825	6
113	1	3826	7
113	1	3827	8
113	1	3828	9
113	1	3829	10
113	1	3830	11
113	1	3831	12
113	1	3832	13
113	1	3833	14
113	1	3834	15
113	1	3835	16
113	1	3836	17
113	1	3837	18
113	1	3838	19
113	2	3839	1
113	2	3840	2
113	2	3841	3
113	2	3842	4
113	2	3843	5
113	2	3844	6
113	2	3845	7
113	2	3846	8
113	2	3847	9
113	2	3848	10
113	2	3849	11
113	2	3850	12
113	2	3851	13
113	2	3852	14
113	2	3853	15
113	2	3854	16
113	3	3855	1
113	3	3856	2
113	3	3857	3
113	3	3858	4
113	3	3859	5
113	3	3860	6
113	3	3861	7
113	3	3862	8
113	3	3863	9
113	3	3864	10
113	3	3865	11
113	3	3866	12
113	3	3867	13
113	4	3868	1
113	4	3869	2
113	4	3870	3
113	4	3871	4
113	4	3872	5
113	4	3873	6
113	4	3874	7
113	4	3875	8
113	4	3876	9
113	5	3877	1
113	5	3878	2
113	5	3879	3
113	5	3880	4
113	5	3881	5
114	1	3882	1
114	1	3883	2
114	1	3884	3
114	1	3885	4
114	1	3886	5
114	1	3887	6
114	1	3888	7
114	1	3889	8
114	1	3890	9
114	1	3891	10
114	1	3892	11
114	1	3893	12
114	1	3894	13
114	1	3895	14
114	1	3896	15
114	1	3897	16
114	1	3898	17
114	1	3899	18
114	1	3900	19
114	1	3901	20
114	1	3902	21
114	1	3903	22
115	4	3904	1
115	4	3905	2
115	4	3906	3
115	4	3907	4
115	4	3908	5
115	4	3909	6
115	4	3910	7
115	4	3911	8
115	4	3912	9
115	4	3913	10
115	4	3914	11
115	4	3915	12
115	4	3916	13
115	4	3917	14
115	4	3918	15
115	4	3919	16
115	4	3920	17
115	4	3921	18
115	4	3922	19
115	4	3923	20
115	4	3924	21
115	4	3925	22
115	4	3926	23
115	4	3927	24
115	4	3928	25
115	4	3929	26
115	4	3930	27
116	3	3931	1
116	4	3932	1
116	5	3933	1
116	6	3934	1
116	7	3935	1
116	8	3936	1
118	3	3937	1
118	3	3938	2
118	3	3939	3
118	4	3940	1
118	5	3941	1
118	5	3942	2
118	5	3943	3
124	3	3944	1
124	3	3945	2
124	3	3946	3
124	3	3947	4
124	3	3948	5
124	3	3949	6
124	3	3950	7
124	3	3951	8
124	3	3952	9
124	3	3953	10
124	3	3954	11
124	3	3955	12
124	3	3956	13
124	3	3957	14
124	3	3958	15
124	3	3959	16
124	3	3960	17
124	3	3961	18
129	2	3966	1
129	2	3967	2
129	2	3968	3
129	2	3969	4
129	2	3970	5
129	2	3971	6
129	2	3972	7
131	1	3973	1
131	1	3974	2
131	1	3975	3
131	1	3976	4
131	1	3977	5
131	1	3978	6
131	2	3979	1
131	2	3980	2
132	1	3981	1
135	1	5187	1
135	1	5188	2
135	1	5189	3
135	1	5190	4
135	1	5191	5
93	4	2769	1
93	4	2770	2
93	4	2771	3
93	4	2772	4
93	4	2773	5
93	4	2774	6
14	3	9	1
14	3	10	3
14	3	11	4
14	3	12	2
14	3	13	5
14	3	14	6
14	3	15	7
14	3	16	8
14	3	17	9
108	8	5192	1
108	8	5193	2
136	1	5202	1
136	1	5204	3
136	1	5206	5
136	1	5208	7
136	1	5210	9
136	1	5212	11
136	1	5214	13
136	1	5216	15
136	1	5218	17
136	1	5220	19
108	8	5222	4
108	8	5224	6
108	8	5226	8
108	8	5228	10
108	8	5230	12
108	8	5232	14
108	9	5234	1
136	1	5235	20
136	1	5237	22
136	1	5239	24
136	1	5241	26
136	1	5243	28
136	1	5245	30
136	1	5203	2
136	1	5205	4
136	1	5207	6
136	1	5209	8
136	1	5211	10
136	1	5213	12
136	1	5215	14
136	1	5217	16
136	1	5219	18
108	8	5221	3
108	8	5223	5
108	8	5225	7
108	8	5227	9
108	8	5229	11
108	8	5231	13
108	8	5233	15
136	1	5236	21
136	1	5238	23
136	1	5240	25
136	1	5242	27
136	1	5244	29
136	1	5246	31
137	1	5247	1
137	1	5248	2
137	1	5249	3
137	1	5250	4
137	2	5251	1
137	2	5252	2
137	2	5253	3
137	2	5254	4
137	2	5255	5
137	3	5256	1
137	4	5257	1
137	4	5258	2
137	5	5259	1
137	6	5260	1
137	6	5261	2
137	6	5262	3
137	6	5263	4
137	7	5264	1
137	7	5265	2
137	8	5266	1
137	8	5267	2
137	9	5268	1
137	9	5269	2
137	9	5270	3
137	9	5271	4
137	9	5272	5
137	9	5273	6
137	10	5274	1
137	10	5275	2
137	10	5276	3
137	10	5277	4
137	11	5278	1
137	11	5279	2
137	11	5280	3
137	11	5281	4
137	12	5282	1
137	12	5283	2
137	12	5284	3
137	12	5285	4
137	12	5286	5
137	12	5287	6
137	12	5288	7
137	12	5289	8
137	12	5290	9
137	13	5291	1
137	13	5292	2
137	13	5293	3
137	13	5294	4
137	14	5295	1
137	14	5296	2
137	14	5297	3
137	15	5298	1
137	15	5299	2
137	15	5300	3
137	15	5301	4
137	16	5302	1
137	16	5303	2
137	16	5304	3
137	16	5305	4
137	16	5306	5
137	16	5307	6
137	17	5308	1
137	17	5309	2
137	17	5310	3
137	17	5311	4
137	18	5312	1
137	18	5313	2
137	18	5314	3
137	18	5315	4
137	18	5316	5
137	18	5317	6
137	19	5318	1
137	19	5319	2
137	19	5320	3
137	19	5321	4
137	19	5322	5
137	19	5323	6
137	19	5324	7
137	19	5325	8
137	19	5326	9
137	19	5327	10
137	19	5328	11
137	19	5329	12
137	19	5330	13
137	19	5331	14
137	19	5332	15
138	1	5333	1
138	1	5334	2
138	1	5335	3
138	1	5336	4
138	1	5337	5
138	1	5338	6
138	1	5339	7
138	1	5340	8
138	1	5341	9
138	1	5342	10
138	1	5343	11
138	1	5344	12
138	1	5345	13
138	1	5346	14
138	1	5347	15
138	2	5348	1
107	3	5352	8
107	3	5353	9
107	3	5354	10
107	3	5355	11
107	3	5356	12
107	3	5357	13
107	3	5358	14
107	3	5359	15
107	3	5360	16
137	20	5373	1
137	20	5374	2
137	20	5375	3
137	20	5376	4
137	20	5377	5
137	20	5378	6
137	20	5379	7
137	20	5380	8
137	20	5381	9
137	20	5382	10
137	20	5383	11
137	20	5384	12
137	20	5385	13
25	15	5386	1
25	15	5387	2
25	15	5388	3
25	15	5389	4
25	15	5390	5
25	15	5391	6
25	15	5392	7
25	15	5393	8
25	15	5394	9
25	15	5395	10
25	15	5396	11
25	15	5397	12
25	15	5398	13
25	15	5399	14
25	15	5400	15
25	15	5401	16
25	15	5402	17
25	15	5403	18
25	15	5404	19
25	15	5405	20
25	15	5406	21
25	15	5407	22
25	15	5408	23
25	15	5409	24
25	15	5410	25
25	15	5411	26
25	15	5412	27
25	15	5413	28
25	15	5414	29
25	15	5415	30
25	15	5416	31
25	15	5417	32
25	15	5418	33
25	15	5419	34
25	15	5420	35
25	15	5421	36
25	15	5422	37
25	15	5423	38
25	15	5424	39
25	15	5425	40
25	15	5426	41
25	15	5427	42
25	15	5428	43
25	15	5429	44
25	15	5430	45
25	15	5431	46
25	15	5432	47
136	1	5433	32
136	1	5434	33
136	1	5435	34
136	1	5436	35
136	1	5437	36
136	1	5438	37
136	1	5439	38
136	1	5440	39
136	1	5441	40
136	1	5442	41
136	1	5443	42
136	1	5444	43
140	1	5449	1
140	1	5450	2
106	1	5451	1
106	1	5452	2
106	1	5453	3
106	1	5454	4
106	1	5455	5
106	1	5456	6
106	1	5457	7
106	1	5458	8
106	1	5459	9
106	1	5460	10
106	1	5461	11
106	1	5462	12
106	1	5463	13
106	1	5464	14
106	1	5465	15
106	1	5466	16
106	1	5467	17
106	2	5468	1
100	9	3536	1
100	9	3537	2
100	9	3538	3
100	9	3539	4
100	9	3540	5
100	9	3541	6
100	9	3542	7
100	9	3543	8
100	9	3544	9
100	9	3545	10
100	9	3546	11
100	9	3547	12
100	9	3548	13
100	9	3549	14
100	9	3550	15
100	9	3551	16
100	9	3552	17
100	9	3553	18
100	9	3554	19
100	9	3555	20
100	9	3556	21
100	9	3557	22
100	9	3558	23
100	9	3559	24
100	9	3560	25
100	9	3561	26
100	9	3562	27
100	9	3563	28
100	9	3564	29
100	9	3565	30
100	9	3566	31
100	9	3567	32
100	9	3568	33
100	9	3569	34
100	9	3570	35
100	9	3571	36
100	9	3572	37
100	9	3573	38
100	9	3574	39
100	9	3575	40
100	9	3576	41
100	9	3577	42
100	9	3578	43
100	9	3579	44
100	9	3580	45
100	9	3581	46
100	9	3582	47
100	9	3583	48
100	9	3584	49
100	9	3585	50
100	9	3586	51
100	9	3587	52
100	9	3588	53
100	9	3589	54
100	9	3590	55
100	9	3591	56
100	9	3592	57
100	9	3593	58
100	9	3594	59
100	9	3595	60
100	9	3596	61
100	9	3597	62
100	9	3598	63
100	9	3599	64
100	9	3600	65
100	9	3601	66
100	8	3498	1
100	8	3499	2
100	8	3500	3
100	8	3501	4
100	8	3502	5
100	8	3503	6
100	8	3504	7
100	8	3505	8
100	8	3506	9
100	8	3507	10
100	8	3508	11
100	8	3509	12
100	8	3510	13
100	8	3511	14
100	8	3512	15
100	8	3513	16
100	8	3514	17
100	8	3515	18
100	8	3516	19
100	8	3517	20
100	8	3518	21
100	8	3519	22
100	8	3520	23
100	8	3521	24
100	8	3522	25
100	8	3523	26
100	8	3524	27
100	8	3525	28
100	8	3526	29
100	8	3527	30
100	8	3528	31
100	8	3529	32
100	8	3530	33
69	1	1491	4
58	2	1504	4
58	2	1505	5
58	2	1509	6
58	2	1510	7
58	2	1511	8
58	2	1512	9
58	2	1513	10
58	2	1514	11
107	3	5349	17
107	3	5350	18
107	3	5351	19
151	1	5469	1
151	1	5470	2
151	2	5471	1
151	2	5472	2
151	2	5473	3
151	3	5474	1
151	3	5475	2
151	3	5476	3
151	3	5477	4
151	3	5478	5
151	3	5479	6
151	3	5480	7
151	3	5481	8
151	3	5482	9
151	3	5483	10
151	3	5484	11
151	3	5485	12
151	3	5486	13
151	3	5487	14
151	3	5488	15
151	3	5489	16
105	3	3964	1
105	3	3965	2
105	5	3962	1
105	5	3963	2
105	1	5194	1
105	1	5196	3
105	1	5198	5
105	1	5200	7
105	1	5195	2
105	1	5197	4
105	1	5199	6
105	1	5201	8
105	3	5361	3
105	3	5362	4
105	3	5363	5
105	4	5364	1
105	4	5365	2
105	4	5366	3
105	4	5367	4
105	5	5368	3
105	5	5369	4
105	6	5445	1
105	6	5446	2
105	6	5447	3
105	6	5448	4
151	4	5490	1
151	4	5491	2
151	4	5492	3
151	4	5493	4
151	4	5494	5
151	4	5495	6
151	4	5496	7
151	4	5497	8
151	4	5498	9
151	4	5499	10
151	4	5500	11
151	4	5501	12
151	4	5502	13
151	4	5503	14
151	4	5504	15
151	4	5505	16
151	4	5506	17
151	4	5507	18
151	4	5508	19
151	4	5509	20
151	4	5510	21
151	4	5511	22
151	4	5512	23
151	4	5513	24
151	4	5514	25
151	4	5515	26
151	4	5516	27
151	4	5517	28
151	4	5518	29
151	4	5519	30
151	4	5520	31
151	4	5521	32
151	4	5522	33
151	4	5523	34
151	4	5524	35
151	4	5525	36
151	4	5526	37
151	4	5527	38
151	4	5528	39
151	4	5529	40
151	4	5530	41
151	4	5531	42
151	4	5532	43
151	4	5533	44
151	4	5534	45
151	4	5535	46
151	4	5536	47
151	4	5537	48
151	4	5538	49
151	4	5539	50
151	5	5540	1
151	5	5541	2
151	5	5542	3
151	5	5543	4
151	5	5544	5
151	5	5545	6
151	5	5546	7
151	5	5547	8
151	5	5548	9
151	5	5549	10
151	5	5550	11
151	5	5551	12
151	5	5552	13
151	5	5553	14
151	5	5554	15
151	5	5555	16
151	5	5556	17
151	5	5557	18
151	6	5558	1
151	7	5559	1
205	1	3982	1
205	1	3983	2
205	1	3984	3
205	1	3985	4
205	1	3986	5
205	1	3987	6
205	1	3988	7
205	1	3989	8
205	1	3990	9
205	1	3991	10
205	1	3992	11
205	1	3993	12
205	1	3994	13
\.


--
-- Data for Name: sections_progress; Type: TABLE DATA; Schema: flashback; Owner: flashback
--

COPY flashback.sections_progress (resource, section, "user", "time", duration, id) FROM stdin;
17	1	2	2025-08-01 16:35:39+02	212	2
17	2	2	2025-08-01 20:32:53+02	418	3
17	3	2	2025-08-01 22:35:46+02	7359	4
43	1	2	2025-08-15 09:47:35+02	9	5
43	2	2	2025-08-15 09:48:13+02	38	6
43	3	2	2025-08-15 09:51:18+02	185	7
43	4	2	2025-08-15 09:52:46+02	87	8
43	7	2	2025-08-15 09:53:05+02	19	9
43	8	2	2025-08-15 09:53:16+02	11	10
43	9	2	2025-08-15 09:53:20+02	4	11
43	10	2	2025-08-15 09:53:29+02	9	12
43	11	2	2025-08-15 09:53:36+02	7	13
43	12	2	2025-08-15 09:53:57+02	21	14
43	13	2	2025-08-15 09:53:58+02	1	15
43	14	2	2025-08-15 09:54:01+02	3	16
43	15	2	2025-08-15 09:54:03+02	2	17
43	16	2	2025-08-15 09:54:04+02	1	18
43	17	2	2025-08-15 09:54:07+02	3	19
43	18	2	2025-08-15 09:54:09+02	2	20
43	19	2	2025-08-15 09:54:15+02	5	21
43	20	2	2025-08-15 09:54:37+02	22	22
43	21	2	2025-08-15 09:54:42+02	4	23
43	22	2	2025-08-15 09:54:48+02	6	24
43	23	2	2025-08-15 09:54:51+02	3	25
43	24	2	2025-08-15 09:55:00+02	9	26
43	25	2	2025-08-15 09:55:05+02	5	27
43	26	2	2025-08-15 09:55:10+02	5	28
43	27	2	2025-08-15 09:55:11+02	1	29
107	1	2	2025-08-16 19:01:36+02	823	30
107	2	2	2025-08-16 19:33:18+02	1902	31
107	3	2	2025-08-16 20:33:21+02	3603	32
124	3	2	2025-08-17 01:36:44+02	1018	33
112	2	2	2025-08-17 01:39:00+02	11	34
112	3	2	2025-08-17 01:39:07+02	7	35
112	5	2	2025-08-17 01:39:18+02	11	36
110	2	2	2025-08-17 21:03:03+02	2857	37
110	2	2	2025-08-18 15:04:59+02	4617	38
108	1	2	2025-08-21 19:08:03+02	4763	39
108	2	2	2025-08-21 19:11:46+02	223	40
108	3	2	2025-08-21 19:17:31+02	344	41
108	4	2	2025-08-21 19:17:33+02	2	42
108	6	2	2025-08-21 19:17:36+02	3	43
110	2	2	2025-08-23 09:35:07+02	4038	44
81	1	2	2025-08-28 18:46:46+02	84	49
81	1	2	2025-08-28 18:59:58+02	28	50
81	2	2	2025-08-28 19:18:02+02	1084	51
81	3	2	2025-08-28 19:41:33+02	1411	52
107	1	2	2025-09-03 19:01:20+02	858	53
107	2	2	2025-09-03 19:39:06+02	2265	54
107	3	2	2025-09-03 19:49:57+02	651	55
136	1	2	2025-09-14 22:55:20+02	53291	59
61	1	2	2025-09-19 20:19:20+02	736	60
61	1	2	2025-09-20 10:51:22+02	12815	61
93	4	2	2025-09-20 16:58:54+02	2380	62
93	5	2	2025-09-20 17:08:07+02	553	63
93	6	2	2025-09-20 17:25:35+02	1048	64
93	7	2	2025-09-20 17:25:46+02	11	65
114	1	2	2025-09-21 11:59:10+02	16315	66
106	1	2	2025-09-28 10:08:55+02	14	67
106	1	2	2025-09-28 12:15:57+02	228	68
106	2	2	2025-09-28 12:58:59+02	2582	69
25	1	2	2025-09-28 22:55:42+02	16	70
47	1	2	2025-10-03 00:44:51+02	1581	71
88	1	2	2025-10-03 03:26:33+02	1593	72
96	1	2	2025-10-03 11:34:22+02	8000	73
109	2	2	2025-10-03 12:40:03+02	146	74
109	3	2	2025-10-03 12:44:54+02	291	75
109	4	2	2025-10-03 12:50:40+02	346	76
58	1	2	2025-10-04 22:42:27+02	6	79
58	2	2	2025-10-04 22:43:30+02	8	80
94	1	2	2025-10-04 22:43:57+02	4	81
58	2	2	2025-10-05 00:42:38+02	6863	82
58	3	2	2025-10-05 00:43:29+02	34	83
58	1	2	2025-10-05 10:36:22+02	439	84
94	1	2	2025-10-05 11:41:00+02	34	85
94	1	2	2025-10-05 11:48:09+02	19	86
58	1	2	2025-10-05 12:16:45+02	4	87
58	1	2	2025-10-05 12:17:19+02	1	88
58	2	2	2025-10-05 12:17:22+02	3	89
58	1	2	2025-10-05 12:24:30+02	13	90
58	1	2	2025-10-05 12:32:29+02	346	91
58	2	2	2025-10-05 12:53:59+02	1290	92
58	3	2	2025-10-05 12:58:16+02	257	93
58	4	2	2025-10-05 14:04:23+02	3342	94
58	5	2	2025-10-05 16:55:15+02	6940	95
58	6	2	2025-10-06 22:07:49+02	485	96
100	1	2	2025-10-07 03:52:32+02	1217	97
58	7	2	2025-10-07 09:42:21+02	2464	98
58	8	2	2025-10-07 13:57:36+02	4	99
58	8	2	2025-10-07 14:01:49+02	90	100
58	9	2	2025-10-08 02:39:01+02	10376	101
94	1	2	2025-10-08 02:54:10+02	866	102
17	1	2	2025-10-08 03:26:41+02	69	103
100	1	2	2025-10-09 17:22:38+02	1002	104
100	1	2	2025-10-09 23:14:08+02	20	105
58	1	2	2025-10-12 00:30:40+02	417	106
58	1	2	2025-10-12 00:51:06+02	6	107
58	2	2	2025-10-12 00:53:02+02	116	108
58	3	2	2025-10-12 00:54:16+02	74	109
58	4	2	2025-10-12 01:00:23+02	367	110
58	5	2	2025-10-12 02:44:39+02	6256	111
58	6	2	2025-10-12 02:44:51+02	12	112
58	7	2	2025-10-12 02:45:14+02	23	113
58	8	2	2025-10-12 02:45:26+02	12	114
58	9	2	2025-10-12 02:45:53+02	27	115
58	1	2	2025-10-12 13:01:07+02	5	116
58	2	2	2025-10-12 13:12:36+02	689	117
58	3	2	2025-10-12 13:12:40+02	4	118
58	4	2	2025-10-12 13:16:15+02	215	119
107	1	2	2025-10-12 18:42:11+02	29	120
107	2	2	2025-10-12 18:51:58+02	587	121
109	2	2	2025-10-12 20:48:10+02	515	122
109	3	2	2025-10-12 20:52:12+02	242	123
109	4	2	2025-10-12 21:03:41+02	689	124
47	1	2	2025-10-15 15:03:02+02	8556	125
88	1	2	2025-10-16 14:42:54+02	1832	126
109	2	2	2025-10-16 15:00:35+02	1018	127
109	3	2	2025-10-16 15:56:06+02	3331	128
106	1	2	2025-10-17 18:28:16+02	1333	129
106	2	2	2025-10-18 10:10:43+02	1797	130
109	5	2	2025-10-18 10:13:02+02	116	131
109	6	2	2025-10-18 10:16:39+02	11	132
109	6	2	2025-10-18 10:42:02+02	1260	133
109	6	2	2025-10-18 13:56:30+02	4	134
55	4	2	2025-10-18 19:42:39+02	68	135
55	6	2	2025-10-18 20:13:21+02	1842	136
55	7	2	2025-10-18 20:51:52+02	2311	137
55	8	2	2025-10-18 20:59:46+02	474	138
55	10	2	2025-10-19 09:43:02+02	4421	139
44	2	2	2025-10-19 13:01:09+02	62	140
44	3	2	2025-10-19 13:35:04+02	2035	141
14	3	2	2025-10-19 13:38:11+02	160	142
14	6	2	2025-10-19 13:54:10+02	959	143
30	1	2	2025-10-19 14:15:06+02	1231	144
151	1	2	2025-10-22 23:52:05+02	1110	145
151	2	2	2025-10-22 23:55:30+02	205	146
30	1	2	2025-10-23 21:24:02+02	56	147
105	1	2	2025-08-24 19:17:40+02	25	45
105	1	2	2025-08-28 17:10:19+02	1936	46
105	3	2	2025-08-28 17:25:43+02	924	47
105	5	2	2025-08-28 17:43:00+02	1037	48
105	1	2	2025-09-06 08:36:54+02	475	56
105	3	2	2025-09-06 08:55:58+02	1143	57
105	5	2	2025-09-06 09:07:40+02	702	58
105	1	2	2025-10-03 16:05:30+02	1607	77
105	3	2	2025-10-03 16:23:56+02	1106	78
151	1	2	2025-10-26 11:08:30+01	111	148
151	2	2	2025-10-26 11:12:42+01	252	149
151	3	2	2025-10-26 11:50:09+01	2247	150
151	5	2	2025-10-27 15:50:26+01	16	151
\.


--
-- Data for Name: shelves; Type: TABLE DATA; Schema: flashback; Owner: flashback
--

COPY flashback.shelves (resource, subject) FROM stdin;
21	1
82	6
101	6
113	11
116	1
107	6
41	6
43	2
118	6
93	3
61	3
2	3
99	6
27	6
62	6
38	6
19	6
35	6
15	14
71	6
7	6
47	5
88	5
122	6
87	6
119	25
84	6
103	6
105	6
83	19
95	6
6	6
77	6
114	6
74	6
34	16
53	6
55	7
26	7
45	7
44	7
58	26
89	8
94	26
50	4
5	9
108	27
124	27
112	27
100	24
135	38
24	6
90	19
76	4
69	26
9	6
8	6
70	19
49	41
49	42
12	11
121	6
3	12
60	7
39	34
14	15
106	15
25	18
125	6
11	6
126	6
48	11
65	11
13	11
33	11
75	11
80	11
42	11
40	11
31	13
127	13
37	13
32	4
128	6
17	11
110	27
51	11
92	11
67	13
104	6
20	15
111	18
10	13
109	5
96	5
56	6
115	29
129	29
30	15
97	25
28	18
79	18
59	43
29	23
22	6
72	5
23	6
16	19
86	19
4	19
130	11
57	2
131	6
81	13
132	4
18	6
123	6
68	18
66	6
54	6
46	4
134	28
52	43
85	14
36	18
78	6
98	26
1	6
91	44
136	13
137	13
138	45
139	15
141	26
142	26
143	26
144	15
145	15
146	15
147	15
148	15
149	15
150	15
151	51
140	6
152	6
153	6
154	6
155	45
63	45
102	45
64	45
156	8
157	6
158	37
159	45
160	6
161	45
162	50
163	8
164	18
165	6
166	19
167	10
168	45
169	20
170	52
171	8
172	6
173	23
174	19
175	6
176	4
177	4
178	26
179	26
180	26
181	50
182	19
183	6
184	6
185	45
186	46
187	53
188	13
189	8
190	37
191	27
192	11
193	45
194	50
195	6
196	6
197	28
198	6
199	52
200	8
201	6
202	50
203	6
204	6
205	6
206	8
207	25
208	6
209	11
210	6
211	13
212	13
213	45
\.


--
-- Data for Name: subjects; Type: TABLE DATA; Schema: flashback; Owner: flashback
--

COPY flashback.subjects (id, name) FROM stdin;
1	Algorithms
2	x64 Assembly
3	Boost
4	C
5	CMake
6	C++
7	Docker
8	Embedded Linux
9	GNU Debugger
10	Git
12	LaTeX
13	Linux Administration
15	OpenCV
16	OpenSSL
17	Perf
18	PostgreSQL
19	Qt
21	Tmux
22	Valgrind
23	Vim
24	GoogleTest
25	OpenGL
26	Yocto
28	Vulkan
29	Mutt
30	Buildroot
31	PlantUML
32	ARM Assembly
33	gRPC
34	eBPF
35	Physics
36	Kubernetes
37	Rust
38	CUDA
40	Sphinx
14	Calculus
27	GitHub Actions
41	Linear Algebra
42	Matrix Algebra
43	Offensive Security
11	Linux Kernel Development
44	GNU Compiler Collection
45	Cyber Security
46	Protocol Buffers
47	Device Tree
48	Uboot
49	Typst
50	Python
51	FTXUI
20	Cryptography
52	LLVM
53	Quantum Computing
54	pqxx
\.


--
-- Data for Name: subjects_activities; Type: TABLE DATA; Schema: flashback; Owner: flashback
--

COPY flashback.subjects_activities (id, "user", subject, action, "time") FROM stdin;
\.


--
-- Data for Name: topics; Type: TABLE DATA; Schema: flashback; Owner: flashback
--

COPY flashback.topics ("position", name, subject, level) FROM stdin;
1	Compiling with NASM	2	surface
2	Debugging with GNU Debugger	2	surface
3	Analyzing Binary Objects	2	surface
4	Numeric Representations	2	surface
5	Registers	2	surface
6	Invoking System Calls	2	surface
7	Memory Sections	2	surface
8	External Functions	2	surface
9	Integral Arithmetic Operations	2	surface
10	Floating Point Arithmetic Operations	2	surface
11	Bitwise Operations	2	surface
12	Execution Flow Control	2	surface
13	Repeating Execution	2	surface
14	Memory Operations	2	surface
15	Stack Operations	2	surface
16	Stack Alignment	2	surface
17	Procedures	2	surface
18	Local Memory Sections	2	surface
19	External Linkage	2	surface
20	Inline Functions	2	surface
21	Macros	2	surface
22	Input/Output System Calls	2	surface
23	Stack Overflow	2	surface
24	Command Line Arguments	2	surface
25	File Operations	2	surface
26	Vector Registeres Support	2	surface
31	Scale Service	7	surface
15	Create Variable	5	surface
34	Workflows	5	surface
4	Scalar Class Template	15	surface
13	Drawing Rectangle	15	surface
18	Including OpenCV Headers	15	surface
31	std::variant	6	surface
32	Optional Return Type	6	surface
33	Expected Return Type	6	surface
34	Three-Way Comparison Operator	6	surface
35	Class Default Constructors	6	surface
36	Class Non-static Member Declaration	6	surface
37	No Discard Attribute	6	surface
38	This Deduction	6	surface
39	Templates	6	surface
40	Typename	6	surface
41	Template Translation Phases	6	surface
42	Function Template Definition	6	surface
43	Abbreviated Function Template	6	surface
44	Function Template Usage	6	surface
45	Function Template Argument Deduction	6	surface
46	Multiple Function Template Parameters	6	surface
47	NonType Template Parameter	6	surface
48	Template Template Parameter	6	surface
49	Variadic Template	6	surface
50	Fold Expression	6	surface
51	Automatic Return Type Deduction	6	surface
52	Default Template Arguments	6	surface
53	Overloading Function Templates	6	surface
54	Concept	6	surface
55	Concept Declaration	6	surface
56	Standard Concepts	6	surface
57	Class Template	6	surface
58	Class Template Argument	6	surface
59	Class Template Friend Function	6	surface
60	Class Template Specialization	6	surface
61	Class Template Default Parameters	6	surface
62	Alias Templates	6	surface
63	Class Template Argument Deduction	6	surface
64	Class Template Argument Deduction Guides	6	surface
65	Range-based loop	6	surface
66	Object Alignment	6	surface
67	Operators	6	surface
68	Operator Overloading	6	surface
69	Cooked User-Defined Literals	6	surface
70	Raw User-Defined Literals	6	surface
71	Move Semantics	6	surface
72	Fallback Copy	6	surface
73	Moved From State	6	surface
74	Rvalue Reference	6	surface
75	Generated Special Member Functions	6	surface
76	Move Operation Pitfalls	6	surface
77	Disabling Move Operations	6	surface
78	Value Semantics	6	surface
79	Virtual Functions	6	surface
80	Inheritance	6	surface
81	Streams	6	surface
82	Input Streams	6	surface
83	Output Streams	6	surface
84	File Streams	6	surface
85	Sync Streams	6	surface
86	String Streams	6	surface
87	Span Streams	6	surface
88	Containers	6	surface
89	Vector	6	surface
90	String	6	surface
91	Numeric to String Conversion	6	surface
92	String Literals	6	surface
93	Raw String Literals	6	surface
94	String View	6	surface
95	String Operations	6	surface
96	Text Formatting	6	surface
97	Text Printing	6	surface
98	Regular Expressions	6	surface
99	Numeric	6	surface
100	Complex	6	surface
101	Random	6	surface
102	Chrono Duration	6	surface
103	Chrono Time Point	6	surface
104	Chrono Clocks	6	surface
105	Chrono Literals	6	surface
106	Chrono Date	6	surface
107	Chrono Date Literals	6	surface
108	Chrono File Clocks	6	surface
109	Ranges	6	surface
110	Sentinels	6	surface
111	Iterators	6	surface
112	Overlapping Iterators	6	surface
113	Data Structures	6	surface
114	Singly Linked List	6	surface
115	Doubly Linked List	6	surface
116	Algorithms	6	surface
117	Parallel Algorithms	6	surface
118	Comparing Algorithms	6	surface
119	Ranges Algorithms	6	surface
120	Equality Checking Algorithms	6	surface
121	Iterating Algorithms	6	surface
122	Swapping Algorithms	6	surface
123	Sorting Algorithms	6	surface
124	Partitioning Algorithms	6	surface
125	Sorted Range Algorithms	6	surface
126	Linear Operation Algorithms	6	surface
127	Set Operation Algorithms	6	surface
128	Transformation Algorithms	6	surface
129	Permutation Transform Algorithms	6	surface
130	Boolean Reduction Algorithms	6	surface
131	Strings Algorithms	6	surface
132	Views	6	surface
133	Contracts	6	surface
134	Contract Types	6	surface
135	Contract Violation	6	surface
136	Contract Violation Handler	6	surface
137	Contract Controlling Modes	6	surface
138	Virtual Function Contracts	6	surface
139	Inter Process Communication	6	surface
140	Thread Construction	6	surface
141	Thread Destructor	6	surface
142	Joining Threads	6	surface
143	Detaching Threads	6	surface
144	Moving Threads	6	surface
145	Stop Source	6	surface
146	Stop Token	6	surface
147	Stop Callback	6	surface
148	Hardware Concurrency	6	surface
149	Synchronization	6	surface
150	Mutex	6	surface
151	Lock Guard	6	surface
152	Scoped Lock	6	surface
153	Unique Lock	6	surface
154	Shared Mutex	6	surface
155	Shared Lock	6	surface
156	Timed Mutex	6	surface
157	Shared Timed Mutex	6	surface
158	Recursive Mutex	6	surface
159	Conditional Variable	6	surface
160	Atomic	6	surface
173	Processes	6	surface
188	File Existence Checking	6	surface
190	Filesystem Attributes Querying	6	surface
191	Filesystem Attributes Modification	6	surface
192	Filesystem Existence Checking	6	surface
193	File Status	6	surface
194	File Permissions	6	surface
195	File Creation	6	surface
196	Directory Creation	6	surface
197	Symbolic Link Creation	6	surface
198	Hard Link Creation	6	surface
199	File Copy	6	surface
200	File Removal	6	surface
201	Filesystem Path Conversion	6	surface
202	Directory Iteration	6	surface
203	Directory Entries	6	surface
204	Logging	6	surface
205	Design Patterns	6	surface
206	Creational Design Patterns	6	surface
207	Factory Method Design Pattern	6	surface
208	Abstract Factory Design Pattern	6	surface
209	Builder Design Pattern	6	surface
210	Prototype Design Pattern	6	surface
211	Singleton Design Pattern	6	surface
212	Behavioral Design Patterns	6	surface
213	Strategy	6	surface
214	Null Object	6	surface
215	Static Strategy	6	surface
216	Returning Value from Threads	6	surface
217	Command Pattern	6	surface
218	Memento Pattern	6	surface
219	Chain of Responsibility Pattern	6	surface
220	Observer Pattern	6	surface
5	Point Class Template	15	surface
14	Drawing Text	15	surface
23	Mouse Integration	15	surface
32	Remove Service	7	surface
2	Configuring Project	5	surface
3	Writing CMake Listfile	5	surface
6	Cache Manipulation	5	surface
7	Listing Cache Information	5	surface
8	Listing Build Information	5	surface
9	Logging	5	surface
10	Trace Mode	5	surface
16	Variable Scope	5	surface
25	Find Packages	5	surface
1	Daemon	7	surface
2	Client	7	surface
3	Context Listing	7	surface
4	Context Creation	7	surface
5	Context Switch	7	surface
6	Image Listing	7	surface
7	Image Searching	7	surface
8	Image Pulling	7	surface
9	Image Inspecting	7	surface
10	Image Building	7	surface
42	Create Network	7	surface
11	Image Removing	7	surface
12	Image Verification	7	surface
13	Container Running	7	surface
14	Container Restarting	7	surface
1	Debug Information Generation	9	surface
2	Text User Interface	9	surface
3	Command History	9	surface
4	Starting Execution	9	surface
5	Attaching Process	9	surface
6	Detaching Process	9	surface
7	Source Listing	9	surface
8	Breakpoints	9	surface
9	Breakpoint Creation	9	surface
10	Breakpoint Removal	9	surface
11	Breakpoint Conditional	9	surface
12	Breakpoint Skipping	9	surface
13	Breakpoint Availability	9	surface
14	Breakpoint Saving	9	surface
15	Watchpoint Creation	9	surface
16	Execution Flow	9	surface
17	Memory Examination	9	surface
18	Thread Tracking	9	surface
19	Backtrace	9	surface
20	Core Dump Control	9	surface
21	Core Dump Generation	9	surface
22	Memory Inspection	9	surface
23	Memory Modification	9	surface
24	Shell Command Execution	9	surface
25	Debugger Configuration	9	surface
1	Porcelain Commands	10	surface
2	Plumbing Commands	10	surface
3	Config	10	surface
4	Alias	10	surface
5	Branch	10	surface
6	Stash	10	surface
7	Log	10	surface
8	Push	10	surface
9	Clone	10	surface
10	Partial Clone	10	surface
11	Remote	10	surface
12	Fetch	10	surface
13	Blame	10	surface
14	Reflog	10	surface
15	Diff	10	surface
16	Reused Recorded Resolution	10	surface
17	Maitainance	10	surface
18	Commit Graph	10	surface
19	Filesystem Monitor	10	surface
20	Multipack Indexes	10	surface
21	Reachability Bitmaps	10	surface
22	Geometric Repacking	10	surface
23	Sparse Checkout	10	surface
15	Container Listing	7	surface
16	Remove Container	7	surface
17	Dockerfile	7	surface
18	Tag Image	7	surface
19	Publish Image	7	surface
1	Basic Data Types	15	surface
6	Size Class Template	15	surface
9	Complex Class Template	15	surface
11	Drawing	15	surface
15	Annotating	15	surface
20	Swarm Structure	7	surface
32	Building Cross Platform Targets	5	surface
21	Swarm Initializing	7	surface
1	Document	12	surface
2	Package	12	surface
3	Common Packages	12	surface
4	Unicode Text	12	surface
5	New Line	12	surface
6	Text Format	12	surface
7	Text Color	12	surface
8	Inline Math	12	surface
9	Block Math	12	surface
1	RAID	13	surface
2	Running RAID	13	surface
3	RAID Status	13	surface
4	Making RAID Permanent	13	surface
5	Monitoring RAID	13	surface
6	Stopping RAID	13	surface
7	Removing RAID	13	surface
8	Extending RAID	13	surface
1	Functions	14	surface
1	CA Private Key	16	surface
2	CA Certificate	16	surface
1	Performance Analysis	17	surface
2	Hotspot	17	surface
1	Terminologies	18	surface
2	Postgres Structure	18	surface
3	Installation	18	surface
4	Postgres Client	18	surface
1	Qt Installation	19	surface
2	Qt Widgets	19	surface
3	QML	19	surface
4	Core Elements	19	surface
5	Item	19	surface
6	Window	19	surface
7	Rectangle	19	surface
8	Text	19	surface
9	Property Alias	19	surface
22	Define Executables	5	surface
29	Policies	5	surface
10	Signals	19	surface
11	Image	19	surface
12	Mouse Area	19	surface
13	Component	19	surface
1	Binary Analysis	20	surface
1	Configuration	21	surface
2	Server	21	surface
3	Client	21	surface
1	Memcheck	22	surface
2	Helgrind	22	surface
3	Callgrind	22	surface
4	Cachegrind	22	surface
5	Running with GDB	22	surface
1	Embedded Linux Development	8	surface
2	Host Toolchains	8	surface
3	Cross Toolchains	8	surface
4	Crosstool-ng Installation	8	surface
5	Crosstool-ng Configuration	8	surface
6	Building Toolchain	8	surface
7	Using Toolchains	8	surface
8	U-Boot Configuration	8	surface
9	Raspberry Pi	8	surface
10	U-Boot Kernel Loading	8	surface
11	U-Boot Command Line	8	surface
13	Quick Emulator	8	surface
14	Yocto Project	8	surface
15	Patch Files	8	surface
16	Yocto Principles	8	surface
17	Bitbake	8	surface
18	Recipe	8	surface
19	Metadata	8	surface
20	Poky	8	surface
21	Image Creation	8	surface
12	Device Tree Specification	8	surface
1	Workflow Structure	27	surface
2	Runner	27	surface
3	Jobs	27	surface
4	Steps	27	surface
5	Checkout	27	surface
6	Node Setup	27	surface
7	Creating A Release	27	surface
8	Uploading Release Assets	27	surface
9	Storing Cache	27	surface
10	Storing Artifacts	27	surface
11	Restoring Artifacts	27	surface
12	Deleting Stored Artifacts	27	surface
13	Job Conditions	27	surface
14	Job Failure	27	surface
15	Outputs	27	surface
16	Runner Matrix	27	surface
17	Permissions	27	surface
7	Rectangle Class Template	15	surface
9	Mandatory Access Control	13	surface
10	Discretionary Access Control Commands	13	surface
11	Enabling SELinux	13	surface
12	Contexts	13	surface
13	Process Attributes	13	surface
14	Type Enforcement	13	surface
18	Log Annotations	27	surface
19	Running Workflows Locally	27	surface
20	Creating Actions	27	surface
15	Roles	13	surface
16	Users	13	surface
17	Sensitivity	13	surface
18	Categories	13	surface
19	Locating Tools	13	surface
20	System Monitoring	13	surface
21	Working Directory	13	surface
22	User Management	13	surface
23	System Domain	13	surface
24	Kernel Management	13	surface
25	Output Generators	13	surface
26	Removing Files	13	surface
27	Creating Directories	13	surface
28	Manual Pages	13	surface
29	Moving Files	13	surface
30	Changing Directory	13	surface
31	Listing Directory Entries	13	surface
32	Stream Manipulators	13	surface
33	Grep	13	surface
2	Ethical Hacking	45	surface
3	Penetration Testing	45	surface
34	Sed	13	surface
5	Backup Strategies	18	surface
6	Logical Backup	18	surface
7	Physical Backup	18	surface
8	Text Backup	18	surface
9	Restore Text Backup	18	surface
10	Configure Search Path	18	surface
11	Formatted Backup	18	surface
12	Restore Formatted Backup	18	surface
13	Backup Cluster	18	surface
14	Scheduling Backup	18	surface
15	Copying Data	18	surface
16	Point in Time Recovery	18	surface
35	Defining Policies	13	surface
36	Unconfined Domains	13	surface
1	Asynchronous IO Context	3	surface
2	Asynchronous Event Processing Loop	3	surface
3	Queueing Asynchronous Tasks	3	surface
4	Serializing Event Processing Loop	3	surface
5	Handling Exceptional Event Processing Loop Control FLow	3	surface
6	Deadline Timer	3	surface
7	Endpoint	3	surface
8	Active Socket	3	surface
10	Acceptor	3	surface
9	Passive Socket	3	surface
11	Resolving DNS	3	surface
12	Synchronous TCP Client	3	surface
13	Synchronous TCP Connection	3	surface
14	Asynchronous TCP Connection	3	surface
15	Writing into and Reading from Socket	3	surface
2	Developer Options	44	surface
3	Warning Options	44	surface
1	Poky Build System	26	surface
2	Bitbake	26	surface
3	Create Build Environment	26	surface
4	Basic Configuration	26	surface
5	Build Images	26	surface
6	Run Images	26	surface
7	Toaster	26	surface
8	Metadata	26	surface
9	Recipe	26	surface
10	Fetch Source	26	surface
11	Run Recipe	26	surface
43	Network Listing	7	surface
44	Use Network	7	surface
4	Variables	5	surface
23	Define Libraries	5	surface
27	Subdirectories	5	surface
12	Troubleshoot Build	26	surface
13	Build Process	26	surface
14	Configure Build	26	surface
15	Package Format	26	surface
16	Installation Script	26	surface
17	Shared State Cache	26	surface
18	Recipe Variables	26	surface
19	Root Filesystem	26	surface
20	Package Index	26	surface
21	Write Recipe	26	surface
22	Toolchain	26	surface
8	Rotated Rectangle Class Template	15	surface
1	Tools	5	surface
5	Configuring Targets	5	surface
11	Presets	5	surface
12	Building Project	5	surface
13	Cache Cleaning	5	surface
14	Installing Targets	5	surface
18	CMake Script	5	surface
19	Extenal Command	5	surface
20	Manual	5	surface
26	Testing	5	surface
30	Exporting Executables	5	surface
33	Writing Presets	5	surface
2	Linux Kernel Source Tree	11	surface
3	Linux Kernel Configuration System	11	surface
4	Kconfig Semantics	11	surface
5	Linux Kernel Build System	11	surface
6	Installing Kernel Build Artifacts	11	surface
7	Cleaning Up Kernel Source Tree	11	surface
1	Embedded Linux Domain	11	surface
9	Module Listing	11	surface
10	Module Information Retrieval	11	surface
11	Module Loading	11	surface
12	Module Dependencies	11	surface
13	Module Removal	11	surface
14	Module Configuration	11	surface
15	Module Skeleton	11	surface
16	Module Building	11	surface
17	Module Parameters	11	surface
18	Device Tree Specification	11	surface
1	Assertion	24	surface
2	Test Case	24	surface
3	Test Fixture	24	surface
4	Setup Fixture	24	surface
5	Destruct Fixture	24	surface
6	Configure Tests	24	surface
7	Run Tests	24	surface
22	Swarm Listing	7	surface
23	Swarm Joining	7	surface
24	Swarm Security	7	surface
25	Swarm Modification	7	surface
26	Swarm Secret	7	surface
28	Create Service	7	surface
34	Plugin Installation	7	surface
35	Plugin Listing	7	surface
36	Volume Creation	7	surface
37	Volume Listing	7	surface
38	Volume Inspecting	7	surface
39	Volume Deletion	7	surface
40	Volume Attachment	7	surface
41	Volume Corruption	7	surface
45	Create Service Replica	7	surface
19	Compiling Device Tree Source	11	surface
20	Building Bootloader	11	surface
21	Booting the Kernel	11	surface
22	Kernel Command Line	11	surface
23	Initial RAM Filesystem	11	surface
24	Udev	11	surface
25	Kernel Locking	11	surface
26	Spinlocks	11	surface
27	Mutexes	11	surface
28	Kernel Timer	11	surface
29	Kernel Sleeping	11	surface
30	Wait Queue	11	surface
31	Wait Event	11	surface
32	Wake Up	11	surface
33	Module Structure	11	surface
34	Module Synchronization	11	surface
35	Kernel Tracing	11	surface
8	Running Kernel	11	surface
1	Building Executable	6	surface
8	Writing Mocks	24	surface
9	Expectations	24	surface
2	Fundamental Data Types	6	surface
3	Variable Initialization	6	surface
4	Constant Initialization	6	surface
5	Uniform Initialization	6	surface
6	Aggregate Initialization	6	surface
7	Designated Initialization	6	surface
8	Function Declaration	6	surface
9	Constant Expression	6	surface
10	Constant Evaluation	6	surface
11	Conditional Constant Evaluation	6	surface
12	Lambda	6	surface
13	Raw Pointer	6	surface
14	Smart Pointer	6	surface
15	Unique Pointer	6	surface
16	Shared Pointer	6	surface
17	Weak Pointer	6	surface
18	Namespace Abbreviation	6	surface
19	Unnamed Namespaces	6	surface
20	Inline Namespaces	6	surface
21	Nested Namespaces	6	surface
22	Modules	6	surface
23	Module Interface Unit	6	surface
24	Module Interface Partition	6	surface
25	Module Implementation Partition	6	surface
26	Automatic Type Deduction	6	surface
27	Structured Binding	6	surface
28	Typedef	6	surface
29	Type Aliases	6	surface
30	Enumerations	6	surface
29	List Services	7	surface
33	Troubleshoot Service	7	surface
2	Matrix Class Template	15	surface
3	Vector Class Template	15	surface
16	Modules	15	surface
17	Installation	15	surface
19	CMake Integration	15	surface
20	Basic Image Operations	15	surface
21	Options	5	surface
24	Set Target Properties	5	surface
28	Fetch Content	5	surface
10	Matrix Operations	15	surface
22	Window Management	15	surface
27	Swarm Backup	7	surface
30	Inspect Service	7	surface
17	Generators	5	surface
12	Drawing Circle	15	surface
21	Capture Video	15	surface
24	File Storage	15	surface
31	Exporting Libraries	5	surface
161	Thread Safe Static Initialization	6	surface
162	Once Flag	6	surface
163	Future	6	surface
164	Async	6	surface
165	Promise	6	surface
166	Packaged Task	6	surface
167	Semaphore	6	surface
168	Semaphore Properties	6	surface
169	Counting Semaphore	6	surface
170	Binary Semaphore	6	surface
171	Latch	6	surface
172	Barrier	6	surface
174	Coroutine	6	surface
175	Monostate Pattern	6	surface
176	Path Terminalogy	6	surface
177	Filesystem Error Handling	6	surface
178	File Types	6	surface
179	Path Construction	6	surface
180	Path Inspection	6	surface
181	Path Conversion	6	surface
182	Path Relativity	6	surface
183	Generic Paths	6	surface
184	Path Expansion	6	surface
185	Path Modification	6	surface
186	Path Reduction	6	surface
187	Path Comparison	6	surface
189	File Type Checking	6	surface
1	Library Integration	51	surface
2	Library Structure	51	surface
3	Dimension	51	surface
4	Color	51	surface
5	Pixel	51	surface
6	Screen	51	surface
7	Pixel Manipulation	51	surface
8	Cursor Control	51	surface
9	Elements	51	surface
10	Decorators	51	surface
11	Text	51	surface
12	Vertical Text	51	surface
13	Paragraph	51	surface
14	Border	51	surface
15	Window	51	surface
16	Separator	51	surface
17	Gauge	51	surface
18	Graph	51	surface
19	Colors	51	surface
20	Linear Gradient	51	surface
21	Style	51	surface
22	Layout	51	surface
23	Table	51	surface
24	Canvas	51	surface
25	Input	51	surface
26	Menu	51	surface
27	Toggle	51	surface
28	CheckBox	51	surface
29	RadioBox	51	surface
30	Dropdown	51	surface
31	Slider	51	surface
32	Renderer	51	surface
33	CatchEvent	51	surface
34	Maybe	51	surface
35	Collapsible	51	surface
36	Container	51	surface
37	ResizableSplit	51	surface
38	Process Custom Events	51	surface
39	C++20 Modules	51	surface
1	Piped Input	51	depth
\.


--
-- Data for Name: topics_activities; Type: TABLE DATA; Schema: flashback; Owner: flashback
--

COPY flashback.topics_activities (id, "user", topic, action, "time", subject, level) FROM stdin;
\.


--
-- Data for Name: topics_cards; Type: TABLE DATA; Schema: flashback; Owner: flashback
--

COPY flashback.topics_cards (topic, card, "position", subject, level) FROM stdin;
35	5433	1	13	surface
35	5438	6	13	surface
4	4015	2	2	surface
9	4028	1	2	surface
9	4029	2	2	surface
9	4030	3	2	surface
9	4031	4	2	surface
10	4033	2	2	surface
10	4034	3	2	surface
10	4035	4	2	surface
15	4043	1	2	surface
16	4044	1	2	surface
16	4045	2	2	surface
17	4046	1	2	surface
17	4047	2	2	surface
18	4049	1	2	surface
20	4053	2	2	surface
21	4057	2	2	surface
22	4058	1	2	surface
22	4059	2	2	surface
23	4060	1	2	surface
23	4061	2	2	surface
24	4064	3	2	surface
26	4074	6	2	surface
26	4075	7	2	surface
1	4076	1	3	surface
3	2649	7	5	surface
8	1265	4	7	surface
27	1328	2	7	surface
12	22	1	15	surface
2	3777	15	5	surface
28	3755	3	5	surface
3	3740	1	5	surface
3	3743	3	5	surface
2	3749	9	5	surface
2	4093	1	5	surface
2	4094	2	5	surface
2	4095	3	5	surface
2	4096	4	5	surface
12	3738	5	5	surface
4	3745	2	5	surface
28	3759	7	5	surface
28	3765	9	5	surface
31	3769	2	5	surface
33	3775	8	5	surface
6	3650	1	15	surface
3	1018	6	5	surface
2	4133	1	6	surface
5	4137	1	6	surface
5	4138	2	6	surface
6	4139	1	6	surface
7	4140	1	6	surface
11	4144	1	6	surface
11	4145	2	6	surface
11	4146	3	6	surface
15	4147	1	6	surface
19	4149	1	6	surface
19	4150	2	6	surface
20	4151	1	6	surface
2	902	1	2	surface
2	904	3	2	surface
2	905	4	2	surface
2	906	5	2	surface
2	907	6	2	surface
2	908	7	2	surface
2	909	8	2	surface
2	910	9	2	surface
2	911	10	2	surface
2	912	11	2	surface
2	913	12	2	surface
2	914	13	2	surface
2	915	14	2	surface
3	926	1	2	surface
3	927	2	2	surface
3	928	3	2	surface
4	897	1	2	surface
4	976	3	2	surface
5	898	1	2	surface
5	899	2	2	surface
5	900	3	2	surface
5	901	4	2	surface
6	950	1	2	surface
6	896	2	2	surface
6	919	3	2	surface
7	923	2	2	surface
7	924	3	2	surface
8	918	1	2	surface
10	931	1	2	surface
11	941	1	2	surface
11	942	2	2	surface
11	943	3	2	surface
12	920	1	2	surface
13	921	1	2	surface
13	922	2	2	surface
14	925	1	2	surface
17	940	3	2	surface
19	939	2	2	surface
20	965	1	2	surface
20	967	3	2	surface
20	968	4	2	surface
21	944	1	2	surface
24	962	1	2	surface
24	963	2	2	surface
25	951	1	2	surface
25	954	2	2	surface
25	955	3	2	surface
25	956	4	2	surface
26	977	1	2	surface
26	979	3	2	surface
26	980	4	2	surface
26	981	5	2	surface
1	2770	2	3	surface
2	2771	1	3	surface
2	2772	2	3	surface
3	2773	1	3	surface
3	2774	2	3	surface
4	2775	1	3	surface
5	2776	1	3	surface
6	2777	1	3	surface
1	108	1	6	surface
3	111	1	6	surface
4	116	1	6	surface
4	117	2	6	surface
8	110	1	6	surface
10	119	1	6	surface
18	109	1	6	surface
21	4152	1	6	surface
22	4154	2	6	surface
22	4156	4	6	surface
22	4157	5	6	surface
26	4163	1	6	surface
27	4165	1	6	surface
29	4167	1	6	surface
30	4168	1	6	surface
30	4169	2	6	surface
31	4170	1	6	surface
31	4171	2	6	surface
31	4172	3	6	surface
31	4173	4	6	surface
2	3658	7	15	surface
1	1254	4	7	surface
20	501	10	15	surface
20	3638	3	15	surface
22	3642	1	15	surface
20	509	13	15	surface
24	2659	1	5	surface
16	1028	2	5	surface
31	4174	5	6	surface
33	4175	1	6	surface
34	4176	1	6	surface
34	4177	2	6	surface
34	4178	3	6	surface
34	4179	4	6	surface
35	4182	1	6	surface
36	4183	1	6	surface
37	4184	1	6	surface
37	4185	2	6	surface
37	4186	3	6	surface
37	4187	4	6	surface
37	4188	5	6	surface
38	4189	1	6	surface
38	4190	2	6	surface
38	4191	3	6	surface
43	4198	1	6	surface
47	4207	1	6	surface
48	4208	1	6	surface
49	4209	1	6	surface
49	4210	2	6	surface
50	4211	1	6	surface
54	4223	1	6	surface
55	4224	1	6	surface
55	4225	2	6	surface
55	4226	3	6	surface
58	4230	1	6	surface
63	4239	2	6	surface
64	4244	2	6	surface
65	4247	1	6	surface
65	4248	2	6	surface
66	4249	1	6	surface
66	4251	3	6	surface
69	4254	2	6	surface
70	4255	1	6	surface
79	4286	1	6	surface
79	4287	2	6	surface
80	4288	1	6	surface
85	4289	1	6	surface
86	4290	1	6	surface
86	4291	2	6	surface
87	4292	1	6	surface
88	4293	1	6	surface
90	4294	1	6	surface
90	4295	2	6	surface
90	4296	3	6	surface
91	4297	1	6	surface
91	4298	2	6	surface
91	4299	3	6	surface
91	4300	4	6	surface
91	4301	5	6	surface
92	4302	1	6	surface
93	4303	1	6	surface
94	4305	1	6	surface
94	4308	4	6	surface
22	1484	3	6	surface
24	1485	1	6	surface
24	1486	2	6	surface
25	1487	1	6	surface
25	1488	2	6	surface
26	2813	2	6	surface
28	115	1	6	surface
34	640	5	6	surface
34	641	6	6	surface
39	2795	1	6	surface
40	2796	1	6	surface
41	2797	1	6	surface
41	2798	2	6	surface
42	2800	2	6	surface
44	2801	1	6	surface
45	2802	1	6	surface
45	2803	2	6	surface
45	2804	3	6	surface
45	2805	4	6	surface
46	2806	1	6	surface
46	2807	2	6	surface
46	2808	3	6	surface
51	2809	1	6	surface
51	2810	2	6	surface
51	2811	3	6	surface
52	2814	1	6	surface
52	2815	2	6	surface
53	2816	1	6	surface
53	2817	2	6	surface
53	2818	3	6	surface
53	2819	4	6	surface
53	2820	5	6	surface
57	2821	1	6	surface
57	2822	2	6	surface
57	2823	3	6	surface
59	2824	1	6	surface
60	2825	1	6	surface
60	2827	3	6	surface
61	2828	1	6	surface
62	2829	1	6	surface
62	2830	2	6	surface
63	2831	1	6	surface
63	2832	3	6	surface
63	2833	4	6	surface
63	2834	5	6	surface
64	2835	1	6	surface
64	2836	3	6	surface
64	2837	4	6	surface
66	1362	2	6	surface
69	1396	1	6	surface
70	1402	2	6	surface
71	2450	1	6	surface
71	2451	2	6	surface
71	2456	3	6	surface
71	2457	4	6	surface
71	2458	5	6	surface
72	2452	1	6	surface
72	2453	2	6	surface
72	2454	3	6	surface
73	2455	1	6	surface
73	2460	2	6	surface
74	2461	2	6	surface
75	2463	1	6	surface
75	2464	2	6	surface
75	2465	3	6	surface
75	2466	4	6	surface
75	2468	5	6	surface
75	2469	6	6	surface
75	2474	7	6	surface
76	2467	1	6	surface
76	2470	2	6	surface
76	2471	3	6	surface
76	2475	4	6	surface
77	2473	2	6	surface
77	2477	3	6	surface
78	2462	1	6	surface
78	2476	2	6	surface
78	2478	3	6	surface
93	1404	2	6	surface
94	1420	2	6	surface
94	1421	3	6	surface
95	4309	1	6	surface
96	4310	1	6	surface
96	4311	2	6	surface
96	4312	3	6	surface
96	4313	4	6	surface
96	4314	5	6	surface
97	4315	1	6	surface
98	4316	1	6	surface
98	4317	2	6	surface
98	4318	3	6	surface
98	4319	4	6	surface
98	4320	5	6	surface
98	4321	6	6	surface
98	4322	7	6	surface
98	4323	8	6	surface
98	4324	9	6	surface
99	4325	1	6	surface
99	4326	2	6	surface
99	4327	3	6	surface
99	4328	4	6	surface
99	4329	5	6	surface
99	4330	6	6	surface
99	4331	7	6	surface
100	4332	1	6	surface
101	4333	1	6	surface
101	4334	2	6	surface
101	4335	3	6	surface
101	4336	4	6	surface
101	4337	5	6	surface
102	4338	1	6	surface
102	4339	2	6	surface
102	4340	3	6	surface
104	4341	1	6	surface
104	4342	2	6	surface
105	4343	1	6	surface
107	4344	1	6	surface
107	4345	2	6	surface
107	4346	3	6	surface
108	4347	1	6	surface
108	4348	2	6	surface
108	4349	3	6	surface
109	4350	1	6	surface
110	4351	1	6	surface
35	5434	2	13	surface
112	4353	1	6	surface
116	4354	1	6	surface
117	4355	1	6	surface
117	4356	2	6	surface
118	4357	1	6	surface
119	4358	1	6	surface
119	4359	2	6	surface
119	4360	3	6	surface
120	4361	1	6	surface
121	4362	1	6	surface
121	4363	2	6	surface
121	4364	3	6	surface
121	4365	4	6	surface
122	4366	1	6	surface
122	4367	2	6	surface
122	4368	3	6	surface
122	4369	4	6	surface
123	4370	1	6	surface
123	4371	2	6	surface
123	4372	3	6	surface
123	4373	4	6	surface
123	4374	5	6	surface
123	4375	6	6	surface
123	4376	7	6	surface
123	4378	9	6	surface
123	4379	10	6	surface
123	4380	11	6	surface
124	4381	1	6	surface
124	4382	2	6	surface
124	4384	4	6	surface
125	4387	2	6	surface
125	4388	3	6	surface
125	4389	4	6	surface
126	4390	1	6	surface
126	4392	3	6	surface
126	4394	5	6	surface
129	4408	1	6	surface
131	4415	2	6	surface
131	4416	3	6	surface
131	4417	4	6	surface
131	4418	5	6	surface
131	4419	6	6	surface
131	4420	7	6	surface
132	4421	1	6	surface
133	4439	1	6	surface
133	4440	2	6	surface
133	4441	3	6	surface
134	4442	1	6	surface
134	4443	2	6	surface
134	4444	3	6	surface
135	4445	1	6	surface
136	4446	1	6	surface
137	4447	1	6	surface
137	4448	2	6	surface
138	4449	1	6	surface
2	2650	13	5	surface
8	1266	5	7	surface
9	1276	7	7	surface
27	1329	3	7	surface
3	3746	4	5	surface
1	1009	1	5	surface
4	1019	4	5	surface
123	2195	8	6	surface
124	2202	5	6	surface
125	2203	1	6	surface
126	2208	2	6	surface
126	2210	4	6	surface
127	2211	1	6	surface
127	2212	2	6	surface
127	2213	3	6	surface
127	2214	4	6	surface
128	2215	1	6	surface
128	2216	2	6	surface
128	2217	3	6	surface
128	2218	4	6	surface
128	2220	6	6	surface
128	2221	7	6	surface
128	2222	8	6	surface
128	2223	9	6	surface
129	2224	2	6	surface
129	2225	3	6	surface
130	2234	1	6	surface
130	2235	2	6	surface
130	2236	3	6	surface
131	1405	1	6	surface
132	2264	2	6	surface
132	2265	3	6	surface
132	2267	5	6	surface
132	2268	6	6	surface
132	2269	7	6	surface
132	2270	8	6	surface
132	2271	9	6	surface
132	2272	10	6	surface
132	2273	11	6	surface
132	2274	12	6	surface
132	2275	13	6	surface
132	2276	14	6	surface
132	2277	15	6	surface
132	2278	16	6	surface
132	2280	18	6	surface
4	2662	10	5	surface
35	5435	3	13	surface
24	2660	2	5	surface
16	5465	15	15	surface
16	5466	16	15	surface
17	495	3	15	surface
17	3633	2	15	surface
20	510	14	15	surface
14	3778	7	5	surface
28	3756	4	5	surface
31	3766	1	5	surface
7	3651	1	15	surface
2	3659	3	15	surface
6	1255	7	7	surface
12	2651	9	5	surface
8	1267	6	7	surface
10	1277	2	7	surface
39	1334	3	7	surface
5	3747	1	5	surface
3	3645	1	15	surface
1	1010	2	5	surface
4	1020	5	5	surface
12	504	2	15	surface
14	3779	8	5	surface
28	3757	5	5	surface
30	3767	1	5	surface
8	3652	1	15	surface
23	2661	4	5	surface
2	4594	1	7	surface
2	4596	3	7	surface
6	4600	1	7	surface
6	4601	2	7	surface
6	4602	3	7	surface
6	4603	4	7	surface
6	4604	5	7	surface
6	4605	6	7	surface
7	4606	1	7	surface
7	4607	2	7	surface
7	4608	3	7	surface
7	4609	4	7	surface
8	4610	1	7	surface
8	4611	2	7	surface
8	4612	3	7	surface
9	4613	1	7	surface
9	4614	2	7	surface
9	4615	3	7	surface
9	4616	4	7	surface
10	4617	1	7	surface
11	4619	2	7	surface
23	2663	5	5	surface
18	496	1	15	surface
19	3634	2	15	surface
20	511	15	15	surface
1	3644	4	15	surface
10	3660	1	15	surface
13	1256	7	7	surface
174	3882	2	6	surface
174	3883	3	6	surface
174	3884	4	6	surface
174	3885	5	6	surface
174	3886	6	6	surface
174	3887	7	6	surface
174	3888	8	6	surface
174	3889	9	6	surface
174	3890	10	6	surface
174	3891	11	6	surface
174	3892	12	6	surface
174	3893	13	6	surface
174	3894	14	6	surface
174	3895	15	6	surface
174	3896	16	6	surface
174	3897	17	6	surface
174	3898	18	6	surface
174	3899	19	6	surface
174	3900	20	6	surface
174	3901	21	6	surface
174	4506	1	6	surface
175	4507	1	6	surface
176	1765	1	6	surface
176	1766	2	6	surface
176	1767	3	6	surface
176	1768	4	6	surface
176	1769	5	6	surface
177	1770	1	6	surface
177	1771	2	6	surface
178	1772	1	6	surface
179	1773	1	6	surface
179	1774	2	6	surface
179	1775	3	6	surface
179	1776	4	6	surface
180	1777	1	6	surface
180	1778	2	6	surface
180	1779	3	6	surface
180	1780	4	6	surface
181	1781	1	6	surface
182	1782	1	6	surface
183	1783	1	6	surface
184	1784	1	6	surface
184	1785	2	6	surface
184	1786	3	6	surface
185	1787	1	6	surface
185	1788	2	6	surface
185	1789	3	6	surface
1	987	1	7	surface
1	988	2	7	surface
1	993	3	7	surface
2	989	2	7	surface
4	990	1	7	surface
5	992	1	7	surface
11	1278	1	7	surface
12	1343	1	7	surface
12	1352	2	7	surface
12	1353	3	7	surface
13	4624	1	7	surface
13	4625	2	7	surface
13	4626	3	7	surface
13	4627	4	7	surface
13	4628	5	7	surface
13	4629	6	7	surface
14	4630	1	7	surface
14	4631	2	7	surface
14	4632	3	7	surface
14	4633	4	7	surface
15	4634	1	7	surface
17	4635	1	7	surface
17	4636	2	7	surface
17	4637	3	7	surface
17	4638	4	7	surface
17	4639	5	7	surface
17	4640	6	7	surface
17	4641	7	7	surface
16	1261	1	7	surface
6	1268	8	7	surface
14	1279	8	7	surface
11	18	1	15	surface
17	5467	1	15	surface
19	5468	1	15	surface
20	497	6	15	surface
1	4700	1	8	surface
1	4701	2	8	surface
1	4702	3	8	surface
2	4705	2	8	surface
2	4708	5	8	surface
2	4709	6	8	surface
2	4710	7	8	surface
9	4751	1	8	surface
9	4752	2	8	surface
1	4790	1	9	surface
2	4791	1	9	surface
2	4792	2	9	surface
2	4793	3	9	surface
20	3637	2	15	surface
23	503	1	15	surface
20	512	16	15	surface
1	31	4	8	surface
2	29	3	8	surface
2	38	4	8	surface
2	2667	8	8	surface
2	2668	9	8	surface
2	2669	10	8	surface
2	2670	11	8	surface
2	2671	12	8	surface
2	2672	13	8	surface
2	2673	14	8	surface
2	2674	15	8	surface
2	2675	16	8	surface
2	2676	17	8	surface
3	2678	2	8	surface
3	2679	3	8	surface
3	2680	4	8	surface
3	2681	5	8	surface
3	2682	6	8	surface
3	2683	7	8	surface
3	2684	8	8	surface
3	2685	9	8	surface
3	2686	10	8	surface
10	2688	1	8	surface
11	2689	1	8	surface
11	2690	2	8	surface
11	2691	3	8	surface
11	2692	4	8	surface
11	2693	5	8	surface
11	2694	6	8	surface
11	2695	7	8	surface
11	2696	8	8	surface
11	2697	9	8	surface
11	2698	10	8	surface
11	2699	11	8	surface
11	2701	13	8	surface
11	2702	14	8	surface
11	2703	15	8	surface
11	2704	16	8	surface
11	2705	17	8	surface
11	2706	18	8	surface
11	2707	19	8	surface
11	2708	20	8	surface
11	2709	21	8	surface
11	2710	22	8	surface
2	4794	4	9	surface
3	4795	1	9	surface
5	4797	1	9	surface
6	4798	1	9	surface
8	4800	1	9	surface
8	4801	2	9	surface
9	4803	2	9	surface
9	4804	3	9	surface
11	4806	1	9	surface
11	4807	2	9	surface
12	4808	1	9	surface
13	4809	1	9	surface
13	4810	2	9	surface
14	4811	1	9	surface
14	4812	2	9	surface
14	4813	3	9	surface
15	4814	1	9	surface
15	4815	2	9	surface
17	4817	1	9	surface
18	4818	1	9	surface
19	4819	1	9	surface
20	4820	1	9	surface
20	4821	2	9	surface
20	4822	3	9	surface
20	4823	4	9	surface
21	4824	1	9	surface
25	4829	1	9	surface
1	4830	1	10	surface
2	4831	1	10	surface
3	4832	1	10	surface
3	4833	2	10	surface
4	4834	1	10	surface
5	4835	1	10	surface
5	4836	2	10	surface
6	4837	1	10	surface
7	4838	1	10	surface
7	4839	2	10	surface
8	4840	1	10	surface
8	4841	2	10	surface
10	4842	1	10	surface
10	4843	2	10	surface
11	4844	1	10	surface
12	4845	1	10	surface
13	4846	1	10	surface
13	4847	2	10	surface
13	4848	3	10	surface
13	4849	4	10	surface
13	4850	5	10	surface
14	4851	1	10	surface
15	4852	1	10	surface
15	4853	2	10	surface
16	4854	1	10	surface
16	4855	2	10	surface
17	4856	1	10	surface
17	4857	2	10	surface
18	4858	1	10	surface
18	4859	2	10	surface
19	4860	1	10	surface
20	4861	1	10	surface
23	4862	1	10	surface
1	24	2	11	surface
8	3460	2	24	surface
9	3464	1	24	surface
185	1790	4	6	surface
185	1791	5	6	surface
186	1792	1	6	surface
186	1793	2	6	surface
187	1794	1	6	surface
187	1795	2	6	surface
187	1796	3	6	surface
188	1797	1	6	surface
189	1798	1	6	surface
189	1799	2	6	surface
189	1800	3	6	surface
190	1801	1	6	surface
190	1802	2	6	surface
190	1803	3	6	surface
190	1804	4	6	surface
190	1805	5	6	surface
191	1806	1	6	surface
191	1807	2	6	surface
191	1808	3	6	surface
191	1809	4	6	surface
191	1810	5	6	surface
192	1811	1	6	surface
193	1812	1	6	surface
193	1813	2	6	surface
193	1814	3	6	surface
193	1815	4	6	surface
193	1816	5	6	surface
193	1817	6	6	surface
193	1818	7	6	surface
194	1819	1	6	surface
195	1820	1	6	surface
196	1821	1	6	surface
196	1822	2	6	surface
197	1823	1	6	surface
197	1824	2	6	surface
198	1825	1	6	surface
199	1826	1	6	surface
199	1827	2	6	surface
199	1828	3	6	surface
199	1829	4	6	surface
205	4584	1	6	surface
206	4585	1	6	surface
207	4586	1	6	surface
207	4587	2	6	surface
207	4588	3	6	surface
209	4589	1	6	surface
209	4590	2	6	surface
213	5194	1	6	surface
213	5195	2	6	surface
213	5196	3	6	surface
213	5197	4	6	surface
213	5198	5	6	surface
214	5199	1	6	surface
140	4450	1	6	surface
7	2785	1	9	surface
10	2787	1	9	surface
16	2784	1	9	surface
22	2788	1	9	surface
22	2790	2	9	surface
23	2789	1	9	surface
24	2791	1	9	surface
140	4451	2	6	surface
140	4452	3	6	surface
140	4453	4	6	surface
140	5349	5	6	surface
140	5350	6	6	surface
140	5351	7	6	surface
140	5352	8	6	surface
140	5353	9	6	surface
140	5354	10	6	surface
140	5355	11	6	surface
141	4454	1	6	surface
142	4455	1	6	surface
142	4456	2	6	surface
142	5358	3	6	surface
142	5359	4	6	surface
143	4457	1	6	surface
143	5360	2	6	surface
144	4458	1	6	surface
144	5357	2	6	surface
145	4459	1	6	surface
145	4460	2	6	surface
145	4461	3	6	surface
146	4462	1	6	surface
146	4463	2	6	surface
146	4464	3	6	surface
146	4465	4	6	surface
147	4466	1	6	surface
148	4467	1	6	surface
148	4468	2	6	surface
149	4469	1	6	surface
149	4470	2	6	surface
150	3602	1	6	surface
150	4472	2	6	surface
151	4473	1	6	surface
1	5065	1	12	surface
1	5066	2	12	surface
1	5067	3	12	surface
1	5068	4	12	surface
1	5069	5	12	surface
1	5070	6	12	surface
3	5071	1	12	surface
4	5072	1	12	surface
5	5073	1	12	surface
6	5074	1	12	surface
6	5075	2	12	surface
6	5076	3	12	surface
6	5077	4	12	surface
6	5078	5	12	surface
6	5079	6	12	surface
6	5080	7	12	surface
6	5081	8	12	surface
6	5082	9	12	surface
7	5083	1	12	surface
8	5084	1	12	surface
8	5085	2	12	surface
9	5086	1	12	surface
1	5087	1	13	surface
1	5088	2	13	surface
2	5089	1	13	surface
3	5090	1	13	surface
3	5091	2	13	surface
4	5092	1	13	surface
5	5093	1	13	surface
5	5094	2	13	surface
6	5095	1	13	surface
6	5096	2	13	surface
7	5097	1	13	surface
8	5098	1	13	surface
152	4474	1	6	surface
152	4475	2	6	surface
154	4476	1	6	surface
155	4477	1	6	surface
157	4478	1	6	surface
158	4479	1	6	surface
159	4480	1	6	surface
159	4481	2	6	surface
160	4482	1	6	surface
160	4483	2	6	surface
160	4484	3	6	surface
161	4485	1	6	surface
162	4486	1	6	surface
163	4487	1	6	surface
163	4488	2	6	surface
164	4489	1	6	surface
165	4490	1	6	surface
165	4491	2	6	surface
165	4492	3	6	surface
167	4493	1	6	surface
168	4494	1	6	surface
169	4495	1	6	surface
169	4496	2	6	surface
1	25	3	11	surface
8	3461	3	24	surface
9	3465	2	24	surface
169	4497	3	6	surface
170	4498	1	6	surface
171	4499	1	6	surface
171	4500	2	6	surface
171	4501	3	6	surface
171	4502	4	6	surface
172	4503	1	6	surface
172	4504	2	6	surface
172	4505	3	6	surface
12	2652	10	5	surface
11	1269	3	7	surface
14	1280	9	7	surface
4	19	3	15	surface
3	3646	2	15	surface
8	3653	2	15	surface
14	3780	9	5	surface
2	3748	8	5	surface
19	1286	1	7	surface
17	1289	10	7	surface
1	1011	3	5	surface
4	1021	6	5	surface
28	3758	6	5	surface
32	3768	1	5	surface
17	1293	11	7	surface
6	12	2	15	surface
20	1298	6	7	surface
7	13	2	15	surface
8	14	3	15	surface
21	1301	4	7	surface
21	2664	1	5	surface
23	1304	4	7	surface
3	16	3	15	surface
24	1308	6	7	surface
13	505	1	15	surface
9	17	1	15	surface
1	3635	2	15	surface
1	9	1	15	surface
20	498	7	15	surface
2	15	4	15	surface
20	513	17	15	surface
10	3661	2	15	surface
4	11	2	15	surface
5	10	3	15	surface
14	1257	5	7	surface
15	1262	2	7	surface
1	5108	1	16	surface
2	5109	1	16	surface
2	5110	2	16	surface
2	5111	3	16	surface
2	5112	4	16	surface
1	5113	1	17	surface
2	5114	1	17	surface
35	5436	4	13	surface
3	5139	1	19	surface
3	5140	2	19	surface
4	5141	1	19	surface
5	5142	1	19	surface
5	5143	2	19	surface
6	5144	1	19	surface
6	5145	2	19	surface
7	5146	1	19	surface
7	5147	2	19	surface
8	5148	1	19	surface
9	5149	1	19	surface
10	5150	1	19	surface
10	5151	2	19	surface
11	5152	1	19	surface
11	5153	2	19	surface
12	5154	1	19	surface
13	5155	1	19	surface
13	5156	2	19	surface
13	5157	3	19	surface
1	5174	1	21	surface
1	5175	2	21	surface
2	5176	1	21	surface
3	5177	1	21	surface
3	5178	2	21	surface
3	5179	3	21	surface
1	5180	1	22	surface
1	5181	2	22	surface
1	5182	3	22	surface
3	5183	1	22	surface
3	5184	2	22	surface
3	5185	3	22	surface
5	5186	1	22	surface
4	32	2	8	surface
5	33	3	8	surface
5	34	4	8	surface
6	35	4	8	surface
6	36	5	8	surface
6	37	6	8	surface
7	38	14	8	surface
7	39	15	8	surface
7	40	16	8	surface
7	41	17	8	surface
7	43	18	8	surface
7	44	19	8	surface
7	45	20	8	surface
7	46	21	8	surface
7	47	22	8	surface
7	48	23	8	surface
7	49	24	8	surface
7	50	25	8	surface
7	52	26	8	surface
7	53	27	8	surface
7	54	28	8	surface
7	55	29	8	surface
8	56	2	8	surface
8	57	3	8	surface
8	58	4	8	surface
14	4778	1	8	surface
14	4781	4	8	surface
14	4784	7	8	surface
14	4785	8	8	surface
14	4786	9	8	surface
12	59	1	8	surface
12	60	2	8	surface
28	1316	3	7	surface
29	1313	1	7	surface
32	1318	1	7	surface
34	1338	2	7	surface
35	1339	1	7	surface
36	1330	1	7	surface
36	1335	2	7	surface
36	1340	3	7	surface
37	1331	1	7	surface
38	1332	1	7	surface
39	1333	1	7	surface
41	1341	1	7	surface
42	1319	1	7	surface
43	985	1	7	surface
44	1321	1	7	surface
45	1323	1	7	surface
12	61	3	8	surface
12	62	4	8	surface
12	63	5	8	surface
8	64	5	8	surface
10	65	2	8	surface
12	66	6	8	surface
8	67	6	8	surface
10	68	3	8	surface
10	69	4	8	surface
10	70	5	8	surface
10	71	6	8	surface
14	3802	1	27	surface
15	3803	1	27	surface
15	3804	2	27	surface
16	3805	1	27	surface
1	3785	1	27	surface
1	3786	2	27	surface
2	3787	1	27	surface
3	3788	1	27	surface
3	3789	2	27	surface
4	3790	1	27	surface
4	3791	2	27	surface
5	3792	1	27	surface
6	3793	1	27	surface
7	3794	1	27	surface
7	3795	2	27	surface
8	3796	1	27	surface
9	3797	1	27	surface
10	3798	1	27	surface
11	3799	1	27	surface
12	3800	1	27	surface
13	3801	1	27	surface
17	5192	1	27	surface
17	5193	2	27	surface
214	5200	2	6	surface
215	5201	1	6	surface
9	5202	1	13	surface
13	2716	2	8	surface
14	2017	3	8	surface
14	1491	5	8	surface
216	5356	1	6	surface
14	2020	10	8	surface
14	2021	11	8	surface
15	2717	1	8	surface
1	213	1	18	surface
2	214	1	18	surface
2	215	2	18	surface
2	216	3	18	surface
2	217	4	18	surface
2	218	5	18	surface
2	220	7	18	surface
2	221	8	18	surface
2	222	9	18	surface
2	223	10	18	surface
2	224	11	18	surface
2	225	12	18	surface
2	226	13	18	surface
2	227	14	18	surface
2	228	15	18	surface
2	229	16	18	surface
3	230	1	18	surface
3	231	2	18	surface
3	233	4	18	surface
4	234	1	18	surface
1	2281	1	19	surface
1	2282	2	19	surface
1	1717	1	20	surface
1	1718	2	20	surface
1	1719	3	20	surface
1	1720	4	20	surface
1	1721	5	20	surface
1	1722	6	20	surface
1	1723	7	20	surface
1	1724	8	20	surface
1	1726	10	20	surface
1	1727	11	20	surface
1	1728	12	20	surface
1	1729	13	20	surface
1	1730	14	20	surface
1	1731	15	20	surface
1	1732	16	20	surface
217	3964	4	6	surface
217	5361	1	6	surface
217	5362	2	6	surface
9	5203	2	13	surface
9	5205	4	13	surface
10	5207	1	13	surface
11	5209	1	13	surface
12	5211	1	13	surface
12	5213	3	13	surface
12	5215	5	13	surface
13	5217	1	13	surface
13	5219	3	13	surface
18	5221	1	27	surface
19	5223	2	27	surface
19	5225	4	27	surface
19	5227	6	27	surface
19	5229	8	27	surface
19	5231	10	27	surface
19	5233	12	27	surface
15	5236	2	13	surface
15	5238	4	13	surface
16	5240	2	13	surface
17	5242	1	13	surface
17	5244	3	13	surface
18	5246	2	13	surface
217	5363	3	6	surface
218	5364	1	6	surface
218	5365	2	6	surface
9	5204	3	13	surface
9	5206	5	13	surface
10	5208	2	13	surface
11	5210	2	13	surface
12	5212	2	13	surface
12	5214	4	13	surface
12	5216	6	13	surface
13	5218	2	13	surface
14	5220	1	13	surface
19	5222	1	27	surface
19	5224	3	27	surface
19	5226	5	27	surface
19	5228	7	27	surface
19	5230	9	27	surface
19	5232	11	27	surface
20	5234	1	27	surface
15	5235	1	13	surface
15	5237	3	13	surface
16	5239	1	13	surface
16	5241	3	13	surface
17	5243	2	13	surface
18	5245	1	13	surface
19	5247	1	13	surface
19	5248	2	13	surface
19	5249	3	13	surface
19	5250	4	13	surface
19	5251	5	13	surface
19	5252	6	13	surface
19	5253	7	13	surface
19	5254	8	13	surface
19	5255	9	13	surface
20	5256	1	13	surface
21	5257	1	13	surface
21	5258	2	13	surface
22	5259	1	13	surface
23	5260	1	13	surface
23	5261	2	13	surface
23	5262	3	13	surface
23	5263	4	13	surface
24	5264	1	13	surface
24	5265	2	13	surface
25	5266	1	13	surface
25	5267	2	13	surface
26	5268	1	13	surface
26	5269	2	13	surface
26	5270	3	13	surface
26	5271	4	13	surface
26	5272	5	13	surface
26	5273	6	13	surface
26	5274	7	13	surface
26	5275	8	13	surface
26	5276	9	13	surface
26	5277	10	13	surface
27	5278	1	13	surface
27	5279	2	13	surface
27	5280	3	13	surface
27	5281	4	13	surface
28	5282	1	13	surface
28	5283	2	13	surface
28	5284	3	13	surface
28	5285	4	13	surface
28	5286	5	13	surface
28	5287	6	13	surface
28	5288	7	13	surface
28	5289	8	13	surface
28	5290	9	13	surface
29	5291	1	13	surface
29	5292	2	13	surface
29	5293	3	13	surface
29	5294	4	13	surface
29	5295	5	13	surface
29	5296	6	13	surface
29	5297	7	13	surface
30	5298	1	13	surface
30	5299	2	13	surface
30	5300	3	13	surface
30	5301	4	13	surface
31	5302	1	13	surface
31	5303	2	13	surface
31	5304	3	13	surface
31	5305	4	13	surface
31	5306	5	13	surface
31	5307	6	13	surface
32	5308	1	13	surface
32	5309	2	13	surface
32	5310	3	13	surface
32	5311	4	13	surface
32	5312	5	13	surface
32	5313	6	13	surface
32	5314	7	13	surface
32	5315	8	13	surface
32	5316	9	13	surface
32	5317	10	13	surface
33	5318	1	13	surface
33	5319	2	13	surface
33	5320	3	13	surface
33	5321	4	13	surface
33	5322	5	13	surface
33	5323	6	13	surface
33	5324	7	13	surface
33	5325	8	13	surface
33	5326	9	13	surface
33	5327	10	13	surface
33	5328	11	13	surface
33	5329	12	13	surface
33	5330	13	13	surface
33	5331	14	13	surface
33	5332	15	13	surface
2	5333	1	45	surface
2	5334	2	45	surface
2	5335	3	45	surface
2	5336	4	45	surface
2	5337	5	45	surface
2	5338	6	45	surface
2	5339	7	45	surface
2	5340	8	45	surface
2	5341	9	45	surface
2	5342	10	45	surface
2	5343	11	45	surface
2	5344	12	45	surface
2	5345	13	45	surface
2	5346	14	45	surface
2	5347	15	45	surface
3	5348	1	45	surface
218	5366	3	6	surface
218	5367	4	6	surface
219	5368	1	6	surface
219	5369	2	6	surface
220	5445	1	6	surface
220	5446	2	6	surface
220	5447	3	6	surface
220	5448	4	6	surface
149	3675	3	6	surface
149	3679	5	6	surface
12	2653	11	5	surface
22	2665	1	5	surface
7	1270	5	7	surface
14	1281	10	7	surface
10	1290	4	7	surface
10	1294	6	7	surface
4	3647	1	15	surface
34	5373	1	13	surface
34	5374	2	13	surface
34	5375	3	13	surface
34	5376	4	13	surface
34	5377	5	13	surface
34	5378	6	13	surface
34	5379	7	13	surface
34	5380	8	13	surface
34	5381	9	13	surface
34	5382	10	13	surface
34	5383	11	13	surface
34	5384	12	13	surface
34	5385	13	13	surface
5	5386	1	18	surface
5	5387	2	18	surface
6	5388	1	18	surface
6	5389	2	18	surface
6	5390	3	18	surface
7	5391	1	18	surface
7	5392	2	18	surface
8	5393	1	18	surface
8	5394	2	18	surface
8	5395	3	18	surface
8	5396	4	18	surface
8	5397	5	18	surface
8	5398	6	18	surface
8	5399	7	18	surface
8	5400	8	18	surface
8	5401	9	18	surface
8	5402	10	18	surface
8	5403	11	18	surface
8	5404	12	18	surface
9	5405	1	18	surface
10	5406	1	18	surface
11	5407	1	18	surface
11	5408	2	18	surface
12	5409	1	18	surface
12	5410	2	18	surface
12	5411	3	18	surface
12	5412	4	18	surface
12	5413	5	18	surface
13	5414	1	18	surface
14	5415	1	18	surface
15	5416	1	18	surface
15	5417	2	18	surface
15	5418	3	18	surface
15	5419	4	18	surface
15	5420	5	18	surface
15	5421	6	18	surface
15	5422	7	18	surface
15	5423	8	18	surface
7	5424	3	18	surface
7	5425	4	18	surface
7	5426	5	18	surface
7	5427	6	18	surface
7	5428	7	18	surface
7	5429	8	18	surface
7	5430	9	18	surface
16	5431	1	18	surface
16	5432	2	18	surface
2	1012	10	5	surface
4	1022	7	5	surface
1	895	1	2	surface
2	903	2	2	surface
2	916	15	2	surface
7	917	1	2	surface
19	938	1	2	surface
26	978	2	2	surface
9	118	1	6	surface
22	1481	1	6	surface
23	1483	1	6	surface
42	2799	1	6	surface
51	2812	4	6	surface
60	2826	2	6	surface
67	112	1	6	surface
74	2459	1	6	surface
77	2472	1	6	surface
111	2178	1	6	surface
124	2200	3	6	surface
128	2219	5	6	surface
132	2266	4	6	surface
132	2279	17	6	surface
173	3672	1	6	surface
174	3676	22	6	surface
12	2654	12	5	surface
7	1271	6	7	surface
14	1282	11	7	surface
11	20	2	15	surface
3	991	1	7	surface
12	1354	4	7	surface
2	30	1	8	surface
3	2677	1	8	surface
35	5437	5	13	surface
35	5439	7	13	surface
35	5440	8	13	surface
7	42	1	8	surface
8	2687	1	8	surface
11	2700	12	8	surface
13	2715	1	8	surface
14	2016	2	8	surface
4	2783	1	9	surface
9	2786	1	9	surface
2	219	6	18	surface
3	232	3	18	surface
1	1725	9	20	surface
35	5441	9	13	surface
36	5442	1	13	surface
36	5443	2	13	surface
36	5444	3	13	surface
1	2769	1	3	surface
1	1733	3	3	surface
7	1734	1	3	surface
7	1735	2	3	surface
7	1736	3	3	surface
8	1738	1	3	surface
9	1739	1	3	surface
7	1740	4	3	surface
7	1741	5	3	surface
7	1742	6	3	surface
7	1743	7	3	surface
7	1744	8	3	surface
8	1745	2	3	surface
8	1746	3	3	surface
9	1747	2	3	surface
11	1748	1	3	surface
12	2778	1	3	surface
12	2780	2	3	surface
12	2781	4	3	surface
13	2778	1	3	surface
14	2779	1	3	surface
14	2781	2	3	surface
15	2782	1	3	surface
10	1749	1	3	surface
10	1750	2	3	surface
10	1751	3	3	surface
10	1752	4	3	surface
21	2666	2	5	surface
2	3734	5	5	surface
2	3736	6	5	surface
12	3739	6	5	surface
12	3750	7	5	surface
4	3744	1	5	surface
19	1287	2	7	surface
20	4642	1	7	surface
7	1013	2	5	surface
20	4644	3	7	surface
22	1307	6	7	surface
22	4649	2	7	surface
22	4650	3	7	surface
2	5449	1	44	surface
3	5450	1	44	surface
15	1023	1	5	surface
1	1492	1	26	surface
1	1491	2	26	surface
1	2020	4	26	surface
1	2016	5	26	surface
1	2017	6	26	surface
1	1493	7	26	surface
1	1494	8	26	surface
1	1490	9	26	surface
1	1495	10	26	surface
1	1496	11	26	surface
2	1498	1	26	surface
16	5451	1	15	surface
3	1502	1	26	surface
4	1503	1	26	surface
16	5452	2	15	surface
3	1505	2	26	surface
4	1509	2	26	surface
4	1510	3	26	surface
1	1499	12	26	surface
16	5453	3	15	surface
16	5454	4	15	surface
16	5455	5	15	surface
16	5456	6	15	surface
16	5457	7	15	surface
16	5458	8	15	surface
22	499	2	15	surface
14	506	1	15	surface
20	514	18	15	surface
28	3760	8	5	surface
29	3741	1	5	surface
33	3770	4	5	surface
5	3648	1	15	surface
4	1511	4	26	surface
5	1512	1	26	surface
5	1513	2	26	surface
6	1514	1	26	surface
7	1515	1	26	surface
7	1516	2	26	surface
7	1517	3	26	surface
2	1497	2	26	surface
1	1500	13	26	surface
1	1501	14	26	surface
1	1504	15	26	surface
173	3673	2	6	surface
140	3677	12	6	surface
2	2655	14	5	surface
8	1519	1	26	surface
8	1518	2	26	surface
8	1520	3	26	surface
8	1521	4	26	surface
8	1522	5	26	surface
2	1523	3	26	surface
8	1524	6	26	surface
8	1525	7	26	surface
8	1526	8	26	surface
8	1527	9	26	surface
9	1528	1	26	surface
9	1529	2	26	surface
9	1530	3	26	surface
9	1531	4	26	surface
9	1532	5	26	surface
9	1533	6	26	surface
9	1534	7	26	surface
9	1535	8	26	surface
9	1536	9	26	surface
2	1537	4	26	surface
10	1538	1	26	surface
10	1539	2	26	surface
10	1540	3	26	surface
10	1541	4	26	surface
10	1542	5	26	surface
10	1543	6	26	surface
10	1544	7	26	surface
10	1545	8	26	surface
10	1546	9	26	surface
10	1547	10	26	surface
10	1548	11	26	surface
11	1549	1	26	surface
11	1550	2	26	surface
11	1551	3	26	surface
9	1552	10	26	surface
5	1553	3	26	surface
12	1554	1	26	surface
13	1555	1	26	surface
13	1556	2	26	surface
14	1557	1	26	surface
14	1558	2	26	surface
12	1559	2	26	surface
15	1560	1	26	surface
15	1561	2	26	surface
16	1562	1	26	surface
16	1563	2	26	surface
16	1564	3	26	surface
16	1565	4	26	surface
17	1566	1	26	surface
17	1567	2	26	surface
17	1568	3	26	surface
18	1569	1	26	surface
18	1570	2	26	surface
19	1571	1	26	surface
18	1572	3	26	surface
18	1573	4	26	surface
19	1574	2	26	surface
1	3439	1	24	surface
1	3440	2	24	surface
1	3441	3	24	surface
2	3442	1	24	surface
8	1582	10	26	surface
2	3443	2	24	surface
2	3444	3	24	surface
3	3445	1	24	surface
3	3446	2	24	surface
3	3447	3	24	surface
3	3448	4	24	surface
3	3449	5	24	surface
4	3450	1	24	surface
4	3451	2	24	surface
5	3452	1	24	surface
6	3453	1	24	surface
7	3454	1	24	surface
7	3455	2	24	surface
7	3456	3	24	surface
6	3457	2	24	surface
1	3458	4	24	surface
19	1575	3	26	surface
19	1576	4	26	surface
18	1577	5	26	surface
18	1578	6	26	surface
20	1579	1	26	surface
16	1580	5	26	surface
20	1581	2	26	surface
9	1583	11	26	surface
12	1584	3	26	surface
9	1585	12	26	surface
9	1586	13	26	surface
9	1587	14	26	surface
9	1588	15	26	surface
9	1589	16	26	surface
9	1590	17	26	surface
9	1591	18	26	surface
9	1592	19	26	surface
9	1593	20	26	surface
18	1594	7	26	surface
18	1595	8	26	surface
18	1596	9	26	surface
9	1597	21	26	surface
9	1598	22	26	surface
9	1599	23	26	surface
9	1600	24	26	surface
21	1601	1	26	surface
21	1602	2	26	surface
22	1603	1	26	surface
22	1604	2	26	surface
22	1605	3	26	surface
22	1606	4	26	surface
22	1607	5	26	surface
22	1608	6	26	surface
22	1609	7	26	surface
22	1610	8	26	surface
22	1611	9	26	surface
22	1612	10	26	surface
22	1613	11	26	surface
22	1614	12	26	surface
22	1615	13	26	surface
22	1616	14	26	surface
22	1617	15	26	surface
22	1618	16	26	surface
22	1619	17	26	surface
22	1620	18	26	surface
22	1621	19	26	surface
22	1622	20	26	surface
22	1623	21	26	surface
5	2792	4	26	surface
19	2793	5	26	surface
5	2794	5	26	surface
7	1272	7	7	surface
12	3751	8	5	surface
5	3761	2	5	surface
3	1014	5	5	surface
15	1024	2	5	surface
33	3771	1	5	surface
25	3781	1	5	surface
10	3662	3	15	surface
2	3654	1	15	surface
5	3649	2	15	surface
14	1258	6	7	surface
16	1263	2	7	surface
9	1273	5	7	surface
17	1283	8	7	surface
22	4651	4	7	surface
22	4652	5	7	surface
22	4654	7	7	surface
22	4655	8	7	surface
22	4656	9	7	surface
22	4657	10	7	surface
22	4658	11	7	surface
22	4659	12	7	surface
2	1015	11	5	surface
22	4660	13	7	surface
27	3752	4	5	surface
33	3772	5	5	surface
25	3782	2	5	surface
22	4661	14	7	surface
23	2656	1	5	surface
9	4919	1	11	surface
10	4920	1	11	surface
10	4921	2	11	surface
10	4922	3	11	surface
11	4923	1	11	surface
11	4924	2	11	surface
11	4925	3	11	surface
11	4926	4	11	surface
12	4927	1	11	surface
12	4928	2	11	surface
13	4929	1	11	surface
13	4930	2	11	surface
14	4931	1	11	surface
14	4932	2	11	surface
14	4933	3	11	surface
15	4934	1	11	surface
15	4935	2	11	surface
15	4936	3	11	surface
16	4937	1	11	surface
16	4938	2	11	surface
16	4939	3	11	surface
16	4940	4	11	surface
17	4941	1	11	surface
18	58	1	11	surface
18	59	2	11	surface
18	60	3	11	surface
18	62	5	11	surface
18	107	6	11	surface
18	4945	4	11	surface
19	4948	1	11	surface
20	64	1	11	surface
21	56	1	11	surface
21	57	2	11	surface
21	65	3	11	surface
21	66	4	11	surface
21	67	5	11	surface
21	68	6	11	surface
21	69	7	11	surface
21	70	8	11	surface
21	71	9	11	surface
21	101	10	11	surface
21	102	11	11	surface
22	104	1	11	surface
22	105	2	11	surface
23	103	1	11	surface
24	4964	1	11	surface
25	1104	1	11	surface
26	1105	1	11	surface
26	1108	4	11	surface
26	1109	5	11	surface
26	1110	6	11	surface
26	1111	7	11	surface
26	1112	8	11	surface
26	1113	9	11	surface
26	1121	10	11	surface
26	4967	2	11	surface
26	4968	3	11	surface
27	1114	1	11	surface
27	1115	2	11	surface
27	1116	3	11	surface
27	1117	4	11	surface
27	1118	5	11	surface
27	1119	6	11	surface
27	1120	7	11	surface
28	1942	1	11	surface
29	1934	1	11	surface
29	1935	2	11	surface
29	1936	3	11	surface
30	1937	1	11	surface
30	1938	2	11	surface
31	1939	1	11	surface
31	1940	2	11	surface
31	1941	3	11	surface
32	1943	1	11	surface
32	1944	2	11	surface
33	1873	1	11	surface
33	1893	18	11	surface
33	1894	19	11	surface
33	1895	20	11	surface
33	1896	21	11	surface
33	1897	22	11	surface
33	1898	23	11	surface
33	1899	24	11	surface
33	1900	25	11	surface
33	1901	26	11	surface
33	1902	27	11	surface
33	1903	28	11	surface
33	1904	29	11	surface
33	1905	30	11	surface
33	1906	31	11	surface
33	1907	32	11	surface
33	1908	33	11	surface
33	1909	34	11	surface
33	1910	35	11	surface
33	1911	36	11	surface
33	1912	37	11	surface
33	1913	38	11	surface
33	1914	39	11	surface
33	1915	40	11	surface
34	1104	1	11	surface
34	1105	2	11	surface
34	1106	3	11	surface
34	1107	4	11	surface
34	1108	5	11	surface
34	1109	6	11	surface
34	1110	7	11	surface
34	1111	8	11	surface
34	1112	9	11	surface
34	1113	10	11	surface
34	1114	11	11	surface
34	1115	12	11	surface
34	1116	13	11	surface
34	1117	14	11	surface
34	1118	15	11	surface
34	1119	16	11	surface
34	1120	17	11	surface
34	1121	18	11	surface
34	1934	19	11	surface
34	1935	20	11	surface
34	1936	21	11	surface
34	1937	22	11	surface
34	1938	23	11	surface
34	1939	24	11	surface
34	1940	25	11	surface
34	1941	26	11	surface
34	1942	27	11	surface
34	1943	28	11	surface
34	1944	29	11	surface
35	5063	1	11	surface
35	5064	2	11	surface
8	3462	4	24	surface
9	3466	3	24	surface
4	1025	8	5	surface
17	3762	1	5	surface
2	3655	2	15	surface
13	1259	8	7	surface
1	1264	5	7	surface
9	1274	6	7	surface
17	1284	9	7	surface
22	4662	15	7	surface
22	4663	16	7	surface
28	3753	1	5	surface
33	3773	6	5	surface
25	3783	3	5	surface
22	4664	17	7	surface
22	4665	18	7	surface
1	3640	3	15	surface
2	1016	12	5	surface
22	4666	19	7	surface
2	3656	5	15	surface
14	1260	7	7	surface
22	4667	20	7	surface
22	4669	22	7	surface
23	2657	2	5	surface
4	1026	9	5	surface
22	4670	23	7	surface
22	4671	24	7	surface
17	3763	2	5	surface
22	4672	25	7	surface
22	4673	26	7	surface
2	74	4	11	surface
2	4863	1	11	surface
2	4864	2	11	surface
2	4865	3	11	surface
3	90	30	11	surface
3	1852	12	11	surface
3	1860	18	11	surface
3	1861	19	11	surface
3	1862	20	11	surface
3	1863	21	11	surface
3	1864	22	11	surface
3	1865	23	11	surface
3	1866	24	11	surface
3	1874	31	11	surface
3	1875	32	11	surface
3	1876	33	11	surface
3	4867	1	11	surface
3	4868	2	11	surface
3	4869	3	11	surface
3	4870	4	11	surface
3	4871	5	11	surface
3	4872	6	11	surface
3	4873	7	11	surface
3	4874	8	11	surface
3	4875	9	11	surface
3	4876	10	11	surface
3	4877	11	11	surface
3	4879	13	11	surface
3	4880	14	11	surface
3	4881	15	11	surface
3	4882	16	11	surface
3	4883	17	11	surface
3	4891	25	11	surface
3	4892	26	11	surface
3	4893	27	11	surface
3	4894	28	11	surface
3	4895	29	11	surface
4	77	1	11	surface
4	4901	2	11	surface
4	4902	3	11	surface
4	4903	4	11	surface
5	67	5	11	surface
5	93	3	11	surface
5	96	6	11	surface
5	97	7	11	surface
5	98	8	11	surface
5	99	9	11	surface
5	1867	1	11	surface
5	4905	2	11	surface
5	4907	4	11	surface
6	94	3	11	surface
6	1869	1	11	surface
6	1872	5	11	surface
6	4914	2	11	surface
6	4916	4	11	surface
7	4918	1	11	surface
22	4674	27	7	surface
22	4675	28	7	surface
23	1347	1	7	surface
23	1348	2	7	surface
24	1342	1	7	surface
24	1344	2	7	surface
24	1345	3	7	surface
24	1346	4	7	surface
24	1349	5	7	surface
25	1350	1	7	surface
25	1351	2	7	surface
26	1355	1	7	surface
11	21	3	15	surface
200	1830	1	6	surface
200	1831	2	6	surface
201	1832	1	6	surface
201	1833	2	6	surface
201	1834	3	6	surface
201	1835	4	6	surface
202	410	1	6	surface
202	1837	2	6	surface
202	1838	3	6	surface
203	1839	1	6	surface
204	4583	1	6	surface
9	1291	8	7	surface
17	1295	12	7	surface
20	1299	7	7	surface
22	1302	29	7	surface
20	1305	8	7	surface
24	1309	7	7	surface
20	500	8	15	surface
24	3664	2	15	surface
20	507	11	15	surface
8	26	1	11	surface
9	3467	4	24	surface
139	3670	1	6	surface
139	3671	2	6	surface
28	1312	1	7	surface
29	1314	2	7	surface
31	1317	1	7	surface
33	1325	1	7	surface
34	986	1	7	surface
173	3674	3	6	surface
149	3678	4	6	surface
6	1275	9	7	surface
10	1285	3	7	surface
26	4128	1	5	surface
27	4129	1	5	surface
27	4130	2	5	surface
27	4131	3	5	surface
28	3754	2	5	surface
33	3774	7	5	surface
34	3776	1	5	surface
25	3784	4	5	surface
2	3657	6	15	surface
23	2658	3	5	surface
20	1297	2	7	surface
20	4645	4	7	surface
21	4646	1	7	surface
21	4647	2	7	surface
22	1322	21	7	surface
22	4648	1	7	surface
18	1288	1	7	surface
1	23	1	11	surface
10	1292	5	7	surface
20	1296	5	7	surface
21	1300	3	7	surface
23	1303	3	7	surface
20	1306	9	7	surface
24	1310	8	7	surface
25	1324	3	7	surface
16	5459	9	15	surface
16	5460	10	15	surface
16	5461	11	15	surface
16	5462	12	15	surface
16	5463	13	15	surface
16	5464	14	15	surface
20	502	9	15	surface
20	3636	1	15	surface
20	3639	4	15	surface
20	3641	5	15	surface
21	3643	1	15	surface
24	3663	1	15	surface
20	508	12	15	surface
28	1311	2	7	surface
30	1315	1	7	surface
33	1326	2	7	surface
39	4695	2	7	surface
40	1336	1	7	surface
40	1337	2	7	surface
43	1320	2	7	surface
27	1327	1	7	surface
33	1877	2	11	surface
33	1878	3	11	surface
33	1879	4	11	surface
33	1880	5	11	surface
33	1881	6	11	surface
33	1882	7	11	surface
33	1883	8	11	surface
33	1884	9	11	surface
33	1885	10	11	surface
33	1886	11	11	surface
33	1887	12	11	surface
33	1888	13	11	surface
33	1889	14	11	surface
33	1890	15	11	surface
33	1891	16	11	surface
33	1892	17	11	surface
8	3459	1	24	surface
8	3463	5	24	surface
9	3468	5	24	surface
3	3742	2	5	surface
2	3737	7	5	surface
6	4097	1	5	surface
6	4098	2	5	surface
6	4099	3	5	surface
7	4100	1	5	surface
8	3735	2	5	surface
8	4101	1	5	surface
9	4102	1	5	surface
9	4103	2	5	surface
9	4104	3	5	surface
10	4105	1	5	surface
10	4106	2	5	surface
11	4107	1	5	surface
11	4108	2	5	surface
11	4109	3	5	surface
12	4110	1	5	surface
12	4111	2	5	surface
12	4112	3	5	surface
12	4113	4	5	surface
13	4114	1	5	surface
13	4115	2	5	surface
13	4116	3	5	surface
14	4117	1	5	surface
14	4118	2	5	surface
14	4119	3	5	surface
14	4120	4	5	surface
14	4121	5	5	surface
14	4122	6	5	surface
4	1017	3	5	surface
17	3764	3	5	surface
18	4123	1	5	surface
18	4124	2	5	surface
19	4125	1	5	surface
19	4126	2	5	surface
20	4127	1	5	surface
16	1027	1	5	surface
1	5469	1	51	surface
1	5470	2	51	surface
2	5471	1	51	surface
2	5472	2	51	surface
2	5473	3	51	surface
3	5474	1	51	surface
3	5475	2	51	surface
3	5476	3	51	surface
3	5477	4	51	surface
4	5478	1	51	surface
4	5479	2	51	surface
5	5480	1	51	surface
6	5481	1	51	surface
6	5482	2	51	surface
6	5483	3	51	surface
7	5484	1	51	surface
7	5485	2	51	surface
7	5486	3	51	surface
7	5487	4	51	surface
7	5488	5	51	surface
8	5489	1	51	surface
9	5490	1	51	surface
9	5491	2	51	surface
10	5492	1	51	surface
10	5493	2	51	surface
11	5494	1	51	surface
12	5495	1	51	surface
13	5496	1	51	surface
13	5497	2	51	surface
13	5498	3	51	surface
14	5499	1	51	surface
14	5500	2	51	surface
14	5501	3	51	surface
14	5502	4	51	surface
14	5503	5	51	surface
14	5504	6	51	surface
14	5505	7	51	surface
15	5506	1	51	surface
16	5507	1	51	surface
16	5508	2	51	surface
16	5509	3	51	surface
16	5510	4	51	surface
16	5511	5	51	surface
16	5512	6	51	surface
16	5513	7	51	surface
17	5514	1	51	surface
17	5515	2	51	surface
17	5516	3	51	surface
17	5517	4	51	surface
17	5518	5	51	surface
17	5519	6	51	surface
18	5520	1	51	surface
19	5521	1	51	surface
20	5522	1	51	surface
20	5523	2	51	surface
20	5524	3	51	surface
21	5525	1	51	surface
21	5526	2	51	surface
21	5527	3	51	surface
21	5528	4	51	surface
21	5529	5	51	surface
21	5530	6	51	surface
21	5531	7	51	surface
21	5532	8	51	surface
22	5533	1	51	surface
22	5534	2	51	surface
22	5535	3	51	surface
22	5536	4	51	surface
22	5537	5	51	surface
23	5538	1	51	surface
24	5539	1	51	surface
25	5540	1	51	surface
25	5541	2	51	surface
26	5542	1	51	surface
27	5543	1	51	surface
28	5544	1	51	surface
29	5545	1	51	surface
30	5546	1	51	surface
31	5547	1	51	surface
32	5548	1	51	surface
33	5549	1	51	surface
34	5550	1	51	surface
35	5551	1	51	surface
35	5552	2	51	surface
36	5553	1	51	surface
36	5554	2	51	surface
36	5555	3	51	surface
37	5556	1	51	surface
38	5557	1	51	surface
39	5558	1	51	surface
1	5559	1	51	depth
\.


--
-- Data for Name: topics_progress; Type: TABLE DATA; Schema: flashback; Owner: flashback
--

COPY flashback.topics_progress ("user", topic, "time", duration, subject, level, id) FROM stdin;
2	1	2025-07-30 09:51:44+02	4	6	surface	2
2	2	2025-07-30 09:52:15+02	31	6	surface	3
2	3	2025-07-30 09:52:41+02	26	6	surface	4
2	4	2025-07-30 09:52:52+02	11	6	surface	5
2	5	2025-07-30 09:54:24+02	92	6	surface	6
2	6	2025-07-30 09:56:13+02	109	6	surface	7
2	7	2025-07-30 10:01:43+02	330	6	surface	8
2	8	2025-07-30 10:01:46+02	3	6	surface	9
2	9	2025-07-30 10:03:16+02	90	6	surface	10
2	10	2025-07-30 10:03:22+02	6	6	surface	11
2	11	2025-07-30 10:13:16+02	594	6	surface	12
2	12	2025-07-30 10:13:16+02	0	6	surface	13
2	13	2025-07-30 10:13:16+02	0	6	surface	14
2	14	2025-07-30 10:13:16+02	0	6	surface	15
2	15	2025-07-30 10:19:28+02	372	6	surface	16
2	16	2025-07-30 10:19:28+02	0	6	surface	17
2	17	2025-07-30 10:19:28+02	0	6	surface	18
2	18	2025-07-30 10:19:34+02	6	6	surface	19
2	19	2025-07-30 10:27:41+02	487	6	surface	20
2	20	2025-07-30 10:29:29+02	108	6	surface	21
2	21	2025-07-30 10:29:51+02	22	6	surface	22
2	22	2025-07-30 10:53:22+02	1411	6	surface	23
2	23	2025-07-30 11:06:43+02	801	6	surface	24
2	24	2025-07-30 12:11:42+02	3899	6	surface	25
2	25	2025-07-30 13:34:45+02	4983	6	surface	26
2	26	2025-07-30 14:15:30+02	2445	6	surface	27
2	27	2025-07-30 14:22:23+02	413	6	surface	28
2	28	2025-07-30 14:22:28+02	5	6	surface	29
2	29	2025-07-30 14:23:21+02	53	6	surface	30
2	30	2025-07-30 14:34:37+02	676	6	surface	31
2	1	2025-08-02 10:18:34+02	3	6	surface	64
2	2	2025-08-02 10:18:37+02	3	6	surface	65
2	3	2025-08-02 10:18:40+02	3	6	surface	66
2	4	2025-08-02 10:19:54+02	74	6	surface	67
2	5	2025-08-02 10:20:51+02	57	6	surface	68
2	6	2025-08-02 10:21:07+02	16	6	surface	69
2	7	2025-08-02 10:21:16+02	9	6	surface	70
2	8	2025-08-02 10:24:02+02	166	6	surface	71
2	9	2025-08-02 10:24:10+02	8	6	surface	72
2	10	2025-08-02 10:24:21+02	11	6	surface	73
2	11	2025-08-02 10:32:37+02	496	6	surface	74
2	15	2025-08-02 10:32:41+02	3	6	surface	75
2	18	2025-08-02 10:32:46+02	5	6	surface	76
2	19	2025-08-02 10:40:28+02	462	6	surface	77
2	20	2025-08-02 10:40:38+02	10	6	surface	78
2	21	2025-08-02 10:42:48+02	130	6	surface	79
2	22	2025-08-02 10:58:32+02	944	6	surface	80
2	23	2025-08-02 11:00:21+02	109	6	surface	81
2	24	2025-08-02 11:16:56+02	995	6	surface	82
2	25	2025-08-02 19:02:04+02	39	6	surface	83
2	26	2025-08-02 19:02:17+02	13	6	surface	84
2	27	2025-08-02 19:02:31+02	14	6	surface	85
2	28	2025-08-02 19:02:33+02	2	6	surface	86
2	29	2025-08-02 19:07:28+02	295	6	surface	87
2	30	2025-08-02 19:12:21+02	293	6	surface	88
2	31	2025-08-02 23:37:38+02	108	6	surface	89
2	33	2025-08-02 23:44:28+02	410	6	surface	90
2	34	2025-08-03 00:08:44+02	1455	6	surface	91
2	35	2025-08-03 00:17:10+02	506	6	surface	92
2	36	2025-08-03 00:17:24+02	14	6	surface	93
2	37	2025-08-03 00:28:12+02	647	6	surface	94
2	38	2025-08-03 00:34:45+02	393	6	surface	95
2	39	2025-08-03 00:36:38+02	113	6	surface	96
2	40	2025-08-03 00:36:48+02	9	6	surface	97
2	41	2025-08-03 00:43:09+02	381	6	surface	98
2	1	2025-08-03 09:27:15+02	3	6	surface	99
2	2	2025-08-03 09:27:26+02	11	6	surface	100
2	3	2025-08-03 09:55:20+02	85	6	surface	101
2	4	2025-08-03 09:55:27+02	7	6	surface	102
2	5	2025-08-03 09:55:42+02	15	6	surface	103
2	6	2025-08-03 09:55:53+02	11	6	surface	104
2	7	2025-08-03 09:56:43+02	50	6	surface	105
2	8	2025-08-03 09:57:17+02	34	6	surface	106
2	9	2025-08-03 09:57:22+02	5	6	surface	107
2	10	2025-08-03 09:57:28+02	6	6	surface	108
2	11	2025-08-03 10:09:45+02	737	6	surface	109
2	15	2025-08-03 10:09:48+02	3	6	surface	110
2	18	2025-08-03 10:09:55+02	7	6	surface	111
2	19	2025-08-03 10:10:41+02	46	6	surface	112
2	20	2025-08-03 10:10:48+02	7	6	surface	113
2	21	2025-08-03 10:10:52+02	4	6	surface	114
2	22	2025-08-03 10:25:41+02	889	6	surface	115
2	23	2025-08-03 10:30:50+02	309	6	surface	116
2	24	2025-08-03 10:44:36+02	826	6	surface	117
2	25	2025-08-03 12:47:08+02	7352	6	surface	118
2	26	2025-08-03 12:47:18+02	10	6	surface	119
2	27	2025-08-03 12:47:33+02	15	6	surface	120
2	28	2025-08-03 12:47:44+02	11	6	surface	121
2	29	2025-08-03 12:47:49+02	5	6	surface	122
2	30	2025-08-03 12:47:56+02	7	6	surface	123
2	31	2025-08-03 12:52:17+02	261	6	surface	124
2	33	2025-08-03 14:30:18+02	5881	6	surface	125
2	42	2025-08-03 15:14:48+02	2670	6	surface	126
2	43	2025-08-03 15:15:07+02	19	6	surface	127
2	44	2025-08-03 15:15:30+02	23	6	surface	128
2	1	2025-08-07 20:10:31+02	1	6	surface	129
2	2	2025-08-07 20:10:36+02	5	6	surface	130
2	3	2025-08-07 20:10:58+02	22	6	surface	131
2	4	2025-08-07 20:11:28+02	30	6	surface	132
2	5	2025-08-07 20:11:38+02	9	6	surface	133
2	6	2025-08-07 20:11:41+02	3	6	surface	134
2	7	2025-08-07 20:11:50+02	9	6	surface	135
2	8	2025-08-07 20:13:16+02	86	6	surface	136
2	9	2025-08-07 20:13:18+02	2	6	surface	137
2	10	2025-08-07 20:14:04+02	46	6	surface	138
2	11	2025-08-07 20:15:45+02	101	6	surface	139
2	15	2025-08-07 20:15:48+02	3	6	surface	140
2	18	2025-08-07 20:15:50+02	2	6	surface	141
2	19	2025-08-07 20:16:03+02	13	6	surface	142
2	20	2025-08-07 20:17:26+02	83	6	surface	143
2	21	2025-08-07 20:17:30+02	4	6	surface	144
2	22	2025-08-07 20:21:33+02	243	6	surface	145
2	23	2025-08-07 20:26:40+02	307	6	surface	146
2	24	2025-08-07 20:27:13+02	33	6	surface	147
2	1	2025-08-10 08:00:21+02	13	6	surface	148
2	2	2025-08-10 08:00:28+02	7	6	surface	149
2	3	2025-08-10 08:00:30+02	2	6	surface	150
2	4	2025-08-10 08:00:42+02	12	6	surface	151
2	5	2025-08-10 08:04:00+02	198	6	surface	152
2	6	2025-08-10 08:04:03+02	3	6	surface	153
2	7	2025-08-10 08:08:23+02	260	6	surface	154
2	8	2025-08-10 08:08:27+02	4	6	surface	155
2	9	2025-08-10 08:08:29+02	2	6	surface	156
2	10	2025-08-10 08:08:31+02	2	6	surface	157
2	11	2025-08-10 08:09:36+02	65	6	surface	158
2	15	2025-08-10 08:09:38+02	2	6	surface	159
2	18	2025-08-10 08:09:42+02	4	6	surface	160
2	19	2025-08-10 08:09:55+02	13	6	surface	161
2	20	2025-08-10 08:10:55+02	60	6	surface	162
2	21	2025-08-10 08:10:56+02	1	6	surface	163
2	22	2025-08-10 08:13:43+02	167	6	surface	164
2	23	2025-08-10 08:15:32+02	109	6	surface	165
2	24	2025-08-10 08:16:02+02	30	6	surface	166
2	25	2025-08-10 08:18:52+02	170	6	surface	167
2	26	2025-08-10 08:19:37+02	45	6	surface	168
2	27	2025-08-10 08:19:51+02	14	6	surface	169
2	28	2025-08-10 08:19:58+02	6	6	surface	170
2	29	2025-08-10 08:20:00+02	2	6	surface	171
2	30	2025-08-10 08:20:06+02	6	6	surface	172
2	31	2025-08-10 08:34:44+02	878	6	surface	173
2	33	2025-08-10 10:09:13+02	5669	6	surface	174
2	34	2025-08-10 14:53:59+02	1329	6	surface	175
2	35	2025-08-10 14:54:05+02	6	6	surface	176
2	36	2025-08-10 14:54:19+02	14	6	surface	177
2	37	2025-08-10 14:56:23+02	124	6	surface	178
2	1	2025-08-17 13:55:55+02	5	27	surface	179
2	1	2025-08-24 19:32:50+02	5	6	surface	180
2	2	2025-08-24 19:32:58+02	8	6	surface	181
2	3	2025-08-24 19:33:04+02	6	6	surface	182
2	4	2025-08-24 19:33:12+02	8	6	surface	183
2	5	2025-08-24 19:40:36+02	444	6	surface	184
2	1	2025-09-02 21:59:30+02	13	27	surface	185
2	2	2025-09-02 21:59:32+02	2	27	surface	186
2	3	2025-09-02 22:04:02+02	269	27	surface	187
2	4	2025-09-02 22:12:09+02	487	27	surface	188
2	5	2025-09-02 22:13:10+02	61	27	surface	189
2	6	2025-09-02 22:13:12+02	2	27	surface	190
2	7	2025-09-02 22:15:00+02	108	27	surface	191
2	8	2025-09-02 22:18:29+02	209	27	surface	192
2	9	2025-09-02 22:18:41+02	12	27	surface	193
2	1	2025-09-08 22:02:26+02	81	6	surface	194
2	1	2025-09-09 20:13:58+02	1	6	surface	195
2	2	2025-09-09 20:19:33+02	335	6	surface	196
2	3	2025-09-09 20:25:36+02	363	6	surface	197
2	4	2025-09-09 20:38:39+02	783	6	surface	198
2	5	2025-09-09 20:52:37+02	838	6	surface	199
2	6	2025-09-09 20:54:54+02	137	6	surface	200
2	7	2025-09-09 21:03:15+02	501	6	surface	201
2	8	2025-09-09 21:03:55+02	40	6	surface	202
2	9	2025-09-09 21:04:09+02	14	6	surface	203
2	10	2025-09-09 21:05:07+02	58	6	surface	204
2	11	2025-09-09 21:08:27+02	200	6	surface	205
2	15	2025-09-09 21:09:25+02	58	6	surface	206
2	18	2025-09-09 21:18:54+02	1	6	surface	207
2	1	2025-10-08 03:27:05+02	14	11	surface	208
2	1	2025-10-18 15:56:03+02	20	15	surface	223
2	2	2025-10-18 15:56:32+02	29	15	surface	224
2	3	2025-10-18 15:58:07+02	95	15	surface	225
2	4	2025-10-18 15:58:13+02	6	15	surface	226
2	5	2025-10-18 16:00:44+02	27	15	surface	227
2	6	2025-10-18 16:00:50+02	6	15	surface	228
2	7	2025-10-18 16:00:53+02	3	15	surface	229
2	8	2025-10-18 16:00:56+02	3	15	surface	230
2	9	2025-10-18 16:00:57+02	1	15	surface	231
2	10	2025-10-18 16:01:05+02	8	15	surface	232
2	24	2025-10-18 16:01:50+02	4	15	surface	239
2	16	2025-10-18 16:01:22+02	17	15	surface	233
2	17	2025-10-18 16:01:25+02	3	15	surface	234
2	19	2025-10-18 16:01:32+02	7	15	surface	235
2	20	2025-10-18 16:01:42+02	10	15	surface	236
2	21	2025-10-18 16:01:43+02	1	15	surface	237
2	22	2025-10-18 16:01:46+02	3	15	surface	238
2	1	2025-10-22 00:34:47+02	119	51	surface	240
2	2	2025-10-22 00:42:56+02	489	51	surface	241
2	3	2025-10-22 00:47:32+02	276	51	surface	242
2	4	2025-10-22 00:49:30+02	117	51	surface	243
2	5	2025-10-22 00:50:01+02	31	51	surface	244
2	6	2025-10-22 00:52:04+02	123	51	surface	245
2	7	2025-10-22 00:53:28+02	84	51	surface	246
2	8	2025-10-22 00:53:41+02	13	51	surface	247
2	1	2025-10-23 21:28:23+02	212	51	surface	248
2	2	2025-10-23 21:29:08+02	45	51	surface	249
2	3	2025-10-23 21:41:29+02	741	51	surface	250
2	4	2025-10-23 21:42:05+02	36	51	surface	251
2	5	2025-10-23 21:46:41+02	276	51	surface	252
2	6	2025-10-23 21:47:07+02	26	51	surface	253
2	7	2025-10-23 21:53:27+02	380	51	surface	254
2	8	2025-10-23 21:54:18+02	51	51	surface	255
2	1	2025-10-24 20:45:41+02	477	51	surface	256
2	1	2025-10-27 14:10:08+01	2	51	surface	257
2	2	2025-10-27 14:10:11+01	3	51	surface	258
2	3	2025-10-27 14:10:15+01	4	51	surface	259
2	4	2025-10-27 14:10:22+01	7	51	surface	260
2	5	2025-10-27 14:10:25+01	3	51	surface	261
2	6	2025-10-27 14:10:28+01	3	51	surface	262
2	7	2025-10-27 14:10:37+01	9	51	surface	263
2	8	2025-10-27 14:10:38+01	1	51	surface	264
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: flashback; Owner: flashback
--

COPY flashback.users (id, name, email, state, verified, joined, hash) FROM stdin;
2	Brian	briansalehi@proton.me	active	f	2025-07-29 12:17:34.738918+02	$argon2id$v=19$m=262144,t=3,p=1$SDvIrZmwAQka93Z05Uaqrw$5o6bhWyNV6kwDfUrN8Cnf5Grs1iOg6r5DGbbNs4gzt0
\.


--
-- Data for Name: users_roadmaps; Type: TABLE DATA; Schema: flashback; Owner: flashback
--

COPY flashback.users_roadmaps ("user", roadmap) FROM stdin;
2	1
2	2
\.


--
-- Name: blocks_activities_id_seq; Type: SEQUENCE SET; Schema: flashback; Owner: flashback
--

SELECT pg_catalog.setval('flashback.blocks_activities_id_seq', 1, false);


--
-- Name: cards_activities_id_seq; Type: SEQUENCE SET; Schema: flashback; Owner: flashback
--

SELECT pg_catalog.setval('flashback.cards_activities_id_seq', 1, false);


--
-- Name: cards_id_seq; Type: SEQUENCE SET; Schema: flashback; Owner: flashback
--

SELECT pg_catalog.setval('flashback.cards_id_seq', 5559, true);


--
-- Name: milestones_activities_id_seq; Type: SEQUENCE SET; Schema: flashback; Owner: flashback
--

SELECT pg_catalog.setval('flashback.milestones_activities_id_seq', 1, false);


--
-- Name: network_activities_id_seq; Type: SEQUENCE SET; Schema: flashback; Owner: flashback
--

SELECT pg_catalog.setval('flashback.network_activities_id_seq', 1, true);


--
-- Name: resources_activities_id_seq; Type: SEQUENCE SET; Schema: flashback; Owner: flashback
--

SELECT pg_catalog.setval('flashback.resources_activities_id_seq', 1, false);


--
-- Name: resources_id_seq; Type: SEQUENCE SET; Schema: flashback; Owner: flashback
--

SELECT pg_catalog.setval('flashback.resources_id_seq', 213, true);


--
-- Name: roadmaps_activities_id_seq; Type: SEQUENCE SET; Schema: flashback; Owner: flashback
--

SELECT pg_catalog.setval('flashback.roadmaps_activities_id_seq', 1, false);


--
-- Name: roadmaps_id_seq; Type: SEQUENCE SET; Schema: flashback; Owner: flashback
--

SELECT pg_catalog.setval('flashback.roadmaps_id_seq', 2, true);


--
-- Name: sections_activities_id_seq; Type: SEQUENCE SET; Schema: flashback; Owner: flashback
--

SELECT pg_catalog.setval('flashback.sections_activities_id_seq', 1, false);


--
-- Name: sections_progress_id_seq; Type: SEQUENCE SET; Schema: flashback; Owner: flashback
--

SELECT pg_catalog.setval('flashback.sections_progress_id_seq', 151, true);


--
-- Name: subjects_activities_id_seq; Type: SEQUENCE SET; Schema: flashback; Owner: flashback
--

SELECT pg_catalog.setval('flashback.subjects_activities_id_seq', 1, false);


--
-- Name: subjects_id_seq; Type: SEQUENCE SET; Schema: flashback; Owner: flashback
--

SELECT pg_catalog.setval('flashback.subjects_id_seq', 54, true);


--
-- Name: topics_activities_id_seq; Type: SEQUENCE SET; Schema: flashback; Owner: flashback
--

SELECT pg_catalog.setval('flashback.topics_activities_id_seq', 1, false);


--
-- Name: topics_progress_id_seq; Type: SEQUENCE SET; Schema: flashback; Owner: flashback
--

SELECT pg_catalog.setval('flashback.topics_progress_id_seq', 264, true);


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: flashback; Owner: flashback
--

SELECT pg_catalog.setval('flashback.users_id_seq', 2, true);


--
-- Name: assessments assessments_pkey; Type: CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.assessments
    ADD CONSTRAINT assessments_pkey PRIMARY KEY (subject, level, topic, card);


--
-- Name: blocks_activities blocks_activities_pkey; Type: CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.blocks_activities
    ADD CONSTRAINT blocks_activities_pkey PRIMARY KEY (id);


--
-- Name: blocks blocks_pkey; Type: CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.blocks
    ADD CONSTRAINT blocks_pkey PRIMARY KEY (card, "position");


--
-- Name: cards_activities cards_activities_pkey; Type: CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.cards_activities
    ADD CONSTRAINT cards_activities_pkey PRIMARY KEY (id);


--
-- Name: cards cards_pkey; Type: CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.cards
    ADD CONSTRAINT cards_pkey PRIMARY KEY (id);


--
-- Name: milestones_activities milestones_activities_pkey; Type: CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.milestones_activities
    ADD CONSTRAINT milestones_activities_pkey PRIMARY KEY (id);


--
-- Name: milestones milestones_pkey; Type: CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.milestones
    ADD CONSTRAINT milestones_pkey PRIMARY KEY (roadmap, subject, level);


--
-- Name: network_activities network_activities_pkey; Type: CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.network_activities
    ADD CONSTRAINT network_activities_pkey PRIMARY KEY (id);


--
-- Name: resources resources_pkey; Type: CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.resources
    ADD CONSTRAINT resources_pkey PRIMARY KEY (id);


--
-- Name: roadmaps_activities roadmaps_activities_pkey; Type: CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.roadmaps_activities
    ADD CONSTRAINT roadmaps_activities_pkey PRIMARY KEY (id);


--
-- Name: roadmaps roadmaps_pkey; Type: CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.roadmaps
    ADD CONSTRAINT roadmaps_pkey PRIMARY KEY (id);


--
-- Name: sections_activities sections_activities_pkey; Type: CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.sections_activities
    ADD CONSTRAINT sections_activities_pkey PRIMARY KEY (id);


--
-- Name: sections_cards sections_cards_pkey; Type: CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.sections_cards
    ADD CONSTRAINT sections_cards_pkey PRIMARY KEY (resource, section, card);


--
-- Name: sections sections_pkey; Type: CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.sections
    ADD CONSTRAINT sections_pkey PRIMARY KEY (resource, "position");


--
-- Name: sections_progress sections_progress_pkey; Type: CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.sections_progress
    ADD CONSTRAINT sections_progress_pkey PRIMARY KEY (id);


--
-- Name: shelves shelves_pkey; Type: CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.shelves
    ADD CONSTRAINT shelves_pkey PRIMARY KEY (resource, subject);


--
-- Name: subjects_activities subjects_activities_pkey; Type: CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.subjects_activities
    ADD CONSTRAINT subjects_activities_pkey PRIMARY KEY (id);


--
-- Name: subjects subjects_name_key; Type: CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.subjects
    ADD CONSTRAINT subjects_name_key UNIQUE (name);


--
-- Name: subjects subjects_pkey; Type: CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.subjects
    ADD CONSTRAINT subjects_pkey PRIMARY KEY (id);


--
-- Name: topics_activities topics_activities_pkey; Type: CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.topics_activities
    ADD CONSTRAINT topics_activities_pkey PRIMARY KEY (id);


--
-- Name: topics_cards topics_cards_pkey; Type: CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.topics_cards
    ADD CONSTRAINT topics_cards_pkey PRIMARY KEY (subject, level, topic, card);


--
-- Name: topics topics_pkey; Type: CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.topics
    ADD CONSTRAINT topics_pkey PRIMARY KEY (subject, level, "position");


--
-- Name: topics_progress topics_progress_pkey; Type: CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.topics_progress
    ADD CONSTRAINT topics_progress_pkey PRIMARY KEY (id);


--
-- Name: users_roadmaps user_roadmaps_pkey; Type: CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.users_roadmaps
    ADD CONSTRAINT user_roadmaps_pkey PRIMARY KEY ("user", roadmap);


--
-- Name: users users_email_key; Type: CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.users
    ADD CONSTRAINT users_email_key UNIQUE (email);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: assessments assessments_card_fkey; Type: FK CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.assessments
    ADD CONSTRAINT assessments_card_fkey FOREIGN KEY (card) REFERENCES flashback.cards(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: assessments assessments_subject_level_topic_fkey; Type: FK CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.assessments
    ADD CONSTRAINT assessments_subject_level_topic_fkey FOREIGN KEY (subject, level, topic) REFERENCES flashback.topics(subject, level, "position") ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: blocks_activities blocks_activities_card_position_fkey; Type: FK CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.blocks_activities
    ADD CONSTRAINT blocks_activities_card_position_fkey FOREIGN KEY (card, "position") REFERENCES flashback.blocks(card, "position") ON UPDATE CASCADE;


--
-- Name: blocks_activities blocks_activities_user_fkey; Type: FK CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.blocks_activities
    ADD CONSTRAINT blocks_activities_user_fkey FOREIGN KEY ("user") REFERENCES flashback.users(id) ON UPDATE CASCADE;


--
-- Name: blocks blocks_card_fkey; Type: FK CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.blocks
    ADD CONSTRAINT blocks_card_fkey FOREIGN KEY (card) REFERENCES flashback.cards(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: cards_activities cards_activities_card_fkey; Type: FK CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.cards_activities
    ADD CONSTRAINT cards_activities_card_fkey FOREIGN KEY (card) REFERENCES flashback.cards(id) ON UPDATE CASCADE;


--
-- Name: cards_activities cards_activities_user_fkey; Type: FK CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.cards_activities
    ADD CONSTRAINT cards_activities_user_fkey FOREIGN KEY ("user") REFERENCES flashback.users(id) ON UPDATE CASCADE;


--
-- Name: milestones_activities milestones_activities_roadmap_subject_level_fkey; Type: FK CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.milestones_activities
    ADD CONSTRAINT milestones_activities_roadmap_subject_level_fkey FOREIGN KEY (roadmap, subject, level) REFERENCES flashback.milestones(roadmap, subject, level) ON UPDATE CASCADE;


--
-- Name: milestones_activities milestones_activities_user_fkey; Type: FK CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.milestones_activities
    ADD CONSTRAINT milestones_activities_user_fkey FOREIGN KEY ("user") REFERENCES flashback.users(id) ON UPDATE CASCADE;


--
-- Name: milestones milestones_roadmap_fkey; Type: FK CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.milestones
    ADD CONSTRAINT milestones_roadmap_fkey FOREIGN KEY (roadmap) REFERENCES flashback.roadmaps(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: milestones milestones_subject_fkey; Type: FK CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.milestones
    ADD CONSTRAINT milestones_subject_fkey FOREIGN KEY (subject) REFERENCES flashback.subjects(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: network_activities network_activities_user_fkey; Type: FK CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.network_activities
    ADD CONSTRAINT network_activities_user_fkey FOREIGN KEY ("user") REFERENCES flashback.users(id) ON UPDATE CASCADE;


--
-- Name: resources_activities resources_activities_resource_fkey; Type: FK CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.resources_activities
    ADD CONSTRAINT resources_activities_resource_fkey FOREIGN KEY (resource) REFERENCES flashback.resources(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: resources_activities resources_activities_resource_fkey1; Type: FK CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.resources_activities
    ADD CONSTRAINT resources_activities_resource_fkey1 FOREIGN KEY (resource) REFERENCES flashback.resources(id) ON UPDATE CASCADE;


--
-- Name: resources_activities resources_activities_user_fkey; Type: FK CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.resources_activities
    ADD CONSTRAINT resources_activities_user_fkey FOREIGN KEY ("user") REFERENCES flashback.users(id) ON UPDATE CASCADE;


--
-- Name: roadmaps_activities roadmaps_activities_roadmap_fkey; Type: FK CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.roadmaps_activities
    ADD CONSTRAINT roadmaps_activities_roadmap_fkey FOREIGN KEY (roadmap) REFERENCES flashback.roadmaps(id) ON UPDATE CASCADE;


--
-- Name: roadmaps_activities roadmaps_activities_user_fkey; Type: FK CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.roadmaps_activities
    ADD CONSTRAINT roadmaps_activities_user_fkey FOREIGN KEY ("user") REFERENCES flashback.users(id) ON UPDATE CASCADE;


--
-- Name: sections_activities sections_activities_resource_position_fkey; Type: FK CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.sections_activities
    ADD CONSTRAINT sections_activities_resource_position_fkey FOREIGN KEY (resource, "position") REFERENCES flashback.sections(resource, "position") ON UPDATE CASCADE;


--
-- Name: sections_activities sections_activities_user_fkey; Type: FK CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.sections_activities
    ADD CONSTRAINT sections_activities_user_fkey FOREIGN KEY ("user") REFERENCES flashback.users(id) ON UPDATE CASCADE;


--
-- Name: sections_cards sections_cards_card_fkey; Type: FK CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.sections_cards
    ADD CONSTRAINT sections_cards_card_fkey FOREIGN KEY (card) REFERENCES flashback.cards(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: sections_cards sections_cards_resource_position_fkey; Type: FK CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.sections_cards
    ADD CONSTRAINT sections_cards_resource_position_fkey FOREIGN KEY (resource, section) REFERENCES flashback.sections(resource, "position") ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: sections_progress sections_progress_resource_position_fkey; Type: FK CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.sections_progress
    ADD CONSTRAINT sections_progress_resource_position_fkey FOREIGN KEY (resource, section) REFERENCES flashback.sections(resource, "position") ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: sections_progress sections_progress_user_fkey; Type: FK CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.sections_progress
    ADD CONSTRAINT sections_progress_user_fkey FOREIGN KEY ("user") REFERENCES flashback.users(id) ON UPDATE CASCADE;


--
-- Name: sections sections_resource_fkey; Type: FK CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.sections
    ADD CONSTRAINT sections_resource_fkey FOREIGN KEY (resource) REFERENCES flashback.resources(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: shelves shelves_resource_fkey; Type: FK CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.shelves
    ADD CONSTRAINT shelves_resource_fkey FOREIGN KEY (resource) REFERENCES flashback.resources(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: shelves shelves_subject_fkey; Type: FK CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.shelves
    ADD CONSTRAINT shelves_subject_fkey FOREIGN KEY (subject) REFERENCES flashback.subjects(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: subjects_activities subjects_activities_subject_fkey; Type: FK CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.subjects_activities
    ADD CONSTRAINT subjects_activities_subject_fkey FOREIGN KEY (subject) REFERENCES flashback.subjects(id) ON UPDATE CASCADE;


--
-- Name: subjects_activities subjects_activities_user_fkey; Type: FK CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.subjects_activities
    ADD CONSTRAINT subjects_activities_user_fkey FOREIGN KEY ("user") REFERENCES flashback.users(id) ON UPDATE CASCADE;


--
-- Name: topics_activities topics_activities_subject_level_position_fkey; Type: FK CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.topics_activities
    ADD CONSTRAINT topics_activities_subject_level_position_fkey FOREIGN KEY (subject, level, topic) REFERENCES flashback.topics(subject, level, "position") ON UPDATE CASCADE;


--
-- Name: topics_activities topics_activities_user_fkey; Type: FK CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.topics_activities
    ADD CONSTRAINT topics_activities_user_fkey FOREIGN KEY ("user") REFERENCES flashback.users(id) ON UPDATE CASCADE;


--
-- Name: topics_cards topics_cards_card_fkey; Type: FK CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.topics_cards
    ADD CONSTRAINT topics_cards_card_fkey FOREIGN KEY (card) REFERENCES flashback.cards(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: topics_cards topics_cards_subject_level_topic_fkey; Type: FK CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.topics_cards
    ADD CONSTRAINT topics_cards_subject_level_topic_fkey FOREIGN KEY (subject, level, topic) REFERENCES flashback.topics(subject, level, "position") ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: topics_progress topics_progress_subject_level_position_fkey; Type: FK CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.topics_progress
    ADD CONSTRAINT topics_progress_subject_level_position_fkey FOREIGN KEY (subject, level, topic) REFERENCES flashback.topics(subject, level, "position") ON UPDATE CASCADE;


--
-- Name: topics_progress topics_progress_user_fkey; Type: FK CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.topics_progress
    ADD CONSTRAINT topics_progress_user_fkey FOREIGN KEY ("user") REFERENCES flashback.users(id) ON UPDATE CASCADE;


--
-- Name: users_roadmaps user_roadmaps_roadmap_fkey; Type: FK CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.users_roadmaps
    ADD CONSTRAINT user_roadmaps_roadmap_fkey FOREIGN KEY (roadmap) REFERENCES flashback.roadmaps(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: users_roadmaps user_roadmaps_user_fkey; Type: FK CONSTRAINT; Schema: flashback; Owner: flashback
--

ALTER TABLE ONLY flashback.users_roadmaps
    ADD CONSTRAINT user_roadmaps_user_fkey FOREIGN KEY ("user") REFERENCES flashback.users(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- PostgreSQL database dump complete
--

\unrestrict gc9z6nOnA7yzgavSLSodHkufTmwMVhejcJaNBNLbtyE6hdRcr2L9jzjBTf36v59

